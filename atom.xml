<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>——╅ 萧 ☯ ℡&#39;s Blog</title>
  
  <subtitle>闻道有先后，术业有专攻！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://notes.seirhsiao.com/"/>
  <updated>2019-12-08T14:11:06.183Z</updated>
  <id>http://notes.seirhsiao.com/</id>
  
  <author>
    <name>萧</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>十大排序算法全面解析 - Java实现</title>
    <link href="http://notes.seirhsiao.com/posts/7a099988/"/>
    <id>http://notes.seirhsiao.com/posts/7a099988/</id>
    <published>2019-12-08T11:06:11.963Z</published>
    <updated>2019-12-08T14:11:06.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十大排序算法全面解析-Java实现"><a href="#十大排序算法全面解析-Java实现" class="headerlink" title="十大排序算法全面解析 - Java实现"></a>十大排序算法全面解析 - Java实现</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>算法就是编程的灵魂，不会算法的程序员只配做码农。算法的学习也是有着阶段性的，从入门到简单，再到复杂，再到简单。最后的简单是当你达到一定高度之后对于问题能够准确的找到最简单的解答。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>算法里边最常用也是最基本的就是排序算法和查找算法了，本文主要讲解算法里边最经典的十大排序算法。在这里我们根据他们各自的实现原理以及效率将十大排序算法分为两大类：</p><ol><li>非线性比较类排序：非线性是指算法的时间复杂度不能突破(nlogn)，元素之间通过比较大小来决定先后顺序。</li><li>线性非比较类排序：算法的时间复杂度能够突破(nlogn)，并且不通过比较来对元素排序。</li></ol><p>具体分类我们上图说明：</p><p><img alt="01" data-src="/static/images/algorithm/01.webp" class="lazyload"></p><h2 id="算法比较"><a href="#算法比较" class="headerlink" title="算法比较"></a>算法比较</h2><p>这里给出算法的时间复杂度，空间复杂度以及稳定性的对比整理，同样通过图片的形式给出：</p><p><img alt="02" data-src="/static/images/algorithm/02.webp" class="lazyload"></p><ul><li><strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</li><li><strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。</li><li><strong>时间复杂度</strong>：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。</li><li><strong>空间复杂度</strong>：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。</li></ul><p>下面就一一对十大算法进行详细的讲解，会给出他们的基本思想，图片演示，以及带有详细注释的源码。（本文所有的排序算法都是升序排序）</p><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1 冒泡排序"></a>1 冒泡排序</h2><h3 id="1-1-基本思想"><a href="#1-1-基本思想" class="headerlink" title="1.1 基本思想"></a>1.1 基本思想</h3><p>冒泡排序可以说是最简单的排序之一了，也是大部分人最容易想到的排序。即对n个数进行排序，每次都是由前一个数跟后一个数比较，每循环一轮， 就可以将最大的数移到数组的最后， 总共循环n-1轮，完成对数组排序。</p><h3 id="1-2-算法步骤"><a href="#1-2-算法步骤" class="headerlink" title="1.2 算法步骤"></a>1.2 算法步骤</h3><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><h3 id="1-3-动态演示"><a href="#1-3-动态演示" class="headerlink" title="1.3 动态演示"></a>1.3 动态演示</h3><p><img alt="03" data-src="/static/images/algorithm/03.gif" class="lazyload"></p><h3 id="1-4-算法特性"><a href="#1-4-算法特性" class="headerlink" title="1.4 算法特性"></a>1.4 算法特性</h3><p>当输入的数据已经是正序时，冒泡排序最快；当输入的数据是反序时，冒泡排序最慢。</p><h3 id="1-5-代码展示"><a href="#1-5-代码展示" class="headerlink" title="1.5 代码展示"></a>1.5 代码展示</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> len = arr.length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//i控制循环次数，长度为len的数组只需要循环len-1次，i的起始值为0所以i&lt;len-1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// j控制比较次数，第i次循环内需要比较len-i次</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 但是由于是由arr[j]跟arr[j+1]进行比较，所以为了保证arr[j+1]不越界，j&lt;len-i-1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - i - <span class="number">1</span>; j++) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">// 如果前一个数比后一个数大，则交换位置将大的数往后放。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">int</span> temp = arr[j + <span class="number">1</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                arr[j] = temp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2 选择排序"></a>2 选择排序</h2><h3 id="2-1-基本思想"><a href="#2-1-基本思想" class="headerlink" title="2.1 基本思想"></a>2.1 基本思想</h3><p>选择排序可以说是冒泡排序的改良版，不再是前一个数跟后一个数相比较， 而是在每一次循环内都由一个数去跟所有的数都比较一次，每次比较都选取相对较小的那个数来进行下一次的比较，并不断更新较小数的下标。这样在一次循环结束时就能得到最小数的下标，再通过一次交换将最小的数放在最前面，通过n-1次循环之后完成排序。相对于冒泡排序来说，比较的次数并没有改变，但是数据交换的次数大大减少。</p><h3 id="2-2-算法步骤"><a href="#2-2-算法步骤" class="headerlink" title="2.2 算法步骤"></a>2.2 算法步骤</h3><ol><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复第二步，直到所有元素均排序完毕。</li></ol><h3 id="2-3-动态演示"><a href="#2-3-动态演示" class="headerlink" title="2.3 动态演示"></a>2.3 动态演示</h3><p><img alt="04" data-src="/static/images/algorithm/04.gif" class="lazyload"></p><h3 id="2-4-算法特性"><a href="#2-4-算法特性" class="headerlink" title="2.4 算法特性"></a>2.4 算法特性</h3><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p><h3 id="2-5-代码展示"><a href="#2-5-代码展示" class="headerlink" title="2.5 代码展示"></a>2.5 代码展示</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> len = arr.length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// i控制循环次数，长度为len的数组只需要循环len-1次，i的起始值为0所以i&lt;len-1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// minIndex 用来保存每次比较后较小数的下标。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> minIndex = i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// j控制比较次数，因为每次循环结束之后最小的数都已经放在了最前面，</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 所以下一次循环的时候就可以跳过这个数，所以j的初始值为i+1而不需要每次循环都从0开始，并且j&lt;len即可</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">//每比较一次都需要将较小数的下标记录下来</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (arr[minIndex] &gt; arr[j]) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                minIndex = j;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 当完成一次循环时，就需要将本次循环选取的最小数移动到本次循环开始的位置。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (minIndex != i) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> temp = arr[i];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            arr[i] = arr[minIndex];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            arr[minIndex] = temp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 打印每次循环结束之后数组的排序状态（方便理解）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"第"</span> + (i + <span class="number">1</span>) + <span class="string">"次循环之后效果："</span> + Arrays.toString(arr));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3 插入排序"></a>3 插入排序</h2><h3 id="3-1-基本思想"><a href="#3-1-基本思想" class="headerlink" title="3.1 基本思想"></a>3.1 基本思想</h3><p>插入排序的思想打牌的人肯定很容易理解，就是见缝插针。首先就默认数组中的第一个数的位置是正确的，即已经排序。然后取下一个数，与已经排序的数按从后向前的顺序依次比较， 如果该数比当前位置排好序的数小，则将排好序的数的位置向后移一位。 重复上一步骤，直到找到合适的位置。 找到位置后就结束比较的循环，将该数放到相应的位置。</p><h3 id="3-2-算法步骤"><a href="#3-2-算法步骤" class="headerlink" title="3.2 算法步骤"></a>3.2 算法步骤</h3><ol><li>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</li><li>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</li></ol><h3 id="3-3-动态演示"><a href="#3-3-动态演示" class="headerlink" title="3.3 动态演示"></a>3.3 动态演示</h3><p><img alt="05" data-src="/static/images/algorithm/05.gif" class="lazyload"></p><h3 id="3-4-代码展示"><a href="#3-4-代码展示" class="headerlink" title="3.4 代码展示"></a>3.4 代码展示</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> len = arr.length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// i控制循环次数，因为已经默认第一个数的位置是正确的，所以i的起始值为1，i&lt;len，循环len-1次</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> j = i;<span class="comment">//变量j用来记录即将要排序的数的位置即目标数的原位置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> target = arr[j];<span class="comment">//target用来记录即将要排序的那个数的值即目标值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// while循环用来为目标值在已经排好序的数中找到合适的位置，</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 因为是从后向前比较，并且是与j-1位置的数比较，所以j&gt;0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; target &lt; arr[j - <span class="number">1</span>]) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">// 当目标数的值比它当前位置的前一个数的值小时，将前一个数的位置向后移一位。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">// 并且j--使得目标数继续与下一个元素比较</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            arr[j] = arr[j - <span class="number">1</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            j--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 更目标数的位置。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        arr[j] = target;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//打印每次循环结束之后数组的排序状态（方便理解）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"第"</span> + (i) + <span class="string">"次循环之后效果："</span> + Arrays.toString(arr));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h2 id="4-希尔排序"><a href="#4-希尔排序" class="headerlink" title="4 希尔排序"></a>4 希尔排序</h2><h3 id="4-1-基本思想"><a href="#4-1-基本思想" class="headerlink" title="4.1 基本思想"></a>4.1 基本思想</h3><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位。</li></ul><p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p><h3 id="4-2-算法步骤"><a href="#4-2-算法步骤" class="headerlink" title="4.2 算法步骤"></a>4.2 算法步骤</h3><ol><li>选择一个增量序列 t1，t2，……，tk，其中 ti &gt; tj, tk = 1；</li><li>按增量序列个数 k，对序列进行 k 趟排序；</li><li>每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ol><h3 id="4-3-动态演示"><a href="#4-3-动态演示" class="headerlink" title="4.3 动态演示"></a>4.3 动态演示</h3><p><img alt="06" data-src="/static/images/algorithm/06.webp" class="lazyload"></p><h3 id="4-4-代码展示"><a href="#4-4-代码展示" class="headerlink" title="4.4 代码展示"></a>4.4 代码展示</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> len = arr.length; <span class="comment">// 数组的长度</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> k = len / <span class="number">2</span>; <span class="comment">// 初始的增量为数组长度的一半</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// while循环控制按增量的值来划不同分子序列，每完成一次增量就减少为原来的一半</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 增量的最小值为1，即最后一次对整个数组做直接插入排序</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">0</span>) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 里边其实就是升级版的直接插入排序了，是对每一个子序列进行直接插入排序，</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 所以直接将直接插入排序中的‘1’变为‘k’就可以了。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt; len; i++) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> j = i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> target = arr[i];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">while</span> (j &gt;= k &amp;&amp; target &lt; arr[j - k]) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                arr[j] = arr[j - k];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                j -= k;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            arr[j] = target;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 不同增量排序后的结果</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"增量为"</span> + k + <span class="string">"排序之后："</span> + Arrays.toString(arr));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        k /= <span class="number">2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h2 id="5-归并排序"><a href="#5-归并排序" class="headerlink" title="5 归并排序"></a>5 归并排序</h2><h3 id="5-1-基本思想"><a href="#5-1-基本思想" class="headerlink" title="5.1 基本思想"></a>5.1 基本思想</h3><p>总体概括就是从上到下递归拆分，然后从下到上逐步合并。</p><ul><li><strong>递归拆分</strong>：</li></ul><p>先把待排序数组分为左右两个子序列，再分别将左右两个子序列拆分为四个子子序列，以此类推直到最小的子序列元素的个数为两个或者一个为止。</p><ul><li><strong>逐步合并</strong>：</li></ul><p>将最底层的最左边的一个子序列排序，然后将从左到右第二个子序列进行排序，再将这两个排好序的子序列合并并排序，然后将最底层从左到右第三个子序列进行排序….. 合并完成之后记忆完成了对数组的排序操作（一定要注意是从下到上层级合并，可以理解为递归的层级返回）</p><h3 id="5-2-算法步骤"><a href="#5-2-算法步骤" class="headerlink" title="5.2 算法步骤"></a>5.2 算法步骤</h3><ol><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li><li>重复步骤 3 直到某一指针达到序列尾；</li><li>将另一序列剩下的所有元素直接复制到合并序列尾。</li></ol><h3 id="5-3-动态演示"><a href="#5-3-动态演示" class="headerlink" title="5.3 动态演示"></a>5.3 动态演示</h3><p><img alt="07" data-src="/static/images/algorithm/07.gif" class="lazyload"></p><h3 id="5-4-算法特性"><a href="#5-4-算法特性" class="headerlink" title="5.4 算法特性"></a>5.4 算法特性</h3><p>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(nlogn) 的时间复杂度。代价是需要额外的内存空间。</p><h3 id="5-5-代码展示"><a href="#5-5-代码展示" class="headerlink" title="5.5 代码展示"></a>5.5 代码展示</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 递归拆分</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr   待拆分数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> left  待拆分数组最小下标</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> right 待拆分数组最大下标</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;  <span class="comment">// 中间下标</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (left &lt; right) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        mergeSort(arr, left, mid); <span class="comment">// 递归拆分左边</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        mergeSort(arr, mid + <span class="number">1</span>, right); <span class="comment">// 递归拆分右边</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        sort(arr, left, mid, right); <span class="comment">// 合并左右</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 合并两个有序子序列</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr   待合并数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> left  待合并数组最小下标</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> mid   待合并数组中间下标</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> right 待合并数组最大下标</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>]; <span class="comment">// 临时数组，用来保存每次合并年之后的结果</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> i = left;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>; <span class="comment">// 临时数组的初始下标</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 这个while循环能够初步筛选出待合并的了两个子序列中的较小数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (arr[i] &lt;= arr[j]) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">            temp[k++] = arr[i++];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        } <span class="keyword">else</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">            temp[k++] = arr[j++];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 将左边序列中剩余的数放入临时数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> (i &lt;= mid) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        temp[k++] = arr[i++];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 将右边序列中剩余的数放入临时数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> (j &lt;= right) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">        temp[k++] = arr[j++];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 将临时数组中的元素位置对应到真真实的数组中</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; temp.length; m++) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">        arr[m + left] = temp[m];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h2 id="6-快速排序"><a href="#6-快速排序" class="headerlink" title="6 快速排序"></a>6 快速排序</h2><h3 id="6-1-基本思想"><a href="#6-1-基本思想" class="headerlink" title="6.1 基本思想"></a>6.1 基本思想</h3><p>快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。</p><h3 id="6-2-算法步骤"><a href="#6-2-算法步骤" class="headerlink" title="6.2 算法步骤"></a>6.2 算法步骤</h3><p>快速排序也采用了分治的策略，这里引入了‘基准数’的概念。</p><ol><li>从数列中挑出一个元素，称为 “基准”（pivot）;</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ol><h3 id="6-3-算法特性"><a href="#6-3-算法特性" class="headerlink" title="6.3 算法特性"></a>6.3 算法特性</h3><p>在平均状况下，快速排序排序 n 个项目需要要 Ο(nlogn) 次比较，在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。</p><p>快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</p><h3 id="6-4-动态演示"><a href="#6-4-动态演示" class="headerlink" title="6.4 动态演示"></a>6.4 动态演示</h3><p><img alt="08" data-src="/static/images/algorithm/08.gif" class="lazyload"></p><h3 id="6-5-代码展示"><a href="#6-5-代码展示" class="headerlink" title="6.5 代码展示"></a>6.5 代码展示</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 分区过程</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr   待分区数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> left  待分区数组最小下标</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> right 待分区数组最大下标</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (left &lt; right) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> temp = qSort(arr, left, right);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        quickSort(arr, left, temp - <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        quickSort(arr, temp + <span class="number">1</span>, right);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 排序过程</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr   待排序数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> left  待排序数组最小下标</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> right 待排序数组最大下标</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@return</span> 排好序之后基准数的位置下标，方便下次的分区</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">qSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> temp = arr[left]; <span class="comment">// 定义基准数，默认为数组的第一个元素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> (left &lt; right) { <span class="comment">// 循环执行的条件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 因为默认的基准数是在最左边，所以首先从右边开始比较进入while循环的判断条件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 如果当前arr[right]比基准数大，则直接将右指针左移一位，当然还要保证left&lt;right</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; arr[right] &gt; temp) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">            right--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 跳出循环说明当前的arr[right]比基准数要小，那么直接将当前数移动到基准数所在的位置，并且左指针向右移一位（left++）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 这时当前数（arr[right]）所在的位置空出，需要从左边找一个比基准数大的数来填充。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (left &lt; right) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">            arr[left++] = arr[right];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 下面的步骤是为了在左边找到比基准数大的数填充到right的位置。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 因为现在需要填充的位置在右边，所以左边的指针移动，如果arr[left]小于或者等于基准数，则直接将左指针右移一位</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; arr[left] &lt;= temp) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">            left++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 跳出上一个循环说明当前的arr[left]的值大于基准数，需要将该值填充到右边空出的位置，然后当前位置空出。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (left &lt; right) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">            arr[right--] = arr[left];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 当循环结束说明左指针和右指针已经相遇。并且相遇的位置是一个空出的位置，</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 这时候将基准数填入该位置，并返回该位置的下标，为分区做准备。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">    arr[left] = temp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> left;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h2 id="7-堆排序"><a href="#7-堆排序" class="headerlink" title="7 堆排序"></a>7 堆排序</h2><h3 id="7-1-基本思想"><a href="#7-1-基本思想" class="headerlink" title="7.1 基本思想"></a>7.1 基本思想</h3><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p><ul><li><strong>大顶堆</strong>：每个结点的值都大于它的左右子结点的值，升序排序用大顶堆。</li><li><strong>小顶堆</strong>：每个结点的值都小于它的左右子结点的值，降序排序用小顶堆。</li></ul><h3 id="7-2-算法步骤"><a href="#7-2-算法步骤" class="headerlink" title="7.2 算法步骤"></a>7.2 算法步骤</h3><ol><li>创建一个堆 H[0……n-1]；</li><li>把堆首（最大值）和堆尾互换；</li><li>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</li><li>重复步骤 2，直到堆的尺寸为 1。</li></ol><h3 id="7-3-动态演示"><a href="#7-3-动态演示" class="headerlink" title="7.3 动态演示"></a>7.3 动态演示</h3><p><img alt="09" data-src="/static/images/algorithm/09.gif" class="lazyload"></p><h3 id="7-4-代码展示"><a href="#7-4-代码展示" class="headerlink" title="7.4 代码展示"></a>7.4 代码展示</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span>) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> len = arr.length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 初始化大顶堆（从最后一个非叶节点开始，从左到右，由下到上）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        adjustHeap(arr, i, len);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 将顶节点和最后一个节点互换位置，再将剩下的堆进行调整</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = len - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        swap(arr, <span class="number">0</span>, j);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        adjustHeap(arr, <span class="number">0</span>, j);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 整理树让其变成堆</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 待整理的数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> i   开始的结点</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> j   数组的长度</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> temp = arr[i];<span class="comment">// 定义一个变量保存开始的结点</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// k就是该结点的左子结点下标</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">2</span> * i + <span class="number">1</span>; k &lt; j; k = <span class="number">2</span> * k + <span class="number">1</span>) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 比较左右两个子结点的大小，k始终记录两者中较大值的下标</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (k + <span class="number">1</span> &lt; j &amp;&amp; arr[k] &lt; arr[k + <span class="number">1</span>]) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">            k++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 经子结点中的较大值和当前的结点比较，比较结果的较大值放在当前结点位置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (arr[k] &gt; temp) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">            arr[i] = arr[k];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">            i = k;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        } <span class="keyword">else</span> { <span class="comment">// 说明已经是大顶堆</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">    arr[i] = temp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 交换数据</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> num1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> num2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> temp = arr[num1];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">    arr[num1] = arr[num2];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">    arr[num2] = temp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">复制代码</span></pre></td></tr></tbody></table></figure><h2 id="8-计数排序"><a href="#8-计数排序" class="headerlink" title="8 计数排序"></a>8 计数排序</h2><h3 id="8-1-基本思想"><a href="#8-1-基本思想" class="headerlink" title="8.1 基本思想"></a>8.1 基本思想</h3><p>计数排序采用了一种全新的思路，不再是通过比较来排序，而是将待排序数组中的最大值+1作为一个临时数组的长度，然后用临时数组记录待排序数组中每个元素出现的次数。最后再遍历临时数组，因为是升序，所以从前到后遍历，将临时数组中值&gt;0的数的下标循环取出，依次放入待排序数组中，即可完成排序。计数排序的效率很高，但是实在牺牲内存的前提下，并且有着限制，那就是待排序数组的值必须 限制在一个确定的范围。</p><h3 id="8-2-动态演示"><a href="#8-2-动态演示" class="headerlink" title="8.2 动态演示"></a>8.2 动态演示</h3><p><img alt="10" data-src="/static/images/algorithm/10.webp" class="lazyload"></p><h3 id="8-3-代码展示"><a href="#8-3-代码展示" class="headerlink" title="8.3 代码展示"></a>8.3 代码展示</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">countSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> len = arr.length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 保存待排序数组中的最大值，目的是确定临时数组的长度（必须）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> maxNum = arr[<span class="number">0</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 保存待排序数组中的最小值，目的是确定最终遍历临时数组时下标的初始值（非必需，只是这样可以加快速度，减少循环次数）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> minNum = arr[<span class="number">0</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// for循环就是为了找到待排序数组的最大值和最小值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        maxNum = maxNum &gt; arr[i] ? maxNum : arr[i];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        minNum = minNum &lt; arr[i] ? minNum : arr[i];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 创建一个临时数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[maxNum + <span class="number">1</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// for循环是为了记录待排序数组中每个元素出现的次数，并将该次数保存到临时数组中</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        temp[arr[i]]++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// k=0用来记录待排序数组的下标</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 遍历临时数组，重新为待排序数组赋值。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = minNum; i &lt; temp.length; i++) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span> (temp[i] &gt; <span class="number">0</span>) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            arr[k++] = i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            temp[i]--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h2 id="9-桶排序"><a href="#9-桶排序" class="headerlink" title="9 桶排序"></a>9 桶排序</h2><h3 id="9-1-基本思想"><a href="#9-1-基本思想" class="headerlink" title="9.1 基本思想"></a>9.1 基本思想</h3><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p><ul><li>在额外空间充足的情况下，尽量增大桶的数量</li><li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中</li></ul><h3 id="9-2-图片演示"><a href="#9-2-图片演示" class="headerlink" title="9.2 图片演示"></a>9.2 图片演示</h3><p><img alt="11" data-src="/static/images/algorithm/11.webp" class="lazyload"></p><h3 id="9-3-算法特性"><a href="#9-3-算法特性" class="headerlink" title="9.3 算法特性"></a>9.3 算法特性</h3><p>桶排序利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p><ol><li>在额外空间充足的情况下，尽量增大桶的数量</li><li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中</li></ol><p>当输入的数据可以均匀的分配到每一个桶中的时候桶排序最快,当输入的数据被分配到了同一个桶中的时候最慢。</p><h3 id="9-4-代码展示"><a href="#9-4-代码展示" class="headerlink" title="9.4 代码展示"></a>9.4 代码展示</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bucketSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> len = arr.length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 定义桶的个数，这里k的值要视情况而定，这里我们假设待排序数组里的数都是[0,100)之间的。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> k = <span class="number">10</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 用嵌套集合来模拟桶，外层集合表示桶，内层集合表示桶里边装的元素。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    List&lt;List&lt;Integer&gt;&gt; bucket = <span class="keyword">new</span> ArrayList&lt;&gt;();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//for循环初始化外层集合即初始化桶</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        bucket.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 循环是为了将待排序数组中的元素通过映射函数分别放入不同的桶里边</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        bucket.get(mapping(arr[i])).add(arr[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 这个循环是为了将所有的元素个数大于1的桶里边的数据进行排序。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (bucket.size() &gt; <span class="number">1</span>) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">// 因为这里是用集合来模拟的桶所以用java写好的对集合排序的方法。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">// 其实应该自己写一个方法来排序的。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            Collections.sort(bucket.get(i));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 将排好序的数重新放入待排序数组中</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (List&lt;Integer&gt; list : bucket) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (list.size() &gt; <span class="number">0</span>) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> (Integer a : list) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">                arr[m++] = a;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">            }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 映射函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> num</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mapping</span><span class="params">(<span class="keyword">int</span> num)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> num / <span class="number">10</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h2 id="10-基数排序"><a href="#10-基数排序" class="headerlink" title="10 基数排序"></a>10 基数排序</h2><h3 id="10-1-基本思想"><a href="#10-1-基本思想" class="headerlink" title="10.1 基本思想"></a>10.1 基本思想</h3><p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p><h3 id="10-2-动态演示"><a href="#10-2-动态演示" class="headerlink" title="10.2 动态演示"></a>10.2 动态演示</h3><p><img alt="12" data-src="/static/images/algorithm/12.webp" class="lazyload"></p><h3 id="10-3-代码展示"><a href="#10-3-代码展示" class="headerlink" title="10.3 代码展示"></a>10.3 代码展示</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span>[] arr = {<span class="number">720</span>, <span class="number">6</span>, <span class="number">57</span>, <span class="number">88</span>, <span class="number">60</span>, <span class="number">42</span>, <span class="number">83</span>, <span class="number">73</span>, <span class="number">48</span>, <span class="number">85</span>};</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    redixSort(arr, <span class="number">10</span>, <span class="number">3</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    System.out.println(Arrays.toString(arr));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">redixSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> radix, <span class="keyword">int</span> d)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 缓存数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// buckets用于记录待排序元素的信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// buckets数组定义了max-min个桶</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span>[] buckets = <span class="keyword">new</span> <span class="keyword">int</span>[radix];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, rate = <span class="number">1</span>; i &lt; d; i++) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 重置count数组，开始统计下一个关键字</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        Arrays.fill(buckets, <span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 将data中的元素完全复制到tmp数组中</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        System.arraycopy(arr, <span class="number">0</span>, tmp, <span class="number">0</span>, arr.length);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 计算每个待排序数据的子关键字</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length; j++) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> subKey = (tmp[j] / rate) % radix;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            buckets[subKey]++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; radix; j++) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">            buckets[j] = buckets[j] + buckets[j - <span class="number">1</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 按子关键字对指定的数据进行排序</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = arr.length - <span class="number">1</span>; m &gt;= <span class="number">0</span>; m--) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> subKey = (tmp[m] / rate) % radix;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">            arr[--buckets[subKey]] = tmp[m];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        rate *= radix;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.cnblogs.com/onepixel/articles/7674659.html" target="_blank" rel="external nofollow noreferrer noopener">www.cnblogs.com/onepixel/ar…</a></li><li><a href="https://blog.csdn.net/apei830/article/details/6596104" target="_blank" rel="external nofollow noreferrer noopener">blog.csdn.net/apei830/art…</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      sort
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://notes.seirhsiao.com/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Mysql 常用命令</title>
    <link href="http://notes.seirhsiao.com/posts/6b900457/"/>
    <id>http://notes.seirhsiao.com/posts/6b900457/</id>
    <published>2019-12-07T14:48:44.330Z</published>
    <updated>2019-12-07T14:51:05.305Z</updated>
    
    <content type="html"><![CDATA[<h3 id="启动和关闭mysql服务"><a href="#启动和关闭mysql服务" class="headerlink" title="启动和关闭mysql服务"></a>启动和关闭mysql服务</h3><h2 id="linux："><a href="#linux：" class="headerlink" title="linux："></a>linux：</h2><p><code>$ /etc/init.d/mysql start|stop|restart|status</code></p><h2 id="mac："><a href="#mac：" class="headerlink" title="mac："></a>mac：</h2><p><code>$ /Library/StartupItems/MySQLCOM/MySQLCOM start|stop|restart</code></p><p><img alt="03" data-src="/static/images/mysql/03.webp" class="lazyload"></p><h3 id="备份和还原数据库"><a href="#备份和还原数据库" class="headerlink" title="备份和还原数据库"></a>备份和还原数据库</h3><h4 id="数据库备份："><a href="#数据库备份：" class="headerlink" title="数据库备份："></a>数据库备份：</h4><p><code>mysqldump -u (user_name) -p (db_name) (table_name) &gt; 备份文件名称</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysqldump  -uroot -p<span class="string">'yourpassword'</span> mysql &gt;/tmp/mysql.sql</span></pre></td></tr></tbody></table></figure><ul><li>没有table_name时备份整个数据库；</li><li>备份文件名可加上绝对路径；</li></ul><h4 id="数据库还原："><a href="#数据库还原：" class="headerlink" title="数据库还原："></a>数据库还原：</h4><p><code>$ mysql -u root -p (db_name) &lt; 备份文件名</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql -uroot -p<span class="string">'yourpassword'</span> mysql &lt;/tmp/mysql.sql</span></pre></td></tr></tbody></table></figure><h1 id="mysql常用命令行参数"><a href="#mysql常用命令行参数" class="headerlink" title="mysql常用命令行参数"></a>mysql常用命令行参数</h1><ul><li><code>-h</code> : 连接的服务器名或者IP</li><li><code>-u</code> : 用户名</li><li><code>-p</code> : 密码</li><li><code>-D</code> : 使用哪个数据库</li><li><code>-e</code> : 执行sql语句</li><li><code>--reconnect</code> : 如果与服务器之间的连接断开，自动尝试重新连接</li><li><code>--max_allowed_packet</code> : 服务器接收／发送包的最大长度</li></ul><h3 id="查看MySQL进程"><a href="#查看MySQL进程" class="headerlink" title="查看MySQL进程"></a>查看MySQL进程</h3><p><img alt="10" data-src="/static/images/mysql/10.webp" class="lazyload"></p><h3 id="杀死-MySQL-进程"><a href="#杀死-MySQL-进程" class="headerlink" title="杀死 MySQL 进程"></a>杀死 MySQL 进程</h3><p><img alt="11" data-src="/static/images/mysql/11.webp" class="lazyload"><br>当执行 killall mysqld 会报 ‘ -bash: killall: 未找到命令’ 错误时，是因为 CentOS 7 最小化安装是没有 killall 指令的，所以使用 yum 安装 psmisc 包即可。<br><img alt="12" data-src="/static/images/mysql/12.webp" class="lazyload"></p><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><p>1.更改root密码</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysqladmin -uroot password 'yourpassword'</span></pre></td></tr></tbody></table></figure><p>2.远程登陆mysql服务器</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql -uroot -p -h192.168.137.10 -P3306</span></pre></td></tr></tbody></table></figure><h3 id="数据和表"><a href="#数据和表" class="headerlink" title="数据和表"></a>数据和表</h3><ol><li>CREATE DATABSE gregs_list; 创建数据库 gregs_list</li><li>show databases; 列出当前所有的数据库</li><li>use gregs_list; 使用 gregs_list 这个数据库</li><li>create table my_contacts<br> (<br> last_name varchar(30),<br> first_name varchar(20),<br> email varchar(50),<br> gender char(1),<br> birthday date,<br> profession varchar(50),<br> location varchar(50),<br> status varchar(20),<br> interests varchar(100),<br> seeking varchar(100)<br> ); 创建 my_contacts 表</li><li>desc my_contacts; 查看 my_contacts 表</li><li>drop table my_contacts; 删除 my_contacts 表</li><li>show create table my_contacts; 返回建表的 create table 语句</li></ol><h5 id="创建数据库和表"><a href="#创建数据库和表" class="headerlink" title="创建数据库和表"></a>创建数据库和表</h5><p>1.查询数据库</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span></pre></td></tr></tbody></table></figure><p>2.进入某个数据库</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">database</span>;</span></pre></td></tr></tbody></table></figure><p><img alt="04" data-src="/static/images/mysql/04.webp" class="lazyload"></p><p>3.列出数据库中的表</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span></pre></td></tr></tbody></table></figure><p><img alt="05" data-src="/static/images/mysql/05.webp" class="lazyload"></p><p>4.查看某个表全部字段</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">desc slow_log;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> slow_log\G; （不仅可以显示表信息，还可以显示建表语句）</span></pre></td></tr></tbody></table></figure><p>5.查看当前用户</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>();</span></pre></td></tr></tbody></table></figure><p><img alt="06" data-src="/static/images/mysql/06.webp" class="lazyload"></p><p>6.查看当前所在数据库</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">database</span>();</span></pre></td></tr></tbody></table></figure><p>7.创建新数据库（可以指定字符集）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> db1 <span class="keyword">charset</span> utf8;</span></pre></td></tr></tbody></table></figure><p>8.创建新表</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1 (<span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">4</span>), <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">40</span>));</span></pre></td></tr></tbody></table></figure><p>9.查看数据库版本<br>    -（1）方式一：进入 mysql，输入 <code>status</code><br>    <img alt="07" data-src="/static/images/mysql/07.webp" class="lazyload"></p><pre><code>-（2）方式二：进入 mysql，输入<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">version</span>();</span></pre></td></tr></tbody></table></figure>![08](/static/images/mysql/08.webp)-（3）方式三：直接在 Linux 输入命令：<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">rpm -qa | grep mysql</span></pre></td></tr></tbody></table></figure>![09](/static/images/mysql/09.webp)</code></pre><p>10.查看数据库状态</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span>;         当前会话状态</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span>;  全局数据库状态</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">slave</span> <span class="keyword">status</span>\G;   查看主从数据库状态信息</span></pre></td></tr></tbody></table></figure><p>11.查询数据库参数</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span>;</span></pre></td></tr></tbody></table></figure><p>12.修改数据库参数</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'max_connect%'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> max_connect_errors = <span class="number">1000</span>;（重启数据库会失效，要在配置文件中修改）</span></pre></td></tr></tbody></table></figure><p>13.查看当前数据库队列</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">processlist</span>;</span></pre></td></tr></tbody></table></figure><p>14.创建普通用户并授权给某个数据库</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> databasename.* <span class="keyword">to</span> <span class="string">'user1'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'123456'</span>;</span></pre></td></tr></tbody></table></figure><p>15.新建普通用户</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="keyword">name</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'ssapdrow'</span>;</span></pre></td></tr></tbody></table></figure><p>16.更改普通用户密码</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="keyword">name</span>=<span class="keyword">PASSWORD</span>(<span class="string">'fdddfd'</span>);</span></pre></td></tr></tbody></table></figure><p>17.查看name用户权限</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="keyword">name</span>;</span></pre></td></tr></tbody></table></figure><p>18.脚本中执行mysql命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql -uuser -ppasswd -e<span class="string">"show databases"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"show databases"</span>|mysql -uuser -ppassword</span></pre></td></tr></tbody></table></figure><p>19.清空表数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> db1.t1;</span></pre></td></tr></tbody></table></figure><p>20.删除表</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> db1.t1;</span></pre></td></tr></tbody></table></figure><p>21.清空数据库中的所有表（数据库名是eab12）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql -N -s information_schema -e "<span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">'TRUNCATE TABLE '</span>,TABLE_NAME,<span class="string">';'</span>) <span class="keyword">FROM</span> <span class="keyword">TABLES</span> <span class="keyword">WHERE</span> TABLE_SCHEMA=<span class="string">'eab12'</span><span class="string">" | mysql -f eab12</span></span></pre></td></tr></tbody></table></figure><p>22.删除数据库</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> db1;</span></pre></td></tr></tbody></table></figure><p>以下是执行大量mysql语句采用的方式</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql -uuser -hhostname -ppasswd &lt;&lt;EOF</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">mysql语句</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">EOF</span></pre></td></tr></tbody></table></figure><h5 id="insert-语句"><a href="#insert-语句" class="headerlink" title="insert 语句"></a>insert 语句</h5><p><code>insert into your_table (column_name1, column_name2, ...) values ('value1', 'value2', ...);</code></p><p>列名可省略：</p><p><code>insert into your_table values ('value1', 'value2', ...);</code></p><p><code>insert into ... select</code>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span> (col1, col2, ..., coln)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1, col2, ..., coln</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> <span class="keyword">table</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> entry_date &lt; <span class="string">'2011-01-01 00:00:00'</span>;</span></pre></td></tr></tbody></table></figure><h5 id="select-语句"><a href="#select-语句" class="headerlink" title="select 语句"></a>select 语句</h5><ul><li><code>Like</code>与通配符<ol><li><code>%</code> : 表示任意数量的未知字符串的替身；</li><li><code>_</code> : 一个未知字符串的替身；</li></ol></li></ul><p>查询表数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mysql.db;           //查询该表中的所有字段</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">select count(*) from mysql.user;  //count(*)表示表中有多少行</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> db,<span class="keyword">user</span>  <span class="keyword">from</span> mysql.db;    //查询表中的多个字段</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mysql.db <span class="keyword">where</span> host <span class="keyword">like</span> <span class="string">'10.0.%'</span>;在查询语句中可以使用万能匹配 “%”</span></pre></td></tr></tbody></table></figure><h5 id="delete-语句"><a href="#delete-语句" class="headerlink" title="delete 语句"></a>delete 语句</h5><p><code>delete from your_table where ....</code></p><h5 id="update-语句"><a href="#update-语句" class="headerlink" title="update 语句"></a>update 语句</h5><p><code>update your_table set first_column = 'new_value', second_column = 'new_value1' where ...;</code></p><p>使用 <code>case</code> 表达式 <code>update</code></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> my_table</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> new_column =</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">when</span> column1 = somavalue1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">when</span> column2 = somevalue2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">else</span> newvalue3</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span>;</span></pre></td></tr></tbody></table></figure><h5 id="alter-语句"><a href="#alter-语句" class="headerlink" title="alter 语句"></a>alter 语句</h5><ol><li><code>change</code> 可同时改变现有列的名称和数据类型</li><li><code>modify</code> 修改现有列的数据类型和位置</li><li><code>add</code>    在当前表中添加一列</li><li><code>drop</code>   从表中删除某列</li><li><code>rename to</code> 修改表名</li></ol><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> my_contacts</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">add</span> <span class="keyword">column</span> contact_id <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">FIRST</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">add</span> primary <span class="keyword">key</span> (contact_id);</span></pre></td></tr></tbody></table></figure><blockquote><p>可以使用<code>first</code>, <code>last</code>, <code>before column_name</code>, <code>after column_name</code>, <code>second</code>, <code>third</code> 等关键字调整列的顺序</p></blockquote><h4 id="mysql建立索引的几大原则"><a href="#mysql建立索引的几大原则" class="headerlink" title="mysql建立索引的几大原则"></a>mysql建立索引的几大原则</h4><p>引用自：<a href="http://tech.meituan.com/mysql-index.html" target="_blank" rel="external nofollow noreferrer noopener">美团技术博客</a></p><ol><li><p>最左前缀匹配原则，非常重要的原则，<code>mysql</code>会一直向右匹配直到遇到范围查询(<code>&gt;</code>、<code>&lt;</code>、<code>between</code>、<code>like</code>)就停止匹配，比如<code>a = 1 and b = 2 and c &gt; 3 and d = 4</code> 如果建立<code>(a,b,c,d)</code>顺序的索引，d是用不到索引的，如果建立<code>(a,b,d,c)</code>的索引则都可以用到，a,b,d的顺序可以任意调整。</p></li><li><p><code>=</code>和<code>in</code>可以乱序，比如<code>a = 1 and b = 2 and c = 3</code>建立<code>(a,b,c)</code>索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p></li><li><p>尽量选择区分度高的列作为索引,区分度的公式是<code>count(distinct col)/count(*)</code>，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录</p></li><li><p>索引列不能参与计算，保持列“干净”，比如<code>from_unixtime(create_time) = ’2014-05-29’</code>就不能使用到索引，原因很简单，<code>b+</code>树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成<code>create_time = unix_timestamp(’2014-05-29’)</code>;</p></li><li><p>尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加<code>(a,b)</code>的索引，那么只需要修改原来的索引即可</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      mysql
    
    </summary>
    
    
      <category term="Sql" scheme="http://notes.seirhsiao.com/categories/Sql/"/>
    
    
  </entry>
  
  <entry>
    <title>Git管理多个SSH密钥，Git多帐号配置</title>
    <link href="http://notes.seirhsiao.com/posts/120c9a64/"/>
    <id>http://notes.seirhsiao.com/posts/120c9a64/</id>
    <published>2019-12-02T07:25:14.682Z</published>
    <updated>2019-12-07T01:04:05.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git管理多个SSH密钥，Git多帐号配置"><a href="#Git管理多个SSH密钥，Git多帐号配置" class="headerlink" title="Git管理多个SSH密钥，Git多帐号配置"></a>Git管理多个SSH密钥，Git多帐号配置</h1><h2 id="SSH之于Git的原理"><a href="#SSH之于Git的原理" class="headerlink" title="SSH之于Git的原理"></a>SSH之于Git的原理</h2><p><code>Git</code>提交时有<code>Https</code>和<code>SSH</code>两种验证方式，<code>Https</code>的方式需要帐号和密码比较好理解，不过它需要在每次提交时输入帐号和密码，有点麻烦；而SSH的功能可以粗暴的理解为记住帐号密码，不过对这个过程有人会有点疑惑。首先，我们用<code>SSH</code>命令生成一个公钥-私钥对，我们会把公钥添加到<code>Git</code>的服务器，把私钥放在本地。提交文件的时候<code>Git</code>服务器会用公钥和客户端提交私钥做验证（具体细节不究），如果验证通过则提交成功，那么我们在把公钥添加到服务器的时候肯定是需要登录<code>Git</code>服务器的，这个过程其实可以理解为帐号和密码托管<code>给SSH</code>了，所以也是相当于输入了帐号密码，但是由<code>SSH</code>帮你记住了。这么理解是可以，但是<code>SSH</code>的意义不仅仅是这样，关于SSH的更详细内容看客可以自行再了解。</p><h2 id="生成SSH-KEY"><a href="#生成SSH-KEY" class="headerlink" title="生成SSH-KEY"></a>生成SSH-KEY</h2><p>打开命令行、终端，用命令进入到你要保存<code>SSH-KEY</code>文件的文件夹，我们先用命令测试下终端是否支持<code>SSH</code>：</p><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssh -V</span></span></pre></td></tr></tbody></table></figure><p>如果你的终端支持SSH，那么你可能看到类似如下的版本信息：</p><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">OpenSSH_7<span class="number">.9</span>p1, LibreSSL <span class="number">2.7</span><span class="number">.3</span></span></pre></td></tr></tbody></table></figure><p>测试时如果提示不识别<code>SSH</code>命令，需要安装<code>SSH</code>。</p><ul><li><code>Ubuntu</code>安装<code>SSH</code>：</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo apt-get <span class="keyword">install</span> openssh-<span class="keyword">client</span> openssh-<span class="keyword">server</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span></pre></td></tr></tbody></table></figure><ul><li><code>CentOS</code>安装<code>SSH</code>：</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> openssh-<span class="keyword">client</span> openssh-<span class="keyword">server</span></span></pre></td></tr></tbody></table></figure><p><code>Windows</code>可以在当前文件夹右键，选择<strong><code>Git Bash Here</code></strong>，会自动在当前文件夹打开一个<code>MINGW</code>的命令行窗体，它是自带<code>SSH</code>的。</p><p>接下来在刚才的文件夹，使用SSH命令在当前文件夹生成一对SSH-KEY：</p><figure class="highlight excel"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"邮箱地址"</span></span></pre></td></tr></tbody></table></figure><p>例如：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh-keygen</span> <span class="selector-tag">-t</span> <span class="selector-tag">rsa</span> <span class="selector-tag">-C</span> "<span class="selector-tag">youremail</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span>"</span></pre></td></tr></tbody></table></figure><p>接下来会出来提示信息，完整的大概是这样：</p><figure class="highlight processing"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"seirhsiao@foxmail.com"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa <span class="built_in">key</span> pair.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Enter file in which to <span class="built_in">save</span> the <span class="built_in">key</span> (~/.ssh/id_rsa):</span></pre></td></tr></tbody></table></figure><p>这里需要输入<code>SSH-KEY</code>的文件名字，这里名字理论上可以随便取，但是我们今天要说配置多个<code>SSH-KEY</code>，所以请分别查看以下两节：</p><ul><li>单个<code>Git</code>帐号的配置——全局<code>Git</code>配置</li><li>多个<code>Git</code>帐号的配置——局部<code>Git</code>配置</li></ul><h2 id="单个Git帐号的配置——全局Git配置"><a href="#单个Git帐号的配置——全局Git配置" class="headerlink" title="单个Git帐号的配置——全局Git配置"></a>单个Git帐号的配置——全局Git配置</h2><p>大部分人使用<code>Git</code>一般是一个帐号，所以接着上面的讲。</p><p>上面说到输入<code>ssh-keygen</code>命令生成<code>SSH-KEY</code>密钥对文件时需要输入文件名称，如果你仅仅要配置一个帐号，那么我们输入默认名称即可：<code>id_rsa</code>。</p><p>接着会要求输入私钥的密码，并且需要确认密码，为了安全在密码输入的时候不会反显，什么都看不到，这个密码你自己设置，但是你一定要记住：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">Enter</span> <span class="string">passphrase</span> <span class="string">(empty</span> <span class="string">for</span> <span class="literal">no</span> <span class="string">passphrase):</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Enter same passphrase again:</span></span></pre></td></tr></tbody></table></figure><p>到这里生成<code>SSH-KEY</code>的事就完成了，你在当前文件夹会看到两个文件：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">id_rsa</span>  <span class="selector-tag">id_rsa</span><span class="selector-class">.pub</span></span></pre></td></tr></tbody></table></figure><p>SSH-KEY生成了，接着给服务器和客户端配置<code>SSH-KEY</code>。</p><ol><li>第一步把<code>id_rsa.pub</code>中的公钥内容添加到<code>Git</code>的<code>SSH</code>中，如果你使用<code>Github</code>或者<code>Gitlib</code>，在个人设置中会找到。</li><li>第二步把<code>SSH-KEY</code>配置给<code>SSH</code>，让系统的<code>SSH</code>知道这个<code>KEY</code>。</li></ol><p><code>Linux</code>把<code>id_rsa</code>文件拷贝到<code>~/.ssh</code>文件夹下，命令如下：</p><figure class="highlight arcade"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cp id_rsa ~<span class="regexp">/.ssh/</span></span></pre></td></tr></tbody></table></figure><p><code>Window</code>把<code>id_rsa</code>文件拷贝到<code>C:/Users/你的用户名/.ssh</code>文件夹下。</p><p>拷贝完成后，把<code>.ssh</code>文件夹下的<code>id_rsa</code>文件添加到<code>SSH-Agent</code>，命令如下：</p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ssh-<span class="keyword">add</span><span class="bash"> id_rsa文件的路径</span></span></pre></td></tr></tbody></table></figure><p>例如<code>Linux</code>：<code>ssh-add ~/.ssh/id_rsa</code>，如果命令行此时正在<code>.ssh</code>文件夹下：<code>ssh-add id_rsa</code>即可，<code>Windows</code>同理。</p><p>此时添加时如果遇到错误，请参考本文最后一节：<strong>添加SSH到SSH-Agent时报错</strong>。</p><p>最后，执行以下命名配置<code>Git</code>全局用户和邮箱：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"你的名字"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"你的邮箱"</span></span></pre></td></tr></tbody></table></figure><p>例如：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"kevin"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"kevin@gmail.com"</span></span></pre></td></tr></tbody></table></figure><p>配置全局用户和邮箱完成后，我们可以查看：<br><code>Linux</code>用户打开<code>~/.gitconfig</code>文件即可看到配置：</p><figure class="highlight jboss-cli"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">vim ~<span class="string">/.gitconfig</span></span></pre></td></tr></tbody></table></figure><p><code>Windows</code>用户打开<code>C:/Users/你的用户名/.git/config</code>即可看到配置，内容大概如下：</p><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[user]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">name = kevin</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">email = <span class="symbol">kevin@</span>gmail.co</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="number">123</span></span></pre></td></tr></tbody></table></figure><p>此时配置全部结束，请查看下方<strong>测试SSH-KEY配置是否成功</strong>进行测试。</p><h2 id="多个Git帐号的配置——局部Git配置"><a href="#多个Git帐号的配置——局部Git配置" class="headerlink" title="多个Git帐号的配置——局部Git配置"></a>多个Git帐号的配置——局部Git配置</h2><p>又有很多人同时使用多个<code>Git</code>帐号，比如<code>Github</code>、<code>OSChina</code>、<code>Gitlib</code>等，再接着上面讲配置多个<code>Git</code>帐号。</p><p>上面说到输入<code>ssh-keygen</code>命令生成<code>SSH-KEY</code>密钥对文件时需要输入文件名称，如果你要配置多个帐号，就根据爱好输入<code>KEY</code>文件的名字吧，例如为<code>Github</code>配置就输入：<code>id_rsa_github</code>，为<code>OSChina</code>配置就输入：<code>id_rsa_oschina</code>。</p><p>接着会要求输入私钥的密码，并且需要确认密码，为了安全在密码输入的时候不会反显，什么都看不到，这个密码你自己设置，但是你一定要记住：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">Enter</span> <span class="string">passphrase</span> <span class="string">(empty</span> <span class="string">for</span> <span class="literal">no</span> <span class="string">passphrase):</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Enter same passphrase again:</span></span></pre></td></tr></tbody></table></figure><p>到这里生成<code>SSH-KEY</code>的事就完成了，你在当前文件夹会看到两个文件：</p><figure class="highlight autohotkey"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">id_rs<span class="built_in">a_github</span>  id_rs<span class="built_in">a_github</span>.pub</span></pre></td></tr></tbody></table></figure><p><code>SSH-KEY</code>生成了，接着给服务器和客户端配置<code>SSH-KEY</code>。</p><ol><li>第一步把<code>id_rsa_github.pub</code>中的公钥内容添加到<code>Git</code>的<code>SSH</code>中，如果你使用<code>Github</code>或者<code>Gitlib</code>，在个人设置中会找到。</li><li>第二步为<code>SSH</code>配置私钥位置，这里和上面配置单个<code>Git</code>帐号不一样，不过单个帐号也可以按照多个帐号的配置方法来配置。</li></ol><p>下面我们需要在<code>.ssh</code>文件夹新建一个名为<code>config</code>的文件，用它来配置多个<code>SSH-KEY</code>的管理。</p><p><code>Linux</code>进入<code>.ssh</code>文件夹：<code>cd ~/.ssh</code>，新建<code>config</code>文件：<code>touch config</code>；或者：<code>touch ~/.ssh/config</code>。这里要注意，没有<code>.ssh</code>文件夹的要新建一个<code>.ssh</code>名的文件夹。</p><p><code>Window</code>进入<code>C:/Users/你的用户名/.ssh</code>文件夹，右键新建一个文本文件，改名为<code>config</code>即可。这里要注意，没有<code>.ssh</code>文件夹的要新建一个<code>.ssh</code>名的文件夹。</p><p>下面来填写<code>config</code>文件的内容，我以<code>Github</code>、<code>Gitlib</code>、<code>OSChina</code>，局域网为例：</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># gitlab</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Host</span> <span class="string">gitlab.com</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">HostName</span> <span class="string">gitlab.com</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">IdentityFile</span> <span class="string">~/.ssh/id_rsa</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding.net https://git.dev.tencent.com/pactera/blog.git</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Host</span> <span class="string">git.dev.tencent.com</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">HostName</span> <span class="string">git.dev.tencent.com</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">IdentityFile</span> <span class="string">~/.ssh/tencent_rsa</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># gitee https://git.oschina.net</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Host</span> <span class="string">git.oschina.net</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">HostName</span> <span class="string">git.oschina.net</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">IdentityFile</span> <span class="string">~/.ssh/gitee_rsa</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># gitee https://gitee.com/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Host</span> <span class="string">gitee.com</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">HostName</span> <span class="string">gitee.com</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">IdentityFile</span> <span class="string">~/.ssh/gitee_rsa</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># github</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Host</span> <span class="string">github.com</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">HostName</span> <span class="string">github.com</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">IdentityFile</span> <span class="string">~/.ssh/seirhsiao_rsa</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># github seirhsiao</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Host</span> <span class="string">seirhsiao.github.com</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">HostName</span> <span class="string">github.com</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">IdentityFile</span> <span class="string">~/.ssh/seirhsiao_rsa</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># github jemutse</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Host</span> <span class="string">jemutse.github.com</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">HostName</span> <span class="string">github.com</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">IdentityFile</span> <span class="string">~/.ssh/jemutse_rsa</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># github lanily</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Host</span> <span class="string">lanily.github.com</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">HostName</span> <span class="string">github.com</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">IdentityFile</span> <span class="string">~/.ssh/lanily_rsa</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Host</span> <span class="string">192.168.1.222</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">HostName</span> <span class="string">192.168.1.222</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">User</span> <span class="string">smallajax@foxmail.com</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">IdentityFile</span> <span class="string">~/.ssh/id_rsa_oschina</span></span></pre></td></tr></tbody></table></figure><p>Host，SSH 连接名<br>HostName，如上所示，可以是通配符，可以是 IP，也可以是域名等<br>User，登录的用户名<br>IdentifyFile，version 1 协议下默认是 <del>/.ssh/identify，version 2 协议下，默认是依次匹配：</del>/.ssh/id_dsa，<del>/.ssh/id_ecdsa，</del>/.ssh/id_rsa，还有 version 2 兼容模式。<br>LocalForward 端口的内部跳转<br>Port，端口设置，默认 SSH 的端口是 22<br>Protocal，协议版本号，1 或者 2</p><p>解释一下，<code>HostName</code>是服务器的地址，<code>User</code>是用户名，<code>PreferredAuthentications</code>照抄即可，这里主要说的是<code>IdentityFile</code>，上面我们看到了三种情况，所以它的书写原则是：</p><ol><li>填私钥文件的本地路径。</li><li>不论是<code>Linux</code>还是<code>Windows</code>都可以写相对路径，比如把<code>id_rsa_xxx</code>私钥文件放在<code>.ssh</code>文件夹下。</li><li>文件放在不同跟路径下时，需要写绝对路径</li><li><code>Linux</code>中没有放在<code>.ssh</code>文件夹内或者子文件夹。</li><li><code>Windows</code>中没有放在<code>C</code>盘下时。注意据对路径变化，比如C盘下是<code>/C/xo/abc</code>、比如D盘下<code>/D/ssh/id_rsa</code>这样，还看不懂请参考上方例子。</li></ol><p>拷贝完成后，把所有的<code>id_rsa</code>私钥文件添加到<code>SSH-Agent</code>，命令如下：</p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ssh-<span class="keyword">add</span><span class="bash"> id_rsa文件的路径</span></span></pre></td></tr></tbody></table></figure><p>例如添加<code>.ssh</code>文件夹下的，<code>Linux</code>这样做：<code>ssh-add ~/.ssh/id_rsa</code>，如果你在<code>.ssh</code>文件夹下：<code>ssh-add id_rsa</code>即可，<code>Windows</code>同理。</p><p>此时添加时如果遇到错误，请参考本文最后一节：<strong>添加SSH到SSH-Agent时报错</strong>。</p><p>最后，还剩下项目的用户和邮箱没有配置，和配个单个<code>Git</code>帐号的方式不同，这里我们需要为每个项目分别配置，所以要命令行进入仓库文件夹再设置。第一种情况是先从<code>Git</code>上<code>pull</code>仓库下来，第二种情况是本地初始化<code>Git</code>仓库，总之进入改仓库文件夹后：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--local user.name <span class="string">"你的名字"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--local user.email <span class="string">"你的邮箱"</span></span></pre></td></tr></tbody></table></figure><p>例如：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--local user.name <span class="string">"kevin"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--local user.email <span class="string">"kevin@gmail.com"</span></span></pre></td></tr></tbody></table></figure><p>不过麻烦的一点是如果是多个项目就需要挨个配置，不过我们一般是<code>pull</code>一个项目就配置一下，也仅仅需要配置一次即可。</p><p>注意配置单个<code>Git</code>帐号时，是不进入项目文件夹就可以，不过不是使用<code>--local</code>，而是使用<code>--global</code>就可以全局配置。</p><p>配置项目用户和邮箱完成后，我们可以进入项目文件夹下的<code>.git</code>文件夹查看<code>config</code>文件内容，大概内容如下：</p><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[user]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">name = kevin</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">email = <span class="symbol">kevin@</span>gmail.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="number">1234</span></span></pre></td></tr></tbody></table></figure><p>此时配置全部结束，请查看下方<strong>测试SSH-KEY配置是否成功</strong>进行测试。如果配置成功，你就可以clone和commit了。</p><h2 id="测试SSH-KEY配置是否成功"><a href="#测试SSH-KEY配置是否成功" class="headerlink" title="测试SSH-KEY配置是否成功"></a>测试SSH-KEY配置是否成功</h2><p>配置全部结束，我们来测试一下配置是否成功：</p><ul><li>如果你是Github：</li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span>@<span class="keyword">github</span>.<span class="keyword">com</span></span></pre></td></tr></tbody></table></figure><ul><li>如果是你Gitlib：</li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span>@<span class="keyword">gitlib</span>.<span class="keyword">com</span></span></pre></td></tr></tbody></table></figure><ul><li>如果你是局域网192.168.1.222：</li></ul><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ssh -T <span class="symbol">git@</span><span class="number">192.168</span><span class="number">.1</span><span class="number">.222</span></span></pre></td></tr></tbody></table></figure><ul><li>其它自行举一反三吧。</li></ul><p>此时需要输入刚才生成SSH-KEY时输入的私钥密码，输入后自行观察信息判断是否连接成功。</p><ul><li>比如Github的信息是：</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Hi yanzhenjie! You've successfully authenticated, but GitHub does not provide shell access.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">1</span></pre></td></tr></tbody></table></figure><ul><li>比如Gitlib的信息是：</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Welcome to GitLab, YanZhenjie!</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">1</span></pre></td></tr></tbody></table></figure><p>如果不能执行测试命令或者提示什么错误了，请执行<code>ssh-agent bash</code>完后再执行测试命令，如果还不行就是配置有问题了。</p><h2 id="添加SSH到SSH-Agent时报错"><a href="#添加SSH到SSH-Agent时报错" class="headerlink" title="添加SSH到SSH-Agent时报错"></a>添加SSH到SSH-Agent时报错</h2><p>如果执行<code>ssh-add ...</code>命令提示如下错误：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Could <span class="keyword">not</span> open a<span class="built_in"> connection </span><span class="keyword">to</span> your authentication agent.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">1</span></pre></td></tr></tbody></table></figure><p>那么请执行<code>eval $(ssh-agent)</code>命令后再重试，如果还不行，请再执行<code>ssh-agent bash</code>命令后再执行<code>eval $(ssh-agent)</code>后执行添加命令。另外上述测试配置的命令不能执行时也可以在<code>ssh-agent bash</code>执行完后再测试。</p><ul><li>参考：<a href="http://stackoverflow.com/questions/17846529/could-not-open-a-connection-to-your-authentication-agent" target="_blank" rel="external nofollow noreferrer noopener">StackOverFlow·ssh-Could not open a…</a></li></ul><h2 id="ssh常用命令"><a href="#ssh常用命令" class="headerlink" title="ssh常用命令"></a>ssh常用命令</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">##生成公钥私钥对</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"309183912@qq.com"</span> -f ~/.ssh/gitee_rsa</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代码参数含义：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># -t 指定密钥类型，默认是 rsa ，可以省略。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># -C 设置注释文字，比如邮箱。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># -f 指定密钥文件存储文件名。 -来自github设置添加SSH</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">##添加新密钥到SSH agent中</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">ssh-agent bash</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/gitee_rsa</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">## 可以通过 ssh-add -l 来确私钥列表</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">ssh-add -l</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">## 可以通过 ssh-add -D 来清空私钥列表</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">ssh-add -D</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">## 测试连接</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">ssh -T git@gitee.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh                              <span class="comment"># 进入文件夹</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"邮箱地址"</span>          <span class="comment"># 配置密钥对</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">ssh-add rsa文件的路径/xxx_rsa            <span class="comment"># 添加配置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">git config --global(<span class="built_in">local</span>) user.name  <span class="string">"你的名字"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">git config --global(<span class="built_in">local</span>) user.email <span class="string">"你的邮箱"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">vim ~/.ssh/config                     <span class="comment"># 添加新的账号配置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment">## 目前git的配置变量可以放在三个地方：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 系统配置, 存放在/etc/gitconfig,对所有用户都生效。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局配置，存放在用户目录下的~/.gitconfig文件中；仅对当前用户生效。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 局部配置，存放在仓库目录下的.git/config文件中； 项目根目录配置，仅对当前项目生效。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"name"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">git confit --global user.email <span class="string">"email"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除全局配置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> <span class="string">"user.name"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> <span class="string">"user.email"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">projectRootPath/.git/config </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对应：进入工程根目录执行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">git config user.name <span class="string">"yourName"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">git config user.email <span class="string">"yourEmail"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三层是从3-2-1的优先</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">git config –list <span class="comment"># 查看配置结果</span></span></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git管理多个SSH密钥，Git多帐号配置&quot;&gt;&lt;a href=&quot;#Git管理多个SSH密钥，Git多帐号配置&quot; class=&quot;headerlink&quot; title=&quot;Git管理多个SSH密钥，Git多帐号配置&quot;&gt;&lt;/a&gt;Git管理多个SSH密钥，Git多帐号配置&lt;/
      
    
    </summary>
    
    
      <category term="Git" scheme="http://notes.seirhsiao.com/categories/Git/"/>
    
    
      <category term="git" scheme="http://notes.seirhsiao.com/tags/git/"/>
    
      <category term="github" scheme="http://notes.seirhsiao.com/tags/github/"/>
    
      <category term="ssh" scheme="http://notes.seirhsiao.com/tags/ssh/"/>
    
      <category term="gitcafe" scheme="http://notes.seirhsiao.com/tags/gitcafe/"/>
    
  </entry>
  
  <entry>
    <title>Hexo使用 hexo-tag-aplayer 播放音乐</title>
    <link href="http://notes.seirhsiao.com/posts/eaf9c5a0/"/>
    <id>http://notes.seirhsiao.com/posts/eaf9c5a0/</id>
    <published>2019-12-02T05:04:27.224Z</published>
    <updated>2019-12-07T02:42:49.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo使用-hexo-tag-aplayer-播放音乐"><a href="#Hexo使用-hexo-tag-aplayer-播放音乐" class="headerlink" title="Hexo使用 hexo-tag-aplayer 播放音乐"></a>Hexo使用 hexo-tag-aplayer 播放音乐</h1><h2 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h2><p><a href="https://helloblack2017.github.io/2018/04/22/use-aplayer/" target="_blank" rel="external nofollow noreferrer noopener">use-aplayer</a></p><h2 id="使用-hexo-tag-aplayer"><a href="#使用-hexo-tag-aplayer" class="headerlink" title="使用 hexo-tag-aplayer"></a>使用 hexo-tag-aplayer</h2><h3 id="歌曲单曲标签使用"><a href="#歌曲单曲标签使用" class="headerlink" title="歌曲单曲标签使用"></a>歌曲单曲标签使用</h3><h4 id="标签模版："><a href="#标签模版：" class="headerlink" title="标签模版："></a><strong>标签模版：</strong></h4><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %}</span></pre></td></tr></tbody></table></figure><h4 id="使用实例："><a href="#使用实例：" class="headerlink" title="使用实例："></a>使用实例：</h4><ol><li>设置标签：</li></ol><figure class="highlight gcode"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{<span class="meta">%</span> aplayer <span class="string">"Caffeine"</span> <span class="string">"Jeff Williams"</span> <span class="string">"caffeine.mp3"</span> <span class="string">"picture.jpg"</span> <span class="string">"narrow"</span> <span class="string">"autoplay"</span> <span class="string">"width:70%"</span> <span class="string">"lrc:caffeine.txt"</span> <span class="meta">%</span>}</span></pre></td></tr></tbody></table></figure><ol><li>设置居中并适应 pc 和手机端宽度</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="css">    <span class="selector-class">.aplayer</span> {</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        margin: 0 auto;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="css">    @<span class="keyword">media</span> screen and (max-device-width: <span class="number">400px</span>) {</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="css">        <span class="selector-class">.aplayer</span> {</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            width: 100%;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></pre></td></tr></tbody></table></figure><p><strong>3. 更多标签参数设置:</strong></p><ul><li><code>title</code> <strong>:</strong> 曲目标题</li><li><code>author</code> <strong>:</strong> 曲目作者</li><li><code>url</code> <strong>:</strong> 音乐文件 URL 地址</li><li><code>picture_url</code> <strong>:</strong> (可选) 音乐对应的图片地址</li><li><code>narrow</code> <strong>:</strong>（可选）播放器袖珍风格</li><li><code>autoplay</code> <strong>:</strong> (可选) 自动播放，移动端浏览器暂时不支持此功能</li><li><code>width</code> <strong>:</strong> xxx (可选) 播放器宽度 (默认: 100%)</li><li><code>lrc</code> <strong>:</strong> xxx（可选）歌词文件 URL 地址</li></ul><h3 id="歌曲列表标签使用"><a href="#歌曲列表标签使用" class="headerlink" title="歌曲列表标签使用"></a>歌曲列表标签使用</h3><h4 id="标签模版：-1"><a href="#标签模版：-1" class="headerlink" title="标签模版："></a>标签模版：</h4><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{% aplayerlist %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"narrow"</span>: <span class="keyword">false</span>,                          <span class="regexp">//</span> （可选）播放器袖珍风格</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"autoplay"</span>: <span class="keyword">true</span>,                         <span class="regexp">//</span> （可选) 自动播放，移动端浏览器暂时不支持此功能</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"mode"</span>: <span class="string">"random"</span>,                         <span class="regexp">//</span> （可选）曲目循环类型，有 <span class="string">'random'</span>（随机播放）, <span class="string">'single'</span> (单曲播放), <span class="string">'circulation'</span> (循环播放), <span class="string">'order'</span> (列表播放)， 默认：<span class="string">'circulation'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"showlrc"</span>: <span class="number">3</span>,                             <span class="regexp">//</span> （可选）歌词显示配置项，可选项有：<span class="number">1,2</span>,<span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"mutex"</span>: <span class="keyword">true</span>,                            <span class="regexp">//</span> （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"theme"</span>: <span class="string">"#e6d0b2"</span>,                      <span class="regexp">//</span> （可选）播放器风格色彩设置，默认：<span class="comment">#b7daff</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"preload"</span>: <span class="string">"metadata"</span>,                    <span class="regexp">//</span> （可选）音乐文件预载入模式，可选项： <span class="string">'none'</span> <span class="string">'metadata'</span> <span class="string">'auto'</span>, 默认: <span class="string">'auto'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"listmaxheight"</span>: <span class="string">"513px"</span>,                 <span class="regexp">//</span> (可选) 该播放列表的最大长度</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"music"</span>: [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            <span class="string">"title"</span>: <span class="string">"CoCo"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="string">"author"</span>: <span class="string">"Jeff Williams"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            <span class="string">"url"</span>: <span class="string">"caffeine.mp3"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="string">"pic"</span>: <span class="string">"caffeine.jpeg"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            <span class="string">"lrc"</span>: <span class="string">"caffeine.txt"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        },</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            <span class="string">"title"</span>: <span class="string">"アイロニ"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            <span class="string">"author"</span>: <span class="string">"鹿乃"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            <span class="string">"url"</span>: <span class="string">"irony.mp3"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            <span class="string">"pic"</span>: <span class="string">"irony.jpg"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">{% endaplayerlist %}</span></pre></td></tr></tbody></table></figure><h4 id="使用示例："><a href="#使用示例：" class="headerlink" title="使用示例："></a>使用示例：</h4><ol><li>设置标签：</li></ol><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{% aplayerlist %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"narrow"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"autoplay"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"mode"</span>: <span class="string">"random"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"showlrc"</span>: <span class="number">3</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"mutex"</span>: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"theme"</span>: <span class="string">"#e6d0b2"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"preload"</span>: <span class="string">"metadata"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"listmaxheight"</span>: <span class="string">"513px"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"width"</span>: <span class="string">"50%"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"music"</span>: [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="string">"title"</span>: <span class="string">"认真的雪"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            <span class="string">"author"</span>: <span class="string">"薛之谦"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="string">"url"</span>: <span class="string">"/resources/music/你还要我怎样.mp3"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            <span class="string">"pic"</span>: <span class="string">"/resources/music/认真的雪.jpg"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            <span class="string">"lrc"</span>: <span class="string">"认真的雪.lrc"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        },</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            <span class="string">"title"</span>: <span class="string">"演员"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            <span class="string">"author"</span>: <span class="string">"薛之谦"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            <span class="string">"url"</span>: <span class="string">"/resources/music/演员.mp3"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            <span class="string">"pic"</span>: <span class="string">"/resources/music//演员.jpg"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">{% endaplayerlist %}</span></pre></td></tr></tbody></table></figure><ol><li>设置居中并适应 pc 和手机端宽度</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="css">    <span class="selector-class">.aplayer</span> {</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        margin: 0 auto;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="css">    @<span class="keyword">media</span> screen and (max-device-width: <span class="number">400px</span>) {</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="css">        <span class="selector-class">.aplayer</span> {</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            width: 100%;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></pre></td></tr></tbody></table></figure><h2 id="高级使用：MetingJS-支持"><a href="#高级使用：MetingJS-支持" class="headerlink" title="高级使用：MetingJS 支持"></a>高级使用：MetingJS 支持</h2><h3 id="1-使用"><a href="#1-使用" class="headerlink" title="1. 使用"></a>1. 使用</h3><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{%</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    meting   <span class="string">"2180172149"</span>    <span class="string">"netease"</span>       <span class="string">"playlist"</span>    <span class="string">"mutex:true"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"listmaxheight:340px"</span>    <span class="string">"preload:auto"</span>  <span class="string">"theme:#ad7a86</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">%}</span></pre></td></tr></tbody></table></figure><h3 id="2-设置"><a href="#2-设置" class="headerlink" title="2. 设置"></a>2. 设置</h3><table><thead><tr><th align="center"><strong>选项</strong></th><th align="center"><strong>默认值</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">id</td><td align="center"><strong>必须值</strong></td><td align="center">歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td></tr><tr><td align="center">server</td><td align="center"><strong>必须值</strong></td><td align="center">音乐平台: netease, tencent, kugou, xiami, baidu</td></tr><tr><td align="center">type</td><td align="center"><strong>必须值</strong></td><td align="center">列表播放模式, circulation, random, single, order</td></tr><tr><td align="center">autoplay</td><td align="center">true</td><td align="center">自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td align="center">mutex</td><td align="center">true</td><td align="center">该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td align="center">listmaxheight</td><td align="center">340px</td><td align="center">播放列表的最大长度</td></tr><tr><td align="center">preload</td><td align="center">auto</td><td align="center">音乐文件预载入模式，可选项： none, metadata, auto</td></tr><tr><td align="center">theme</td><td align="center">#ad7a86</td><td align="center">播放器风格色彩设置</td></tr></tbody></table><h3 id="3-使用效果"><a href="#3-使用效果" class="headerlink" title="3. 使用效果"></a>3. 使用效果</h3><p><a href="https://helloblack2017.github.io/404.html" target="_blank" rel="external nofollow noreferrer noopener"><img alt="使用MetingJS效果" data-src="https://helloblack2017.github.io/resources/post_images/metingJs.png" class="lazyload"></a></p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="https://helloblack2017.github.io/categories/实践检验/" target="_blank" rel="external nofollow noreferrer noopener">实践检验</a></li><li><a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="external nofollow noreferrer noopener">Aplayer</a></li><li><a href="https://aplayer.js.org/#/zh-Hans/" target="_blank" rel="external nofollow noreferrer noopener">Aplayer官方中文文档</a></li><li><a href="https://github.com/hexojs/hexo" target="_blank" rel="external nofollow noreferrer noopener">hexo</a></li><li><a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="external nofollow noreferrer noopener">hexo官方中文文档</a><blockquote><p>[hexo-tag-aplayer官方使用手册：] (<a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md</a>)</p></blockquote></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo使用-hexo-tag-aplayer-播放音乐&quot;&gt;&lt;a href=&quot;#Hexo使用-hexo-tag-aplayer-播放音乐&quot; class=&quot;headerlink&quot; title=&quot;Hexo使用 hexo-tag-aplayer 播放音乐&quot;&gt;&lt;/a&gt;He
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://notes.seirhsiao.com/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="http://notes.seirhsiao.com/tags/hexo/"/>
    
      <category term="APlayer" scheme="http://notes.seirhsiao.com/tags/APlayer/"/>
    
      <category term="hexo-tag-aplayer" scheme="http://notes.seirhsiao.com/tags/hexo-tag-aplayer/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 使用 APlayer 播放音乐</title>
    <link href="http://notes.seirhsiao.com/posts/3a07f81/"/>
    <id>http://notes.seirhsiao.com/posts/3a07f81/</id>
    <published>2019-12-02T04:42:26.065Z</published>
    <updated>2019-12-07T02:42:48.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-使用-APlayer-播放音乐"><a href="#Hexo-使用-APlayer-播放音乐" class="headerlink" title="Hexo 使用 APlayer 播放音乐"></a>Hexo 使用 APlayer 播放音乐</h1><h2 id="使用-Aplayer-效果"><a href="#使用-Aplayer-效果" class="headerlink" title="使用 Aplayer 效果"></a>使用 Aplayer 效果</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/assets/css/APlayer.min.css"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"player"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"aplayer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/assets/js/APlayer.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> APlayer({</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">    container: <span class="built_in">document</span>.getElementById(<span class="string">'player'</span>),</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    audio: [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            name: <span class="string">'你还要我怎样'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            artist: <span class="string">'薛之谦'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            url: <span class="string">'/resources/music/你还要我怎样.mp3'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            cover: <span class="string">'/resources/music/你还要我怎样.jpg'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            theme: <span class="string">'#46718b'</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">});</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript"><span class="keyword">const</span> application = <span class="keyword">new</span> APlayer({</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">    container: <span class="built_in">document</span>.getElementById(<span class="string">'aplayer'</span>),</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">    mini: <span class="literal">false</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">    autoplay: <span class="literal">false</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">    theme: <span class="string">'#FADFA3'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">    loop: <span class="string">'all'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">    order: <span class="string">'random'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">    preload: <span class="string">'auto'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    volume: 0.7,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">    mutex: <span class="literal">true</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">    listFolded: <span class="literal">false</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">    listMaxHeight: <span class="string">'150px'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    lrcType: 0,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    audio: [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            name: <span class="string">'丑八怪'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            artist: <span class="string">'薛之谦'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            url: <span class="string">'/resources/music/丑八怪.mp3'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            cover: <span class="string">'/resources/music/丑八怪.jpg'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            theme: <span class="string">'#46718b'</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">        },</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            name: <span class="string">'认真的雪'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            artist: <span class="string">'薛之谦'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            url: <span class="string">'/resources/music/认真的雪.mp3'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            cover: <span class="string">'/resources/music/认真的雪.jpg'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            theme: <span class="string">'#46718b'</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">        },</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            name: <span class="string">'演员'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            artist: <span class="string">'薛之谦'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            url: <span class="string">'/resources/music/演员.mp3'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            cover: <span class="string">'/resources/music/演员.jpg'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            theme: <span class="string">'#46718b'</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">        },</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            name: <span class="string">'你还要我怎样'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            artist: <span class="string">'薛之谦'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            url: <span class="string">'/resources/music/你还要我怎样.mp3'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            cover: <span class="string">'/resources/music/你还要我怎样.jpg'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            theme: <span class="string">'#46718b'</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">});</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></tbody></table></figure><h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><h3 id="设置-div-容器并引css和-js"><a href="#设置-div-容器并引css和-js" class="headerlink" title="设置 div 容器并引css和 js"></a>设置 div 容器并引css和 js</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="css">    <span class="selector-id">#aplayer</span> {</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        width: 50%;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        margin: 0 auto;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="css">    @<span class="keyword">media</span> screen and (max-device-width: <span class="number">400px</span>) {</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="css">        <span class="selector-id">#aplayer</span> {</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            width: 100%;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/assets/css/APlayer.min.css"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"aplayer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/assets/js/APlayer.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></tbody></table></figure><h3 id="设置单曲"><a href="#设置单曲" class="headerlink" title="设置单曲"></a>设置单曲</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> APlayer({</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">    container: <span class="built_in">document</span>.getElementById(<span class="string">'aplayer'</span>),</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    audio: [{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">        name: '丑八怪',                          <span class="comment">&lt;!-- 歌曲名称--&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">        artist: '薛之谦',                        <span class="comment">&lt;!-- 歌曲作者--&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">        url: '/resources/music/丑八怪.mp3',      <span class="comment">&lt;!-- 歌曲路径--&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">        cover: '/resources/music/认真的雪.jpg',  <span class="comment">&lt;!-- 歌曲封面图片--&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">        theme: '#46718b'                        <span class="comment">&lt;!-- 选中歌曲的主题--&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    }]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">});</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></tbody></table></figure><h3 id="设置歌曲列表"><a href="#设置歌曲列表" class="headerlink" title="设置歌曲列表"></a>设置歌曲列表</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript"><span class="keyword">const</span> ap = <span class="keyword">new</span> APlayer({</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">    container: <span class="built_in">document</span>.getElementById(<span class="string">'aplayer'</span>),</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">    mini: false,            <span class="comment">&lt;!-- 不启用迷你播放模式 --&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">    autoplay: false,        <span class="comment">&lt;!-- 音频不自动播放 --&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">    theme: '#FADFA3',       <span class="comment">&lt;!-- 主题色 --&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">    loop: 'all',            <span class="comment">&lt;!-- 音频循环播放, 可选值: 'all', 'one', 'none'--&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">    order: 'random',        <span class="comment">&lt;!-- 音频循环顺序, 可选值: 'list', 'random'--&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">    preload: 'auto',        <span class="comment">&lt;!-- 预加载，可选值: 'none', 'metadata', 'auto'--&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">    volume: 0.7,            <span class="comment">&lt;!-- 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效--&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">    mutex: true,            <span class="comment">&lt;!-- 互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器 --&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">    listFolded: false,      <span class="comment">&lt;!-- 列表默认折叠， false表示不折叠--&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">    listMaxHeight: '120px', <span class="comment">&lt;!-- 列表最大高度，超出此高度将有滚动条--&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">    lrcType: 0,             <span class="comment">&lt;!-- 歌词类型，0表示不显示歌词--&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    audio: [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">            name: '丑八怪',                         <span class="comment">&lt;!-- 歌曲名称--&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">            artist: '薛之谦',                       <span class="comment">&lt;!-- 歌曲作者--&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">            url: '/resources/music/丑八怪.mp3',     <span class="comment">&lt;!-- 歌曲路径--&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">            cover: '/resources/music/认真的雪.jpg', <span class="comment">&lt;!-- 歌曲封面图片--&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">            theme: '#46718b'                       <span class="comment">&lt;!-- 选中歌曲的主题--&gt;</span></span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        },</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            name: <span class="string">'丑八怪'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            artist: <span class="string">'薛之谦'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            url: <span class="string">'/resources/music/丑八怪.mp3'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            cover: <span class="string">'/resources/music/认真的雪.jpg'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            theme: <span class="string">'#46718b'</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        },</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            name: <span class="string">'丑八怪'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            artist: <span class="string">'薛之谦'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            url: <span class="string">'/resources/music/丑八怪.mp3'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            cover: <span class="string">'/resources/music/认真的雪.jpg'</span>,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">            theme: <span class="string">'#46718b'</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">});</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></tbody></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="https://helloblack2017.github.io/categories/实践检验/" target="_blank" rel="external nofollow noreferrer noopener">实践检验</a></li><li><a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="external nofollow noreferrer noopener">Aplayer</a></li><li><a href="https://aplayer.js.org/#/zh-Hans/" target="_blank" rel="external nofollow noreferrer noopener">Aplayer官方中文文档</a></li><li><a href="https://github.com/hexojs/hexo" target="_blank" rel="external nofollow noreferrer noopener">hexo</a></li><li><a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="external nofollow noreferrer noopener">hexo官方中文文档</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo-使用-APlayer-播放音乐&quot;&gt;&lt;a href=&quot;#Hexo-使用-APlayer-播放音乐&quot; class=&quot;headerlink&quot; title=&quot;Hexo 使用 APlayer 播放音乐&quot;&gt;&lt;/a&gt;Hexo 使用 APlayer 播放音乐&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://notes.seirhsiao.com/categories/Hexo/"/>
    
    
      <category term="指南" scheme="http://notes.seirhsiao.com/tags/%E6%8C%87%E5%8D%97/"/>
    
      <category term="hexo" scheme="http://notes.seirhsiao.com/tags/hexo/"/>
    
      <category term="APlayer" scheme="http://notes.seirhsiao.com/tags/APlayer/"/>
    
  </entry>
  
  <entry>
    <title>hexo-tag-aplayer</title>
    <link href="http://notes.seirhsiao.com/posts/8fce93b9/"/>
    <id>http://notes.seirhsiao.com/posts/8fce93b9/</id>
    <published>2019-12-02T04:29:53.247Z</published>
    <updated>2019-12-07T02:42:47.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Aplayer-插件使用"><a href="#Aplayer-插件使用" class="headerlink" title="Aplayer 插件使用  "></a>Aplayer 插件使用 <badge text="MonoLogueChi"> <badge text="Finish"></badge></badge></h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="external nofollow noreferrer noopener">hexo-tag-aplayer</a> 是 <a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="external nofollow noreferrer noopener">APlayer</a> 播放器的 Hexo 标签插件，可以十分方便地在文章内插入音乐播放器。</p><blockquote><p>本文只是指导你怎么用起来这个插件，相信如果你需要用到 <del>骚操作</del> 高级操作的时候，已经不再需要这篇文章来指导了.</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 hexo-tag-aplayer 插件十分简单，只需要在博客目录执行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-aplayer -s</span></pre></td></tr></tbody></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置项需要一些 Yaml 语法的基础知识，可以参见 <a href="/5-Add/5-2-yaml.html">YAML 语法简介</a></p><p>修改 Hexo 的配置文件 <code>_config.yml</code> ，增加</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">cdn:</span> <span class="string">https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js</span>  <span class="comment"># 引用 APlayer.js 外部 CDN 地址 (默认不开启)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">style_cdn:</span> <span class="string">https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span>       <span class="comment"># MetingJS 支持</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">meting_cdn:</span> <span class="string">https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js</span> <span class="comment"># 引用 Meting.js 外部 CDN 地址 (默认不开启)</span></span></pre></td></tr></tbody></table></figure><p>当然，上面只是我的一个示例，完整的配置选项在下面（如果不懂的话，可以直接复制我的示例文件）。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">script_dir:</span> <span class="string">some/place</span>                        <span class="comment"># Public 目录下脚本目录路径，默认: 'assets/js'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">style_dir:</span> <span class="string">some/place</span>                         <span class="comment"># Public 目录下样式目录路径，默认: 'assets/css'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">cdn:</span> <span class="string">http://xxx/aplayer.min.js</span>                <span class="comment"># 引用 APlayer.js 外部 CDN 地址 (默认不开启)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">style_cdn:</span> <span class="string">http://xxx/aplayer.min.css</span>         <span class="comment"># 引用 APlayer.css 外部 CDN 地址 (默认不开启)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span>                                  <span class="comment"># MetingJS 支持</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">meting_api:</span> <span class="string">http://xxx/api.php</span>                <span class="comment"># 自定义 Meting API 地址</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">meting_cdn:</span> <span class="string">http://xxx/Meing.min.js</span>           <span class="comment"># 引用 Meting.js 外部 CDN 地址 (默认不开启)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">true</span>                            <span class="comment"># 自动插入 Aplayer.js 与 Meting.js 资源脚本, 默认开启</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">externalLink:</span> <span class="string">http://xxx/aplayer.min.js</span>       <span class="comment"># 老版本参数，功能与参数 cdn 相同</span></span></pre></td></tr></tbody></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用 hexo-tag-aplayer 非常简单，只需要在 MarkDown 文件中插入正确的标记就可以了。</p><p>::: v-pre</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %}</span></pre></td></tr></tbody></table></figure><p>:::</p><p>如果你开启了<a href="https://hexo.io/zh-cn/docs/asset-folders.html#%E6%96%87%E7%AB%A0%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9" target="_blank" rel="external nofollow noreferrer noopener">文章资源文件夹</a>功能的话，就可以这样加载歌曲了</p><p>::: v-pre</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{% aplayer "Caffeine" "Jeff Williams" "caffeine.mp3" "picture.jpg" "lrc:caffeine.txt" %}</span></pre></td></tr></tbody></table></figure><p>:::</p><h2 id="MetingJS"><a href="#MetingJS" class="headerlink" title="MetingJS"></a>MetingJS</h2><p>好吧，对于新手来说，前面的你可能已经听懵逼了，忘记前面的使用方法，来看看下面的吧。</p><p>使用 MetingJS ，首先要在配置里开启，还记得前面我说直接复制我的配置吗？</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><p>开启 <a href="https://github.com/metowolf/MetingJS" target="_blank" rel="external nofollow noreferrer noopener">MetingJS</a> 之后，一切都变得简单了，只需要</p><p>::: v-pre</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{% meting "002j785c33YQHT" "tencent" "song" %}</span></pre></td></tr></tbody></table></figure><p>:::</p><p>WTF？这是什么？？？是不是还是一脸懵逼呢，不急，听我慢慢来解释。</p><p>有关  <code>    </code></p><div id="aplayer-FCylMone" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="undefined" data-server="undefined" data-type="undefined" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div>  的选项列表如下:<p></p><table><thead><tr><th>选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td><strong>必须值</strong></td><td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td></tr><tr><td>server</td><td><strong>必须值</strong></td><td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td>type</td><td><strong>必须值</strong></td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td>fixed</td><td><code>false</code></td><td>开启固定模式</td></tr><tr><td>mini</td><td><code>false</code></td><td>开启迷你模式</td></tr><tr><td>loop</td><td><code>all</code></td><td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr><td>order</td><td><code>list</code></td><td>列表播放模式： <code>list</code>, <code>random</code></td></tr><tr><td>volume</td><td>0.7</td><td>播放器音量</td></tr><tr><td>lrctype</td><td>0</td><td>歌词格式类型</td></tr><tr><td>listfolded</td><td><code>false</code></td><td>指定音乐播放列表是否折叠</td></tr><tr><td>storagename</td><td><code>metingjs</code></td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr><td>autoplay</td><td><code>true</code></td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td>mutex</td><td><code>true</code></td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td>listmaxheight</td><td><code>340px</code></td><td>播放列表的最大长度</td></tr><tr><td>preload</td><td><code>auto</code></td><td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td>theme</td><td><code>#ad7a86</code></td><td>播放器风格色彩设置</td></tr></tbody></table><p>如果你想完全读懂上面的这张表，你可能需要去查看 <a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="external nofollow noreferrer noopener">hexo-tag-aplayer</a> 和 <a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="external nofollow noreferrer noopener">APlayer</a> 的文档了，不是完全懂没关系，只要暂时会用就可以了，如果想要进阶使用的话，再去查找，你只需要记住我前面示例就可以了。</p><p>再来看<br>::: v-pre</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{% meting "002j785c33YQHT" "tencent" "song" %}</span></pre></td></tr></tbody></table></figure><p>:::</p><p>其中 <code>    </code></p><div id="aplayer-NdxobwJr" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="undefined" data-server="undefined" data-type="undefined" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div> 是 meting 的标签， <code>002j785c33YQHT</code> 是 id ， <code>tencent</code> 是平台， <code>song</code> 是类型，下面就怎么获得 id 展开讨论。<p></p><h3 id="QQ-音乐"><a href="#QQ-音乐" class="headerlink" title="QQ 音乐"></a>QQ 音乐</h3><p>推荐使用</p><p>搜索歌曲，歌曲地址就是 id ，如果是音乐列表，列表地址就是 id ,同理，歌手也是一样的。</p><p><img alt="QQ音乐id" data-src="@img/3/3-1/1.png" class="lazyload"></p><h3 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h3><p>网易云音乐比较实在，直接告诉你 id 是什么了</p><p><img alt="网易云音乐id" data-src="@img/3/3-1/2.png" class="lazyload"></p><p>其他平台的，也是类似，只要花点时间研究一下就能找到。</p><p>最前三个参数是必须填写的参数，也是可以简写的，后面其他的参数就不可以简写了，具体可以看下面的进阶示例。</p><p>::: v-pre</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 进阶示例 --&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{% meting "60198" "netease" "playlist" "autoplay" "mutex:false" "listmaxheight:340px" "preload:none" "theme:#ad7a86"%}</span></pre></td></tr></tbody></table></figure><p>:::</p><h2 id="其他示例"><a href="#其他示例" class="headerlink" title="其他示例"></a>其他示例</h2><h3 id="插入歌曲列表"><a href="#插入歌曲列表" class="headerlink" title="插入歌曲列表"></a>插入歌曲列表</h3><p>::: v-pre</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 使用 MetingJS 插入歌曲列表 --&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{% meting "001Mf4Ic1aNYYK" "tencent" "album" "order:random" "listmaxheight:180px" %}</span></pre></td></tr></tbody></table></figure><p>:::</p><p>效果截图</p><p><img alt="歌曲列表效果" data-src="@img/3/3-1/3.png" class="lazyload"></p><h3 id="其他示例待完善"><a href="#其他示例待完善" class="headerlink" title="其他示例待完善"></a>其他示例待完善</h3><p>相关链接</p><p>官方使用手册：<a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Aplayer-插件使用&quot;&gt;&lt;a href=&quot;#Aplayer-插件使用&quot; class=&quot;headerlink&quot; title=&quot;Aplayer 插件使用  &quot;&gt;&lt;/a&gt;Aplayer 插件使用 &lt;badge text=&quot;MonoLogueChi&quot;&gt; &lt;badge 
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://notes.seirhsiao.com/categories/Hexo/"/>
    
    
      <category term="指南" scheme="http://notes.seirhsiao.com/tags/%E6%8C%87%E5%8D%97/"/>
    
      <category term="hexo" scheme="http://notes.seirhsiao.com/tags/hexo/"/>
    
      <category term="plguin" scheme="http://notes.seirhsiao.com/tags/plguin/"/>
    
  </entry>
  
  <entry>
    <title>使用 gulp 压缩 hexo 静态资源</title>
    <link href="http://notes.seirhsiao.com/posts/d326277f/"/>
    <id>http://notes.seirhsiao.com/posts/d326277f/</id>
    <published>2019-12-02T03:00:56.643Z</published>
    <updated>2019-12-07T01:06:47.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-gulp-压缩-hexo-静态资源"><a href="#使用-gulp-压缩-hexo-静态资源" class="headerlink" title="使用 gulp 压缩 hexo 静态资源"></a>使用 gulp 压缩 hexo 静态资源</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前两天把博客托管到 Coding，相比以前放在 Github 访问速度有了不错的提升。</p><p>今天休息没事，想着再优化下，查看页面源码发现代码未压缩，于是到 Hexo 插件库看了下，找到个 <a href="https://github.com/unhealthy/hexo-all-minifier" target="_blank" rel="external nofollow noreferrer noopener">hexo-all-minifier </a>，但是我安装下来一直报错，搜索过程中找到基于 gulp 的几个压缩插件，马上试试。</p><h3 id="关于-gulp"><a href="#关于-gulp" class="headerlink" title="关于 gulp"></a>关于 gulp</h3><blockquote><p>gulp 的官方定义非常简洁：基于文件流的构建系统。</p></blockquote><blockquote><p><strong>#说人话系列#</strong>：gulp 是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成。</p></blockquote><h3 id="安装-gulp-及相关插件"><a href="#安装-gulp-及相关插件" class="headerlink" title="安装 gulp 及相关插件"></a>安装 gulp 及相关插件</h3><p>主要安装以下几个：</p><ul><li>基本：<a href="https://www.npmjs.com/package/gulp" target="_blank" rel="external nofollow noreferrer noopener">gulp</a></li><li>CSS 压缩：<a href="https://github.com/scniro/gulp-clean-css" target="_blank" rel="external nofollow noreferrer noopener">gulp-clean-css</a> （原名 gulp-minify-css）</li><li>JS 压缩：<a href="https://www.npmjs.com/package/gulp-uglify" target="_blank" rel="external nofollow noreferrer noopener">gulp-uglify</a></li><li>HTML 压缩：<a href="https://www.npmjs.com/package/gulp-htmlmin" target="_blank" rel="external nofollow noreferrer noopener">gulp-htmlmin</a> , <a href="https://www.npmjs.com/package/gulp-htmlclean" target="_blank" rel="external nofollow noreferrer noopener">gulp-htmlclean</a></li><li>图片压缩：<a href="https://www.npmjs.com/package/gulp-imagemin" target="_blank" rel="external nofollow noreferrer noopener">gulp-imagemin</a></li></ul><h4 id="1、全局安装gulp"><a href="#1、全局安装gulp" class="headerlink" title="1、全局安装gulp"></a>1、全局安装gulp</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看版本</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">gulp -v</span></pre></td></tr></tbody></table></figure><h4 id="2、安装gulp插件"><a href="#2、安装gulp插件" class="headerlink" title="2、安装gulp插件"></a>2、安装gulp插件</h4><blockquote><p> 在站点根目录下安装 </p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install gulp-clean-css gulp-uglify gulp-htmlmin gulp-imagemin gulp-htmlclean gulp --save</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">### 简单版</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">npm install gulp --save</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">npm install gulp-minify-css --save</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">npm install gulp-uglify --save</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">npm install gulp-htmlmin --save</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">npm install gulp-htmlclean --save</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">npm install gulp-imagemin --save</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 详细版</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">npm install gulp@next -g <span class="comment"># gulp4.0 因为 gulp-debug 需要 gulp 版本大于等于 4.0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">npm install –save-dev gulp-debug</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">npm install –save-dev gulp-clean-css</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">npm install –save-dev gulp-uglify</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">npm install –save-dev gulp-htmlmin</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">npm install –save-dev gulp-htmlclean</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">npm install –save-dev gulp-imagemin</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">npm install –save-dev gulp-changed</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">npm install –save-dev gulp-if</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">npm install –save-dev gulp-plumber</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">npm install –save-dev run-sequence</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">npm install –save-dev del</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解决【Gulp打包问题】 GulpUglifyError: unable to minify JavaScript</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解决 gulp-uglify 压缩JavaScript 不兼容 es5 语法的问题</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">npm install babel-core@6.26.3 --save</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">npm install gulp-babel@7.0.1 --save</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">npm install babel-preset-es2015@6.24.1 --save</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># gulp-babel 取消严格模式方法("use strict")</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">npm install gulp-remove-use-strict --save</span></pre></td></tr></tbody></table></figure><blockquote><p> 问题：如果安装<code>gulp-imagemin</code>错误请执行以下语句 <code>sudo npm i gulp-imagemin --unsafe-perms</code> </p></blockquote><p>安装完成后打开 <code>hexo</code> 目录下的 <code>package.json</code> 文件，查看是否安装了上述插件，比如我的：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  "name": "hexo-site",</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  "version": "0.0.0",</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  "private": true,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  "hexo": {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    "version": "3.2.0"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  },</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  "dependencies": {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    "gulp": "^3.9.1",</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    "gulp-clean-css": "^2.0.11",</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    "gulp-htmlclean": "^2.7.6",</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    "gulp-htmlmin": "^2.0.0",</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    "gulp-imagemin": "^3.0.1",</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    "gulp-uglify": "^1.5.4",</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    "hexo": "^3.2.0",</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    "hexo-deployer-git": "^0.1.0",</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    "hexo-generator-archive": "^0.1.4",</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    "hexo-generator-category": "^0.1.3",</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    "hexo-generator-index": "^0.2.0",</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    "hexo-generator-tag": "^0.2.0",</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    "hexo-renderer-ejs": "^0.2.0",</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    "hexo-renderer-marked": "^0.2.10",</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    "hexo-renderer-stylus": "^0.3.1",</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    "hexo-server": "^0.2.0"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h4 id="3、创建gulpfile-js文件"><a href="#3、创建gulpfile-js文件" class="headerlink" title="3、创建gulpfile.js文件"></a>3、创建<code>gulpfile.js</code>文件</h4><p><code>hexo</code> 同级目录下新建文件 <code>gulpfile.js</code>，编辑内容如下，适当修改路径。</p><p>比如图片等附件我一直沿用以前使用 WordPress 留下来的 <code>uploads</code> 目录。</p><p>其余的插件设置已经在注释中，所有使用说明来自 <a href="http://www.ydcss.com/archives/category/构建工具" target="_blank" rel="external nofollow noreferrer noopener">一点</a> 博客的构建工具分类下文章。</p><blockquote><p> 在 Hexo 站点下新建<code>gulpfile.js</code>文件，文件内容如下： </p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp        = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> debug       = <span class="built_in">require</span>(<span class="string">'gulp-debug'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cleancss    = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>); <span class="comment">//css压缩组件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minifycss   = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uglify      = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);    <span class="comment">//js压缩组件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> htmlmin     = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);   <span class="comment">//html压缩组件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> htmlclean   = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>); <span class="comment">//html清理组件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> imagemin    = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);  <span class="comment">//图片压缩组件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> changed     = <span class="built_in">require</span>(<span class="string">'gulp-changed'</span>);   <span class="comment">//文件更改校验组件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);           <span class="comment">// gulp-babel 取消严格模式方法("use strict")</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> removeUseStrict = <span class="built_in">require</span>(<span class="string">"gulp-remove-use-strict"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulpif      = <span class="built_in">require</span>(<span class="string">'gulp-if'</span>)         <span class="comment">//任务 帮助调用组件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> plumber     = <span class="built_in">require</span>(<span class="string">'gulp-plumber'</span>);   <span class="comment">//容错组件（发生错误不跳出任务，并报出错误内容）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> runSequence = <span class="built_in">require</span>(<span class="string">'run-sequence'</span>);   <span class="comment">//异步执行组件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isScriptAll = <span class="literal">true</span>;  <span class="comment">//是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isDebug     = <span class="literal">true</span>;  <span class="comment">//是否调试显示 编译通过的文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> del         = <span class="built_in">require</span>(<span class="string">'del'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Hexo        = <span class="built_in">require</span>(<span class="string">'hexo'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hexo        = <span class="keyword">new</span> Hexo(process.cwd(), {}); <span class="comment">// 初始化一个hexo对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清除public文件夹</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> del([<span class="string">'public/**/*'</span>]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">});</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建静态页面 （等同 hexo generate）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'generate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> hexo.call(<span class="string">'generate'</span>, {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">            watch: <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        }).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> hexo.exit();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        }).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> hexo.exit(err);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        });</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    });</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">});</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动Hexo服务器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'server'</span>,  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> hexo.call(<span class="string">'server'</span>, {});</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">    }).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(err);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">    });</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">});</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 部署到服务器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'deploy'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> hexo.call(<span class="string">'deploy'</span>, {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">            watch: <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">        }).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> hexo.exit();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">        }).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> hexo.exit(err);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">        });</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">    });</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">});</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 压缩 public 目录下的css文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'compressCss'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> option = {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">        rebase: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//advanced: true,               //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">        compatibility: <span class="string">'ie7'</span>,         <span class="comment">//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//keepBreaks: true,             //类型：Boolean 默认：false [是否保留换行]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//keepSpecialComments: '*'      //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./public/**/*.css'</span>,<span class="string">'!./public/**/*.min.css'</span>])  <span class="comment">//排除min的css</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">'./public'</span>)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">        .pipe(gulpif(isDebug,debug({<span class="attr">title</span>: <span class="string">'Compress CSS:'</span>})))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">        .pipe(plumber())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">        .pipe(minifycss({</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">           advanced: <span class="literal">true</span>,<span class="comment">//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">           compatibility: <span class="string">'ie7'</span>,<span class="comment">//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">           keepBreaks: <span class="literal">true</span>,<span class="comment">//类型：Boolean 默认：false [是否保留换行]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">           keepSpecialComments: <span class="string">'*'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">           <span class="comment">//保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">        }))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//.pipe(cleancss(option))</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">});</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 压缩public目录下的html文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'compressHtml'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line">});</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 压缩 public 目录下的html文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">93</span></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">94</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> cleanOptions = {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">95</span></pre></td><td class="code"><pre><span class="line">          protect: <span class="regexp">/&lt;\!--%fooTemplate\b.*?%--&gt;/g</span>,             <span class="comment">//忽略处理</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">96</span></pre></td><td class="code"><pre><span class="line">          unprotect: <span class="regexp">/&lt;script [^&gt;]*\btype="text\/x-handlebars-template"[\s\S]+?&lt;\/script&gt;/ig</span> <span class="comment">//特殊处理</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">97</span></pre></td><td class="code"><pre><span class="line">      }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">98</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">var</span> minOption = {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">99</span></pre></td><td class="code"><pre><span class="line">          collapseWhitespace: <span class="literal">true</span>,           <span class="comment">//压缩HTML</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">100</span></pre></td><td class="code"><pre><span class="line">          collapseBooleanAttributes: <span class="literal">true</span>,    <span class="comment">//省略布尔属性的值  &lt;input checked="true"/&gt; ==&gt; &lt;input /&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">101</span></pre></td><td class="code"><pre><span class="line">          removeEmptyAttributes: <span class="literal">true</span>,        <span class="comment">//删除所有空格作属性值    &lt;input id="" /&gt; ==&gt; &lt;input /&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">102</span></pre></td><td class="code"><pre><span class="line">          removeScriptTypeAttributes: <span class="literal">true</span>,   <span class="comment">//删除&lt;script&gt;的type="text/javascript"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">103</span></pre></td><td class="code"><pre><span class="line">          removeStyleLinkTypeAttributes: <span class="literal">true</span>,<span class="comment">//删除&lt;style&gt;和&lt;link&gt;的type="text/css"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">104</span></pre></td><td class="code"><pre><span class="line">          removeComments: <span class="literal">true</span>,               <span class="comment">//清除HTML注释</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">105</span></pre></td><td class="code"><pre><span class="line">          minifyJS: <span class="literal">true</span>,                     <span class="comment">//压缩页面JS</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">106</span></pre></td><td class="code"><pre><span class="line">          minifyCSS: <span class="literal">true</span>,                    <span class="comment">//压缩页面CSS</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">107</span></pre></td><td class="code"><pre><span class="line">          minifyURLs: <span class="literal">true</span>                    <span class="comment">//替换页面URL</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">108</span></pre></td><td class="code"><pre><span class="line">      };</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">109</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">110</span></pre></td><td class="code"><pre><span class="line">    .pipe(gulpif(isDebug,debug({<span class="attr">title</span>: <span class="string">'Compress HTML:'</span>})))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">111</span></pre></td><td class="code"><pre><span class="line">    .pipe(plumber())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">112</span></pre></td><td class="code"><pre><span class="line">    .pipe(htmlclean(cleanOptions))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">113</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//.pipe(htmlmin(minOption))</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">114</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//.pipe(htmlclean())</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">115</span></pre></td><td class="code"><pre><span class="line">    .pipe(htmlmin({</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">116</span></pre></td><td class="code"><pre><span class="line">        removeComments: <span class="literal">true</span>,<span class="comment">//清除 HTML 注释</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">117</span></pre></td><td class="code"><pre><span class="line">        collapseWhitespace: <span class="literal">true</span>,<span class="comment">//压缩 HTML</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">118</span></pre></td><td class="code"><pre><span class="line">        collapseBooleanAttributes: <span class="literal">true</span>,<span class="comment">//省略布尔属性的值 &lt;input checked="true"/&gt; ==&gt; &lt;input /&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">119</span></pre></td><td class="code"><pre><span class="line">        removeEmptyAttributes: <span class="literal">true</span>,<span class="comment">//删除所有空格作属性值 &lt;input id="" /&gt; ==&gt; &lt;input /&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">120</span></pre></td><td class="code"><pre><span class="line">        removeScriptTypeAttributes: <span class="literal">true</span>,<span class="comment">//删除 &lt;script&gt; 的 type="text/javascript"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">121</span></pre></td><td class="code"><pre><span class="line">        removeStyleLinkTypeAttributes: <span class="literal">true</span>,<span class="comment">//删除 &lt;style&gt; 和 &lt;link&gt; 的 type="text/css"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">122</span></pre></td><td class="code"><pre><span class="line">        minifyJS: <span class="literal">true</span>,<span class="comment">//压缩页面 JS</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">123</span></pre></td><td class="code"><pre><span class="line">        minifyCSS: <span class="literal">true</span><span class="comment">//压缩页面 CSS</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">124</span></pre></td><td class="code"><pre><span class="line">    }))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">125</span></pre></td><td class="code"><pre><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">126</span></pre></td><td class="code"><pre><span class="line">});</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">127</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">128</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 压缩 public 目录下的js文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">129</span></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">130</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> option = {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">131</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// preserveComments: 'all',//保留所有注释</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">132</span></pre></td><td class="code"><pre><span class="line">        mangle: <span class="literal">true</span>,           <span class="comment">//类型：Boolean 默认：true 是否修改变量名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">133</span></pre></td><td class="code"><pre><span class="line">        compress: <span class="literal">true</span>          <span class="comment">//类型：Boolean 默认：true 是否完全压缩</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">134</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">135</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./public/**/*.js'</span>, <span class="string">'!./public/**/*.min.js'</span>])<span class="comment">//排除min的js</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">136</span></pre></td><td class="code"><pre><span class="line">        .pipe(babel({</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">137</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">//将ES6代码转译为可执行的JS代码</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">138</span></pre></td><td class="code"><pre><span class="line">            presets: [<span class="string">'es2015'</span>] <span class="comment">// es5检查机制</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">139</span></pre></td><td class="code"><pre><span class="line">        }))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">140</span></pre></td><td class="code"><pre><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">'./public'</span>)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">141</span></pre></td><td class="code"><pre><span class="line">        .pipe(gulpif(isDebug,debug({<span class="attr">title</span>: <span class="string">'Compress JS:'</span>})))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">142</span></pre></td><td class="code"><pre><span class="line">        .pipe(plumber())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">143</span></pre></td><td class="code"><pre><span class="line">        .pipe(uglify())         <span class="comment">//调用压缩组件方法uglify(),对合并的文件进行压缩</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">144</span></pre></td><td class="code"><pre><span class="line">        .pipe(removeUseStrict()) <span class="comment">//取消严格模式方法("use strict")</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">145</span></pre></td><td class="code"><pre><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>)); <span class="comment">//输出到目标目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">146</span></pre></td><td class="code"><pre><span class="line">    done();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">147</span></pre></td><td class="code"><pre><span class="line">});</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">148</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">149</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">150</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 压缩 public/images 目录内图片(Version&lt;3)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">151</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulp.task('minify-images', function () {</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">152</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//     gulp.src('./public/images/**/*.*')</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">153</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//         .pipe(imagemin({</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">154</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//             optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">155</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//             progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">156</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//             interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">157</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//             multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">158</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//         }))</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">159</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//         .pipe(gulp.dest('./public/images'));</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">160</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// });</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">161</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">162</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">163</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 压缩 public/uploads 目录内图片</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">164</span></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'minify-uploads'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">165</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> option = {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">166</span></pre></td><td class="code"><pre><span class="line">        optimizationLevel: <span class="number">5</span>, <span class="comment">//类型：Number  默认：3  取值范围：0-7（优化等级）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">167</span></pre></td><td class="code"><pre><span class="line">        progressive: <span class="literal">true</span>,    <span class="comment">//类型：Boolean 默认：false 无损压缩jpg图片</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">168</span></pre></td><td class="code"><pre><span class="line">        interlaced: <span class="literal">false</span>,    <span class="comment">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">169</span></pre></td><td class="code"><pre><span class="line">        multipass: <span class="literal">false</span>      <span class="comment">//类型：Boolean 默认：false 多次优化svg直到完全优化</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">170</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">171</span></pre></td><td class="code"><pre><span class="line">    gulp.src(<span class="string">'./public/uploads/**/*.*'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">172</span></pre></td><td class="code"><pre><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">'./public/uploads'</span>)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">173</span></pre></td><td class="code"><pre><span class="line">        .pipe(gulpif(isDebug,debug({<span class="attr">title</span>: <span class="string">'Compress Images:'</span>})))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">174</span></pre></td><td class="code"><pre><span class="line">        .pipe(plumber())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">175</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//.pipe(imagemin(option))</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">176</span></pre></td><td class="code"><pre><span class="line">        .pipe(imagemin({</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">177</span></pre></td><td class="code"><pre><span class="line">           optimizationLevel: <span class="number">5</span>, <span class="comment">//类型：Number  默认：3  取值范围：0-7（优化等级）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">178</span></pre></td><td class="code"><pre><span class="line">           progressive: <span class="literal">true</span>,    <span class="comment">//类型：Boolean 默认：false 无损压缩jpg图片</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">179</span></pre></td><td class="code"><pre><span class="line">           interlaced: <span class="literal">false</span>,    <span class="comment">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">180</span></pre></td><td class="code"><pre><span class="line">           multipass: <span class="literal">false</span>,     <span class="comment">//类型：Boolean 默认：false 多次优化svg直到完全优化</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">181</span></pre></td><td class="code"><pre><span class="line">        }))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">182</span></pre></td><td class="code"><pre><span class="line">        .pipe(gulp.dest(<span class="string">'./public/uploads'</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">183</span></pre></td><td class="code"><pre><span class="line">});</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">184</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">185</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 压缩 public/images 目录内图片(Version&gt;3)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">186</span></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'minify-images'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">187</span></pre></td><td class="code"><pre><span class="line">    gulp.src(<span class="string">'./public/images/**/*.*'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">188</span></pre></td><td class="code"><pre><span class="line">        .pipe(imagemin([</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">189</span></pre></td><td class="code"><pre><span class="line">            imagemin.gifsicle({<span class="attr">interlaced</span>: <span class="literal">true</span>}),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">190</span></pre></td><td class="code"><pre><span class="line">            imagemin.jpegtran({<span class="attr">progressive</span>: <span class="literal">true</span>}),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">191</span></pre></td><td class="code"><pre><span class="line">            imagemin.optipng({<span class="attr">optimizationLevel</span>: <span class="number">5</span>}),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">192</span></pre></td><td class="code"><pre><span class="line">            imagemin.svgo({</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">193</span></pre></td><td class="code"><pre><span class="line">                plugins: [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">194</span></pre></td><td class="code"><pre><span class="line">                    {<span class="attr">removeViewBox</span>: <span class="literal">true</span>},</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">195</span></pre></td><td class="code"><pre><span class="line">                    {<span class="attr">cleanupIDs</span>: <span class="literal">false</span>}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">196</span></pre></td><td class="code"><pre><span class="line">                ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">197</span></pre></td><td class="code"><pre><span class="line">            })</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">198</span></pre></td><td class="code"><pre><span class="line">        ]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">199</span></pre></td><td class="code"><pre><span class="line">        .pipe(gulp.dest(<span class="string">'./public/images'</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">200</span></pre></td><td class="code"><pre><span class="line">    done();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">201</span></pre></td><td class="code"><pre><span class="line">});</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">202</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">203</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">204</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.0以前的写法 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">205</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//gulp.task('default', [</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">206</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//  'minify-html', 'minify-css', 'minify-js', 'minify-images'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">207</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//]);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">208</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.0以后的写法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">209</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">210</span></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'default'</span>, gulp.series(gulp.parallel(<span class="string">'minify-html'</span>, <span class="string">'minify-css'</span>, <span class="string">'minify-js'</span>, <span class="string">'minify-images'</span>)), <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">211</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">"----------gulp Finished----------"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">212</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Do something after a, b, and c are finished.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">213</span></pre></td><td class="code"><pre><span class="line">});</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">214</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">215</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用run-sequence并发执行，同时处理html，css，js，img</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">216</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulp.task('compress', function(cb) {</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">217</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//    runSequence.options.ignoreUndefinedTasks = true;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">218</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//    runSequence(['minify-html', 'minify-css', 'minify-js'],cb);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">219</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// });</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">220</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">221</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">222</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulp.task('build', function(cb) {</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">223</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//    runSequence.options.ignoreUndefinedTasks = true;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">224</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//    runSequence('clean', 'generate', 'compress', 'deploy', cb);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">225</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// });</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">226</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">227</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认任务</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">228</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulp.task('default', </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">229</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//gulp.series('clean','generate',</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">230</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//gulp.parallel('minify-html', 'minify-css','minify-image')</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">231</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">232</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// );</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">233</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</span></span></pre></td></tr></tbody></table></figure><h4 id="4、静态资源压缩"><a href="#4、静态资源压缩" class="headerlink" title="4、静态资源压缩"></a>4、静态资源压缩</h4><blockquote><p> 只需要每次在执行 <code>generate</code> 命令后执行 <code>gulp</code> 就可以实现对静态资源的压缩 </p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo g</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">gulp</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">// 或</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">hexo clean</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; gulp</span></pre></td></tr></tbody></table></figure><p><a href="https://clearsky.me/uploads/2016/07/gulp.png" target="_blank" rel="external nofollow noreferrer noopener"><img alt="gulp 执行压缩" data-src="https://clearsky.me/uploads/2016/07/gulp.png" class="lazyload"></a></p><h4 id="5、效果比对"><a href="#5、效果比对" class="headerlink" title="5、效果比对"></a>5、效果比对</h4><p>截取了整个 public 目录 压缩前后大小变化图：</p><p><a href="https://clearsky.me/uploads/2016/07/ysq.png" target="_blank" rel="external nofollow noreferrer noopener"><img alt="压缩前" data-src="https://clearsky.me/uploads/2016/07/ysq.png" class="lazyload"></a><br><a href="https://clearsky.me/uploads/2016/07/ysh.png" target="_blank" rel="external nofollow noreferrer noopener"><img alt="压缩后" data-src="https://clearsky.me/uploads/2016/07/ysh.png" class="lazyload"></a></p><p>貌似压缩得让我不够满意，还是我哪里没弄好。</p><p>不管了，先部署上去看看。</p><figure class="highlight armasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">bash</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword"></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">hexo </span>d</span></pre></td></tr></tbody></table></figure><p>以后生成、压缩、部署也可以连起来。</p><figure class="highlight sas"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">bash</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">hexo g <span class="variable">&amp;&amp;</span> gulp <span class="variable">&amp;&amp;</span> hexo d</span></pre></td></tr></tbody></table></figure><p>完成后查看页面源码，整个页面代码都压缩了，实际打开感觉也是比以前快了点。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.wearewizards.io/migrating-to-gulp-4-by-example" target="_blank" rel="external nofollow noreferrer noopener">通过示例迁移到 gulp 4</a><br><a href="https://segmentfault.com/a/1190000005357048" target="_blank" rel="external nofollow noreferrer noopener">【译】相对完整的 Gulp4 升级指南</a><br><a href="https://blog.csdn.net/jianjianjianjiande/article/details/79048778" target="_blank" rel="external nofollow noreferrer noopener">走进 gulp4 的世界</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用-gulp-压缩-hexo-静态资源&quot;&gt;&lt;a href=&quot;#使用-gulp-压缩-hexo-静态资源&quot; class=&quot;headerlink&quot; title=&quot;使用 gulp 压缩 hexo 静态资源&quot;&gt;&lt;/a&gt;使用 gulp 压缩 hexo 静态资源&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://notes.seirhsiao.com/categories/Hexo/"/>
    
    
      <category term="指南" scheme="http://notes.seirhsiao.com/tags/%E6%8C%87%E5%8D%97/"/>
    
      <category term="hexo" scheme="http://notes.seirhsiao.com/tags/hexo/"/>
    
      <category term="gulp" scheme="http://notes.seirhsiao.com/tags/gulp/"/>
    
      <category term="静态资源" scheme="http://notes.seirhsiao.com/tags/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 加入豆瓣读书页面</title>
    <link href="http://notes.seirhsiao.com/posts/105de8b9/"/>
    <id>http://notes.seirhsiao.com/posts/105de8b9/</id>
    <published>2019-12-02T00:56:31.547Z</published>
    <updated>2019-12-07T01:59:33.215Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo-加入豆瓣读书页面"><a href="#Hexo-加入豆瓣读书页面" class="headerlink" title="Hexo 加入豆瓣读书页面"></a>Hexo 加入豆瓣读书页面</h2><p>在 Hexo 博客个性化定制中，加入豆瓣读书界面是一个很不错的功能。GitHub 上已经有人写好了这个模块：<a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="external nofollow noreferrer noopener">hexo-douban</a>，我们只需要安装模块，然后配置一下就可以了。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>复制</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-douban <span class="comment">--save</span></span></pre></td></tr></tbody></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>将下面的配置写入站点的配置文件<code>_config.yml</code> 里</p><p>复制</p><figure class="highlight applescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">douban:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  user: mythsman</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  builtin: <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  book:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    title: 'This <span class="keyword">is</span> <span class="keyword">my</span> book title'</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="literal">quote</span>: 'This <span class="keyword">is</span> <span class="keyword">my</span> book <span class="literal">quote</span>'</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  movie:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    title: 'This <span class="keyword">is</span> <span class="keyword">my</span> movie title'</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="literal">quote</span>: 'This <span class="keyword">is</span> <span class="keyword">my</span> movie <span class="literal">quote</span>'</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  game:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    title: 'This <span class="keyword">is</span> <span class="keyword">my</span> game title'</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="literal">quote</span>: 'This <span class="keyword">is</span> <span class="keyword">my</span> game <span class="literal">quote</span>'</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">timeout</span>: <span class="number">10000</span></span></pre></td></tr></tbody></table></figure><ul><li>user: 你的豆瓣 ID. 打开豆瓣，登入账户，然后在右上角点击 “个人主页” ，这时候地址栏的 URL 大概是这样：”<code>https://www.douban.com/people/xxxxxx/</code>“，其中的”xxxxxx” 就是你的个人 ID 了。</li><li>builtin: 是否将生成页面的功能嵌入 <code>hexo s</code> 和 <code>hexo g</code> 中，默认是 false, 另一可选项为 true (1.x.x 版本新增配置项)。</li><li>title: 该页面的标题。</li><li>quote: 写在页面开头的一段话，支持 html 语法。</li><li>timeout: 爬取数据的超时时间，默认是 10000ms , 如果在使用时发现报了超时的错 (ETIMEOUT) 可以把这个数据设置的大一点。</li></ul><p>如果只想显示某一个页面 (比如 movie)，那就把其他的配置项注释掉即可。</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>我们只需要在 Git Bash 中输入以下命令：<code>hexo clean &amp;&amp; hexo douban -bgm &amp;&amp; hexo g &amp;&amp; hexo s</code> 即可，注意其中开启 hexo-douban 的命令中，-bgm 代表的是 book、game、movie 三个参数，如果只需要其中的一部分就只带你想要的那些参数。</p><p><strong>注意：由于 hexo douban 的简写也是 hexo d，与 hexo deploy 的简写指令 hexo d 冲突，因此在进行二者部署的时候，只能都打全名而不能打简写形式</strong>。</p><blockquote><ul><li>在 0.x.x 版本中，文章的更新和豆瓣页面的爬取操作是绑定在一起的，无法支持单独更新文章或者单独爬取文章。</li><li>在 1.x.x 版本中，使用 hexo douban 命令即可生成指定页面，如果不加参数，那么默认参数为 - bgm。如果配置了 builtin 参数为 true，那么除了可以使用 hexo douban 命令之外，hexo g 或 hexo s 也内嵌了生成页面的功能。因此，还是按照 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code> 就可以。</li></ul></blockquote><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>上面都没问题之后，我们只需要在站点目录下测试 <code>http://localhost:4000/books</code> 或者 <code>http://localhost:4000/movies</code> 等，如果看到页面了就说明成功了。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>如果上述都没有问题，我们就可以在菜单栏中添加按钮了，打开主题配置文件<code>_config.yml</code>，找到菜单按钮，添加下面内容：</p><p>复制</p><figure class="highlight dts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">  movies:</span> <span class="meta-keyword">/movies/</span> || film</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">  books:</span> <span class="meta-keyword">/books/</span> || book</span></pre></td></tr></tbody></table></figure><p>然后在 <code>next/language/zh-CN.yml</code> 文件中添加对应的中文参数信息：</p><p>复制</p><figure class="highlight dts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">  movies:</span> 观影</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">  books:</span> 阅读</span></pre></td></tr></tbody></table></figure><p>至此，我们就完成了豆瓣读书页面的添加。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://bestzuo.cn/posts/hexo-douban.html" target="_blank" rel="external nofollow noreferrer noopener">在 Hexo 博客中加入豆瓣读书页面</a></li><li><a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="external nofollow noreferrer noopener">hexo-douban</a></li></ul><p>推荐文章</p><ul><li><a href="https://tding.top/archives/12a4e7e6.html" target="_blank" rel="external nofollow noreferrer noopener">Hexo 博客部署到 VPS</a></li><li><a href="https://tding.top/archives/aad98408.html" target="_blank" rel="external nofollow noreferrer noopener">Hexo 搭建个人博客文章汇总</a></li><li><a href="https://tding.top/archives/dd68b70.html" target="_blank" rel="external nofollow noreferrer noopener">Hexo-NexT 增加 canvas 粒子时钟</a></li><li><a href="https://tding.top/archives/761b6f4d.html" target="_blank" rel="external nofollow noreferrer noopener">Hexo-NexT 设置博客背景图片</a></li><li><a href="https://tding.top/archives/ed8b904f.html" target="_blank" rel="external nofollow noreferrer noopener">Hexo-NexT 配置 Valine</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hexo-加入豆瓣读书页面&quot;&gt;&lt;a href=&quot;#Hexo-加入豆瓣读书页面&quot; class=&quot;headerlink&quot; title=&quot;Hexo 加入豆瓣读书页面&quot;&gt;&lt;/a&gt;Hexo 加入豆瓣读书页面&lt;/h2&gt;&lt;p&gt;在 Hexo 博客个性化定制中，加入豆瓣读书界面是一
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://notes.seirhsiao.com/categories/Hexo/"/>
    
    
      <category term="指南" scheme="http://notes.seirhsiao.com/tags/%E6%8C%87%E5%8D%97/"/>
    
      <category term="hexo" scheme="http://notes.seirhsiao.com/tags/hexo/"/>
    
      <category term="douban" scheme="http://notes.seirhsiao.com/tags/douban/"/>
    
      <category term="豆瓣" scheme="http://notes.seirhsiao.com/tags/%E8%B1%86%E7%93%A3/"/>
    
  </entry>
  
  <entry>
    <title>添加Windows Terminal到鼠标右键菜单</title>
    <link href="http://notes.seirhsiao.com/posts/c621cf12/"/>
    <id>http://notes.seirhsiao.com/posts/c621cf12/</id>
    <published>2019-11-10T16:16:06.000Z</published>
    <updated>2019-12-07T01:26:57.096Z</updated>
    
    <content type="html"><![CDATA[<p>Windows上有很多命令行程序，例如CMD和PowerShell。微软在Build 2019上推出了一款面向Windows10的命令行程序，这款程序集合了Windows上的PowerShell、CMD以及Windows Subsystem for Linux于一身，解决了不少惹人吐槽的毛病，甚至被称为Windows下命令体验的救世主。而我早在Preview版发布时，就已经下载使用，现在也是我主要使用的命令行工具。然而毕竟现在还是体验版的关系，所以并没有集成在右键菜单上。在搜索了许久之后，终于在Github上找到了安装方法。</p><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p> Windows Terminal 现在还是 Preview 状态，我们可以在 Microsoft Store 上下载安装。当然有能力的人，可以下载Github的代码自己编译。</p><p><a href="https://www.microsoft.com/zh-cn/p/windows-terminal-preview/9n0dx20hk701?activetab=pivot:overviewtab" target="_blank" rel="external nofollow noreferrer noopener">Windows Terminal (Preview) - Microsoft Store</a></p><p><a href="https://github.com/microsoft/terminal" target="_blank" rel="external nofollow noreferrer noopener">GitHub - microsoft/terminal: The new Windows Terminal, and the original Windows console host - all in the same place!</a></p><h2 id="添加-Windows-Terminal-到右键菜单"><a href="#添加-Windows-Terminal-到右键菜单" class="headerlink" title="添加 Windows Terminal 到右键菜单"></a>添加 Windows Terminal 到右键菜单</h2><h3 id="测试变量"><a href="#测试变量" class="headerlink" title="测试变量"></a>测试变量</h3><p>下面的两个变量后面的操作需要使用到。所以，先测试下是否正常。</p><figure class="highlight dos"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">%USERPROFILE%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">%LOCALAPPDATA%</span></span></pre></td></tr></tbody></table></figure><p>如果有报错，接下来的操作，请把对应的部分进行替换。</p><p><code>%USERPROFILE%</code> 替换成 <code>C:\Users\[userName]</code><br><code>%LOCALAPPDATA%</code> 替换成 <code>C:\Users\[userName]\AppData\Local</code></p><p><strong>注意</strong> <code>[userName]</code>为自己的用户名</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/Windows_Terminal_var_test.png" class="lazyload"></p><h3 id="创建图标"><a href="#创建图标" class="headerlink" title="创建图标"></a>创建图标</h3><p>从以下地址下载图标</p><p><a href="https://raw.githubusercontent.com/yanglr/WindowsDevTools/master/awosomeTerminal/icons/wt_32.ico" target="_blank" rel="external nofollow noreferrer noopener">图标ico下载</a> ， 打开网址，鼠标右键保存到电脑。</p><p>打开命令行，输入</p><figure class="highlight taggerscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mkdir "<span class="variable">%USERPROFILE%</span><span class="symbol">\A</span>ppData<span class="symbol">\L</span>ocal<span class="symbol">\t</span>erminal"</span></pre></td></tr></tbody></table></figure><p>这个命令是创建一个<code>terminal</code>文件夹，把下载的图标ico复制到这个文件夹。</p><h3 id="写入注册表"><a href="#写入注册表" class="headerlink" title="写入注册表"></a>写入注册表</h3><p>创建一个txt文档，并把档后缀改为<code>reg</code>。文档的名字可自己创建，后缀名不可以错。右键菜单出现<code>Windows Terminal</code>有两种方法。一种是按<code>shift</code>+ <code>右键</code>,另一种是直接<code>右键</code>。</p><h4 id="shift-右键"><a href="#shift-右键" class="headerlink" title="shift+ 右键"></a><code>shift</code>+ <code>右键</code></h4><p>把下面的内容复制到reg去</p><figure class="highlight taggerscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">[HKEY_CLASSES_ROOT<span class="symbol">\D</span>irectory<span class="symbol">\B</span>ackground<span class="symbol">\s</span>hell<span class="symbol">\w</span>t]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">@="Windows Terminal"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">"Icon"="<span class="variable">%USERPROFILE%</span><span class="symbol">\\</span>AppData<span class="symbol">\\</span>Local<span class="symbol">\\</span>terminal<span class="symbol">\\</span>wt_32.ico"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">"Extended"=""</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">[HKEY_CLASSES_ROOT<span class="symbol">\D</span>irectory<span class="symbol">\B</span>ackground<span class="symbol">\s</span>hell<span class="symbol">\w</span>t<span class="symbol">\c</span>ommand]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">@="C:<span class="symbol">\\</span>Users<span class="symbol">\\</span>[user_name]<span class="symbol">\\</span>AppData<span class="symbol">\\</span>Local<span class="symbol">\\</span>Microsoft<span class="symbol">\\</span>WindowsApps<span class="symbol">\\</span>wt.exe"</span></pre></td></tr></tbody></table></figure><p><strong>注意</strong>：请把<code>[user_name]</code>改成自己电脑的用户名</p><h4 id="右键"><a href="#右键" class="headerlink" title="右键"></a>右键</h4><p>把下面的内容复制到reg去</p><figure class="highlight taggerscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">[HKEY_CLASSES_ROOT<span class="symbol">\D</span>irectory<span class="symbol">\B</span>ackground<span class="symbol">\s</span>hell<span class="symbol">\w</span>t]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">@="Windows terminal here"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">"Icon"="<span class="variable">%USERPROFILE%</span><span class="symbol">\\</span>AppData<span class="symbol">\\</span>Local<span class="symbol">\\</span>terminal<span class="symbol">\\</span>wt_32.ico"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">[HKEY_CLASSES_ROOT<span class="symbol">\D</span>irectory<span class="symbol">\B</span>ackground<span class="symbol">\s</span>hell<span class="symbol">\w</span>t<span class="symbol">\c</span>ommand]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">@="C:<span class="symbol">\\</span>Users<span class="symbol">\\</span>[user_name]<span class="symbol">\\</span>AppData<span class="symbol">\\</span>Local<span class="symbol">\\</span>Microsoft<span class="symbol">\\</span>WindowsApps<span class="symbol">\\</span>wt.exe"</span></pre></td></tr></tbody></table></figure><p><strong>注意</strong>：请把<code>[user_name]</code>改成自己电脑的用户名</p><h3 id="修改Windows-Terminal的profile-json"><a href="#修改Windows-Terminal的profile-json" class="headerlink" title="修改Windows Terminal的profile.json"></a>修改<code>Windows Terminal</code>的<code>profile.json</code></h3><p>打开<code>profile.json</code></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/Windows_Terminal_setting.png" class="lazyload"></p><p>把<code>startingDirectory</code>改为<code>null</code>,没有的自己创建一个。</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/Windows_Terminal.setting_edit.png" class="lazyload"></p><p>照着上面的方法操作，相信右键菜单已经出现<code>Windows Terminal</code>的入口了。</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/Windows_Terminal_right_menu.png" class="lazyload"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://github.com/microsoft/terminal/issues/1060#issuecomment-497539461" target="_blank" rel="external nofollow noreferrer noopener">‘Add “open Windows terminal here” into right-click context menu’ 下  yanglr 的回答</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      添加Windows Terminal到鼠标右键菜单
    
    </summary>
    
    
      <category term="教程" scheme="http://notes.seirhsiao.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Windows" scheme="http://notes.seirhsiao.com/categories/%E6%95%99%E7%A8%8B/Windows/"/>
    
    
      <category term="Windows" scheme="http://notes.seirhsiao.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>调研实现高性能动画</title>
    <link href="http://notes.seirhsiao.com/posts/845ade13/"/>
    <id>http://notes.seirhsiao.com/posts/845ade13/</id>
    <published>2019-10-24T15:32:19.000Z</published>
    <updated>2019-12-07T00:55:35.009Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>本文转载自<a href="https://relign.github.io/Animation/animation-optimize/" target="_blank" rel="external nofollow noreferrer noopener">【总结】调研实现高性能动画</a></p>          </div><blockquote><p>本文是调研如何实现高性能动画, 提升用户体验的总结, 文章内容来源于对看过的相关技术文章的总结, 相关技术文章已列到文章末尾, 如有遗漏, 敬请谅解.</p></blockquote><p>快速响应和高度交互的页面往往能够吸引大量的用户羣体. 相反, 如果页面存在性能低下的动画, 动画不流畅, 动画过程中页面闪烁等等, 如此粗糙的交互体验必然丧失用户量.</p><p>对于大多数的设备而言, 屏幕以 60 次每秒的频率刷新, 即<code>60HZ</code>. 如果一个动画中的某些帧超过了这个时间, 就会导致浏览器的刷新频率跟不上设备的刷新频率（跳帧现象）, 出现页面闪烁. 因此, 高性能的动画都应该保持在<code>60fps</code>左右.</p><p>接下来我们看几种动画的实现方式.</p><h3 id="基于setTimeout或者setInterval实现的动画"><a href="#基于setTimeout或者setInterval实现的动画" class="headerlink" title="基于setTimeout或者setInterval实现的动画"></a>基于<code>setTimeout</code>或者<code>setInterval</code>实现的动画</h3><h4 id="基于帧算法实现的动画"><a href="#基于帧算法实现的动画" class="headerlink" title="基于帧算法实现的动画"></a>基于帧算法实现的动画</h4><iframe height="471" scrolling="no" title="rWeGoX" src="//codepen.io/relign/embed/rWeGoX/?height=471&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;"><p>这是一个基于帧算法实现的 JavaScript 动画, 这里设置的每秒钟更新 60 次, 即<code>60fps</code>. 大家可以看到现在的动画还是非常流畅的. 动画的帧率也在 60 附近.</p><p>但是由于 JavaScript 运行时需要耗费时间, 而 JavaScript 又是单线程的, 所以如果一个定时器如果比较耗时的话, 是会阻塞下一个定时器的执行. 所以即使你这里设置了<code>1000 / 60</code>每秒<code>60帧</code>的帧率, 在不同的浏览器平台的差异也会导致实际上你的没有<code>60fps</code>的帧率.</p><p>所以上面代码在一个手机上执行的时候可能有<code>60fps</code>的帧率, 在另外一个手机上可能就只有<code>30fps</code>, 更甚可能只有<code>10fps</code>.</p><p>我们去模拟一下这几个帧率下的动画:</p><iframe height="710" scrolling="no" title="xRVXyG" src="//codepen.io/relign/embed/xRVXyG/?height=710&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;"></iframe><p>很明显产生的交互效果是不符合预期的. 导致这种情况的原因很简单, 因为我们计算和绘制每个<code>div</code>位置的时候是在每帧更新, 每帧移动<code>2px</code>. 在<code>60fps</code>的情况下, 我们 1 秒钟会执行<code>60帧</code>, 所以小块每秒钟会移动<code>60 * 2 = 120px</code>; 如果是<code>30fps</code>, 小块每秒就移动<code>30 * 2 = 60px</code>, 以此类推<code>10fps</code>就是每秒移动<code>20px</code>. 三个小块在单位时间内移动的距离不一样.</p><h4 id="基于时间算法实现的动画"><a href="#基于时间算法实现的动画" class="headerlink" title="基于时间算法实现的动画"></a>基于时间算法实现的动画</h4><p>针对于这种情况, 我们对其作出改进. 我们不再以帧为基准来更新方块的位置, 而是以时间为单位更新. 也就是说, 我们之前是<code>px/frame</code>, 现在换成<code>px/ms</code>.</p><iframe height="602" scrolling="no" title="XNdVEE" src="//codepen.io/relign/embed/XNdVEE/?height=602&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;"></iframe><p>在这里, 我们先确定一个固定更新的时间片, 如固定为<code>60fps</code>时一帧的时间:<code>1000 / 60 = 0.167ms</code>. 然后积累过去的时间, 然后根据固定时间片分片进行更新. 也就说, 即使这一帧和上一帧相差过去了<code>100ms</code>, 我也会把这 100ms 分成很多个<code>0.167ms</code>来执行<code>update</code>函数. 这样做有两个好处:</p><ul><li>固定的时间片足够小，更新的时候可以减少动画失帧</li><li>不同帧率, 不管你是<code>60</code>,<code>30</code>, 还是<code>10fps</code>, 也是根据固定时间片来执行 update 函数, 所以即使有损失, 不同帧率之间的损失是一样的. 那么我们三个方块就可以达到同步移动的效果的了!</li></ul><h4 id="基于setTimeout或者setInterval实现动画存在的问题"><a href="#基于setTimeout或者setInterval实现动画存在的问题" class="headerlink" title="基于setTimeout或者setInterval实现动画存在的问题"></a>基于<code>setTimeout</code>或者<code>setInterval</code>实现动画存在的问题</h4><p>使用<code>setTimeout</code>和<code>setInterval</code>来绘制动画, 计算延时的精确度是不够的.</p><p>延时的计算依靠的是浏览器的内置时钟, 而时钟的精确度又取决于时钟更新的频率. 不同版本的浏览器, 这个频率是不一样的: IE8 及其之前的 IE 版本更新间隔为 15.6 毫秒, 最新版的 Chrome 与 IE9 + 浏览器的更新频率都为 4ms. 而且如果你使用的是笔记本电脑, 并且在使用电池而非电源的模式下, 为了节省资源, 浏览器会将更新频率切换至于系统时间相同, 更新频率更低.</p><p>而另外一个问题, 使用<code>setTimeout</code>和<code>setInterval</code>, 需要面临异步队列问题. 因为异步关系,<code>setTimeout</code>和<code>setInterval</code>中回调函数并非立即执行. 而是需要加入等待队列中. 但问题是, 如果在等待延迟触发的过程中, 有新的同步脚本需要执行, 那么同步脚本不会排在回调之后, 而是立即执行.</p><p>例如:</p><iframe height="391" scrolling="no" title="jVqYXw" src="//codepen.io/relign/embed/jVqYXw/?height=391&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;"></iframe><p>很显然, 这样的动画交互体验是不可控的.</p><h3 id="基于requestAnimationFrame实现的动画"><a href="#基于requestAnimationFrame实现的动画" class="headerlink" title="基于requestAnimationFrame实现的动画"></a>基于<code>requestAnimationFrame</code>实现的动画</h3><p>针对<code>setTimeout</code>和<code>setInterval</code>实现动画存在的缺陷,<code>Mozilla</code>首先推出了<code>mozRequestAnimationFrame</code>, 通过它告诉浏览器某些 JavaScript 代码将要执行动画, 这样浏览器可以在运行某些代码后进行适当的优化. 之后,<code>Chrome</code>和<code>IE10+</code>也都给出了自己的实现,<code>webkitRequestAnimationFrame</code>和<code>msRequestAnimationFrame</code>. 后来随着<code>HTML5</code>新的 API 发布,<code>requestAnimationFrame</code>被正式推出.</p><p>官方定义:</p><blockquote><p>window.requestAnimationFrame() 这个方法是用来在页面重绘之前, 通知浏览器调用一个指定的函数, 以满足开发者操作动画的需求. 这个方法接受一个函数为参, 该函数会在重绘前调用.</p></blockquote><p>注意: 如果想得到连贯的逐帧动画, 函数中必须重新调用 <code>requestAnimationFrame()</code>.</p><iframe height="371" scrolling="no" title="qqZxqW" src="//codepen.io/relign/embed/qqZxqW/?height=371&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;"></iframe><p><code>requestAnimationFrame</code>最大的好处在于可以可以避免浏览器不必要的重绘. 想要理解这个好处, 我们首先需要简单了解一下浏览器的渲染过程.</p><h3 id="浏览器渲染过程"><a href="#浏览器渲染过程" class="headerlink" title="浏览器渲染过程"></a>浏览器渲染过程</h3><p>要实现一个高性能的动画, 首选我们必须对浏览器的渲染机制有所了解:</p><blockquote><p>更加详细的渲染过程解读详见<a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/" target="_blank" rel="external nofollow noreferrer noopener">浏览器的工作原理：新式网络浏览器幕后揭祕</a></p></blockquote><p>Chrome 渲染过程:<br><img alt="webkitflow.png" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/webkitflow.png" class="lazyload"></p><p>从图中可以看出, 浏览在渲染页面过程中依次经历了:</p><ol><li>HTML Parse(html 解析)</li><li>Calculate Style(计算样式)</li><li>Layout(布局)</li><li>Rasterizer(光栅化)</li><li>Paint(绘制)</li><li>Composite Layers(渲染层合并)</li></ol><h4 id="HTML-Parser"><a href="#HTML-Parser" class="headerlink" title="HTML Parser"></a>HTML Parser</h4><p>发送<code>http</code>请求, 获取请求内容, 然后解析 HTML 的过程. 更加详细的可以看这里 <a href="https://github.com/alex/what-happens-when" target="_blank" rel="external nofollow noreferrer noopener">What happens when…</a> 以及对应的翻译文档<a href="https://github.com/skyline75489/what-happens-when-zh_CN" target="_blank" rel="external nofollow noreferrer noopener">当 ··· 时发生了什么?</a></p><h4 id="Calculate-Style"><a href="#Calculate-Style" class="headerlink" title="Calculate Style"></a>Calculate Style</h4><p>即计算样式.</p><p>Calculate 被触发的时候做的事情就是处理 JavaScript 给元素设置的样式. 此时 Recalculate Style 会计算 Render 树 (渲染树), 然后从根节点开始进行页面渲染, 将 CSS 附加到 DOM 上的过程.</p><p>这个过程是根据 CSS 选择器, 对每个 DOM 元素匹配对应的 CSS 样式. 这一步结束之后, 就确定了每个 DOM 元素上应该应用什么 CSS 样式规则.</p><p><strong>任何企图改变元素样式的操作都会触发 Recalculate(重新计算样式)</strong>. 同 Layout 一样, 它们都是 JavaScript 执行完后才触发的.</p><h4 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h4><p>计算页面上的布局, 即元素在文档中的位置及大小. 正如前面所述, Layout 计算的是布局位置信息.</p><p>上一步确定了每个 DOM 元素的样式规则, 这一步就是具体计算每个 DOM 元素最终在屏幕上显示的大小和位置.</p><p>需要注意的是: 在页面解析完成后, 任何有可能改变元素位置或大小的样式都会触发这个 Layout 事件.</p><p>常见影响布局的 CSS 属性有:</p><ul><li><code>width</code></li><li><code>height</code></li><li><code>padding</code></li><li><code>margin</code></li><li><code>display</code></li><li><code>border-width</code></li><li><code>border</code></li><li><code>top</code></li><li><code>position</code></li><li><code>font-size</code></li><li><code>float</code></li><li><code>text-align</code></li><li><code>overflow-y</code></li><li><code>font-weight</code></li><li><code>overflow</code></li><li><code>left</code></li><li><code>font-family</code></li><li><code>line-height</code></li><li><code>vertical-align</code></li><li><code>right</code></li><li><code>clear</code></li><li><code>white-space</code></li><li><code>bottom</code></li><li><code>min-height</code></li></ul><p>等等, 更多触发 Layout 事件的属性, 可以在 <a href="https://csstriggers.com/" target="_blank" rel="external nofollow noreferrer noopener">CSS Triggers</a> 网站查阅.</p><h4 id="Rasterizer"><a href="#Rasterizer" class="headerlink" title="Rasterizer"></a>Rasterizer</h4><p>光栅化, 一般的安卓手机都会进行光栅化, 光栅主要是针对图形的一个栅格化过程. 低端手机在这部分耗时还是蛮多的.</p><h4 id="Paint"><a href="#Paint" class="headerlink" title="Paint"></a>Paint</h4><p>本质上就是填充像素的过程. 包括绘制文字、颜色、图像、边框和阴影等, 也就是一个 DOM 元素所有的可视效果. 一般来说, 这个绘制过程是在多个层上完成的.</p><p>Paint 的工作就是把文档中用户可见的那一部分展现给用户. Paint 是把 Layout 和 Calculate 的计算的结果直接在浏览器视窗上绘制出来, 它并不实现具体的元素计算.</p><p>同样, 页面解析完成后, 改变某些样式也会引起 RePaint(重绘).</p><p>常见引起 RePaint(重绘) 的样式:</p><ul><li><code>color</code></li><li><code>border-style</code></li><li><code>visibility</code></li><li><code>background</code></li><li><code>text-decoration</code></li><li><code>background-image</code></li><li><code>background-position</code></li><li><code>background-repeat</code></li><li><code>outline-color</code></li><li><code>outline</code></li><li><code>outline-style</code></li><li><code>border-radius</code></li><li><code>outline-width</code></li><li><code>box-shadow</code></li><li><code>background-size</code></li></ul><p>如果你在元素中对以上的属性设置动画, 那么将会引起重绘, 并且元素所属的图层将提交给 GPU 进行处理.<br>对于移动端设备来说, 这代价是非常昂贵的, 因为它们的 CPU 的处理能力明显弱于桌面端. 这意味着, 任务将用更长的时间来完成; 并且 CPU 和 GPU 之间的带宽是有限的, 所以数据的上传需要花费很长的一段时间.</p><h4 id="Composite-Layers"><a href="#Composite-Layers" class="headerlink" title="Composite Layers"></a>Composite Layers</h4><p>最后合并图层, 输出页面到屏幕. 浏览器在渲染过程中会将一些含有特殊样式的 DOM 结构绘制于其他图层, 有点类似于<code>PhotoShop</code>的图层概念. 一张图片在<code>PotoShop</code>是由多个图层组合而成, 而浏览器最终显示的页面实际也是有多个图层构成的.</p><p>在每个层上完成绘制过程之后, 浏览器会将所有层按照合理的顺序合并成一个图层, 然后在屏幕上呈现. 对于有位置重叠的元素的页面, 这个过程尤其重要, 因为一旦图层的合并顺序出错, 将会导致元素显示异常.</p><p>常见的导致新图层创建的因素有:</p><ul><li>进行 3D 或者透视变换的 CSS 属性</li><li>使用硬件加速视频解码的<code>&lt;video&gt;</code>元素</li><li>具有 3D(WebGL) 上下文或者硬件加速的 2D 上下文的<code>&lt;canvas&gt;</code>元素</li><li>组合型插件 (即 Flash)</li><li>具有有 CSS 透明度动画或者使用动画式 Webkit 变换的元素</li><li>具有硬件加速的 CSS 滤镜的元素</li></ul><h3 id="影响动画渲染性能的因素"><a href="#影响动画渲染性能的因素" class="headerlink" title="影响动画渲染性能的因素"></a>影响动画渲染性能的因素</h3><p>上述流程可以归纳为五个关键步骤:</p><p><img alt="css-animation-4.jpg" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/css-animation-4.jpg" class="lazyload"></p><p>这也是我们在实现动画过程中有可能会触发的五个步骤, 搞清楚我们实现动画的代码在哪一步, 有助于我们实现高性能流畅的动画.<br>在上面的流程中, 我们需要注意两个概念 <strong>重排 (也就是回流)</strong> 和 <strong>重绘</strong>. 这两个概念与上述流程中的 Layout 和 Paint 都有关系, 而 Layout 和 Paint 又对动画渲染的性能至关重要.</p><h4 id="重排"><a href="#重排" class="headerlink" title="重排"></a>重排</h4><p><code>Reflow</code>(重排) 指的是计算页面布局 (Layout). 某个节点<code>Reflow</code>时会重新计算节点的尺寸和位置, 而且还有可能触发其后代节点<code>Reflow</code>. 在这之后再次触发一次<code>Repaint</code>(重绘).</p><p>当 Render Tree 中的一部分 (或全部) 因为元素的尺寸、布局、隐藏等改变而需要重新构建. 这就称为回流, 每个页面至少需要一次回流, 就是页面第一次加载的时候.</p><p>在 Web 页面中, 很多状况下会导致回流:</p><ul><li>调整窗口大小</li><li>改变字体</li><li>增加或者移除样式表</li><li>内容变化</li><li>激活 CSS 伪类</li><li>操作 CSS 属性</li><li>JavaScript 操作 DOM</li><li>计算<code>offsetWidth</code>和<code>offsetHeight</code></li><li>设置<code>style</code>属性的值</li><li>CSS3 Animation 或 Transition</li></ul><h4 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h4><p><code>Repaint</code>(重绘) 或者<code>Redraw</code>遍历所有节点, 检测节点的可见性、颜色、轮廓等可见的样式属性, 然后根据检测的结果更新页面的响应部分.<br>当 Render Tree 中的一些元素需要更新属性, 而这些属性只是影响元素的外观、风格、而不会影响布局的. 就是重绘.</p><p>将重排和重绘的介绍结合起来, 不难发现: <strong>重绘 (Repaint) 不一定会引起回流(Reflow 重排), 但回流必将引起重绘(Repaint)</strong>.</p><p>由此可见, 重排和重绘很容易被触发, 而他们对动画渲染的性能影响非常大. 我们需要做的是尽量不去触发重绘和重排.</p><h3 id="动画渲染性能优化"><a href="#动画渲染性能优化" class="headerlink" title="动画渲染性能优化"></a>动画渲染性能优化</h3><p><strong>过早进行性能优化是大忌</strong>, 如果我们实现的动画并没有性能方面的问题, 就没有必要将时间成本浪费在性能优化上.</p><h4 id="在Composite这步优化动画"><a href="#在Composite这步优化动画" class="headerlink" title="在Composite这步优化动画"></a>在<code>Composite</code>这步优化动画</h4><p>在实现用户交互动画的过程中, 我们尽量避免重绘和重排. 现在浏览器可以利用<code>transform</code>和<code>opacity</code>绘制很好的动画. 因为这些属性只会影响<br>浏览器渲染的最后一步<code>Composite</code>过程.</p><p>共有四个让动画更好的属性:</p><ul><li>位置 (Position): <code>transform: translateX(n) translateY(n) translateZ(n)</code></li><li>缩放 (Scale): <code>transform: scale(n)</code></li><li>旋转 (Rotation): <code>transform: rotate(ndeg)</code></li><li>透明度 (Opacity): <code>opacity: n</code></li></ul><h4 id="在-GPU-上运行动画"><a href="#在-GPU-上运行动画" class="headerlink" title="在 GPU 上运行动画"></a>在 GPU 上运行动画</h4><p>在 CSS 中提供了一个新的 CSS 特性:<code>will-change</code>. 其主要作用就是 <strong>提前告诉浏览器我这里将会进行一些变动, 请分配资源 (告诉浏览器要分配资源给我).</strong> 因此浏览器不需要考虑容器布局的渲染或绘制.</p><blockquote><p><code>will-change</code>属性, 允许作者提前告知浏览器的默认样式, 那他们可能会做出一个元素. 它允许对浏览器默认样式的优化如何提前处理因素, 在动画实际开始之前, 为准备动画执行潜在昂贵的工作. 有关于<code>will-change</code>更详细的介绍可以<a href="http://www.w3cplus.com/css3/introduction-css-will-change-property.html" target="_blank" rel="external nofollow noreferrer noopener">点击这里</a>.</p></blockquote><p>在使用<code>will-change</code>一定要注意方式方法, 比如常见的错误方法是直接在<code>:hover</code>是使用, 并没有告诉浏览器分配资源:  </p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span><span class="selector-pseudo">:hover</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attribute">will-change</span>: transform;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition</span>: transform <span class="number">2s</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(30deg) <span class="built_in">scale</span>(1.5);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>其正确使用的方法是, 在进入父元素的时候就告诉浏览器, 你该分配一定的资源:  </p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition</span>: opacity .<span class="number">3s</span> linear;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/* declare changes on the element when the mouse enters / hovers its ancestor */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ancestor</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.element</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="attribute">will-change</span>: opacity;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/* apply change when element is hovered */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span><span class="selector-pseudo">:hover</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="attribute">opacity</span>: .<span class="number">5</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>另外在应用变化之后, 取消<code>will-change</code>的资源分配:  </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">el.addEventListener(<span class="string">'animationEnd'</span>, removeHint);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeHint</span>(<span class="params"></span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.style.willChange = <span class="string">'auto'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>在使用<code>will-change</code>时, 还需注意:</p><ul><li>不要将<code>will-change</code>应用到太多元素上: 浏览器已经尽力尝试去优化一切可以优化的东西了. 有一些更强力的优化, 如果与<code>will-change</code>结合在一起的话, 有可能会消耗很多机器资源, 如果过度使用的话, 可能导致页面响应缓慢或者消耗非常多的资源.</li><li>有节制地使用: 通常, 当元素恢复到初始状态时, 浏览器会丢弃掉之前做的优化工作. 但是如果直接在样式表中显式声明了<code>will-change</code>属性, 则表示目标元素可能会经常变化, 浏览器会将优化工作保存得比之前更久. 所以最佳实践是当元素变化之前和之后通过脚本来切换<code>will-change</code>的值.</li><li>不要过早应用<code>will-change</code>优化: 如果你的页面在性能方面没什么问题, 则不要添加<code>will-change</code>属性来榨取一丁点的速度.<code>will-change</code>的设计初衷是作为最后的优化手段, 用来尝试解决现有的性能问题. 它不应该被用来预防性能问题. 过度使用<code>will-change</code>会导致大量的内存占用, 并会导致更复杂的渲染过程, 因为浏览器会试图准备可能存在的变化过程. 这会导致更严重的性能问题.</li><li>给它足够的工作时间: 这个属性是用来让页面开发者告知浏览器哪些属性可能会变化的. 然后浏览器可以选择在变化发生前提前去做一些优化工作. 所以给浏览器一点时间去真正做这些优化工作是非常重要的. 使用时需要尝试去找到一些方法提前一定时间获知元素可能发生的变化, 然后为它加上 <code>will-change</code>属性.</li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering/" target="_blank" rel="external nofollow noreferrer noopener">Javascript 高性能动画与页面渲染</a></li><li><a href="http://www.w3cplus.com/animation/how-to-achieve-60-fps-animations-with-css3.html" target="_blank" rel="external nofollow noreferrer noopener">使用 CSS3 实现 60FPS 动画</a></li><li><a href="https://www.html5rocks.com/zh/tutorials/speed/high-performance-animations/" target="_blank" rel="external nofollow noreferrer noopener">High Performance Animations</a></li><li><a href="http://bubkoo.com/2016/03/31/high-performance-animations/" target="_blank" rel="external nofollow noreferrer noopener">使用 FLIP 来提高 Web 动画的性能</a></li><li><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/" target="_blank" rel="external nofollow noreferrer noopener">浏览器的工作原理：新式网络浏览器幕后揭祕</a></li><li><a href="http://www.w3cplus.com/animation/animation-performance.html" target="_blank" rel="external nofollow noreferrer noopener">CSS Animation 性能优化</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script></iframe>]]></content>
    
    <summary type="html">
    
      快速响应和高度交互的页面往往能够吸引大量的用户羣体. 相反, 如果页面存在性能低下的动画, 动画不流畅, 动画过程中页面闪烁等等,如此粗糙的交互体验必然丧失用户量.
    
    </summary>
    
    
      <category term="Web" scheme="http://notes.seirhsiao.com/categories/Web/"/>
    
    
      <category term="JS" scheme="http://notes.seirhsiao.com/tags/JS/"/>
    
      <category term="性能优化" scheme="http://notes.seirhsiao.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>在浏览器输入 URL 回车之后发生了什么（超详细版）</title>
    <link href="http://notes.seirhsiao.com/posts/20bbe8ff/"/>
    <id>http://notes.seirhsiao.com/posts/20bbe8ff/</id>
    <published>2019-10-04T14:08:49.000Z</published>
    <updated>2019-12-07T01:26:57.901Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>本文转自<a href="https://4ark.me/post/b6c7c0a2.html" target="_blank" rel="external nofollow noreferrer noopener">4ark</a></p>          </div><p>这个问题已经是老生常谈了，更是经常被作为面试的压轴题出现，网上也有很多文章，但最近闲的无聊，然后就自己做了一篇笔记，感觉比之前理解更透彻了。  </p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个问题已经是老生常谈了，更是经常被作为面试的压轴题出现，网上也有很多文章，但最近闲的无聊，然后就自己做了一篇笔记，感觉比之前理解更透彻了。</p><p>这篇笔记是我这两天看了数十篇文章总结出来的，所以相对全面一点，但由于我是做前端的，所以会比较重点分析浏览器渲染页面那一部分，至于其他部分我会罗列出关键词，感兴趣的可以自行查阅，</p><p><strong>注意:</strong> 本文的步骤是建立在，请求的是一个简单的 HTTP 请求，没有 HTTPS、HTTP2、最简单的 DNS、没有代理、并且服务器没有任何问题的基础上，尽管这是不切实际的。</p><h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><ol><li>URL 解析</li><li>DNS 查询</li><li>TCP 连接</li><li>处理请求</li><li>接受响应</li><li>渲染页面</li></ol><h3 id="URL-解析"><a href="#URL-解析" class="headerlink" title="URL 解析"></a>URL 解析</h3><p><strong>地址解析：</strong></p><p>首先判断你输入的是一个合法的 URL 还是一个待搜索的关键词，并且根据你输入的内容进行自动完成、字符编码等操作。</p><p><strong>HSTS</strong></p><p>由于安全隐患，会使用 HSTS 强制客户端使用 HTTPS 访问页面。详见：<a href="https://www.barretlee.com/blog/2015/10/22/hsts-intro/" target="_blank" rel="external nofollow noreferrer noopener">你所不知道的 HSTS</a>。</p><p><strong>其他操作</strong></p><p>浏览器还会进行一些额外的操作，比如安全检查、访问限制（之前国产浏览器限制 996.icu）。</p><p><strong>检查缓存</strong></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter.png" class="lazyload"></p><h3 id="DNS-查询"><a href="#DNS-查询" class="headerlink" title="DNS 查询"></a>DNS 查询</h3><p><strong>基本步骤</strong></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_baisc_process.png" class="lazyload"></p><h4 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h4><p>浏览器会先检查是否在缓存中，没有则调用系统库函数进行查询。</p><h4 id="操作系统缓存"><a href="#操作系统缓存" class="headerlink" title="操作系统缓存"></a>操作系统缓存</h4><p>操作系统也有自己的 DNS 缓存，但在这之前，会向检查域名是否存在本地的 Hosts 文件里，没有则向 DNS 服务器发送查询请求。</p><h4 id="路由器缓存"><a href="#路由器缓存" class="headerlink" title="路由器缓存"></a>路由器缓存</h4><p>路由器也有自己的缓存。</p><h4 id="ISP-DNS-缓存"><a href="#ISP-DNS-缓存" class="headerlink" title="ISP DNS 缓存"></a>ISP DNS 缓存</h4><p>ISP DNS 就是在客户端电脑上设置的首选 DNS 服务器，它们在大多数情况下都会有缓存。</p><h4 id="根域名服务器查询"><a href="#根域名服务器查询" class="headerlink" title="根域名服务器查询"></a>根域名服务器查询</h4><p>在前面所有步骤没有缓存的情况下，本地 DNS 服务器会将请求转发到互联网上的根域，下面这个图很好的诠释了整个流程：</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_dns.png" class="lazyload"></p><blockquote><p>根域名服务器：<a href="https://zh.wikipedia.org/wiki/%E6%A0%B9%E7%B6%B2%E5%9F%9F%E5%90%8D%E7%A8%B1%E4%BC%BA%E6%9C%8D%E5%99%A8" target="_blank" rel="external nofollow noreferrer noopener">维基百科</a></p></blockquote><p><strong>需要注意的点</strong></p><ol><li>递归方式：一路查下去中间不返回，得到最终结果才返回信息（浏览器到本地 DNS 服务器的过程）</li><li>迭代方式，就是本地 DNS 服务器到根域名服务器查询的方式。</li><li>什么是 DNS 劫持</li><li>前端 dns-prefetch 优化</li></ol><h3 id="TCP-连接"><a href="#TCP-连接" class="headerlink" title="TCP 连接"></a>TCP 连接</h3><p>TCP/IP 分为四层，在发送数据时，每层都要对数据进行封装：</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_tcp.png" class="lazyload"></p><h4 id="1-应用层：发送-HTTP-请求"><a href="#1-应用层：发送-HTTP-请求" class="headerlink" title="1. 应用层：发送 HTTP 请求"></a>1. 应用层：发送 HTTP 请求</h4><p>在前面的步骤我们已经得到服务器的 IP 地址，浏览器会开始构造一个 HTTP 报文，其中包括：</p><ul><li>请求报头（Request Header）：请求方法、目标地址、遵循的协议等等</li><li>请求主体（其他参数）</li></ul><p>其中需要注意的点：</p><ul><li>浏览器只能发送 GET、POST 方法，而打开网页使用的是 GET 方法</li></ul><h4 id="2-传输层：TCP-传输报文"><a href="#2-传输层：TCP-传输报文" class="headerlink" title="2. 传输层：TCP 传输报文"></a>2. 传输层：TCP 传输报文</h4><p>传输层会发起一条到达服务器的 TCP 连接，为了方便传输，会对数据进行分割（以报文段为单位），并标记编号，方便服务器接受时能够准确地还原报文信息。</p><p>在建立连接前，会先进行 TCP 三次握手。</p><blockquote><p>关于 TCP/IP 三次握手，网上已经有很多段子和图片生动地描述了。<br>相关知识点：</p><ol><li>SYN 泛洪攻击</li></ol></blockquote><h4 id="3-网络层：IP-协议查询-Mac-地址"><a href="#3-网络层：IP-协议查询-Mac-地址" class="headerlink" title="3. 网络层：IP 协议查询 Mac 地址"></a>3. 网络层：IP 协议查询 Mac 地址</h4><p>将数据段打包，并加入源及目标的 IP 地址，并且负责寻找传输路线。</p><p>判断目标地址是否与当前地址处于同一网络中，是的话直接根据 Mac 地址发送，否则使用路由表查找下一跳地址，以及使用 ARP 协议查询它的 Mac 地址。</p><blockquote><p>注意：在 OSI 参考模型中 ARP 协议位于链路层，但在 TCP/IP 中，它位于网络层。</p></blockquote><h4 id="4-链路层：以太网协议"><a href="#4-链路层：以太网协议" class="headerlink" title="4. 链路层：以太网协议"></a>4. 链路层：以太网协议</h4><p><strong>以太网协议</strong></p><p>根据以太网协议将数据分为以 “帧” 为单位的数据包，每一帧分为两个部分：</p><ul><li>标头：数据包的发送者、接受者、数据类型</li><li>数据：数据包具体内容</li></ul><p><strong>Mac 地址</strong></p><p>以太网规定了连入网络的所有设备都必须具备 “网卡” 接口，数据包都是从一块网卡传递到另一块网卡，网卡的地址就是 Mac 地址。每一个 Mac 地址都是独一无二的，具备了一对一的能力。</p><p><strong>广播</strong></p><p>发送数据的方法很原始，直接把数据通过 ARP 协议，向本网络的所有机器发送，接收方根据标头信息与自身 Mac 地址比较，一致就接受，否则丢弃。</p><p><strong>注意</strong>：接收方回应是单播。</p><blockquote><p>相关知识点：</p><ol><li>ARP 攻击</li></ol></blockquote><p><strong>服务器接受请求</strong></p><p>接受过程就是把以上步骤逆转过来，参见上图。</p><h3 id="服务器处理请求"><a href="#服务器处理请求" class="headerlink" title="服务器处理请求"></a>服务器处理请求</h3><p><strong>大致流程</strong></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_1.png" class="lazyload"></p><p><strong>HTTPD</strong></p><p>最常见的 HTTPD 有 Linux 上常用的 Apache 和 Nginx，以及 Windows 上的 IIS。</p><p>它会监听得到的请求，然后开启一个子进程去处理这个请求。</p><p><strong>处理请求</strong></p><p>接受 TCP 报文后，会对连接进行处理，对 HTTP 协议进行解析（请求方法、域名、路径等），并且进行一些验证：</p><ul><li>验证是否配置虚拟主机</li><li>验证虚拟主机是否接受此方法</li><li>验证该用户可以使用该方法（根据 IP 地址、身份信息等）</li></ul><p><strong>重定向</strong></p><p>假如服务器配置了 HTTP 重定向，就会返回一个 <code>301</code>永久重定向响应，浏览器就会根据响应，重新发送 HTTP 请求（重新执行上面的过程）。</p><blockquote><p>关于更多：<a href="https://www.cnblogs.com/workest/p/3891321.html" target="_blank" rel="external nofollow noreferrer noopener">详见这篇文章</a></p></blockquote><p><strong>URL 重写</strong></p><p>然后会查看 URL 重写规则，如果请求的文件是真实存在的，比如图片、html、css、js 文件等，则会直接把这个文件返回。</p><p>否则服务器会按照规则把请求重写到 一个 REST 风格的 URL 上。</p><p>然后根据动态语言的脚本，来决定调用什么类型的动态文件解释器来处理这个请求。</p><p>以 PHP 语言的 MVC 框架举例，它首先会初始化一些环境的参数，根据 URL 由上到下地去匹配路由，然后让路由所定义的方法去处理请求。</p><h3 id="浏览器接受响应"><a href="#浏览器接受响应" class="headerlink" title="浏览器接受响应"></a>浏览器接受响应</h3><p>浏览器接收到来自服务器的响应资源后，会对资源进行分析。</p><p>首先查看 Response header，根据不同状态码做不同的事（比如上面提到的重定向）。</p><p>如果响应资源进行了压缩（比如 gzip），还需要进行解压。</p><p>然后，对响应资源做缓存。</p><p>接下来，根据响应资源里的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="external nofollow noreferrer noopener">MIME</a> 类型去解析响应内容（比如 HTML、Image 各有不同的解析方式）。</p><h3 id="渲染页面"><a href="#渲染页面" class="headerlink" title="渲染页面"></a>渲染页面</h3><p><strong>浏览器内核</strong></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_broswer.png" class="lazyload"></p><p>不同的浏览器内核，渲染过程也不完全相同，但大致流程都差不多。</p><p><strong>基本流程</strong></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_2.png" class="lazyload"></p><h4 id="HTML-解析"><a href="#HTML-解析" class="headerlink" title="HTML 解析"></a>HTML 解析</h4><p>首先要知道浏览器解析是从上往下一行一行地解析的。</p><p>解析的过程可以分为四个步骤：</p><p><strong>1. 解码（encoding）</strong></p><p>传输回来的其实都是一些二进制字节数据，浏览器需要根据文件指定编码（例如 UTF-8）转换成字符串，也就是 HTML 代码。</p><p><strong>2. 预解析（pre-parsing）</strong></p><p>预解析做的事情是提前加载资源，减少处理时间，它会识别一些会请求资源的属性，比如<code>img</code>标签的<code>src</code>属性，并将这个请求加到请求队列中。</p><p><strong>3. 符号化（Tokenization）</strong></p><p>符号化是词法分析的过程，将输入解析成符号，HTML 符号包括，开始标签、结束标签、属性名和属性值。</p><p>它通过一个状态机去识别符号的状态，比如遇到<code>&lt;</code>，<code>&gt;</code>状态都会产生变化。</p><p><strong>4. 构建树（tree construction）</strong></p><blockquote><p>注意：符号化和构建树是并行操作的，也就是说只要解析到一个开始标签，就会创建一个 DOM 节点。</p></blockquote><p>在上一步符号化中，解析器获得这些标记，然后以合适的方法创建<code>DOM</code>对象并把这些符号插入到<code>DOM</code>对象中。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Web page parsing<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Web page parsing<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is an example Web page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_html.png" class="lazyload"></p><p><strong>浏览器容错进制</strong></p><p>你从来没有在浏览器看过类似” 语法无效” 的错误，这是因为浏览器去纠正错误的语法，然后继续工作。</p><p><strong>事件</strong></p><p>当整个解析的过程完成以后，浏览器会通过<code>DOMContentLoaded</code>事件来通知<code>DOM</code>解析完成。</p><h4 id="CSS-解析"><a href="#CSS-解析" class="headerlink" title="CSS 解析"></a>CSS 解析</h4><p>一旦浏览器下载了 CSS，CSS 解析器就会处理它遇到的任何 CSS，根据<a href="https://drafts.csswg.org/css-syntax-3/" target="_blank" rel="external nofollow noreferrer noopener">语法规范</a>解析出所有的 CSS 并进行标记化，然后我们得到一个规则表。</p><p><strong>CSS 匹配规则</strong></p><p>在匹配一个节点对应的 CSS 规则时，是按照从右到左的顺序的，例如：<code>div p { font-size :14px }</code>会先寻找所有的<code>p</code>标签然后判断它的父元素是否为<code>div</code>。</p><p>所以我们写 CSS 时，尽量用 id 和 class，千万不要过度层叠。</p><h4 id="渲染树"><a href="#渲染树" class="headerlink" title="渲染树"></a>渲染树</h4><p>其实这就是一个 DOM 树和 CSS 规则树合并的过程。</p><blockquote><p>注意：渲染树会忽略那些不需要渲染的节点，比如设置了<code>display:none</code>的节点。</p></blockquote><p><strong>计算</strong></p><p>通过计算让任何尺寸值都减少到三个可能之一：<code>auto</code>、百分比、px，比如把<code>rem</code>转化为<code>px</code>。</p><p><strong>级联</strong></p><p>浏览器需要一种方法来确定哪些样式才真正需要应用到对应元素，所以它使用一个叫做<code>specificity</code>的公式，这个公式会通过：</p><ol><li>标签名、class、id</li><li>是否内联样式</li><li><code>!important</code></li></ol><p>然后得出一个权重值，取最高的那个。</p><p><strong>渲染阻塞</strong></p><p>当遇到一个<code>script</code>标签时，DOM 构建会被暂停，直至脚本完成执行，然后继续构建 DOM 树。</p><p>但如果 JS 依赖 CSS 样式，而它还没有被下载和构建时，浏览器就会延迟脚本执行，直至 CSS Rules 被构建。</p><p>所有我们知道：</p><ul><li>CSS 会阻塞 JS 执行</li><li>JS 会阻塞后面的 DOM 解析</li></ul><p>为了避免这种情况，应该以下原则：</p><ul><li>CSS 资源排在 JavaScript 资源前面</li><li>JS 放在 HTML 最底部，也就是 <code>&lt;/body&gt;</code>前</li></ul><p>另外，如果要改变阻塞模式，可以使用 defer 与 async，详见：<a href="https://github.com/xiaoyu2er/blog/issues/8" target="_blank" rel="external nofollow noreferrer noopener">这篇文章</a></p><h5 id="布局与绘制"><a href="#布局与绘制" class="headerlink" title="布局与绘制"></a>布局与绘制</h5><p>确定渲染树种所有节点的几何属性，比如：位置、大小等等，最后输入一个盒子模型，它能精准地捕获到每个元素在屏幕内的准确位置与大小。</p><p>然后遍历渲染树，调用渲染器的 paint() 方法在屏幕上显示其内容。</p><h5 id="合并渲染层"><a href="#合并渲染层" class="headerlink" title="合并渲染层"></a>合并渲染层</h5><p>把以上绘制的所有图片合并，最终输出一张图片。</p><h5 id="回流与重绘"><a href="#回流与重绘" class="headerlink" title="回流与重绘"></a>回流与重绘</h5><p><strong>回流 (reflow)</strong></p><p>当浏览器发现某个部分发现变化影响了布局时，需要倒回去重新渲染，会从<code>html</code>标签开始递归往下，重新计算位置和大小。</p><p>reflow 基本是无法避免的，因为当你滑动一下鼠标、resize 窗口，页面就会产生变化。</p><p><strong>重绘 (repaint)</strong></p><p>改变了某个元素的背景色、文字颜色等等不会影响周围元素的位置变化时，就会发生重绘。</p><p>每次重绘后，浏览器还需要合并渲染层并输出到屏幕上。</p><p>回流的成本要比重绘高很多，所以我们应该尽量避免产生回流。</p><p>比如：</p><ul><li><code>display:none</code> 会触发回流，而 <code>visibility:hidden</code> 只会触发重绘。</li></ul><h5 id="JavaScript-编译执行"><a href="#JavaScript-编译执行" class="headerlink" title="JavaScript 编译执行"></a>JavaScript 编译执行</h5><p><strong>大致流程</strong></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_3.png" class="lazyload"></p><p>可以分为三个阶段：</p><h6 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h6><p>JS 脚本加载完毕后，会首先进入语法分析阶段，它首先会分析代码块的语法是否正确，不正确则抛出 “语法错误”，停止执行。</p><p>几个步骤：</p><ul><li>分词，例如将<code>var a = 2</code>，，分成<code>var</code>、<code>a</code>、<code>=</code>、<code>2</code>这样的词法单元。</li><li>解析，将词法单元转换成抽象语法树（AST）。</li><li>代码生成，将抽象语法树转换成机器指令。</li></ul><h6 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h6><p>JS 有三种运行环境：</p><ul><li>全局环境</li><li>函数环境</li><li>eval</li></ul><p>每进入一个不同的运行环境都会创建一个对应的执行上下文，根据不同的上下文环境，形成一个函数调用栈，栈底永远是全局执行上下文，栈顶则永远是当前执行上下文。</p><p><strong>创建执行上下文</strong></p><p>创建执行上下文的过程中，主要做了以下三件事：</p><ul><li>创建变量对象<ul><li>参数、函数、变量</li></ul></li><li>建立作用域链<ul><li>确认当前执行环境是否能访问变量</li></ul></li><li>确定 This 指向</li></ul><h6 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h6><p><strong>JS 线程</strong></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_7.png" class="lazyload"></p><p>虽然 JS 是单线程的，但实际上参与工作的线程一共有四个：</p><blockquote><p>其中三个只是协助，只有 JS 引擎线程是真正执行的</p></blockquote><ul><li>JS 引擎线程：也叫 JS 内核，负责解析执行 JS 脚本程序的主线程，例如 V8 引擎</li><li>事件触发线程：属于浏览器内核线程，主要用于控制事件，例如鼠标、键盘等，当事件被触发时，就会把事件的处理函数推进事件队列，等待 JS 引擎线程执行</li><li>定时器触发线程：主要控制<code>setInterval</code>和<code>setTimeout</code>，用来计时，计时完毕后，则把定时器的处理函数推进事件队列中，等待 JS 引擎线程。</li><li>HTTP 异步请求线程：通过 XMLHttpRequest 连接后，通过浏览器新开的一个线程，监控 readyState 状态变更时，如果设置了该状态的回调函数，则将该状态的处理函数推进事件队列中，等待 JS 引擎线程执行。</li></ul><p><strong>注：浏览器对同一域名的并发连接数是有限的，通常为 6 个。</strong></p><p><strong>宏任务</strong></p><p>分为：</p><ul><li>同步任务：按照顺序执行，只有前一个任务完成后，才能执行后一个任务</li><li>异步任务：不直接执行，只有满足触发条件时，相关的线程将该异步任务推进任务队列中，等待 JS 引擎主线程上的任务执行完毕时才开始执行，例如异步 Ajax、DOM 事件，setTimeout 等。</li></ul><p><strong>微任务</strong></p><p>微任务是 ES6 和 Node 环境下的，主要 API 有：<code>Promise</code>，<code>process.nextTick</code>。</p><p>微任务的执行在宏任务的同步任务之后，在异步任务之前。</p><p><img alt data-src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822185002.png" class="lazyload"></p><p><strong>代码例子</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>); <span class="comment">// 宏任务 同步</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>); <span class="comment">// 宏任务 异步</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">})</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'3'</span>); <span class="comment">// 宏任务 同步</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    resolve();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">}).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'4'</span>) <span class="comment">// 微任务</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">})</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'5'</span>) <span class="comment">// 宏任务 同步</span></span></pre></td></tr></tbody></table></figure><p>以上代码输出顺序为：1,3,5,4,2</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://github.com/skyline75489/what-happens-when-zh_CN" target="_blank" rel="external nofollow noreferrer noopener">what-happens-when-zh_CN</a></li><li><a href="https://alistapart.com/article/tags-to-dom/" target="_blank" rel="external nofollow noreferrer noopener">Tags to DOM</a></li><li><a href="https://heyingye.github.io/2018/04/16/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/" target="_blank" rel="external nofollow noreferrer noopener">彻底理解浏览器的缓存机制</a></li><li><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_rendering_engine" target="_blank" rel="external nofollow noreferrer noopener">浏览器的工作原理：新式网络浏览器幕后揭祕</a></li><li><a href="https://blog.fundebug.com/2019/01/03/understand-browser-rendering/" target="_blank" rel="external nofollow noreferrer noopener">深入浅出浏览器渲染原理</a></li><li><a href="https://heyingye.github.io/2018/03/19/js%E5%BC%95%E6%93%8E%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/#%E9%A2%84%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5" target="_blank" rel="external nofollow noreferrer noopener">js 引擎的执行过程（一）</a></li><li>还有一些找不到了。。。。。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      在浏览器输入 URL 回车之后发生了什么（超详细版）
    
    </summary>
    
    
      <category term="Web" scheme="http://notes.seirhsiao.com/categories/Web/"/>
    
    
      <category term="html" scheme="http://notes.seirhsiao.com/tags/html/"/>
    
      <category term="前端" scheme="http://notes.seirhsiao.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot - 条件化注解Conditional</title>
    <link href="http://notes.seirhsiao.com/posts/4478b9ec/"/>
    <id>http://notes.seirhsiao.com/posts/4478b9ec/</id>
    <published>2019-06-17T15:43:32.000Z</published>
    <updated>2019-12-07T01:26:58.612Z</updated>
    
    <content type="html"><![CDATA[<p>在我们的实际业务开发过程中，往往会有这样的场景：</p><ul><li>一套接口中有多种不同的实现，但在不同的场景下需使用指定的实现方式（比如微信小程序里仅仅支持微信支付）</li><li>在集群环境里，存在一个定时任务，定时任务不可重复执行，因此需限制只在一个节点中执行，其他节点不执行</li></ul><blockquote><p>常规思路中要实现以上的场景需求还是比较麻烦的，可能需要硬编码做 <strong>if</strong> 或者 <strong>swith</strong> 的判断，亦或是使用控制路由在调用的代码里做选择初始化。这些方式都不够优雅，也增强了组件间的耦合性！！！<br>现在SpringBoot里有了 <code>@Conditional</code>注解 和 <code>@ConditionalOnProperty</code>注解，将变得简单许多。</p></blockquote><a id="more"></a><h3 id="ConditionalOnProperty注解介绍"><a href="#ConditionalOnProperty注解介绍" class="headerlink" title="ConditionalOnProperty注解介绍"></a>ConditionalOnProperty注解介绍</h3><p>Spring4.X中新加入了注解<code>@Conditional</code>，可以实现不同条件创建不同的Bean。<br>SpringBoot框架中封装了注解<code>@ConditionalOnProperty</code>，它将配置信息转换成控制某个configuration是否生效的条件。</p><h3 id="ConditionalOnProperty源码解析"><a href="#ConditionalOnProperty源码解析" class="headerlink" title="ConditionalOnProperty源码解析"></a>ConditionalOnProperty源码解析</h3><figure class="highlight java"><figcaption><span>springboot-autoconfigure.jar</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure.condition;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>({ ElementType.TYPE, ElementType.METHOD })</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Conditional</span>(OnPropertyCondition<span class="class">.<span class="keyword">class</span>)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">ConditionalOnProperty</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment">    * String数组 ，对应property名称的值，与name()不可同时使用，</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">    * 当 value() 所对应配置文件中的值为false时加载配置，不为fasle不加载配置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">    * value() 有多个值时，只要有一个值对应为false,则不加载配置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">    */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">   String[] value() <span class="keyword">default</span> {};</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment">    * 配置中 property 的前缀，可有可无；可与 value 或 name 组合使用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">    */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="function">String <span class="title">prefix</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="comment">    * String数组 ，property完整名称或部分名称，与 value()作用一致但不可同时使用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment">    */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    String[] name() <span class="keyword">default</span> {};</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="comment">    * 比较获取到的属性值与 havingValue() 给定的值是否相同，相同才加载配置；需与 value 或 name 组合使用需</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment">    */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="function">String <span class="title">havingValue</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="comment">    * 配置中缺少对应 property 时是否可以加载；为true时缺少对应配置也可加载</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="comment">    */</span> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">matchIfMissing</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>由此可见：它主要通过几个属性值来实现：</p><ul><li>prefix：属性-配置前缀，可不填；</li><li>name：配置文件application.yml中定义的属性名；</li><li>havingValue：生效时的预期值，一般设置为true。</li></ul><div class="note info">            <p>根据 name 在 application.yml 中获取属性的值，该值与havingValue的值比较，与其相等则当前configuration生效加载此Bean，否则则不生效。当name的值在application.yml 中不存在则返回false。</p>          </div><h3 id="code示例"><a href="#code示例" class="headerlink" title="code示例"></a>code示例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPayService</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"pay"</span>, name = <span class="string">"type"</span>, havingValue = <span class="string">"alipay"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"payService"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliPayServiceImlp</span> <span class="keyword">implements</span> <span class="title">IPayService</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    log.info(<span class="string">"=====&gt;&gt;&gt;&gt;&gt;使用支付宝支付"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"pay"</span>, name = <span class="string">"type"</span>, havingValue = <span class="string">"weixin"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"payService"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WinxinPayServiceImpl</span> <span class="keyword">implements</span> <span class="title">IPayService</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    log.info(<span class="string">"=====&gt;&gt;&gt;&gt;&gt;使用微信支付"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"test"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TempRestController</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  IPayService payService;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  <span class="meta">@PostMapping</span>(path = <span class="string">"pay"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    payService.pay();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>在指定的节点配置 pay.type=alipay 或者 weixin</p><figure class="highlight properties"><figcaption><span>application.properties</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">pay.type</span> = <span class="string">alipay</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">----------</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">pay.type</span> = <span class="string">weixin</span></span></pre></td></tr></tbody></table></figure><h3 id="code示例2"><a href="#code示例2" class="headerlink" title="code示例2"></a>code示例2</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"scheduling"</span>, name = <span class="string">"enabled"</span>, havingValue = <span class="string">"true"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkTimer</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Scheduled</span>(cron = <span class="string">"0/5 * * * * *"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduled</span><span class="params">()</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>在指定的节点加上配置 scheduling.enabled=true，其余节点加上配置scheduling.enabled=false </p><figure class="highlight properties"><figcaption><span>application.properties</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">scheduling.enabled</span> = <span class="string">false   （或为空，此时定时任务不生效）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">----------</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">scheduling.enabled</span> = <span class="string">true    （此时定时任务生效）</span></span></pre></td></tr></tbody></table></figure><h3 id="知识拓展"><a href="#知识拓展" class="headerlink" title="知识拓展"></a>知识拓展</h3><p>ConditionalOnProperty注解只能解决简单配置的动态注入，下面还有几种常用的条件注解使用方式，有兴趣的同学可以继续深入学习：</p><ul><li><p>@ConditionalOnBean：基于Bean的条件注解，根据Bean是否存在来判断是否满足条件。（可用于Bean之间相互依赖的场景）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnBean</span>(name=<span class="string">"redisTemplate"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisOperBean</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate redisTemplate;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RedisOperBean</span><span class="params">(RedisTemplate redisTemplate)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// tips：不会因为找不到 RestTemplate 的bean，导致无法实例化 RedisOperBean，从而抛出异常</span></span></pre></td></tr></tbody></table></figure></li><li><p>@ConditionalOnMissingBean：和前面一个作用正好相反的，判断Bean是否不存在</p></li><li><p>@ConditionalOnClass：从使用来看，和 <code>ConditionalOnBean</code>类似，基于class是否存在来做条件判断</p></li><li><p>@ConditionalOnExpression ：基于SPEL表达式的条件注解，执行Spel表达式，根据返回的true/false来判断是否满足条件</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我们的实际业务开发过程中，往往会有这样的场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一套接口中有多种不同的实现，但在不同的场景下需使用指定的实现方式（比如微信小程序里仅仅支持微信支付）&lt;/li&gt;
&lt;li&gt;在集群环境里，存在一个定时任务，定时任务不可重复执行，因此需限制只在一个节点中执行，其他节点不执行&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;常规思路中要实现以上的场景需求还是比较麻烦的，可能需要硬编码做 &lt;strong&gt;if&lt;/strong&gt; 或者 &lt;strong&gt;swith&lt;/strong&gt; 的判断，亦或是使用控制路由在调用的代码里做选择初始化。这些方式都不够优雅，也增强了组件间的耦合性！！！&lt;br&gt;现在SpringBoot里有了 &lt;code&gt;@Conditional&lt;/code&gt;注解 和 &lt;code&gt;@ConditionalOnProperty&lt;/code&gt;注解，将变得简单许多。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://notes.seirhsiao.com/categories/Spring-Boot/"/>
    
    
      <category term="Spring" scheme="http://notes.seirhsiao.com/tags/Spring/"/>
    
      <category term="SpringBoot" scheme="http://notes.seirhsiao.com/tags/SpringBoot/"/>
    
      <category term="Conditional" scheme="http://notes.seirhsiao.com/tags/Conditional/"/>
    
      <category term="ConditionalOnProperty" scheme="http://notes.seirhsiao.com/tags/ConditionalOnProperty/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-butterfly安装文档</title>
    <link href="http://notes.seirhsiao.com/posts/21cfbf15/"/>
    <id>http://notes.seirhsiao.com/posts/21cfbf15/</id>
    <published>2019-06-17T08:22:52.000Z</published>
    <updated>2019-12-07T01:26:59.350Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger">            <p>Butterfly已经升级到V2.0.0,从旧版本升级到V2.0.0,<strong>需重新配置butterfly.yml(_config.yml)</strong></p>          </div><div class="note info">            <p>如果你对主题安装有疑问或者发现bugs，请点击<a href="https://github.com/jerryc127/hexo-theme-butterfly/issues" target="_blank" rel="external nofollow noreferrer noopener">这里</a>反馈/询问</p>          </div><div class="note primary">            <p>本教程更新于2019年11月20日</p>          </div><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><p><code>hexo-theme-butterfly</code>是基于<a href="https://github.com/Molunerfinn" target="_blank" rel="external nofollow noreferrer noopener">Molunerfinn</a>的<a href="https://github.com/Molunerfinn/hexo-theme-melody" target="_blank" rel="external nofollow noreferrer noopener">hexo-theme-melody</a>的基础上进行开发的。<br>文档也是在<a href="https://molunerfinn.com/hexo-theme-melody-doc/" target="_blank" rel="external nofollow noreferrer noopener">hexo-theme-melody</a>的文档基础上修改。因为一些配置变更导致与原主题配置上有部分区别。故如果安装<code>hexo-theme-butterfly</code>主题，请参考这篇文档。</p><h2 id="主题安装和升级"><a href="#主题安装和升级" class="headerlink" title="主题安装和升级"></a>主题安装和升级</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在你的博客根目录里</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span></pre></td></tr></tbody></table></figure><p>如果想要安装比较新的dev分支，可以</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span></pre></td></tr></tbody></table></figure><h3 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h3><p>修改站点配置文件<code>_config.yml</code>，把主题改为<code>Butterfly</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">Butterfly</span></span></pre></td></tr></tbody></table></figure><blockquote><p>如果你没有 pug 以及 stylus 的渲染器，请下载安装： <code>npm install hexo-renderer-pug hexo-renderer-stylus --save</code> or <code>yarn add hexo-renderer-pug hexo-renderer-stylus</code></p></blockquote><h3 id="平滑升级"><a href="#平滑升级" class="headerlink" title="平滑升级"></a>平滑升级</h3><p>为了主题的平滑升级, <code>Butterfly</code> 使用了 <a href="https://hexo.io/docs/data-files.html" target="_blank" rel="external nofollow noreferrer noopener">data files</a>特性。</p><p>推荐把主题默认的配置文件<code>_config.yml</code>复制到 Hexo 工作目录下的<code>source/_data/butterfly.yml</code>，如果<code>source/_data</code>的目录不存在那就创建一个。</p><blockquote><p>注意，如果你创建了<code>butterfly.yml</code>, 它将会替换主题默认配置文件<code>_config.yml</code>里的配置项 (<strong>不是合并而是替换</strong>), 之后你就只需要通过<code>git pull</code>的方式就可以平滑地升级 <code>theme-butterfly</code>了。</p></blockquote><h1 id="主题页面"><a href="#主题页面" class="headerlink" title="主题页面"></a>主题页面</h1><h2 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h2><figure class="highlight md"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">title:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">date:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">type: （tags,link,categories这三个页面需要配置）</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">comments: (是否需要显示评论，默认true)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">description:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">top_img: (设置顶部图)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr></tbody></table></figure><h2 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h2><figure class="highlight md"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">title:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">date:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">tags:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">categories:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">keywords:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">description:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">top_img: （除非特定需要，可以不写）</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">comments  是否显示评论（除非设置false,可以不写）</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">cover:  缩略图</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">toc:  是否显示toc （除非特定文章设置，可以不写）</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">toc_number: 是否显示toc数字 （除非特定文章设置，可以不写）</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">copyright: 是否显示版权 （除非特定文章设置，可以不写）</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr></tbody></table></figure><h2 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h2><ol><li><p>前往你的 Hexo 博客的根目录</p></li><li><p>输入<code>hexo new page tags</code></p></li><li><p>你会找到<code>source/tags/index.md</code>这个文件</p></li><li><p>修改这个文件：</p></li></ol><figure class="highlight md"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">title: 标签</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">date: 2018-01-05 00:00:00</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">type: "tags"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr></tbody></table></figure><h2 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h2><ol><li><p>前往你的 Hexo 博客的根目录</p></li><li><p>输入<code>hexo new page categories</code></p></li><li><p>你会找到<code>source/categories/index.md</code>这个文件</p></li><li><p>修改这个文件：</p></li></ol><figure class="highlight md"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">title: 分类</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">date: 2018-01-05 00:00:00</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">type: "categories"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr></tbody></table></figure><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><p>为你的博客创建一个友情链接！</p><h3 id="创建友情链接页面"><a href="#创建友情链接页面" class="headerlink" title="创建友情链接页面"></a>创建友情链接页面</h3><ol><li>前往你的 Hexo 博客的根目录</li><li>输入 <code>hexo new page link</code></li><li>你会找到<code>source/link/index.md</code>这个文件</li><li>修改这个文件：</li></ol><figure class="highlight md"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">title: 友情链接</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">date: 2018-06-07 22:17:49</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">type: "link"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr></tbody></table></figure><h3 id="友情链接添加"><a href="#友情链接添加" class="headerlink" title="友情链接添加"></a>友情链接添加</h3><p>在Hexo博客目录中的<code>source/_data</code>，创建一个文件<code>link.yml</code></p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">class:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">class_name:</span> <span class="string">友情链接</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">link_list:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">1:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">name:</span> <span class="string">xxx</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">link:</span> <span class="string">https://blog.xxx.com</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">avatar:</span> <span class="string">https://cdn.xxxxx.top/avatar.png</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">descr:</span> <span class="string">xxxxxxx</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">2:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">name:</span> <span class="string">xxxxxx</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">link:</span> <span class="string">https://www.xxxxxxcn/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">avatar:</span> <span class="string">https://xxxxx/avatar.png</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">descr:</span> <span class="string">xxxxxxx</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"> <span class="attr">class2:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">   <span class="attr">class_name:</span> <span class="string">链接无效</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">   <span class="attr">link_list:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">     <span class="attr">1:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">       <span class="attr">name:</span> <span class="string">梦xxx</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">       <span class="attr">link:</span> <span class="string">https://blog.xxx.com</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">       <span class="attr">avatar:</span> <span class="string">https://xxxx/avatar.png</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">       <span class="attr">descr:</span> <span class="string">xxxx</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">     <span class="attr">2:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">       <span class="attr">name:</span> <span class="string">xx</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">       <span class="attr">link:</span> <span class="string">https://www.axxxx.cn/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">       <span class="attr">avatar:</span> <span class="string">https://x</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">       <span class="attr">descr:</span> <span class="string">xx</span></span></pre></td></tr></tbody></table></figure><h3 id="友情链接界面设置"><a href="#友情链接界面设置" class="headerlink" title="友情链接界面设置"></a>友情链接界面设置</h3><p>需要添加友情链接，可以在<code>Butterfly.yml</code>配置<br>可在友情链接上写上自己的个人资料，方便其他人添加。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Flink:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">headline:</span> <span class="string">友情链接</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">info_headline:</span> <span class="string">我的Blog资料</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">name:</span> <span class="string">Blog</span> <span class="string">名字：</span> <span class="string">JerryC</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">address:</span> <span class="string">Blog</span> <span class="string">地址：</span> <span class="string">https://jerryc.me/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">avatar:</span> <span class="string">Blog</span> <span class="string">头像：</span> <span class="string">https://jerryc.me/img/avatar.png</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">info:</span> <span class="string">Blog</span> <span class="string">简介：</span> <span class="string">今日事,今日毕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">comment:</span> <span class="string">如果需要交换友链,请留言</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-flink-headline.png" class="lazyload"><br><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-flink.png" class="lazyload"></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h2><ul><li>站点配置文件<code>_config.yml</code>是 hexo 工作目录下的主配置文件(还不知道是哪里的，自己google)</li><li><code>butterfly.yml</code> 是 <code>Butterfly</code> 的配置文件。它需要你手动将主题目录下的<code>_config.yml</code>文件复制到 hexo 工作目录的<code>source/_data/butterfly.yml</code>中。如果文件或者文件夹不存在，需要手动创建。</li></ul><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>修改站点配置文件 <code>_config.yml</code></p><p>默认语言是 en</p><p>主题支持三种语言</p><ul><li>default(en)</li><li>zh-CN (简体中文)</li><li>zh-TW (繁体中文)</li></ul><h2 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h2><p>修改网站各种资料，例如标题、副标题和邮箱等个人资料，请修改博客根目录的<code>_config.yml</code></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/20191120000444.png" class="lazyload"></p><h2 id="导航菜单"><a href="#导航菜单" class="headerlink" title="导航菜单"></a>导航菜单</h2><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">Tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">Categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-folder-open</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">Link:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-link</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">About:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-heart</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="string">List||fa</span> <span class="attr">fa-list:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">Music</span> <span class="string">||</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-music</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">Movie</span> <span class="string">||</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-film</span></span></pre></td></tr></tbody></table></figure><blockquote><p>必须是 <code>/xxx/</code>，后面<code>||</code>分开，然后写图标名。菜单名称可自己修改</p><p>格式： </p><p>显示名称: </p><p>路径||icon</p><p>sub-menu格式</p><p> 名称||icon:</p><ul><li>名称 || 路径 || icon</li></ul></blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-menu.png" class="lazyload"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码高亮主题"><a href="#代码高亮主题" class="headerlink" title="代码高亮主题"></a>代码高亮主题</h3><p><code>Butterfly</code> 支持了 <a href="https://github.com/equinusocio/material-theme" target="_blank" rel="external nofollow noreferrer noopener">Material Theme</a>全部 5 种代码高亮样式：</p><ul><li>default</li><li>darker</li><li>pale night</li><li>light</li><li>ocean</li></ul><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">light</span></span></pre></td></tr></tbody></table></figure><blockquote><p>default</p></blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-code-default.png" class="lazyload"></p><blockquote><p>darker</p></blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-code-darker.png" class="lazyload"></p><blockquote><p>pale night</p></blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-code-pale-night.png" class="lazyload"></p><blockquote><p>light</p></blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-code-light.png" class="lazyload"></p><blockquote><p>ocean</p></blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-highlight-ocean.png" class="lazyload"></p><h3 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h3><p>主题支持代码复制功能</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-code-copy.png" class="lazyload"></p><h3 id="代码框展开-关闭"><a href="#代码框展开-关闭" class="headerlink" title="代码框展开/关闭"></a>代码框展开/关闭</h3><p>在默认情况下，代码框自动展开，可设置是否所有代码框都关闭状态，点击<code>&gt;</code>可展开代码</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">true</span> <span class="comment">#代码框不展开，需点击 '&gt;' 打开</span></span></pre></td></tr></tbody></table></figure><p><code>highlight_shrink: true</code></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-highlight-shrink-true.png" class="lazyload"></p><p><code>highlight_shrink: false</code></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-highlight-shrink-false.png" class="lazyload"></p><h3 id="代码换行"><a href="#代码换行" class="headerlink" title="代码换行"></a>代码换行</h3><p>在默认情况下，<code>hexo-highlight</code>在编译的时候不会实现代码自动换行。如果你不希望在代码块的区域里有横向滚动条的话，那么你可以考虑开启这个功能。</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><p>然后找到你站点的 Hexo 配置文件<code>_config.yml</code>，将<code>line_number</code>改成<code>false</code>:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">tab_replace:</span></span></pre></td></tr></tbody></table></figure><blockquote><p>设置<code>code_word_wrap</code>之前:</p></blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-code-word-wrap-before.png" class="lazyload"></p><blockquote><p>设置<code>code_word_wrap</code>之后:</p></blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-code-word-wrap-after.png" class="lazyload"></p><h2 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h2><p>Butterfly支持 <a href="https://fontawesome.com/v4.7.0/" target="_blank" rel="external nofollow noreferrer noopener">font-awesome v4</a>和 <a href="https://fontawesome.com/icons?from=io" target="_blank" rel="external nofollow noreferrer noopener">font-awesome v5</a>. 如需开启<a href="https://fontawesome.com/icons?from=io" target="_blank" rel="external nofollow noreferrer noopener">font-awesome v5</a>,需要在<code>Butterfly.yml</code>上开启</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">CDN_USE:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">css:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">https://use.fontawesome.com/releases/v5.8.1/css/all.css</span></span></pre></td></tr></tbody></table></figure><p>无论V4还是V5,书写格式都是一样的<code>图标名：url</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">fa fa-github:</span> <span class="string">https://github.com/jerryc127</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">fa fa-rss:</span> <span class="string">/atom.xml</span></span></pre></td></tr></tbody></table></figure><p>图标名可在这寻找</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-fontawesome.png" class="lazyload"></p><p>PC:</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-social-icon-pc.png" class="lazyload"></p><p>Mobile:</p><p><img alt="1560603353743" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-socila-icon-mobile.png" class="lazyload"></p><h2 id="主页文章节选-自动节选和文章页description"><a href="#主页文章节选-自动节选和文章页description" class="headerlink" title="主页文章节选(自动节选和文章页description)"></a>主页文章节选(自动节选和文章页description)</h2><p>因为主题UI的关系，<code>主页文章节选</code>只支持<code>自动节选</code>和<code>文章页description</code>。优先选择<code>自动节选</code>。</p><p>在<code>butterfly.yml</code>里可以开启<code>auto_excerpt</code>的选项，你的文章将会在自动截取部分显示在主页。（默认显示150个字）。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span></pre></td></tr></tbody></table></figure><p>如果没有开启<code>自动节选</code>，则会显示文章页front-matter里面设置的<code>description</code>。</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-post-description.png" class="lazyload"></p><blockquote><p>注意：如果开启了自动节选功能，代码块的显示将有可能不正常。</p></blockquote><h2 id="顶部图"><a href="#顶部图" class="headerlink" title="顶部图"></a>顶部图</h2><p><code>顶部图</code>有2种配置：具体url 和（留空，true和false，三个效果一样）</p><h3 id="page页"><a href="#page页" class="headerlink" title="page页"></a>page页</h3><h4 id="当具体url时"><a href="#当具体url时" class="headerlink" title="当具体url时"></a>当具体url时</h4><p>主页的顶部图可以在<code>Butterfly.yml</code>设置<code>index_img</code></p><p>archives页的顶部图可以在<code>Butterfly.yml</code>设置<code>archive_img</code></p><p>其他<code>page</code>页的顶部图可以在各自的md页面设置<code>front-matter</code>中的<code>top_img</code></p><blockquote><p>页面如果没有设置各自的<code>top_img</code>，则会显示<code>default_top_img</code>图片</p></blockquote><h4 id="当顶部图留空，true和false"><a href="#当顶部图留空，true和false" class="headerlink" title="当顶部图留空，true和false"></a>当顶部图留空，true和false</h4><p>主页会显示纯颜色的顶部图</p><p>其他page的顶部图没有设置时，也会显示纯颜色的顶部图</p><h3 id="post页"><a href="#post页" class="headerlink" title="post页"></a>post页</h3><p><code>post</code>页的顶部图会优先显示各自<code>front-matter</code>中的<code>top_img</code>,如果没有设置，则会缩略图（即各自<code>front-matter</code>中的<code>cover</code>)，如果没有则会显示显示<code>default_top_img</code>图片</p><h2 id="文章相关项"><a href="#文章相关项" class="headerlink" title="文章相关项"></a>文章相关项</h2><p>这个选项是用来显示文章的相关信息的。</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment">#or created or updated 文章日期是创建日或者更新日或都显示</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># or false 是否显示分类</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># or false 是否显示标签</span></span></pre></td></tr></tbody></table></figure><p>在文章顶部的资料，</p><p><code>date_type</code>: 可设置文章日期显示创建日期(<code>created</code>)或者更新日期(<code>updated</code>)或者两种都显示(<code>both</code>)</p><p><code>categories</code> 是否显示分类</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-post-info.png" class="lazyload"></p><p><code>tags</code>是否显示标签</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-post-tag.png" class="lazyload"></p><h2 id="文章版权"><a href="#文章版权" class="headerlink" title="文章版权"></a>文章版权</h2><p>为你的博客文章展示文章版权和许可协议。</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/4.0/</span></span></pre></td></tr></tbody></table></figure><p>如果有文章（例如：转载文章）不需要显示版权，可以在文章Front-matter单独设置</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">copyright:</span> <span class="literal">false</span></span></pre></td></tr></tbody></table></figure><p><strong>版权显示截图</strong></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-post-copyright.png" class="lazyload"></p><h2 id="文章打赏"><a href="#文章打赏" class="headerlink" title="文章打赏"></a>文章打赏</h2><p>在你每篇文章的结尾，可以添加打赏按钮。相关二维码可以自行配置</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">reward:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">QR_code:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="attr">itemlist:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="attr">img:</span> <span class="string">/img/wechat.jpg</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="attr">text:</span> <span class="string">微信</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="attr">itemlist:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="attr">img:</span> <span class="string">/img/alipay.jpg</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="attr">text:</span> <span class="string">支付宝</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-post-donate.png" class="lazyload"></p><h2 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h2><p>文章的markdown文档上,在<code>Front-matter</code>添加<code>cover</code>,并填上要显示的图片地址。<br>如果不配置<code>cover</code>,可以设置显示默认的cover.</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">default_cover:</span> <span class="string">https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png</span></span></pre></td></tr></tbody></table></figure><p>当配置多张图片时,会随机选择一张作为cover.此时写法应为</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">default_cover:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="bullet">-</span> <span class="string">https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="bullet">-</span> <span class="string">https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg2.png</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="bullet">-</span> <span class="string">https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg3.png</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-post-cover.png" class="lazyload"><br><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-post-cover-show.png" class="lazyload"></p><h2 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h2><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span> <span class="string">https://xxxx/avatar.png</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-avatar.png" class="lazyload"></p><h2 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h2><p>在文章页，会有一个目录，用于显示TOC。 手机端默认显示按钮。</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">number:</span> <span class="literal">true</span>   <span class="comment">#显示章节数字</span></span></pre></td></tr></tbody></table></figure><p><strong>PC</strong><br><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-toc-pc.png" class="lazyload"></p><p><strong>Mobile</strong><br><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-docs-mobile-toc-new.png" class="lazyload"></p><h3 id="为特定的文章配置是否显示TOC和特定的目录章节数字"><a href="#为特定的文章配置是否显示TOC和特定的目录章节数字" class="headerlink" title="为特定的文章配置是否显示TOC和特定的目录章节数字"></a>为特定的文章配置是否显示TOC和特定的目录章节数字</h3><p>在你的文章<code>md</code>文件的头部，加入<code>toc_number</code>和<code>toc</code>项，并配置<code>true</code>或者<code>false</code>即可。</p><p><code>toc</code>是否显示文章TOC</p><p><code>toc_number</code> 是否显示章节数</p><p>配置之后你的特定的文章将会拥有它自己的目录数字的显示与否，而不会受全局的配置影响。</p><blockquote><p><code>enable: true</code></p></blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-toc-true.png" class="lazyload"></p><blockquote><p><code>number: false</code></p></blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-toc-number-false.png" class="lazyload"></p><h3 id="设置是否自动打开TOC"><a href="#设置是否自动打开TOC" class="headerlink" title="设置是否自动打开TOC"></a>设置是否自动打开TOC</h3><p>可选择进入文章页面时，是否自动打开sidebar显示TOC</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_open_sidebar:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p>相关文章推荐的原理是根据文章tags的比重来推荐</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">related_post:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">limit:</span> <span class="number">6</span> <span class="comment"># 显示推荐文章数目</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-relatedpost.png" class="lazyload"></p><h2 id="Footer-设置"><a href="#Footer-设置" class="headerlink" title="Footer 设置"></a>Footer 设置</h2><h3 id="博客年份"><a href="#博客年份" class="headerlink" title="博客年份"></a>博客年份</h3><p><code>since</code>是一个来展示你站点起始时间的选项。它位于页面的最底部。</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">since:</span> <span class="number">2018</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-since.png" class="lazyload"></p><h3 id="页脚自定义文本"><a href="#页脚自定义文本" class="headerlink" title="页脚自定义文本"></a>页脚自定义文本</h3><p><code>footer_custom_text</code>是一个给你用来在页脚自定义文本的选项。通常你可以在这里写声明文本等。支持 HTML。</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">footer_custom_text:</span> <span class="string">Hi,</span> <span class="string">welcome</span> <span class="string">to</span> <span class="string">my</span> <span class="string">&lt;a</span> <span class="string">href="https://jerryc.me/"&gt;blog&lt;/a&gt;!</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-footer-text.png" class="lazyload"></p><h3 id="ICP"><a href="#ICP" class="headerlink" title="ICP"></a>ICP</h3><p>对于部分有备案的域名，可以在ICP配置显示。</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">ICP:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">url:</span> <span class="string">http://www.beian.miit.gov.cn/state/outPortal/loginPortal.action</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">text:</span> <span class="string">粤ICP备xxxx</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">icon:</span> <span class="string">/img/icp.png</span></span></pre></td></tr></tbody></table></figure><h2 id="右下角按钮"><a href="#右下角按钮" class="headerlink" title="右下角按钮"></a>右下角按钮</h2><h3 id="简繁转换"><a href="#简繁转换" class="headerlink" title="简繁转换"></a>简繁转换</h3><p>简体繁体互换</p><p>右下角会有简繁转换按钮。</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">translate:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 默认按钮显示文字(网站是简体，应设置为'default: 繁')</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">default:</span> <span class="string">简</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">#网站默认语言，1: 繁体中文, 2: 简体中文</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">#延迟时间,若不在前, 要设定延迟翻译时间, 如100表示100ms,默认为0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">#博客网址</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">cookieDomain:</span> <span class="string">"https://jerryc.me/"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">#当文字是简体时，按钮显示的文字</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">"繁"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">#当文字是繁体时，按钮显示的文字</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">"简"</span></span></pre></td></tr></tbody></table></figure><blockquote><p>简体</p></blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-simp.png" class="lazyload"></p><blockquote><p>繁体</p></blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-tranditional.png" class="lazyload"></p><h3 id="夜间模式"><a href="#夜间模式" class="headerlink" title="夜间模式"></a>夜间模式</h3><p>右下角会有夜间模式按钮</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 夜间模式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">darkmode:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-dark-mode.png" class="lazyload"></p><blockquote><p>V2.0.0 开始增加一个选项，可开启自动切换light mode 和 dark mode</p><p>autoChangeMode: 1  跟随系统而变化，不支持的浏览器/系统将按照时间晚上6点到早上6点之间切换为 dark mode</p><p>autoChangeMode: 2  只按照时间 晚上6点到早上6点之间切换为 dark mode,其余时间为light mode</p><p>autoChangeMode: false 取消自动切换</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动切换 dark mode和 light mode</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">autoChangeMode:</span> <span class="literal">false</span></span></pre></td></tr></tbody></table></figure><h3 id="阅读模式"><a href="#阅读模式" class="headerlink" title="阅读模式"></a>阅读模式</h3><p>阅读模式下会去掉除文章外的内容，避免干扰阅读。</p><p>只会出现在文章页面，右下角会有阅读模式按钮。</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">readmode:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-read-mode.png" class="lazyload"></p><h2 id="侧边栏设置"><a href="#侧边栏设置" class="headerlink" title="侧边栏设置"></a>侧边栏设置</h2><h3 id="侧边排版"><a href="#侧边排版" class="headerlink" title="侧边排版"></a>侧边排版</h3><p>可自行决定哪个项目需要显示，可决定位置。</p><blockquote><p>至少需要显示一个</p></blockquote><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">aside:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># left or right</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">card_author:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">card_announcement:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">card_recent_post:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">card_categories:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">card_tags:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">card_archives:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">card_webinfo:</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><p><strong>left</strong><br><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-aside-left.png" class="lazyload"></p><p><strong>right</strong><br><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-aside-right.png" class="lazyload"></p><h3 id="访问人数-busuanzi-UV-和-PV"><a href="#访问人数-busuanzi-UV-和-PV" class="headerlink" title="访问人数 busuanzi (UV 和 PV)"></a>访问人数 busuanzi (UV 和 PV)</h3><p>访问 busuanzi 的<a href="http://busuanzi.ibruce.info/" target="_blank" rel="external nofollow noreferrer noopener">官方网站</a>查看更多的介绍。</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-busuanzi-site-pv.png" class="lazyload"></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-pv.png" class="lazyload"></p><h3 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h3><p>网页已运行时间</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">runtimeshow:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">start_date:</span> <span class="number">6</span><span class="string">/7/2018</span> <span class="number">00</span><span class="string">:00:00</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">##网页开通时间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">#格式: 月/日/年 时间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">#也可以写成 年/月/日 时间</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-runtime.png" class="lazyload"></p><h2 id="Note-Bootstrap-Callout"><a href="#Note-Bootstrap-Callout" class="headerlink" title="Note (Bootstrap Callout)"></a>Note (Bootstrap Callout)</h2><p>移植于next主题（注意，书写不是markdown规范，而是hexo特有的功能，故在其它地方会显示不出效果）</p><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># Note tag style values:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span></pre></td></tr></tbody></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight md"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{% note [class] [no-icon] %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Any content (support inline tags too.io).</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">{% endnote %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">[class]   : default | primary | success | info | warning | danger.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">[no-icon] : Disable icon in note.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">All parameters are optional.</span></pre></td></tr></tbody></table></figure><p>具体效果、用法可查看<a href="https://theme-next.org/docs/tag-plugins/note" target="_blank" rel="external nofollow noreferrer noopener">这里</a></p><h2 id="Gallery相册"><a href="#Gallery相册" class="headerlink" title="Gallery相册"></a>Gallery相册</h2><blockquote><p>2.0.0以上提供</p></blockquote><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。</p><p>写法:</p><figure class="highlight md"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{% gallery %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">markdown 图片格式</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">{% endgallery %}</span></pre></td></tr></tbody></table></figure><p>例如</p><figure class="highlight md"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{% gallery %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">![](https://gratisography.com/wp-content/uploads/2019/10/gratisography-scary-pumpkin-hand-900x600.jpg)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">![](https://gratisography.com/wp-content/uploads/2019/10/gratisography-fresh-fish-dinner-900x600.jpg)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">![](https://gratisography.com/wp-content/uploads/2019/10/gratisography-mountain-cloud-landscape-900x600.jpg)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">![](https://picjumbo.com/wp-content/uploads/iphone-free-stock-photos-2210x3315.jpg)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">![](https://picjumbo.com/wp-content/uploads/young-millennial-girl-drinking-lemonade-and-overlooking-the-city-2210x1473.jpg)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">![](https://picjumbo.com/wp-content/uploads/modern-graphic-designer-essentials<span class="emphasis">_free_</span>stock<span class="emphasis">_photos_</span>picjumbo_HNCK4919-2210x1474.jpg)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">{% endgallery %}</span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/20191101143214.png" class="lazyload"></p><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><blockquote><p>只能选择一个评论服务商</p></blockquote><h3 id="Disqus"><a href="#Disqus" class="headerlink" title="Disqus"></a>Disqus</h3><p>注册 <a href="https://disqus.com/" target="_blank" rel="external nofollow noreferrer noopener">disqus</a>，配置你自己的 disqus，然后在<code>Butterfly</code>里开启它。</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">disqus:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># or false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">shortname:</span> <span class="string">你的disqus的</span> <span class="string">short-name</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-disqus.png" class="lazyload"></p><h3 id="Laibili（来必力）"><a href="#Laibili（来必力）" class="headerlink" title="Laibili（来必力）"></a>Laibili（来必力）</h3><p>注册<a href="http://www.laibili.com.cn/" target="_blank" rel="external nofollow noreferrer noopener">来必力</a>，配置你自己的来必力设置，然后在<code>Butterfly</code>里开启它。</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">laibili:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># or false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">uid:</span> <span class="string">你的laibili的uid</span></span></pre></td></tr></tbody></table></figure><p>laibili 的 uid 你能在这里找到:</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-laibili.jpg" class="lazyload"></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-laibili_2.png" class="lazyload"></p><h3 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h3><p>遵循 <a href="https://github.com/gitalk/gitalk" target="_blank" rel="external nofollow noreferrer noopener">gitalk</a>的指示去获取你的 github Oauth 应用的 client id 和 secret 值。以及查看它的相关配置说明。</p><p>然后配置<code>butterfly.yml</code>:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">client_id:</span> <span class="string">你的client</span> <span class="string">id</span> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">client_secret:</span> <span class="string">你的client</span> <span class="string">secret</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">repo:</span> <span class="string">你的github仓库</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">owner:</span> <span class="string">你的github用户名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">admin:</span> <span class="string">该仓库的拥有者或协作者</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-gitalk.png" class="lazyload"></p><h3 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a>Valine</h3><p>遵循 <a href="https://github.com/xCss/Valine" target="_blank" rel="external nofollow noreferrer noopener">Valine</a>的指示去配置你的 LeanCloud 应用。以及查看相应的配置说明。</p><p>然后配置<code>butterfly.yml</code>:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># if you want use valine,please set this value is true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">appId:</span>   <span class="comment"># leancloud application app id</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">appKey:</span>   <span class="comment"># leancloud application app key</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># valine mail notify (true/false) https://github.com/xCss/Valine/wiki</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># valine verify code (true/false)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># comment list page size</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">avatar:</span> <span class="string">monsterid</span> <span class="comment"># gravatar style https://valine.js.org/#/avatar</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">lang:</span> <span class="string">en</span> <span class="comment"># i18n: zh-cn/en/tw</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">placeholder:</span> <span class="string">Please</span> <span class="string">leave</span> <span class="string">your</span> <span class="string">footprints</span> <span class="comment"># valine comment input placeholder(like: Please leave your footprints )</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment">#valine comment header inf</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-valine.png" class="lazyload"></p><h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><blockquote><p>只能选择一个分享服务商</p></blockquote><h3 id="AddThis"><a href="#AddThis" class="headerlink" title="AddThis"></a>AddThis</h3><blockquote><p>找到你的 pub-id</p></blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-addthis.jpg" class="lazyload"></p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">addThis:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># or false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">pubid:</span> <span class="string">你的pub-id</span></span></pre></td></tr></tbody></table></figure><h3 id="Sharejs"><a href="#Sharejs" class="headerlink" title="Sharejs"></a>Sharejs</h3><p>如果你不知道 <a href="https://github.com/overtrue/share.js/" target="_blank" rel="external nofollow noreferrer noopener">sharejs</a>，看看它的说明。</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">sharejs:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">sites:</span> <span class="string">facebook,twitter,wechat,weibo,qq</span>  <span class="comment">#想要显示的内容</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-sharejs.png" class="lazyload"></p><h3 id="Addtoany"><a href="#Addtoany" class="headerlink" title="Addtoany"></a>Addtoany</h3><p>可以到<a href="https://www.addtoany.com/" target="_blank" rel="external nofollow noreferrer noopener">addtoany</a>查看使用说明</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">addtoany:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">item:</span>   <span class="comment"># 显示的内容</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">facebook</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">twitter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">wechat</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">sina_weibo</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">facebook_messenger</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">email</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">copy_link</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-addtoany.png" class="lazyload"></p><h2 id="搜索系统"><a href="#搜索系统" class="headerlink" title="搜索系统"></a>搜索系统</h2><h3 id="Algolia"><a href="#Algolia" class="headerlink" title="Algolia"></a>Algolia</h3><ol><li><p>你需要安装 <a href="https://github.com/oncletom/hexo-algolia" target="_blank" rel="external nofollow noreferrer noopener">hexo-algolia</a>或 <a href="https://github.com/LouisBarranqueiro/hexo-algoliasearch" target="_blank" rel="external nofollow noreferrer noopener">hexo-algoliasearch</a>. 根据它们的说明文档去做相应的配置。</p></li><li><p>配置<code>butterfly.yml</code></p></li></ol><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">algolia_search:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">hits:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">per_page:</span> <span class="number">6</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">labels:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">hits_empty:</span> <span class="string">"We didn't find any results for the search: ${query}"</span> <span class="comment"># if there are no result</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">hits_stats:</span> <span class="string">"${hits} results found in ${time} ms"</span></span></pre></td></tr></tbody></table></figure><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><ol><li><p>你需要安装 <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external nofollow noreferrer noopener">hexo-generator-search</a>. 根据它的文档去做相应配置。<strong>注意格式只支持 xml</strong>。</p></li><li><p>配置<code>butterfly.yml</code></p></li></ol><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">labels:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">hits_empty:</span> <span class="string">"We didn't find any results for the search: ${query}"</span> <span class="comment"># if there are no result</span></span></pre></td></tr></tbody></table></figure><h2 id="网站验证"><a href="#网站验证" class="headerlink" title="网站验证"></a>网站验证</h2><p>如果需要搜索引擎收录网站，可能需要登录对应搜索引擎的管理平台进行提交。<br>各自的验证码可从各自管理平台拿到</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Google Webmaster tools verification setting</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># See: https://www.google.com/webmasters/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="attr">google_site_verification:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Bing Webmaster tools verification setting</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># See: https://www.bing.com/webmaster/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="attr">bing_site_verification:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Yandex Webmaster tools verification setting</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># See: https://webmaster.yandex.ru/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="attr">yandex_site_verification:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Baidu Webmaster tools verification setting</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># See: https://ziyuan.baidu.com/site/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="attr">baidu_site_verification:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 360 Webmaster tools verification setting</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># see http://zhanzhang.so.com/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="attr">qihu_site_verification:</span></span></pre></td></tr></tbody></table></figure><h2 id="分析统计"><a href="#分析统计" class="headerlink" title="分析统计"></a>分析统计</h2><h3 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h3><ol><li><p>登录百度统计的<a href="https://tongji.baidu.com/web/welcome/login" target="_blank" rel="external nofollow noreferrer noopener">官方网站</a></p></li><li><p>找到你百度统计的统计代码</p></li></ol><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-baidu-tongji.jpg" class="lazyload"></p><ol start="3"><li>配置<code>butterfly.yml</code></li></ol><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">baidu_analytics:</span> <span class="string">你的代码</span></span></pre></td></tr></tbody></table></figure><h3 id="谷歌分析"><a href="#谷歌分析" class="headerlink" title="谷歌分析"></a>谷歌分析</h3><ol><li><p>登录谷歌分析的<a href="https://www.google.com/analytics/" target="_blank" rel="external nofollow noreferrer noopener">官方网站</a></p></li><li><p>找到你的谷歌分析的跟踪 ID</p></li></ol><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-google-analytics.jpg" class="lazyload"></p><ol start="3"><li>配置<code>butterfly.yml</code></li></ol><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">google_analytics:</span> <span class="string">你的代码</span> <span class="comment"># 通常以`UA-`打头</span></span></pre></td></tr></tbody></table></figure><h2 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h2><blockquote><p>建议使用 KaTex 获得更好的效果，下文有介绍！</p></blockquote><p>配置<code>butterfly.yml</code>:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">mathjax:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># or false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">cdn:</span> <span class="string">https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span> <span class="comment"># required</span></span></pre></td></tr></tbody></table></figure><p>然后你需要修改一下默认的<code>markdown</code>渲染引擎来实现 MathJax 的效果。</p><p>查看: <a href="https://www.npmjs.com/package/hexo-renderer-kramed" target="_blank" rel="external nofollow noreferrer noopener">hexo-renderer-kramed</a></p><p>以下操作在你 hexo 博客的目录下 (<strong>不是 Butterfly 的目录!</strong>):</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-mathjax.png" class="lazyload"></p><p>效果：</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-mathjax-2.jpg" class="lazyload"></p><h2 id="KaTeX"><a href="#KaTeX" class="headerlink" title="KaTeX"></a>KaTeX</h2><p>首先禁用<code>MathJax</code>（如果你配置过 MathJax 的话），然后修改你的<code>butterfly.yml</code>以便加载<code>katex.min.css</code>:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">katex:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">cdn:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">css:</span> <span class="string">https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css</span></span></pre></td></tr></tbody></table></figure><p>你不需要添加<code>katex.min.js</code>来渲染数学方程。相应的你需要卸载你之前的 hexo 的 markdown 渲染器以及<code>hexo-math</code>，然后安装新的<code>hexo-renderer-markdown-it-plus</code>:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换 `hexo-renderer-kramed` 或者 `hexo-renderer-marked` 等hexo的markdown渲染器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 你可以在你的package.json里找到hexo的markdwon渲染器，并将其卸载</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">un</span> <span class="string">hexo-renderer-marked</span> <span class="string">--save</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># or</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">un</span> <span class="string">hexo-renderer-kramed</span> <span class="string">--save</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载 `hexo-math`</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">un</span> <span class="string">hexo-math</span> <span class="string">--save</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 然后安装 `hexo-renderer-markdown-it-plus`</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">i</span> <span class="string">@upupming/hexo-renderer-markdown-it-plus</span> <span class="string">--save</span></span></pre></td></tr></tbody></table></figure><p>注意到 <a href="https://github.com/CHENXCHEN/hexo-renderer-markdown-it-plus" target="_blank" rel="external nofollow noreferrer noopener"><code>hexo-renderer-markdown-it-plus</code></a>已经无人持续维护, 所以我们使用 <a href="https://github.com/upupming/hexo-renderer-markdown-it-plus" target="_blank" rel="external nofollow noreferrer noopener"><code>@upupming/hexo-renderer-markdown-it-plus</code></a>。 这份 fork 的代码使用了 <a href="https://github.com/yzhang-gh/markdown-it-katex" target="_blank" rel="external nofollow noreferrer noopener"><code>@neilsustc/markdown-it-katex</code></a>同时它也是 VSCode 的插件 <a href="https://github.com/yzhang-gh/vscode-markdown" target="_blank" rel="external nofollow noreferrer noopener">Markdown All in One</a>所使用的, 所以我们可以获得最新的 KaTex 功能例如 <code>\tag{}</code>。</p><p>你还可以通过 <a href="https://github.com/yzhang-gh/markdown-it-katex" target="_blank" rel="external nofollow noreferrer noopener"><code>@neilsustc/markdown-it-katex</code></a>控制 KaTeX 的设置，所有可配置的选项参见 <a href="https://katex.org/docs/options.html。" target="_blank" rel="external nofollow noreferrer noopener">https://katex.org/docs/options.html。</a> 比如你想要禁用掉 KaTeX 在命令行上输出的宂长的警告信息，你可以在根目录的 <code>_config.yml</code> 中使用下面的配置将 <code>strict</code> 设置为 false:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">markdown_it_plus:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">plugins:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="attr">plugin:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">name:</span> <span class="string">'@neilsustc/markdown-it-katex'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">options:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="attr">strict:</span> <span class="literal">false</span></span></pre></td></tr></tbody></table></figure><p>当然，你还可以利用这个特性来定义一些自己常用的 <code>macros</code>。</p><p>因为 KaTeX 更快更轻量，因此没有 MathJax 的功能多（比如右键菜单）。为那些使用 MathJax 的用户，我们也为 KaTeX 默认添加了 <a href="https://github.com/upupming/katex-copytex" target="_blank" rel="external nofollow noreferrer noopener"><em>Copy As TeX Code</em></a>的功能。</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-katex.gif" class="lazyload"></p><h2 id="美化-特效"><a href="#美化-特效" class="headerlink" title="美化/特效"></a>美化/特效</h2><h3 id="自定义主题色"><a href="#自定义主题色" class="headerlink" title="自定义主题色"></a>自定义主题色</h3><p>可以修改大部分UI颜色</p><p>配置<code>butterfly.yml</code>，比如：</p><blockquote><p>颜色值必须被双引号包裹，就像<code>"#000"</code>而不是<code>#000</code>。否则将会在构建的时候报错！</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">theme_color:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">main:</span> <span class="string">"#9370DB"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">paginator:</span> <span class="string">"#7A7FF1"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">button_hover:</span> <span class="string">"#FF7242"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">text_selection:</span> <span class="string">"#69c46d"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">link_color:</span> <span class="string">"#858585"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">hr_color:</span> <span class="string">"#A4D8FA"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">read-mode-bg_color:</span> <span class="string">'#FAF9DE'</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-color_1.png" class="lazyload"><br><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-color_2.png" class="lazyload"></p><h3 id="网站背景"><a href="#网站背景" class="headerlink" title="网站背景"></a>网站背景</h3><p>默认显示白色，可设置图片或者颜色</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 图片格式 background: url(http://xxxxxx.com/xxx.jpg)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 颜色 background: '#49B202'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 留空 显示白色</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="attr">background:</span></span></pre></td></tr></tbody></table></figure><p><code>background:'#49B202'</code></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-set-body-background-color.png" class="lazyload"></p><p><code>background: url(https://i.loli.net/2019/09/09/5oDRkWVKctx2b6A.png)</code></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-set-body-background-img.png" class="lazyload"></p><h3 id="footer-背景"><a href="#footer-背景" class="headerlink" title="footer 背景"></a>footer 背景</h3><p>footer 的背景会与<code>top_img</code>的一致, 当设置<code>false</code>时，将与主题色一致。</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># footer是否显示图片背景(与top_img一致)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">footer_bg:</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><p><code>true</code></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-footer-img.png" class="lazyload"></p><h3 id="打字效果"><a href="#打字效果" class="headerlink" title="打字效果"></a>打字效果</h3><p>打字效果<a href="https://github.com/disjukr/activate-power-mode" target="_blank" rel="external nofollow noreferrer noopener">activate-power-mode</a></p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">activate_power_mode:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-type-animation.gif" class="lazyload"></p><h3 id="静止彩带"><a href="#静止彩带" class="headerlink" title="静止彩带"></a>静止彩带</h3><p>好看的彩带背景，可设置每次刷新更换彩带，或者每次点击更换彩带</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">canvas_ribbon:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">size:</span> <span class="number">150</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">click_to_change:</span> <span class="literal">false</span>  <span class="comment">#设置是否每次点击都更换彩带</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span> <span class="comment"># false 手机端不显示 true 手机端显示</span></span></pre></td></tr></tbody></table></figure><p>相关配置可查看<a href="https://github.com/hustcc/ribbon.js" target="_blank" rel="external nofollow noreferrer noopener">canvas_ribbon</a></p><h3 id="动态彩带"><a href="#动态彩带" class="headerlink" title="动态彩带"></a>动态彩带</h3><p>好看的彩带背景，会飘动</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">canvas_ribbon_piao:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span> <span class="comment"># false 手机端不显示 true 手机端显示</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-canvas-ribbon-piao.gif" class="lazyload"></p><h3 id="canvas-nest"><a href="#canvas-nest" class="headerlink" title="canvas-nest"></a>canvas-nest</h3><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">color:</span> <span class="string">'0,0,255'</span> <span class="comment">#color of lines, default: '0,0,0'; RGB values: (R,G,B).(note: use ',' to separate.)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">opacity:</span> <span class="number">0.7</span> <span class="comment"># the opacity of line (0~1), default: 0.5.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background, default: -1.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">count:</span> <span class="number">99</span> <span class="comment"># the number of lines, default: 99.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span> <span class="comment"># false 手机端不显示 true 手机端显示</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-canvas_nest.gif" class="lazyload"></p><h3 id="鼠标点击效果"><a href="#鼠标点击效果" class="headerlink" title="鼠标点击效果"></a>鼠标点击效果</h3><h4 id="烟花"><a href="#烟花" class="headerlink" title="烟花"></a>烟花</h4><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">fireworks:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-firewall.gif" class="lazyload"></p><h4 id="爱心"><a href="#爱心" class="headerlink" title="爱心"></a>爱心</h4><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 点击出现爱心</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">click_heart:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/click_love.gif" class="lazyload"></p><h4 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h4><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 点击出现文字，文字可自行修改</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">ClickShowText:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">text:</span> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">富强</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">民主</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">文明</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">和谐</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">自由</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">平等</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">公正</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">法治</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">爱国</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">敬业</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">诚信</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">友善</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">fontSize:</span> <span class="string">15px</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/click_word.gif" class="lazyload"></p><h3 id="文章页美化"><a href="#文章页美化" class="headerlink" title="文章页美化"></a>文章页美化</h3><p>会改变ol、ul、h1-h5的样式</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">post_beautify:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">title-prefix-icon:</span> <span class="string">'\f0c1'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">title-prefix-icon-color:</span> <span class="string">"#F47466"</span></span></pre></td></tr></tbody></table></figure><p><code>title-prefix-icon</code>填写的是fontawesome的icon的Unicode数。<br><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-fontwesome-unicode.png" class="lazyload"></p><blockquote><p>未开启美化</p></blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-post-beautify.png" class="lazyload"></p><blockquote><p>开启美化</p></blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-post-beautif.png" class="lazyload"></p><h3 id="自定义字体"><a href="#自定义字体" class="headerlink" title="自定义字体"></a>自定义字体</h3><p>可自行设置字体的<code>font-family</code></p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">font-family:</span> <span class="string">Lato,</span> <span class="string">Helvetica</span> <span class="string">Neue</span> <span class="string">For</span> <span class="string">Number,</span> <span class="string">-apple-system,</span> <span class="string">BlinkMacSystemFont,</span> <span class="string">Segoe</span> <span class="string">UI,</span> <span class="string">Roboto,</span> <span class="string">PingFang</span> <span class="string">SC,</span> <span class="string">Hiragino</span> <span class="string">Sans</span> <span class="string">GB,"Microsoft</span> <span class="string">JhengHei",</span> <span class="string">"MicrMicrosoft YaHei"</span><span class="string">,</span> <span class="string">Helvetica</span> <span class="string">Neue,</span> <span class="string">Helvetica,</span> <span class="string">Arial,</span> <span class="string">sans-serif</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">code-font:</span> <span class="string">consolas,</span> <span class="string">Menlo,</span> <span class="string">"PingFang SC"</span><span class="string">,</span> <span class="string">"Microsoft JhengHei"</span><span class="string">,"Microsoft</span> <span class="string">YaHei",</span> <span class="string">monospace,</span> <span class="string">Helvetica</span> <span class="string">Neue</span> <span class="string">For</span> <span class="string">Number</span></span></pre></td></tr></tbody></table></figure><h3 id="网站副标题"><a href="#网站副标题" class="headerlink" title="网站副标题"></a>网站副标题</h3><blockquote><p>适用于 版本号 &gt;= V1.2.0</p><p>V2.0.0开始增加一些第三方api调用</p></blockquote><p>可设置主页中显示的网站副标题或者喜欢的座右铭。</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主页subtitle</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打字效果</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="attr">subtitle:</span> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># source调用第三方服务</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># source: false 关闭调用 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># source: 1  调用金山词霸的每日一句（简体）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># source: 2  调用一言网的一句话（简体） #https://hitokoto.cn/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># source: 3  调用一句网（简体） http://yijuzhan.com/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># source: 4  调用今日诗词（简体） https://www.jinrishici.com/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># subtitle 会先显示 source , 再显示 sub 的内容</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">source:</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># (如果有英文逗号' , '，请使用转义字符 &amp;#44;)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">sub:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">今日事&amp;#44;今日毕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">Never</span> <span class="string">put</span> <span class="string">off</span> <span class="string">till</span> <span class="string">tomorrow</span> <span class="string">what</span> <span class="string">you</span> <span class="string">can</span> <span class="string">do</span> <span class="string">today</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-index-subtitle.gif" class="lazyload"></p><h3 id="主页top-img显示大小"><a href="#主页top-img显示大小" class="headerlink" title="主页top_img显示大小"></a>主页top_img显示大小</h3><blockquote><p>适用于 版本号 &gt;= V1.2.0</p></blockquote><p>默认的显示为全屏。site-info的区域会居中显示</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主页设置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认top_img全屏，site_info在中间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用默认, 都无需填写（建议默认）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="attr">index_site_info_top:</span>   <span class="comment">#主页标题距离顶部距离  例如 300px/300em/300rem/10%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="attr">index_top_img_height:</span>  <span class="comment">#主页top_img高度 例如 300px/300em/300rem  不能使用百分比</span></span></pre></td></tr></tbody></table></figure><p>注意：<code>index_top_img_height</code>的值不能使用百分比。<br>2个都不填的话，会使用默认值</p><p>举例，当</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">index_site_info_top:</span> <span class="number">40</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">index_top_img_height:</span> <span class="string">400px</span></span></pre></td></tr></tbody></table></figure><p>效果</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-index-top-img-setting.png" class="lazyload"></p><h2 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h2><p>要为<code>Butterfly</code>配上 PWA 特性, 你需要如下几个步骤:</p><ol><li><p>打开 hexo 工作目录</p></li><li><p><code>npm install hexo-offline --save</code> 或者 <code>yarn add hexo-offline</code></p></li><li><p>修改<code>_config.yml</code> 在站点<code>_config.yml</code>中增加以下内容。</p></li></ol><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># offline config passed to sw-precache.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">offline:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">maximumFileSizeToCacheInBytes:</span> <span class="number">10485760</span> <span class="comment"># 缓存的最大文件大小，以字节为单位</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">staticFileGlobs:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">public/**/*.{js,html,css,png,jpg,gif,svg,webp,eot,ttf,woff,woff2}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 静态文件合集，如果你的站点使用了例如webp格式的文件，请将文件类型添加进去。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">stripPrefix:</span> <span class="string">public</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">verbose:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">runtimeCaching:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># CDNs - should be cacheFirst, since they should be used specific versions so should not change</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="attr">urlPattern:</span> <span class="string">/*</span> <span class="comment"># 如果你需要加载CDN资源，请配置该选项，如果没有，可以不配置。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">handler:</span> <span class="string">cacheFirst</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">options:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="attr">origin:</span> <span class="string">your_websie_url</span> <span class="comment"># 可替换成你的 url</span></span></pre></td></tr></tbody></table></figure><p>更多内容请查看 <a href="https://github.com/JLHwung/hexo-offline" target="_blank" rel="external nofollow noreferrer noopener">hexo-offline</a>的官方文档</p><ol start="4"><li>在<code>butterfly.yml</code>中开启 pwa 选项。</li></ol><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">pwa:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">manifest:</span> <span class="string">/img/pwa/manifest.json</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">theme_color:</span> <span class="string">"#fff"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/img/pwa/apple-touch-icon.png</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">favicon_32_32:</span> <span class="string">/img/pwa/32.png</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">favicon_16_16:</span> <span class="string">/img/pwa/16.png</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">mask_icon:</span> <span class="string">/img/pwa/safari-pinned-tab.svg</span></span></pre></td></tr></tbody></table></figure><ol start="5"><li>在创建<code>source/</code>目录中创建<code>manifest.json</code>文件。</li></ol><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">"name"</span>: <span class="string">"string"</span>, <span class="comment">//应用全称</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">"short_name"</span>: <span class="string">"Junzhou"</span>, <span class="comment">//应用简称</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">"theme_color"</span>: <span class="string">"#49b1f5"</span>, <span class="comment">//匹配浏览器的地址栏颜色</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">"background_color"</span>: <span class="string">"#49b1f5"</span>,<span class="comment">//加载应用时的背景色</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">"display"</span>: <span class="string">"standalone"</span>,<span class="comment">//首选显示模式 其他选项有：fullscreen,minimal-ui,browser</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">"scope"</span>: <span class="string">"/"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">"start_url"</span>: <span class="string">"/"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">"icons"</span>: [ <span class="comment">//该数组指定icons图标参数，用来时适配不同设备（需为png，至少包含一个192px*192px的图标）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">          <span class="attr">"src"</span>: <span class="string">"images/pwaicons/36.png"</span>, <span class="comment">//图标文件的目录，需在source/目录下自行创建。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">          <span class="attr">"sizes"</span>: <span class="string">"36x36"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">          <span class="attr">"type"</span>: <span class="string">"image/png"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        },</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="attr">"src"</span>: <span class="string">"images/pwaicons/48.png"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">          <span class="attr">"sizes"</span>: <span class="string">"48x48"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">          <span class="attr">"type"</span>: <span class="string">"image/png"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        },</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">          <span class="attr">"src"</span>: <span class="string">"images/pwaicons/72.png"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">          <span class="attr">"sizes"</span>: <span class="string">"72x72"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">          <span class="attr">"type"</span>: <span class="string">"image/png"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        },</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">          <span class="attr">"src"</span>: <span class="string">"images/pwaicons/96.png"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">          <span class="attr">"sizes"</span>: <span class="string">"96x96"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">          <span class="attr">"type"</span>: <span class="string">"image/png"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        },</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">          <span class="attr">"src"</span>: <span class="string">"images/pwaicons/144.png"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">          <span class="attr">"sizes"</span>: <span class="string">"144x144"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">          <span class="attr">"type"</span>: <span class="string">"image/png"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        },</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">          <span class="attr">"src"</span>: <span class="string">"images/pwaicons/192.png"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">          <span class="attr">"sizes"</span>: <span class="string">"192x192"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">          <span class="attr">"type"</span>: <span class="string">"image/png"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        },</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">            <span class="attr">"src"</span>: <span class="string">"images/pwaicons/512.png"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">            <span class="attr">"sizes"</span>: <span class="string">"512x512"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">            <span class="attr">"type"</span>: <span class="string">"image/png"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">          }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">      ],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">"splash_pages"</span>: <span class="literal">null</span> <span class="comment">//配置自定义启动动画。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr></tbody></table></figure><p>你也可以通过 <a href="https://app-manifest.firebaseapp.com/" target="_blank" rel="external nofollow noreferrer noopener">Web App Manifest</a>快速创建<code>manifest.json</code>。（Web App Manifest 要求至少包含一个 512*512 像素的图标）</p><ol start="6"><li><p>可以通过<code>Chrome</code>插件<code>Lighthouse</code>检查 PWA 配置是否生效以及配置是否正确。</p><ul><li>打开博客页面</li><li>启动<code>Lighthouse</code>插件 (<code>Lighthouse</code>插件要求至少包含一个 512*512 像素的图标)</li></ul></li></ol><p>关于 PWA（渐进式增强 Web 应用）的更多内容请参阅 <a href="https://developers.google.com/web/tools/lighthouse/audits/address-bar" target="_blank" rel="external nofollow noreferrer noopener">Google Tools for Web Developers</a></p><h2 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h2><p>要为<code>Butterfly</code>配上字数统计特性, 你需要如下几个步骤:</p><ol><li><p>打开 hexo 工作目录</p></li><li><p><code>npm install hexo-wordcount --save</code> or <code>yarn add hexo-wordcount</code></p></li><li><p>配置<code>butterfly.yml</code>:</p></li></ol><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">wordcount:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-word-count.png" class="lazyload"></p><h2 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h2><p>要为你一些文章置顶，你需要如下步骤:</p><ol><li>打开 hexo 工作目录</li><li><code>npm uninstall hexo-generator-index --save</code> 然后 <code>npm install hexo-generator-index-pin-top --save</code></li><li>你要在文章的<code>front-matter</code>区域里添加<code>top: True</code>属性来把这篇文章置顶。</li><li>你可以参考 <a href="https://github.com/netcan/hexo-generator-index-pin-top" target="_blank" rel="external nofollow noreferrer noopener">hexo-generator-index-pin-top</a>这个仓库来了解更多细节。</li></ol><p>举个例子:</p><p>你的某篇文章开头如下：</p><figure class="highlight md"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">title: xxxx</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">tags:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="bullet">  - </span>xxx</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">date: 2018-08-08 08:08:08</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">// ....</span></pre></td></tr></tbody></table></figure><p>现在把<code>top: True</code>加进去：</p><figure class="highlight md"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">title: xxxx</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">tags:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="bullet">  - </span>xxx</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">date: 2018-08-08 08:08:08</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">top: True</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">// ....</span></pre></td></tr></tbody></table></figure><h2 id="图片大图查看模式"><a href="#图片大图查看模式" class="headerlink" title="图片大图查看模式"></a>图片大图查看模式</h2><p>默认为 fancybox,可以选择改为 medium_zoom</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">medium_zoom:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><blockquote><p>fancybox 打开模式</p></blockquote><p><img alt="fancybox.gif" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/fancybox.gif" class="lazyload"></p><blockquote><p>medium_zoom 打开模式</p></blockquote><p><img alt="medium_zoom.gif" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/medium_zoom.gif" class="lazyload"></p><h2 id="Snackbar-弹窗"><a href="#Snackbar-弹窗" class="headerlink" title="Snackbar 弹窗"></a>Snackbar 弹窗</h2><p>Snackbar弹窗,根据自己爱好开启</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Snackbar 弹窗</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/polonel/SnackBar</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># position 弹窗位置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可选 top-left / top-center / top-right / bottom-left / bottom-center / bottom-right</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="attr">snackbar:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">position:</span> <span class="string">bottom-left</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">bg_light:</span> <span class="string">'#49b1f5'</span> <span class="comment">#light mode时弹窗背景</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">bg_dark:</span> <span class="string">'#2d3035'</span> <span class="comment">#dark mode时弹窗背景</span></span></pre></td></tr></tbody></table></figure><blockquote><p>未开启Snackbar</p></blockquote><p><img alt="snackbar_false.gif" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/snackbar_false.gif" class="lazyload"></p><blockquote><p>开启Snackbar</p></blockquote><p><img alt="snackbar_true.gif" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/snackbar_true.gif" class="lazyload"></p><h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h1><p>整理了一些网友在安装过程中出现的问题。在提问题之前，先看有没有解决方法。<br><a href="../cbfcd1ae">Butterfly主题的Q&amp;A</a></p><h1 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h1><p>非常感谢以下网友的打赏</p><table><thead><tr><th>名字</th><th>金额</th></tr></thead><tbody><tr><td>iMIGw0</td><td>10</td></tr><tr><td>百事可乐</td><td>10</td></tr><tr><td>A*.</td><td>0.01</td></tr><tr><td>B*X</td><td>2.33</td></tr><tr><td>夏目木木、</td><td>5</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      hexo-theme-butterfly设置文档
    
    </summary>
    
    
      <category term="Hexo" scheme="http://notes.seirhsiao.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://notes.seirhsiao.com/tags/Hexo/"/>
    
      <category term="教程" scheme="http://notes.seirhsiao.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="主题" scheme="http://notes.seirhsiao.com/tags/%E4%B8%BB%E9%A2%98/"/>
    
      <category term="butterfly" scheme="http://notes.seirhsiao.com/tags/butterfly/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot - 配置文件外置</title>
    <link href="http://notes.seirhsiao.com/posts/ad708d57/"/>
    <id>http://notes.seirhsiao.com/posts/ad708d57/</id>
    <published>2019-06-12T10:44:33.000Z</published>
    <updated>2019-12-07T01:27:00.092Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot启动会加载大量的自动配置类，相比以前 XML 的配置方式，很多显式方式申明是不需要的，从而可以更快速的开发。</p><blockquote><p>Spring Boot的配置文件有两种：*<em>.properties *</em>文件和 *<em>.yml *</em>文件。<br>使用固定的 <code>application.properties</code> 或者 <code>application.yml</code> 文件做为全局的配置文件，启动时会扫描它们作为默认配置文件。</p><p>在很多场景下，我们需要去修改配置文件，如：端口、数据库地址等等。把所有配置全都打在包里，显然不是最好的做法，更常见的做法是把配置文件放在外面，可以在需要时不动代码的前提下修改配置。</p></blockquote><p>本文章将介绍如何自定义Sping Boot配置文件的位置。</p><a id="more"></a><h3 id="配置文件默认加载位置"><a href="#配置文件默认加载位置" class="headerlink" title="配置文件默认加载位置"></a>配置文件默认加载位置</h3><p>Spring Boot提供了将配置文件放置到包外面的方法，在没有特殊配置和命令的情况下，启动时会扫描以下位置的默认配置文件以获取配置：</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">file:./config/        # 当前目录下的/config目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">file:./               # 当前目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">classpath:/config/    # classpath里的/config目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">classpath:/           # classpath的跟目录</span></span></pre></td></tr></tbody></table></figure><h3 id="配置文件加载优先级"><a href="#配置文件加载优先级" class="headerlink" title="配置文件加载优先级"></a>配置文件加载优先级</h3><p><a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="external nofollow noreferrer noopener">参考官方文档-SpringBootConfig</a><br>优先级由高到低，高优先级的配置会覆盖低优先级的配置，互补配置。</p><ol><li><p>命令行指定</p><p>我们可以使用 <strong>–spring.config.location=xxx</strong> 这样的命令形式来配置指定目录下的配置文件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">java -jar demo.jar --spring.config.location=file:/config.yml</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 或者</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">java -jar -Dspring.config.location=file:/config.yml demo.jar</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果是指定目录的话，则路径后必须加 /</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">java -jar demo.jar --spring.config.location=file:/config/</span></pre></td></tr></tbody></table></figure><p>如果不希望命令行指定配置文件的话，可以在*<em>SpringApplication *</em>中将其禁用 <code>SpringApplication.setAddCommandLineProperties(false)</code></p></li><li><p>JNDI属性 <code>java:comp/env</code></p></li><li><p>操作系统环境变量</p><p>tomcat启动war包应用时 ，在 tomcat/bin 的 catalina.sh文件中增加一行代码:</p><figure class="highlight bash"><figcaption><span>tomcat/bin/catalina.sh</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CATALINA_OPTS=<span class="string">"<span class="variable">$CATALINA_OPTS</span> -Dspring.config.location=/config.yml"</span></span></pre></td></tr></tbody></table></figure></li><li><p>jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</p></li></ol><ol start="5"><li>jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</li></ol><ol start="6"><li>jar包外部的application.properties或application.yml(不带spring.profile)配置文件</li></ol><ol start="7"><li>jar包内部的application.properties或application.yml(不带spring.profile)配置文件</li></ol><ol start="8"><li><p>@Configuration注解类上的 <code>@PropertySource</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(value={<span class="string">"file:config.properties"</span>}, ignoreResourceNotFound = <span class="keyword">true</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootrestdemoApplication</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    SpringApplication.run(SpringbootrestdemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：@PropertySource注解配置路径的方式不适用于 .yml 文件</span></span></pre></td></tr></tbody></table></figure></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot启动会加载大量的自动配置类，相比以前 XML 的配置方式，很多显式方式申明是不需要的，从而可以更快速的开发。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring Boot的配置文件有两种：*&lt;em&gt;.properties *&lt;/em&gt;文件和 *&lt;em&gt;.yml *&lt;/em&gt;文件。&lt;br&gt;使用固定的 &lt;code&gt;application.properties&lt;/code&gt; 或者 &lt;code&gt;application.yml&lt;/code&gt; 文件做为全局的配置文件，启动时会扫描它们作为默认配置文件。&lt;/p&gt;
&lt;p&gt;在很多场景下，我们需要去修改配置文件，如：端口、数据库地址等等。把所有配置全都打在包里，显然不是最好的做法，更常见的做法是把配置文件放在外面，可以在需要时不动代码的前提下修改配置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文章将介绍如何自定义Sping Boot配置文件的位置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://notes.seirhsiao.com/categories/Spring-Boot/"/>
    
    
      <category term="Spring" scheme="http://notes.seirhsiao.com/tags/Spring/"/>
    
      <category term="SpringBoot" scheme="http://notes.seirhsiao.com/tags/SpringBoot/"/>
    
      <category term="property" scheme="http://notes.seirhsiao.com/tags/property/"/>
    
  </entry>
  
  <entry>
    <title>设置Windows电脑自动关机</title>
    <link href="http://notes.seirhsiao.com/posts/19f9ade4/"/>
    <id>http://notes.seirhsiao.com/posts/19f9ade4/</id>
    <published>2019-06-01T06:24:58.000Z</published>
    <updated>2019-12-07T01:27:00.857Z</updated>
    
    <content type="html"><![CDATA[<p>为了减少长时间沉迷电脑而忘记时间，设置Windows电脑自动关机是必要的事。<br>在我的电脑里，每到晚上10点都会自动关机。当然不会立刻关机，而是设置了1分钟的预留时间给自己保存一些文档资料。<br>Windows内建的Shutdown指令让人很方便的对这些进行操作。<br>你有没有试过在使用电脑处理一些事时，因为临时需要外出，而又不能立刻关掉电脑，这时就可以使用Shutdown设置xx时间后自动关闭电脑。</p><h2 id="shutdown的一些参数"><a href="#shutdown的一些参数" class="headerlink" title="shutdown的一些参数"></a>shutdown的一些参数</h2><h3 id="1-写法"><a href="#1-写法" class="headerlink" title="1. 写法"></a>1. 写法</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">shutdown [<span class="string">/i | /l | /s | /sg | /r | /g | /a | /p | /h | /e | /o</span>] [<span class="string">/hybrid</span>] [<span class="string">/soft</span>] [<span class="string">/fw</span>] [<span class="string">/f</span>][<span class="symbol">/m \\computer</span>][<span class="string">/t xxx</span>][<span class="symbol">/d [p|u:</span>]xx:yy [/c "comment"]]</span></pre></td></tr></tbody></table></figure><p>也可以写成</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">shutdown [<span class="string">-i | -l | -s | -sg | -r | -g | -a | -p | -h | -e | -o</span>] [<span class="string">-hybrid</span>] [<span class="string">-soft</span>] [<span class="string">-fw</span>] [<span class="string">-f</span>] [<span class="string">-m \\computer</span>][<span class="symbol">-t xxx</span>][<span class="string">-d [p|u:</span>]xx:yy [-c "comment"]]</span></pre></td></tr></tbody></table></figure><h3 id="2-参数"><a href="#2-参数" class="headerlink" title="2. 参数"></a>2. 参数</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>No args</td><td>显示说明。与输入 /? 意义相同。</td></tr><tr><td>/?</td><td>显示说明。与不输入任何选项意义相同。</td></tr><tr><td>/i</td><td>显示图形化使用者介面 (GUI)。<br>这必须是第一个选项。</td></tr><tr><td>/l</td><td>登出。不能和 /m 或 /d 选项一起使用。</td></tr><tr><td>/s</td><td>将电脑关机。</td></tr><tr><td>/sg</td><td>将电脑关机。如有启用自动重新启动登入，<br>会在系统重新开机后自动登入并锁定上一个互动使用者。<br>登入后，会重新启动所有已注册应用程式。</td></tr><tr><td>/r</td><td>将电脑完全关机并重新开机。</td></tr><tr><td>/g</td><td>将电脑完全关机并重新启动。如有启用自动重新启动登入，<br>会在系统重新开机后自动登入并锁定上一个互动使用者。<br>登入后，会重新启动所有已注册应用程式。</td></tr><tr><td>/a</td><td>中止系统关机。<br>只有在逾时期间可以使用这个选项。<br>与 /fw 结合以清除任何搁置中的开机到韧体作业。</td></tr><tr><td>/p</td><td>没有逾时或警告就关闭本机电脑<br>能和 /d 与 /f 选项一起使用。</td></tr><tr><td>/h</td><td>让本机电脑休眠。<br>能和 /f 选项一起使用。</td></tr><tr><td>/hybrid</td><td>执行电脑关机作业，并准备电脑以用于快速启动。<br>必须搭配 /s 选项使用。</td></tr><tr><td>/fw</td><td>与关机选项结合，让下一次开机能进入<br>韧体使用者介面。</td></tr><tr><td>/e</td><td>记录电脑意外关机的理由。</td></tr><tr><td>/o</td><td>移至 [进阶开机选项] 功能表并重新启动电脑。<br> 必须搭配 /r 选项使用。</td></tr><tr><td>/m \computer</td><td>指定目标电脑。</td></tr><tr><td>/t xxx</td><td>将关机前的逾时期间设定为 xxx 秒。<br>有效的范围是 0-315360000 (10 年)，预设值为 30。<br>若逾时期间大于 0，则会隐含 /f参数。</td></tr><tr><td>/c “comment”</td><td>为重新启动或关机理由加上注解。<br>最多仅允许 512 个字元。</td></tr><tr><td>/f</td><td>强制关闭执行中的应用程式，而不事先警告使用者。<br>为 /t 参数指定大于 0 的值时，<br> 会隐含 /f 参数。</td></tr><tr><td>/d [p|u:]xx:yy</td><td>提供重新启动或关机的理由。<br> p 代表重新启动或关机是已计划的。<br> u 代表理由是由使用者所定义。<br> 若未指定 p 或 u，则重新启动或关机<br> 是非计划性。<br> xx 是主要的理由编号 (小于 256 的正整数)。<br> yy 是次要的理由编号 (小于 65536 的正整数)。</td></tr></tbody></table><p><code>shutdown /s /t 10</code>  指定10s后自动关机<br><code>shutdown /l /t 10</code>  指定10s后自动登出账号<br><code>shutdown /i</code><br><img alt="shutdown -i" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/shutdown_i.png" class="lazyload"></p><h2 id="设置自动关机的方法"><a href="#设置自动关机的方法" class="headerlink" title="设置自动关机的方法"></a>设置自动关机的方法</h2><h3 id="1-通过工作排程器"><a href="#1-通过工作排程器" class="headerlink" title="1. 通过工作排程器"></a>1. 通过工作排程器</h3><ol><li>在 <code>本机</code> 右键鼠标并选择管理。</li><li>点击左边的工作排程器<br><img alt="工作排程器" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/TaskScheduler.png" class="lazyload"></li><li>点击右边<code>动作</code>下的<code>建立基本工作</code><br><img alt="建立基本工作" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/create_basic_task.png" class="lazyload"></li><li>输入名称和描述<br><img alt="输入名称和描述" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/create_basic_task_process_1.png" class="lazyload"></li><li>选择触发程序时间（这里选择每天）<br><img alt="选择触发程序时间" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/trigger.png" class="lazyload"></li><li>设置开始的时间和间隔，间隔的数值要大于0<br><img alt="设置开始的时间和间" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/set_start_time.png" class="lazyload"></li><li>选择<code>启动程序</code><br><img alt="选择启动程序" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/action.png" class="lazyload"></li><li>程序或指令码填写<code>shutdown</code>或者点击右边的浏览，选择shutdown.exe，会变成<code>C:\Windows\System32\shutdown.exe</code>。新增引数填<code>-s</code><br><img alt="填写程序或指令码" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/start_a_program.png" class="lazyload"></li><li>检查所有填写的资料的是否正确，点击完成就可以了。这样电脑就会按照你设定的时间，到时间后就会跳出提醒。<br><img alt="建立的基本工作详情" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/finish.png" class="lazyload"></li></ol><h3 id="2-通过执行程序"><a href="#2-通过执行程序" class="headerlink" title="2. 通过执行程序"></a>2. 通过<code>执行</code>程序</h3><p>按<code>win</code>+<code>R</code>，打开<code>执行</code>程序，直接输入shutdown指令。<br><img alt="执行程序" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/Run_Command.png" class="lazyload"></p><h3 id="3-通过CMD或者PowerShell"><a href="#3-通过CMD或者PowerShell" class="headerlink" title="3. 通过CMD或者PowerShell"></a>3. 通过<code>CMD</code>或者<code>PowerShell</code></h3><p>打开<code>CMD</code>或者<code>PowerShell</code>，然后直接输入shutdown指令。</p><p><img alt="CMD" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/cmd.png" class="lazyload"><br><img alt="PowerShell" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/powershell.png" class="lazyload"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      利用Windows内建的shutdown指令让电脑自动关机
    
    </summary>
    
    
      <category term="教程" scheme="http://notes.seirhsiao.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Windows" scheme="http://notes.seirhsiao.com/categories/%E6%95%99%E7%A8%8B/Windows/"/>
    
    
      <category term="教程" scheme="http://notes.seirhsiao.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Windows" scheme="http://notes.seirhsiao.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Windows必裝軟件推薦</title>
    <link href="http://notes.seirhsiao.com/posts/59b77e20/"/>
    <id>http://notes.seirhsiao.com/posts/59b77e20/</id>
    <published>2019-05-22T10:33:08.000Z</published>
    <updated>2019-12-07T01:23:21.883Z</updated>
    
    <content type="html"><![CDATA[<p>Windows上的軟件數不勝數,同一類型的軟件眾多。到底哪一款才是適合你自己的，只有自己親自試用過才知道。以下是我比較喜歡的軟件，特別推薦給各位。</p><ol><li>下載工具：<a href="https://www.qbittorrent.org/" target="_blank" rel="external nofollow noreferrer noopener">qBittorrent</a>和<a href="https://www.internetdownloadmanager.com/" target="_blank" rel="external nofollow noreferrer noopener">Internet Download Manager</a></li><li>聊天軟件：<a href="https://tim.qq.com/index.html" target="_blank" rel="external nofollow noreferrer noopener">tim</a>(雖然已經被騰訊放棄了，但是比起QQ那麼臃腫，這個好用點）和 <a href="https://www.microsoft.com/en-us/p/wechat-for-windows/9nblggh4slx7?activetab=pivot:overviewtab" target="_blank" rel="external nofollow noreferrer noopener">微信</a>(store轉製版）</li><li>截圖軟件： <a href="https://zh.snipaste.com/" target="_blank" rel="external nofollow noreferrer noopener">snipaste</a> 這個必須推薦</li><li>編輯器： <a href="https://code.visualstudio.com/" target="_blank" rel="external nofollow noreferrer noopener">vscode</a></li><li>瀏覽器： <a href="https://www.google.com/chrome/" target="_blank" rel="external nofollow noreferrer noopener">chrome</a></li><li>視頻播放器： <a href="https://potplayer.daum.net/" target="_blank" rel="external nofollow noreferrer noopener">potplayer</a> 和 <a href="https://www.microsoft.com/store/productId/9NBLGGH5Q5FV" target="_blank" rel="external nofollow noreferrer noopener">嗶哩嗶哩UWP</a></li><li>詞典： <a href="https://www.eudic.net/v4/en/app/eudic" target="_blank" rel="external nofollow noreferrer noopener">歐陸詞典</a> 和 <a href="http://goldendict.org/" target="_blank" rel="external nofollow noreferrer noopener">GoldenDict</a></li><li>筆記：<a href="https://products.office.com/zh-hk/onenote/digital-note-taking-app?rtc=1" target="_blank" rel="external nofollow noreferrer noopener">onenote</a>  和 <a href="https://evernote.com/intl/zh-tw" target="_blank" rel="external nofollow noreferrer noopener">evernote</a> (用這個截取網頁的內容，onenote的web clipper太差）</li><li>簡單視頻製作：<a href="https://www.adobe.com/hk_zh/products/premiere/free-trial-download.html" target="_blank" rel="external nofollow noreferrer noopener">Adobe Premiere Pro</a> (編輯視頻） <a href="https://www.4kdownload.com/download" target="_blank" rel="external nofollow noreferrer noopener">4K Video Downloader</a>（下載視頻） <a href="http://www.aegisub.org/" target="_blank" rel="external nofollow noreferrer noopener">Aegisub</a> (製作字幕） <a href="https://sourceforge.net/projects/megui/" target="_blank" rel="external nofollow noreferrer noopener">Megui</a>(壓制視頻）</li><li>搜索： <a href="https://www.voidtools.com/" target="_blank" rel="external nofollow noreferrer noopener">everything</a></li><li>圖片查看： <a href="https://www.faststone.org/FSViewerDetail.htm" target="_blank" rel="external nofollow noreferrer noopener">FastStone Image Viewer</a></li><li>壓縮軟件：<a href="https://www.rarlab.com/" target="_blank" rel="external nofollow noreferrer noopener">winrar</a> (7zip也不錯，但是不能設置解壓完自動打開解壓的文件夾，只能放棄）</li><li>清理軟件： <a href="https://www.wisecleaner.com/wise-care-365.html" target="_blank" rel="external nofollow noreferrer noopener">Wise Care 365</a>  和 <a href="https://www.ccleaner.com/" target="_blank" rel="external nofollow noreferrer noopener">CCleaner</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Windows上的軟件數不勝數,同一類型的軟件眾多。到底哪一款才是適合你自己的，只有自己親自試用過才知道。以下是我比較喜歡的軟件，特別推薦給各位。
    
    </summary>
    
    
      <category term="軟件推薦" scheme="http://notes.seirhsiao.com/categories/%E8%BB%9F%E4%BB%B6%E6%8E%A8%E8%96%A6/"/>
    
    
      <category term="Windows" scheme="http://notes.seirhsiao.com/tags/Windows/"/>
    
      <category term="軟件" scheme="http://notes.seirhsiao.com/tags/%E8%BB%9F%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+NexT(v7.0+) 搭建博客：性能优化</title>
    <link href="http://notes.seirhsiao.com/posts/e824570/"/>
    <id>http://notes.seirhsiao.com/posts/e824570/</id>
    <published>2019-05-20T09:15:23.000Z</published>
    <updated>2019-12-07T01:27:01.609Z</updated>
    
    <content type="html"><![CDATA[<p>在访问很多博客的时候，页面加载和响应速度往往都要上十秒，严重影响用户的体验。<br>本文将探究如何利用常用的方案来进行性能优化，主要包括:</p><ul><li>CDN加速</li><li>Nginx压缩、缓存</li><li>图床</li></ul><a id="more"></a><p>首先，可利用 <a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="external nofollow noreferrer noopener">Google PageSpeed Insights</a> 帮助分析网页加载速度，根据报告结果和优化建议进行针对性的优化。<br>常见的网站提速方案有：cdn加速，压缩源文件，nginx gzip压缩，减少网站一些不必要的引入，图片大小等。</p><h3 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h3><p>在阅读下文之前，如果你还不知道 CDN 是什么，请先移步<a href="https://baike.baidu.com/item/CDN" target="_blank" rel="external nofollow noreferrer noopener">百度百科：CDN词条</a> 进行一些了解。<br>在所有静态资源中，对加载速度影响较大且存在大幅优化空间的主要还是「JavaScript 第三方库」脚本，设定成合适的 CDN 地址，此特性可以加速静态资源的加载。<br>对于我 Hexo 博客来说，NexT 主题已经做好了配置，只需添加 CDN 加载源，将其改为从公共 CDN 加载即可。<br>在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改<code>vendors</code>：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># jquery: //cdn.jsdelivr.net/npm/jquery@2/dist/jquery.min.js</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># jquery: //cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="attr">jquery:</span> <span class="string">//cdn.jsdelivr.net/npm/jquery@2.1.3/dist/jquery.min.js</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span></pre></td></tr></tbody></table></figure><p>比较常用的开源项目 CDN 服务商主要有 unpkg、bootcdn、 cdnjs、jsdelivr 和 cloudflare，本站主要使用 jsdelivr 提供的 CDN 加速服务。</p><h3 id="上云"><a href="#上云" class="headerlink" title="上云"></a>上云</h3><div class="note info">            <p>国内的 CDN服务 要求网站必须备案，但是有些服务商是不支持备案的，于是云主机就是我们需要的了，可以一键备案直接上云。</p>          </div><p>研究了一下各个云服务的价格，1核1G的云主机一年大概都是500+，不过近期阿里云和腾讯云针对新用户都有很给力的活动：</p><p>| 服务商 | 产品名称 | 配置 | 时长 | 原价 | 现价 | 折扣 |<br>| :—: | :—: | :————-: | :—: | :—-: |<br>| <a href="https://www.aliyun.com/acts/hi-group-buying-share?ptCode=0DB71CCB9AC09C95A317ACF8723EE01989B9F59A2D8E8A59&amp;userCode=wdpvvh4p&amp;activityId=3&amp;share_source=copy_link" target="_blank" rel="external nofollow noreferrer noopener">阿里云</a> | ECS T6 | 2核1G内存1M带宽 | 一年 | 648 | 99 | 15% |<br>|  | ECS T6  | 2核2G内存2M带宽 | 一年 | 1288 | 228 | 18% |<br>|  | ECS T6 | 2核2G内存2M带宽 | 三年 | 3858 | 614 | 16% |<br>|  | ECS T5 | 1核2G内存1M带宽（香港）| 三年 | 5068 | 719 | 14% |</p><p>看起来的话 <a href="https://www.aliyun.com/acts/hi-group-buying-share?ptCode=0DB71CCB9AC09C95A317ACF8723EE01989B9F59A2D8E8A59&amp;userCode=wdpvvh4p&amp;activityId=3&amp;share_source=copy_link" target="_blank" rel="external nofollow noreferrer noopener">阿里云2核1G的云主机</a> 一年只要99 ，简直太白菜价了。</p><p>Tips：香港主机的优势在于无需备案，且可以访问墙外的网络，要注意正规建站用途。</p><h3 id="Nginx压缩、缓存"><a href="#Nginx压缩、缓存" class="headerlink" title="Nginx压缩、缓存"></a>Nginx压缩、缓存</h3><div class="note info">            <p>Nginx 是一个高性能的 Web 服务器，可以适当地分配流量（负载均衡器）、流媒体、动态调整图像大小、缓存内容等等，合理配置可以有效提高网站的响应速度。</p>          </div><h4 id="开启gzip"><a href="#开启gzip" class="headerlink" title="开启gzip"></a>开启gzip</h4><p>gzip压缩页面需要浏览器和服务器双方都支持，实际上就是服务器端压缩，传到浏览器后浏览器解压并解析。<br>修改nginx.conf，在http模块中增加gzip配置：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">#开启gzip压缩;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">gzip  on;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">#设置允许压缩的页面最小字节数;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">gzip_min_length 1k;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">#设置压缩缓冲区大小，此处设置为4个16K内存作为压缩结果流缓存</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">gzip_buffers 4 16k;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">#压缩版本</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">gzip_http_version 1.1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">#设置压缩比率，最小为1，处理速度快，传输速度慢；9为最大压缩比，处理速度慢，传输速度快;级别越高，压缩就越小</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">gzip_comp_level 6;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">#制定压缩的类型</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/javascript application/json image/svg+xml application/x-font-ttf font/opentype image/x-icon;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">#配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">gzip_disable "MSIE [1-6]\.";</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">#选择支持vary header；改选项可以让前端的缓存服务器缓存经过gzip压缩的页面; 这个可以不写</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">gzip_vary on;</span></pre></td></tr></tbody></table></figure><h4 id="开启缓存"><a href="#开启缓存" class="headerlink" title="开启缓存"></a>开启缓存</h4><p>修改nginx.conf，在server中配置缓存和失效时间：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">location ~* ^.+\.(ico|gif|jpg|jpeg|png)$ {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    access_log off;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    expires 30d;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">location ~* ^.+\.(css|js|txt|xml|swf|wav)$ {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    access_log off;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    expires 24h;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">location ~* ^.+\.(html|htm)$ {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">     expires 1h;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><div class="note info">            <p>目前各大云服务商都提供了对象存储服务，如七牛云 QINIU、又拍云 USS、腾讯云 COS、阿里云 OSS 等。我们可以使用这些服务器来存储图片信息，并将其称为图床。</p>          </div><p>使用图床的好处：</p><ul><li>可以减轻服务器的存储压力；</li><li>减轻应为图片带来的额外的流量消耗；</li><li>图床一般都是具有cdn加速的，可以让你的网页变得更快。</li></ul><p>我主要是看中了cdn加速这点，这个对网站的性能提升太重要了。</p><p>常用的云存储服务费用对比：</p><table><thead><tr><th align="center">限定符</th><th align="center">免费存储空间</th><th align="center">免费下载流量</th><th align="center">免费请求</th><th align="center">免费时间</th><th align="center">HTTPS</th><th align="center">CDN</th></tr></thead><tbody><tr><td align="center">微博图床</td><td align="center">无限</td><td align="center">无限</td><td align="center">无限</td><td align="center">永久</td><td align="center"><i class="fa fa-close"></i></td><td align="center"><i class="fa fa-check"></i></td></tr><tr><td align="center">七牛云</td><td align="center">10G</td><td align="center">10G</td><td align="center">PUT: 10万次 <br>GET: 100万次</td><td align="center">永久</td><td align="center"><i class="fa fa-check"></i></td><td align="center"><i class="fa fa-check"></i></td></tr><tr><td align="center">青云QingStor</td><td align="center">30G</td><td align="center">11G</td><td align="center">PUT: 10万次 <br>GET: 100万次</td><td align="center">12个月</td><td align="center"><i class="fa fa-check"></i></td><td align="center"><i class="fa fa-check"></i></td></tr><tr><td align="center">又拍云USS</td><td align="center">10G</td><td align="center">15G</td><td align="center">无限</td><td align="center">12个月</td><td align="center"><i class="fa fa-check"></i></td><td align="center"><i class="fa fa-check"></i></td></tr><tr><td align="center">阿里云OSS</td><td align="center">无</td><td align="center">无</td><td align="center">无</td><td align="center">无</td><td align="center"><i class="fa fa-check"></i></td><td align="center"><i class="fa fa-check"></i></td></tr><tr><td align="center">腾讯云COS</td><td align="center">50G</td><td align="center">无</td><td align="center">无</td><td align="center">6个月</td><td align="center"><i class="fa fa-check"></i></td><td align="center"><i class="fa fa-check"></i></td></tr><tr><td align="center">Github</td><td align="center">100G</td><td align="center">无限</td><td align="center">无限</td><td align="center">永久</td><td align="center"><i class="fa fa-check"></i></td><td align="center"><i class="fa fa-close"></i></td></tr></tbody></table><ul><li>七牛云是专业云服务商，提供比较完备的服务，且免费额度足够个人博客使用。</li><li>七牛云的定位就是 CDN，让你在浏览网页的时候最快的接收到页面中的图片、音频等文件，所以非常适合个人、企业用户用来储存站点资源，且CDN加速也不会产生太多的费用。</li><li>微博图床是匿名图床，如果有一天禁止外链访问的话，图片将全部丢失。想着辛辛苦苦制作的图片有丢失的风险，马上就放弃了。【2019年4月微博图床开启了防盗链，对图片 CDN 添加了引用来源<code>Referer</code>检测，对于非微博站内引用的请求统统拒绝访问】</li><li>GitHub 看起来是个不错的选择，但是网络访问速度不是很理想，随即放弃了。</li><li>阿里云OSS也是个不错的选择，有个9元包年40G存储空间，无限流量。</li></ul><h3 id="七牛云"><a href="#七牛云" class="headerlink" title="七牛云"></a>七牛云</h3><p>综合比较之后：我选择了七牛云的对象存储作为图床(高效、快速、有保障)。<br><img alt="七牛云对象存储" title="七牛云对象存储" data-src="https://image.chingow.cn/images/20190610215145_FVk4s5_Screenshot.jpeg" class="lazyload"></p><h4 id="注册账号并实名认证"><a href="#注册账号并实名认证" class="headerlink" title="注册账号并实名认证"></a>注册账号并实名认证</h4><p>注册 <a href="https://portal.qiniu.com/signup?code=1hjtnnywndb9u" target="_blank" rel="external nofollow noreferrer noopener">七牛开发者平台</a> 账号，并前往 <strong>个人中心</strong>  -&gt;  <strong>个人信息</strong> 实名认证。</p><h4 id="新建存储空间"><a href="#新建存储空间" class="headerlink" title="新建存储空间"></a>新建存储空间</h4><ul><li><p>进入控制台，打开 <strong>对象存储</strong>  -&gt; <strong>新建存储空间</strong>， 即可创建新的Bucket。<br>【存储区域】：建议选择一个离你较近的CDN<br>【访问控制】：这里必须选择“公开空间”，因为设置为私有空间，图片的外链是无法访问的。</p></li><li><p>进入新创建的存储空间，在 <strong>空间概览</strong>里点击 <strong>自定义域名</strong> 为空间绑定融合cdn加速域名。详细的参数解释可以参考 <a href="https://developer.qiniu.com/fusion/manual/4939/the-domain-name-to-access" target="_blank" rel="external nofollow noreferrer noopener">官方域名接入文档</a> 。<br><img alt="自定义域名" title="自定义域名" data-src="https://image.chingow.cn/images/20190610224405_2DZajr_Screenshot.jpeg" class="lazyload"><br>【域名类型】：如果没有特殊需求，选择普通域名即可。<br>【加速域名】：建议填写的是，您未在使用的二级或三级域名等，请勿轻易绑定www域名避免影响您的源站服务。<br>【源站配置】：当您为存储空间绑定自定义域名的时候，源站配置默认为七牛云存储空间即可。</p></li><li><p>配置CNAME<br>创建加速域名成功后，七牛云会提供CNAME地址，需要在域名服务提供商处将加速域名指向分配的CNAME地址，配置生效后，即可享受CDN加速服务。根据控制台的引导文档并参考 <a href="https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name" target="_blank" rel="external nofollow noreferrer noopener">官方配置域名CNAME文档</a> 。</p></li></ul><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><p>进入新创建的存储空间，在 <strong>内容管理</strong> 中上传、下载、访问、修改资源，这样就可以使用资源的外链了。<br>上传图片文件以后，复制外链连接就可以利用这个链接访问这个图片了。<br><img alt="使用资源外链" title="使用资源外链" data-src="https://image.chingow.cn/images/20190610224604_5uT2oa_Screenshot.jpeg" class="lazyload"></p><h3 id="上传工具"><a href="#上传工具" class="headerlink" title="上传工具"></a>上传工具</h3><p>如果每次都需要在web端点击上传图片，然后复制外链的操作就比较麻烦了，使用工具可以让我们更加方便地上传资源。<br>Mac平台上有多款图床工具，找到了几个优秀的工具，做了个对比：</p><style>table th:nth-of-type(2){width: 10%;;}table th:nth-of-type(5){width: 15%;}</style><table><thead><tr><th align="center">名称</th><th align="center">收费标准</th><th align="center">优点</th><th align="center">缺点</th><th align="center">推荐指数</th><th align="center">下载链接</th></tr></thead><tbody><tr><td align="center">ipic</td><td align="center">60元/年</td><td align="center">剪贴板、压缩、拖拽上传，功能强大，支持多种云服务</td><td align="center">免费版只支持微博图床</td><td align="center"><i class="fa fa-star"></i></td><td align="center"><a href="https://itunes.apple.com/cn/app/ipic-markdown-%E5%9B%BE%E5%BA%8A-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%B7%A5%E5%85%B7/id1101244278?mt=12" target="_blank" rel="external nofollow noreferrer noopener">Mac App Store</a></td></tr><tr><td align="center">PicGo</td><td align="center">免费</td><td align="center">链接上传，支持相册管理</td><td align="center">不支持清除上传历史</td><td align="center"><i class="fa fa-star"> <i class="fa fa-star"> <i class="fa fa-star-half-o"></i></i></i></td><td align="center"><a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="external nofollow noreferrer noopener">PicGo.dmg</a></td></tr><tr><td align="center">PicUploader</td><td align="center">免费</td><td align="center">压缩上传，多文件、文件夹同时上传</td><td align="center">不支持顶部菜单</td><td align="center"><i class="fa fa-star"> <i class="fa fa-star"></i></i></td><td align="center"><a href="https://github.com/xiebruce/PicUploader/releases" target="_blank" rel="external nofollow noreferrer noopener">PicUploader.zip</a></td></tr><tr><td align="center">云存储管理</td><td align="center">免费</td><td align="center">链接上传，可视化相册管理</td><td align="center">上传速度太慢，会卡死（不能忍受(°⌓°;）</td><td align="center"><i class="fa fa-star"> <i class="fa fa-star"> <i class="fa fa-star"></i></i></i></td><td align="center"><a href="https://github.com/willnewii/qiniuClient" target="_blank" rel="external nofollow noreferrer noopener">云存储管理客户端</a></td></tr><tr><td align="center">cuImage</td><td align="center">免费</td><td align="center">剪贴板、压缩、拖拽上传，与ipic类似</td><td align="center">仅支持七牛云<br>不支持链接上传</td><td align="center"><i class="fa fa-star"> <i class="fa fa-star"> <i class="fa fa-star"> <i class="fa fa-star">  <i class="fa fa-star-half-o"></i></i></i></i></i></td><td align="center"><a href="https://github.com/hulizhen/cuImage/releases" target="_blank" rel="external nofollow noreferrer noopener">Mac App Store</a></td></tr></tbody></table><p>如果是使用七牛云图床我推荐cuImage，它的功能完善，使用剪贴板、拖曳、甚至是快捷键都可以直接将图片上传到云存储，并直接生成Markdown外链，操作十分简便。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在访问很多博客的时候，页面加载和响应速度往往都要上十秒，严重影响用户的体验。&lt;br&gt;本文将探究如何利用常用的方案来进行性能优化，主要包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CDN加速&lt;/li&gt;
&lt;li&gt;Nginx压缩、缓存&lt;/li&gt;
&lt;li&gt;图床&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="博客" scheme="http://notes.seirhsiao.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://notes.seirhsiao.com/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://notes.seirhsiao.com/tags/NexT/"/>
    
      <category term="阿里云" scheme="http://notes.seirhsiao.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="七牛云" scheme="http://notes.seirhsiao.com/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+NexT(v7.0+) 搭建博客：功能强化</title>
    <link href="http://notes.seirhsiao.com/posts/e0970dc8/"/>
    <id>http://notes.seirhsiao.com/posts/e0970dc8/</id>
    <published>2019-05-19T14:08:03.000Z</published>
    <updated>2019-12-07T01:27:02.558Z</updated>
    
    <content type="html"><![CDATA[<p><img alt="Photo in Chongqing Fengjie" title="Photo in Chongqing Fengjie" data-src="https://image.chingow.cn/background/20190602023505_JefG9q_6DE1E34E-037D-4EA6-A8CC-68280E0EAC1D-1264-00000122BCC398FB_tmp.jpeg" class="lazyload"></p><p>开源的力量让第三方插件的支持越来越多，本文介绍了在如何利用插件来加强网站的功能，主要包括:</p><ul><li>分类时间线</li><li>DaoVoice</li><li>站内搜索</li><li>文章推荐</li><li>Valine评论</li><li>图片灯箱<a id="more"></a></li></ul><h2 id="分类时间线"><a href="#分类时间线" class="headerlink" title="分类时间线"></a>分类时间线</h2><p>归档页面的时间线会让文章显示得很有条理，但是分类里却没有，可以通过修改布局自己实现这个时间线功能。</p><p><img alt="分类时间线" title="分类时间线" data-src="https://image.chingow.cn/images/20190602012728_SmUFAI_Screenshot.jpeg?400x" class="lazyload"></p><p>在主题的分类布局文件中添加以下代码：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/category.swig</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{% for post in page.posts %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+{# Show year #}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+{% set year %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+{% set post.year = date(post.date, 'YYYY') %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+{% if post.year !== year %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+{% set year = post.year %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+&lt;div class="collection-title"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+&lt;h2 class="archive-year motion-element" id="archive-year-{{ year }}"&gt;{{ year }}&lt;/h2&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+&lt;/div&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+{% endif %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+{# endshow #}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">{{ post_template.render(post) }}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">{% endfor %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">……</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">{% block sidebar %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  {{ sidebar_template.render(false) }}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">{% endblock %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+{% block script_extra %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+  {% if theme.use_motion %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+&lt;script type="text/javascript" id="motion.page.archive"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+$('.archive-year').velocity('transition.slideLeftIn');</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+&lt;/script&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+{% endif %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+{% endblock %}</span></span></pre></td></tr></tbody></table></figure><h2 id="在线联系DaoVoice"><a href="#在线联系DaoVoice" class="headerlink" title="在线联系DaoVoice"></a>在线联系DaoVoice</h2><p>该功能由 <a href="http://dashboard.daovoice.io" target="_blank" rel="external nofollow noreferrer noopener">DaoVoice</a> 插件提供，效果如图：<br><img alt="DaoVoice" title="DaoVoice" data-src="https://image.chingow.cn/images/20190603010423_YeqmzM_Screenshot.jpeg?300x" class="lazyload"></p><p>首先去 <a href="http://dashboard.daovoice.io/get-started?invite_code=3d64b7fd" target="_blank" rel="external nofollow noreferrer noopener">DaoVoice官网</a> 注册，输入邀请码 3d64b7fd，注册后查看<strong>app_id</strong> 并复制，在 <span id="inline-purple">主题配置文件</span> _config.yml 中添加daovoice的配置：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Online contact</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">daovoice:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="attr">daovoice_app_id:</span> <span class="string">{your</span> <span class="string">app_id}</span></span></pre></td></tr></tbody></table></figure><p>按照官网开发文档说明里 <strong>应用设置</strong>—&gt;<strong>安装到网站</strong>的设置，在head的布局模板中插入相关 JavaScript 代码：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_partials/head.swig</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+{% if theme.daovoice %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+&lt;script&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+(function(i,s,o,g,r,a,m){i["DaoVoiceObject"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)})(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/${your_app_id}.js","daovoice")</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+daovoice('init', {</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+app_id: "{{theme.daovoice_app_id}}"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+});</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+daovoice('update');</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+&lt;/script&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+{% endif %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">{# Export some HEXO Configurations to Front-End #}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&lt;script id="hexo.configurations"&gt;</span></pre></td></tr></tbody></table></figure><p>具体样式设计可以在 <strong>应用设置</strong> -&gt; <strong>聊天设置</strong> 后边改。</p><h2 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h2><p>该功能由 <a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="external nofollow noreferrer noopener">hexo-generator-searchdb</a> 提供，效果如图：</p><p><img alt="站内搜索" title="站内搜索" data-src="https://image.chingow.cn/images/20190602014351_let2yO_Screenshot.jpeg?650x" class="lazyload"></p><p>在根目录下执行以下命令安装相关依赖：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span></pre></td></tr></tbody></table></figure><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改配置<code>local_search</code>：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span><span class="comment"># 开启站内搜索</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span><span class="comment"># 自动和手动触发</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">3</span>  <span class="comment"># 每篇文章显示的搜索结果数量</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span></pre></td></tr></tbody></table></figure><p>搜索弹框的页边距有点点挤，在自定义样式文件中添加样式规则来增加页边距：</p><figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">//增加搜索弹窗的页边距</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.local-search-popup</span> <span class="selector-id">#local-search-result</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">padding</span>: <span class="number">25px</span> <span class="number">40px</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  height: <span class="built_in">calc</span>(100% - 95px)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h2 id="文章推荐"><a href="#文章推荐" class="headerlink" title="文章推荐"></a>文章推荐</h2><p>该功能由 <a href="https://github.com/tea3/hexo-related-popular-posts" target="_blank" rel="external nofollow noreferrer noopener">hexo-related-popular-posts</a> 插件提供，效果如图：</p><p><img alt="文章推荐" data-src="https://image.chingow.cn/images/20190602014455_EGjrzz_Screenshot.jpeg?350x%22%E6%96%87%E7%AB%A0%E6%8E%A8%E8%8D%90%22" class="lazyload"></p><p>在站点根目录中执行以下命令安装依赖：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ npm install hexo-related-popular-posts --save</span></pre></td></tr></tbody></table></figure><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中开启相关文章推荐功能：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">related_posts:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">title:</span>  <span class="comment"># custom header, leave empty to use the default one</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">display_in_home:</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">params:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">maxCount:</span> <span class="number">3</span></span></pre></td></tr></tbody></table></figure><p>此时会在每篇文章结尾根据标签相关性和内容相关性来推荐相关文章。</p><p>事实上并非每篇文章都需要开启该功能，可在文章 Front-Matter 中设置 <code>related_posts</code> 字段来控制是否在文末显示相关文章，然后修改文章布局模板中相关的判定条件：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_macro/post.swig</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">- {% if theme.related_posts.enable and (theme.related_posts.display_in_home or not is_index) %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+ {% if theme.related_posts.enable and (theme.related_posts.display_in_home or not is_index) and post.related_posts %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    {% include 'post-related.swig' with { post: post } %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  {% endif %}</span></pre></td></tr></tbody></table></figure><p>为了方便可在草稿模板 scaffolds\draft.md 中统一添加 <code>related_posts</code> 字段默认值：</p><figure class="highlight diff"><figcaption><span>scaffolds/draft.md</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">  title: {{ title }}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  tags:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  categories:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+ related_posts: true</span></span></pre></td></tr></tbody></table></figure><h2 id="Valine评论"><a href="#Valine评论" class="headerlink" title="Valine评论"></a>Valine评论</h2><p><img alt="Valine评论" data-src="https://image.chingow.cn/images/20190602015658_Y7Rj8t_Screenshot.jpeg?650x%22Valine%E8%AF%84%E8%AE%BA%22" class="lazyload"></p><blockquote><p>Valine 诞生于 2017 年 8 月 7 日，是一款基于 <a href="https://leancloud.cn" target="_blank" rel="external nofollow noreferrer noopener">LeanCloud</a> 提供后端数据服务的快速、简洁且高效的无后端评论系统，支持匿名评论、持Markdown、Emoji等都是它的绝对优势，而且 Next 主题也已经内置了 Valine 组件，使用起来非常方便。</p></blockquote><p>首先，在LeanCloud上注册账号并创建应用，设置LeanCloud的信息。</p><p>在 <strong>存储</strong> -&gt; <strong>数据</strong> 中 新建一个名为<code>Counter</code> 的 Class，<code>ACL</code>权限设置为 <strong>无限制</strong>：<br>在 <strong>设置</strong> -&gt; <strong>安全中心</strong> 中添加博客域名到 Web 安全域名中，以保护LeanCloud应用的数据安全。</p><div class="note info">            <p>在LeanCloud中的Class可以理解为数据库中的数据表。Counter用于存储记录文章访问量，记录是以url作为唯一依据的，所以根据默认的permalink组成结构，如果你更改了文章的发布日期和标题中的任意一个，都会造成文章阅读数值的清零重计。</p>          </div><p>然后，在 <span id="inline-purple">主题配置文件</span> _config.yml 开启评论功能即可：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>    <span class="comment"># 开启 Valine 评论</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 设置应用 id 和 key</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">appid:</span>  <span class="comment"># your leancloud application appid</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">appkey:</span>  <span class="comment"># your leancloud application appkey</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 关闭提醒与验证</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">placeholder:</span>  <span class="comment"># 文本框默认文字</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span>  <span class="comment"># gravatar style</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail</span> <span class="comment"># 需要填写的信息字段</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span>  <span class="comment"># 每页评论数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">language:</span> <span class="string">zh-cn</span> <span class="comment"># language, available values: en, zh-cn</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># 开启文章阅读次数统计</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">comment_count:</span> <span class="literal">false</span> <span class="comment"># 首页是否开启评论数</span></span></pre></td></tr></tbody></table></figure><p>有时候我们并不想在文章标题下显示评论数量，如要隐藏，可在自定义样式文件中添加如下代码：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">//屏蔽标题下的评论数量</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-comments-count</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">display</span>: none;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>评论区会显示评论人的浏览器和操作系统版本号等信息，如果只想要一个干净的评论界面，而没有多余其他的信息，可在自定义样式文件中添加如下代码：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">//屏蔽评论组件的多余信息</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#comments</span> <span class="selector-class">.info</span>, <span class="selector-id">#comments</span> <span class="selector-class">.vsys</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">display</span>: none;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>最后，集成评论服务后，所有的页面也会带有评论，包括标签、关于等页面。这里需要在添加字段<code>comments</code>并将值设置为 false 即可。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">title: 标签</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">type: "tags"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">comments: false</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr></tbody></table></figure><h2 id="图片灯箱"><a href="#图片灯箱" class="headerlink" title="图片灯箱"></a>图片灯箱</h2><p>添加灯箱功能，实现点击图片后放大聚焦图片，并支持幻灯片播放、全屏播放、缩略图、快速分享到社交媒体等，该功能由 <a href="https://github.com/fancyapps/fancybox" target="_blank" rel="external nofollow noreferrer noopener">fancyBox</a> 提供。</p><p>在根目录下执行以下命令安装相关依赖：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-fancybox3 themes/next/<span class="built_in">source</span>/lib/fancybox</span></pre></td></tr></tbody></table></figure><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中设置 <code>fancybox: true</code>：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><p>刷新浏览器即可生效。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>文章中大量的优化方案都参照了 <a href="yearito.cn">yearito</a> 的优化精髓，在集成第三方插件或者自定义新功能的过程中尽量做到：</p><ul><li>可以在站点配置 / 主题配置文件中方便快捷的开启 / 关闭插件服务</li><li>可以在语言包 zh-CN.yml 中快速修改页面中的自定义文案，而不是在代码中将文字表述写死</li><li>尽量在自定义样式文件 custom.styl 和自定义布局文件 custom.swig 中添加代码，而非修改主题源码<br>新增文件统一放在 _custom 目录下</li><li>所有以上这些原则，尽管实现起来可能更复杂，需要更多的代码，但都是为了让站点更好维护，更灵活方便。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.chingow.cn/background/20190602023505_JefG9q_6DE1E34E-037D-4EA6-A8CC-68280E0EAC1D-1264-00000122BCC398FB_tmp.jpeg&quot; alt=&quot;Photo in Chongqing Fengjie&quot; title=&quot;Photo in Chongqing Fengjie&quot;&gt;&lt;/p&gt;
&lt;p&gt;开源的力量让第三方插件的支持越来越多，本文介绍了在如何利用插件来加强网站的功能，主要包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分类时间线&lt;/li&gt;
&lt;li&gt;DaoVoice&lt;/li&gt;
&lt;li&gt;站内搜索&lt;/li&gt;
&lt;li&gt;文章推荐&lt;/li&gt;
&lt;li&gt;Valine评论&lt;/li&gt;
&lt;li&gt;图片灯箱&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="博客" scheme="http://notes.seirhsiao.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://notes.seirhsiao.com/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://notes.seirhsiao.com/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+NexT(v7.0+) 搭建博客：内容优化</title>
    <link href="http://notes.seirhsiao.com/posts/bd723aed/"/>
    <id>http://notes.seirhsiao.com/posts/bd723aed/</id>
    <published>2019-05-18T08:08:13.000Z</published>
    <updated>2019-12-07T01:27:03.383Z</updated>
    
    <content type="html"><![CDATA[<p>NexT主题内提供了很多功能来让内容更加丰富，本文介绍了如何开启和定制这些功能，主要包括:</p><ul><li>模板设置</li><li>文章发布修改时间、字数统计</li><li>文章版权声明</li><li>链接样式、底部标签样式</li><li>图片尺寸处理</li><li>代码块复制、显示和隐藏</li><li>草稿和发布<a id="more"></a></li></ul><h2 id="模板设置"><a href="#模板设置" class="headerlink" title="模板设置"></a>模板设置</h2><p>为了便于创建新文章时更加便利，可以在hexo的<code>scaffolds</code>文件夹内创建模板文件，比如我创建的草稿模板</p><figure class="highlight markdown"><figcaption><span>scaffolds/draft.md</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">title: {{ title }}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">categories: </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">tags: </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">date: {{ date }}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr></tbody></table></figure><h2 id="文章发布修改时间"><a href="#文章发布修改时间" class="headerlink" title="文章发布修改时间"></a>文章发布修改时间</h2><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改<code>post_meta</code>，可用于控制信息的显示：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span>  <span class="comment"># 显示文字说明</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span>  <span class="comment"># 显示文章创建时间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">updated_at:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span>  <span class="comment"># 文章修改时间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">another_day:</span> <span class="literal">false</span>  <span class="comment"># 只有当修改时间和创建时间不是同一天的时候才显示</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span>  <span class="comment"># 分类信息</span></span></pre></td></tr></tbody></table></figure><h2 id="文章字数统计"><a href="#文章字数统计" class="headerlink" title="文章字数统计"></a>文章字数统计</h2><p>该功能由 <a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="external nofollow noreferrer noopener">hexo-symbols-count-time</a> 提供，效果如图：<br><img alt="文章统计" title="文章统计" data-src="https://image.chingow.cn/images/20190602020607_IyueIG_Screenshot.jpeg?420x" class="lazyload"></p><p>在根目录下执行如下命令安装相关依赖：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-symbols-<span class="keyword">count</span>-<span class="built_in">time</span> <span class="comment">--save</span></span></pre></td></tr></tbody></table></figure><p>在 <span id="inline-blue">站点配置文件</span> _config.yml 中添加<code>symbols_count_time</code>配置，这些配置项主要用于控制每项统计信息是否显示：</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span>         <span class="comment"># 统计单篇文章字数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">time:</span> <span class="literal">true</span>            <span class="comment"># 估算单篇文章阅读时间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">false</span>  <span class="comment"># 统计站点总字数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">total_time:</span> <span class="literal">false</span>     <span class="comment"># 估算站点总阅读时间</span></span></pre></td></tr></tbody></table></figure><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中做如下修改，这些配置项主要用于控制统计信息的显示样式：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span>  <span class="comment"># 是否换行显示 统计信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span>  <span class="comment"># 文章统计信息中是否显示“本文字数/阅读时长”等描述文字</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span>   <span class="comment"># 站点统计信息中是否显示“本文字数/阅读时长”等描述文字</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">awl:</span> <span class="number">4</span>  <span class="comment"># Average Word Length：平均字符长度</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span>  <span class="comment"># Words Per Minute：阅读速度</span></span></pre></td></tr></tbody></table></figure><h2 id="文末版权声明"><a href="#文末版权声明" class="headerlink" title="文末版权声明"></a>文末版权声明</h2><p>NexT主题已经内置了版权声明功能，只需开启配置即可，效果如下：<br><img alt="文末版权声明" title="文末版权声明" data-src="https://image.chingow.cn/images/20190602011504_NtvIUD_Screenshot.jpeg?600x" class="lazyload"></p><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中开启文章底部的版权声明，版权声明默认使用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external nofollow noreferrer noopener">CC BY-NC-SA 4.0</a> 许可协议，用户可以根据自身需要修改 <code>licence</code> 字段变更协议：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span>  <span class="comment"># 开启版权声明</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span> <span class="comment"># 侧边栏</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">post:</span> <span class="literal">true</span> <span class="comment"># post文章</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span></span></pre></td></tr></tbody></table></figure><p>默认版权声明中只有 <strong>本文作者</strong>、<strong>本文链接</strong>、<strong>版权声明</strong> 三项，如果你想添加更多内容，如 <strong>文章标题</strong> 等，需要先在语言配置文件里补全版权信息文案字段：</p><figure class="highlight diff"><figcaption><span>themes/next/languages/zh-CN.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">copyright:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+ title : 本文标题</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  author: 文章作者</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  link: 原始链接</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  license_title: 许可协议</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  license_content: "本文章采用 %s 许可协议，转载请保留原文链接及作者。"</span></pre></td></tr></tbody></table></figure><p>再修改版权声明布局的相关代码：</p><figure class="highlight html"><figcaption><span>themes/next/layout/_partials/post/post-copyright.swig</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"post-copyright"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-title"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>{{ __('post.copyright.title') + __('symbol.colon') }}<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>{#</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    #}{{ post.title | default(config.title) }}{#</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  #}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-author"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>{{ __('post.copyright.author') + __('symbol.colon') }} <span class="tag">&lt;/<span class="name">strong</span>&gt;</span>{#</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  #}{{ post.author || author }}{#</span></pre></td></tr></tbody></table></figure><p>在版权样式文件中添加如下样式：</p><figure class="highlight css"><figcaption><span>themes\next\source\css\_common\components\post\post-copyright.styl</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.swal-overlay</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">background-color</span>: transparent;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.copy-success-message</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">12px</span> <span class="built_in">rgba</span>(0,0,0,0.15);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">width</span>: auto;  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">margin</span>: <span class="number">16</span>x <span class="number">0px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">vertical-align</span>: top;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.copy-success-message</span> <span class="selector-class">.swal-content</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="meta">!important</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">16px</span>;  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">line-height</span>: <span class="number">1em</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.copy-success-message</span> <span class="selector-class">.message-icon</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">color</span>: <span class="number">#52c41a</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.copy-success-message</span> <span class="selector-class">.message-content</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>在实际使用过程中，有些文章是转载别人的文章，文末再出现个人版权声明就不太合适。此时可在Front-Matter中设定变量 <code>copyright</code> 用于控制是否显示版权信息。<br>修改文章布局模板中相关代码，使得只有当主题配置文件中 <code>post_copyright.enable</code> 字段和 <code>page.copyright</code> 字段同时为 <code>true</code> 时才会插入版权声明：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_macro/post.swig</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">- {% if theme.post_copyright.enable and not is_index %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+ {% if theme.post_copyright.enable and page.copyright and not is_index %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    &lt;div&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      {% include 'post-copyright.swig' with { post: post } %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &lt;/div&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  {% endif %}</span></pre></td></tr></tbody></table></figure><p>为了批量为每篇新文章设定该变量并赋默认值，可以修改草稿模板内容，这样每篇草稿发布为正文后都会默认显示底部版权信息：</p><figure class="highlight diff"><figcaption><span>scaffolds\draft.md</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">  title: {{ title }}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  tags:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  categories:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+ copyright: true</span></span></pre></td></tr></tbody></table></figure><h2 id="链接样式"><a href="#链接样式" class="headerlink" title="链接样式"></a>链接样式</h2><p>主题自带的链接样式在hover时是灰色的，颜色不明显。在自定义样式文件中添加样式：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$link-color = #2780e3;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">$link-hover-color = #1094e8;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">$sidebar-link-hover-color = #0593d3;  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">// 普通链接样式</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">span</span><span class="selector-class">.exturl</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  &amp;:hover {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    color: $link-hover-color;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    border-bottom-color: $link-hover-color;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  // For spanned external links.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="selector-tag">cursor</span>: <span class="selector-tag">pointer</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">// 侧边栏链接样式</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> <span class="selector-tag">a</span>, <span class="selector-class">.sidebar</span> <span class="selector-tag">span</span><span class="selector-class">.exturl</span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  &amp;:hover {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    color: $sidebar-link-hover-color;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    border-bottom-color: $sidebar-link-hover-color;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">// 侧边栏目录链接样式</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-toc</span> <span class="selector-tag">ol</span> <span class="selector-tag">a</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  &amp;:hover {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    color: $sidebar-link-hover-color;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    border-bottom-color: $sidebar-link-hover-color;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">//文章内链接文本样式</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">color</span>: $link-color;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">text-decoration</span>: none;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">border-bottom</span>: none;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">  &amp;:hover {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    color: $link-hover-color;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">    <span class="selector-tag">text-decoration</span>: <span class="selector-tag">underline</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    border-bottom-color: $link-hover-color;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">// 文章内上下一页链接样式</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-nav-prev</span> <span class="selector-tag">a</span> , <span class="selector-class">.post-nav-next</span> <span class="selector-tag">a</span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">  &amp;:hover {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">    color: $link-hover-color;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h2 id="底部标签添加图标"><a href="#底部标签添加图标" class="headerlink" title="底部标签添加图标"></a>底部标签添加图标</h2><p>默认情况下标签前缀是 <code>#</code> 字符，可以通过修改主题源码将标签的字符前缀改为图标前缀，效果如图：</p><p><img alt="底部标签" title="底部标签" data-src="https://image.chingow.cn/images/20190602012005_lHglf5_Screenshot.jpeg?140x" class="lazyload"></p><p>在文章布局模板中找到文末标签相关代码段，将 <code>#</code> 换成 <code>&lt;i class="fa fa-tags"&gt;&lt;/i&gt;</code> 即可：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_macro/post.swig</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">  &lt;footer class="post-footer"&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    {% if post.tags and post.tags.length and not is_index %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">      &lt;div class="post-tags"&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        {% for tag in post.tags %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-          &lt;a href="{{ url_for(tag.path) }}" rel="tag"&gt;# {{ tag.name }}&lt;/a&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+          &lt;a href="{{ url_for(tag.path) }}" rel="tag"&gt;&lt;i class="fa fa-tags"&gt;&lt;/i&gt; {{ tag.name }}&lt;/a&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        {% endfor %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      &lt;/div&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    {% endif %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  &lt;/footer&gt;</span></pre></td></tr></tbody></table></figure><p>NexT中使用 <a href="https://fontawesome.com/v4.7.0/icons/" target="_blank" rel="external nofollow noreferrer noopener">FontAwesome</a> 作为图标库，用户可以在 FontAwesome 上找到心仪的图标来替换标签的字符前缀。</p><h2 id="图片尺寸处理"><a href="#图片尺寸处理" class="headerlink" title="图片尺寸处理"></a>图片尺寸处理</h2><div class="note info">            <p>本章节受 bobcn 的<a href="https://github.com/bobcn/hexo_resize_image.js" target="_blank" rel="external nofollow noreferrer noopener">方案</a>，自行重构了代码逻辑。</p>          </div><p>有时候原始图片的尺寸不太合适，想指定图片在文章中的大小，但是 <strong>Markdown</strong> 原生的图片语法在<strong>Hexo</strong>中是无效的，这一点让人很困扰（可能是Hexo的Bug，希望以后的版本能够解决这个问题）。<br>现行的处理办法主要有两种方案，一种是使用html标签</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">200</span> <span class="attr">src</span>=<span class="string">"/image/test.jpg"</span> &gt;</span></span></pre></td></tr></tbody></table></figure><p>另一种是 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="external nofollow noreferrer noopener">hexo官方文档</a> 推荐的方式</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{% img [class names] /path/to/image [width] [height] [title text [alt text]] %}</span></pre></td></tr></tbody></table></figure><p>但是习惯了 Markdown 的原生语法之后还是觉得这两种都不够简洁高效，用起来多有不便。于是尝试对 Next 主题进行了加强，变相扩展支持了 Markdown 的插图语法：</p><ul><li><p>可指定像素<br>方法是在 URL 后面添加 <code>?&lt;width&gt;x&lt;height&gt;</code>，也可以只指定一个参数，图片会等比例缩放。</p> <figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">![<span class="string">指定像素</span>](<span class="link">/image/test.jpg?200x200</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">![<span class="string">仅指定width</span>](<span class="link">/image/test.jpg?200x</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">![<span class="string">仅指定height</span>](<span class="link">/image/test.jpg?x200</span>)</span></pre></td></tr></tbody></table></figure></li><li><p>可指定缩放比例<br>方法是在 URL 后面添加 <code>?&lt;scale&gt;</code>，等比例缩放图片大小至 %。</p> <figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">![<span class="string">指定比例</span>](<span class="link">/image/test.jpg?40</span>)</span></pre></td></tr></tbody></table></figure></li></ul><p>如何实现这种效果的呢？首先在自定义脚本目录新建用于处理图片尺寸的 <strong>JavaScript</strong> 脚本</p><figure class="highlight js"><figcaption><span>themes/next/source/js/_custom/hexo_resize_image.js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_image_size</span>(<span class="params">image, width, height</span>) </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    image.setAttribute(<span class="string">"width"</span>, width + <span class="string">"px"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    image.setAttribute(<span class="string">"height"</span>, height + <span class="string">"px"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexo_resize_image</span>(<span class="params"></span>)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> imgs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'img'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = imgs.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">var</span> img = imgs[i];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">var</span> src = img.getAttribute(<span class="string">'src'</span>).toString();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">var</span> fields = src.match(<span class="regexp">/\?(\d*x\d*)/</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (fields &amp;&amp; fields.length &gt; <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">var</span> values = fields[<span class="number">1</span>].split(<span class="string">"x"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (values.length == <span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">var</span> width = values[<span class="number">0</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">var</span> height = values[<span class="number">1</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span> (!(width.length &amp;&amp; height.length))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">var</span> n_width = img.naturalWidth;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">var</span> n_height = img.naturalHeight;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">if</span> (width.length &gt; <span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">                    {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">                        height = n_height*width/n_width;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">                    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">if</span> (height.length &gt; <span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">                    {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">                        width = n_width*height/n_height;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">                    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">                }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">                set_image_size(img, width, height);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">            }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">        fields = src.match(<span class="regexp">/\?(\d*)/</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (fields &amp;&amp; fields.length &gt; <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">        {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">var</span> scale = <span class="built_in">parseFloat</span>(fields[<span class="number">1</span>].toString());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">var</span> width = scale/<span class="number">100.0</span>*img.naturalWidth;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">var</span> height = scale/<span class="number">100.0</span>*img.naturalHeight;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">            set_image_size(img, width, height);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = hexo_resize_image;</span></pre></td></tr></tbody></table></figure><p>然后在自定义布局文件最后添加 <strong>JavaScript</strong> 声明</p><figure class="highlight html"><figcaption><span>themes/next/layout/css/_custom/custom.swig</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/custom/hexo_resize_image.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></tbody></table></figure><h2 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h2><p>NexT主题已经内置了代码复制功能，只需开启配置即可，效果如下：<br><img alt="代码复制" title="代码复制" data-src="https://image.chingow.cn/images/20190602170547_O2y1Oe_Screenshot.jpeg?600x" class="lazyload"></p><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中开启代码复制功能：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">copy_button:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 开启代码复制功能</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">show_result:</span> <span class="literal">true</span>  <span class="comment"># 显示复制结果</span></span></pre></td></tr></tbody></table></figure><p>搜索的按钮有点移位，在自定义样式文件中调整样式：</p><figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">// 复制按钮样式top调整</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.highlight-wrap</span> <span class="selector-class">.copy-btn</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">6px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">top</span>: <span class="number">3px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h2 id="代码块显示和隐藏"><a href="#代码块显示和隐藏" class="headerlink" title="代码块显示和隐藏"></a>代码块显示和隐藏</h2><p>— 待完成 —</p><h2 id="草稿和发布"><a href="#草稿和发布" class="headerlink" title="草稿和发布"></a>草稿和发布</h2><p id="div-border-left-blue">一般我们使用` hexo new <title> `来建立文章，这种建立方法会将新文章建立在 **source/_posts** 目录下，当使用 hexo generate 编译文件时，会将其 HTML 结果编译在 public 目录下，之后` hexo server `将会把 public 目录下所有文章发布。&lt;/p&gt;&lt;div class="note danger"&gt;            &lt;p&gt;这种建立文章方式是有缺点的！写文章的人都知道，一篇文章从创作到发布需要经过多次润色，若我们的文章还在创作润色中，尚未编辑完成，执行 &lt;strong&gt;hexo server&lt;/strong&gt; 时也会随着一起发布，这样对读者是不友好的。&lt;/p&gt;          &lt;/div&gt;&lt;p&gt;Hexo 另外提供 draft 机制，它的原理是新文章将建立在 &lt;strong&gt;source/_drafts&lt;/strong&gt; 目录下，因此并不会将其编译到 public 目录下发布，而且提供了很友好的预览功能。&lt;/p&gt;&lt;figure class="highlight bash"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;$ hexo new draft &lt;title&gt;&lt;span class="comment"&gt;# 新建草稿文章&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;$ hexo s --draft        &lt;span class="comment"&gt;# 预览草稿文章&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;将草稿发布为正式文章：&lt;/p&gt;&lt;figure class="highlight bash"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;$ hexo P &lt;filename&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;其中 &lt;code&gt;&lt;filename&gt;&lt;/code&gt; 为不包含 md 后缀的文章名称。它的原理只是将文章从 source/_drafts 移动到 source/_posts 而已。&lt;/p&gt;</title></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NexT主题内提供了很多功能来让内容更加丰富，本文介绍了如何开启和定制这些功能，主要包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模板设置&lt;/li&gt;
&lt;li&gt;文章发布修改时间、字数统计&lt;/li&gt;
&lt;li&gt;文章版权声明&lt;/li&gt;
&lt;li&gt;链接样式、底部标签样式&lt;/li&gt;
&lt;li&gt;图片尺寸处理&lt;/li&gt;
&lt;li&gt;代码块复制、显示和隐藏&lt;/li&gt;
&lt;li&gt;草稿和发布&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="博客" scheme="http://notes.seirhsiao.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://notes.seirhsiao.com/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://notes.seirhsiao.com/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+NexT(v7.0+) 搭建博客：主题美化</title>
    <link href="http://notes.seirhsiao.com/posts/c7372a12/"/>
    <id>http://notes.seirhsiao.com/posts/c7372a12/</id>
    <published>2019-05-17T02:07:53.000Z</published>
    <updated>2019-12-07T01:27:04.126Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了在 NexT(v7.0+) 主题的基础上整体布局美化的方案，主要包括:</p><ul><li>Font：字体、动态背景canvas_ribbon</li><li>Top：进度条、Follow me、菜单背景收缩</li><li>Footer：备案显示、运行时间、访客统计</li><li>Sidebar：近期文章、浏览进度、左边显示、目录展开</li></ul><p>大家可以选择喜欢的方案美化自己的博客，当然最好可以再加入点自己的想法改造。</p><a id="more"></a><h2 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h2><p>前端的美化，可以做的比较多，比如修改字体、修改背景等等。<br>首先在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改配置<code>font</code>：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 开启前端设置</span></span></pre></td></tr></tbody></table></figure><h3 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h3><p>默认的字体是微软雅黑，有点审美疲劳了 (lll￢ω￢)，在浏览其他人网站的时候看到了一种很有科技感的字体 『<strong>Monda</strong>』，感觉还是不错的。如何应用到自己的博客呢？<br>首先，可以从 <a href="https://www.fontyukle.net/cn/1,MONDA" target="_blank" rel="external nofollow noreferrer noopener">frontyukle</a> 下载字体文件，在服务器上安装。<br>然后在 <span id="inline-purple">主题配置文件</span> _config.yml 中的修改全局字体配置：</p><figure class="highlight diff"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">global:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">- family: Lato</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+ family: Monda   # 设置Monda字体</span></span></pre></td></tr></tbody></table></figure><h3 id="设置三角丝带背景"><a href="#设置三角丝带背景" class="headerlink" title="设置三角丝带背景"></a>设置三角丝带背景</h3><div class="note info">            <p>该功能由 Vue 作者 <a href="http://evanyou.me/" target="_blank" rel="external nofollow noreferrer noopener">尤雨溪</a> 首创。注意：添加动态背景会极大增加页面内存占用及 CPU 消耗。</p>          </div><p>首先，在根目录下执行以下命令安装相关依赖：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-canvas-ribbon themes/next/<span class="built_in">source</span>/lib/canvas_ribbon</span></pre></td></tr></tbody></table></figure><p>然后，在 <span id="inline-purple">主题配置文件</span> _config.yml 中的修改配置<code>canvas_ribbon</code>：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">canvas_ribbon:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span><span class="comment"># 开启随机三角丝带背景</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">size:</span> <span class="number">90</span><span class="comment"># 设置丝带宽度</span></span></pre></td></tr></tbody></table></figure><h2 id="Top"><a href="#Top" class="headerlink" title="Top"></a>Top</h2><p>顶部我们保持简洁为主，设置主要包括：进度条、Fork、菜单等等。</p><h3 id="加载进度条"><a href="#加载进度条" class="headerlink" title="加载进度条"></a>加载进度条</h3><p>当网络不好的时候会出现白屏等待，此时如果能有加载进度提示将会提高用户操作体验。<br>首先，在根目录下执行以下命令安装相关依赖：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace themes/next/<span class="built_in">source</span>/lib/pace</span></pre></td></tr></tbody></table></figure><p>然后，修改 <span id="inline-purple">主题配置文件</span> _config.yml 中的配置<code>pace</code> 改为 <code>true</code>，并从上面提供的样式中选择一种填入<code>pace_theme</code>中就可以了。</p><h3 id="右上角的Follow-Github"><a href="#右上角的Follow-Github" class="headerlink" title="右上角的Follow-Github"></a>右上角的Follow-Github</h3><p>如果你想大家在看博客的时候能快速链接到你的Github，不妨设置<strong>Github_banner</strong>，效果图如下：<br><img alt="github_banner" title="github_banner" data-src="https://image.chingow.cn/images/23aaa7f0-a7e7-b170-deef-a8ffb649a473.png?500x" class="lazyload"></p><p>修改 <span id="inline-purple">主题配置文件</span> _config.yml 中的配置<code>github_banner</code>，在<code>permalink</code>里配置自己的github地址：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">github_banner:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/yourname</span></span></pre></td></tr></tbody></table></figure><h3 id="菜单背景收缩"><a href="#菜单背景收缩" class="headerlink" title="菜单背景收缩"></a>菜单背景收缩</h3><p>在 Muse主题方案中 Header 和 Footer 是没有背景色的，的颜色与内容一致不易区分，而且网站标题的字体不够明显，我做了几个修改</p><ul><li>头部和底部颜色修改</li><li>网站标题加粗和颜色修改</li><li>菜单字体增大显示</li></ul><p>在主题自定义样式文件中添加以下样式：</p><figure class="highlight css"><figcaption><span>themes/next/sources/_custom/custom.styl</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">//窗口效果相关样式</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">box-shadow</span>: none;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">// 为Header和Footer添加背景色</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span>, <span class="selector-id">#footer</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(245, 245, 245);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">//防止sidebar和footer同时开启动效时堆叠异常</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#sidebar</span>, <span class="selector-tag">header</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span> <span class="meta">!important</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">//防止挡住页末文章的阅读全文按钮</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">30px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">// 加宽菜单间距，放大菜单图标</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#menu</span> <span class="selector-class">.menu-item</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">14px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  .fa {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="selector-tag">font-size</span>: 16<span class="selector-tag">px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">// Muse主题下自定义样式</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">if hexo-config('scheme') == "Muse" {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  <span class="selector-class">.site-meta</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    .brand {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">      <span class="selector-tag">color</span>: <span class="selector-tag">rgb</span>(34, 34, 34);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">      <span class="selector-tag">background</span>: <span class="selector-tag">none</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    <span class="selector-class">.site-title</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">      <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">      <span class="attribute">font-weight</span>: bold;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>改完才发现顶部菜单的空间太大了，于是调节菜单高度，在自定义布局文件中添加以下代码：</p><figure class="highlight html"><figcaption><span>themes/next/layout/_custom/custom.swig</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{# 页面加载时header高度收缩动效 #}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">  $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">    $(<span class="string">".header-inner"</span>).animate({<span class="attr">padding</span>: <span class="string">"25px 0 25px"</span>}, <span class="number">1000</span>);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  });</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></tbody></table></figure><p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_layout.swig</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  {% include '_third-party/copy-code.swig' %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  {% include '_third-party/chatra.swig' %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  {% include '_third-party/tidio.swig' %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+  {% include '_custom/custom.swig' %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&lt;/body&gt;</span></pre></td></tr></tbody></table></figure><p>调节移动端显示的高度</p><figure class="highlight diff"><figcaption><span>themes/next/source/css/_schemes/Muse/_menu.styl</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mobile() {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  position: absolute;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  left: 0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-  top: 52px;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+  top: 95px;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  margin: 0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h2 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h2><p>底部设置的可完性就比较多了，建站信息、备案信息、以及访客和统计信息等信息都可以个性化定制。</p><h3 id="ICP备案和公安备案"><a href="#ICP备案和公安备案" class="headerlink" title="ICP备案和公安备案"></a>ICP备案和公安备案</h3><p>我们的网站已经有备案号了，但是应该如何添加备案号到博客最下面呢？<br>首先，在 <span id="inline-purple">主题配置文件</span> _config.yml 中的配置添加备案配置：</p><figure class="highlight diff"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"> # 这里打开备案信息，填写ICP备案号</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   beian:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    enable: true</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    icp: 鄂ICP证18014719号</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"> # 这里是新加的内容，填写公安备案信息</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+  gongan:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+    enable: true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+    local: 鄂</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+    num: 42011102003178</span></span></pre></td></tr></tbody></table></figure><p>然后，在语言配置文件里，添加表述文案<code>beian</code>：</p><figure class="highlight diff"><figcaption><span>themes/next/languages/zh-CN.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">footer:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+   beian: </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+    gongan: 公网安备%s号</span></span></pre></td></tr></tbody></table></figure><p>接下来，删除原有的布局文件中备案样式的代码：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_partials/footer.swig</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">  #}{% set current = date(Date.now(), "YYYY") %}{#</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">- #}{% if theme.footer.beian.enable %}{#</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">- #}  {{ next_url('http://www.beian.miit.gov.cn', theme.footer.beian.icp + ' ') }}{#</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">- #}{% endif %}{#</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  #}&amp;copy; {% if theme.footer.since and theme.footer.since != current %}{{ theme.footer.since }} – {% endif %}{#</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  &lt;span class="author" itemprop="copyrightHolder"&gt;{{ theme.footer.copyright || author }}&lt;/span&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+  &lt;span class="post-meta-divider footer-ages-icon"&gt; | &lt;/span&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  {% if config.symbols_count_time.total_symbols %}</span></pre></td></tr></tbody></table></figure><p>最后，在主题布局文件中添加我们自定义的备案样式：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_layout.swig</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">  &lt;div class="footer-inner"&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    {{ partial('_partials/footer.swig', {}, {cache: theme.cache.enable}) }}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    {% include '_third-party/analytics/analytics-with-widget.swig' %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+        &lt;div class="footer-custom"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+            {% if theme.footer.beian.enable %}{#</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+          #}{{ next_url('http://www.beian.miit.gov.cn', theme.footer.beian.icp + ' ') }}{#</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+          #}{% endif %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+          {% if theme.footer.beian.enable and theme.footer.gongan.enable %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+            &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+          {% endif %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+          {% if theme.footer.gongan.enable %}{#</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+          #} &lt;span style="padding-left:25px;background:url(/images/beian.png) no-repeat left center" rel="nofollow"&gt;{#</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+          #} {{ theme.footer.gongan.local}}{{__('footer.beian.gongan', next_url('http://www.beian.gov.cn/portal/registerSystemInfo?recordcode='+theme.footer.gongan.num, theme.footer.gongan.num )) }}{#</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+          #}{% endif %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+        &lt;/div&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    {% block footer %}{% endblock %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  &lt;/div&gt;</span></pre></td></tr></tbody></table></figure><h3 id="网站的建站时间"><a href="#网站的建站时间" class="headerlink" title="网站的建站时间"></a>网站的建站时间</h3><p>NexT主题已经内置了添加建站时间。在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改配置<code>since</code> ：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># Specify the date when the site was setup. If not defined, current year will be used.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">since:</span> <span class="number">2018</span>  <span class="comment"># 修改建站时间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">icon:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># `heart` is recommended with animation in red (#ff0000).</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">name:</span> <span class="string">heart</span>  <span class="comment"># 改成心型图标</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># Change the color of icon, using Hex Code.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">color:</span> <span class="string">"#ff0000"</span> <span class="comment"># 改成红色图标</span></span></pre></td></tr></tbody></table></figure><h3 id="网站的运行时间"><a href="#网站的运行时间" class="headerlink" title="网站的运行时间"></a>网站的运行时间</h3><div class="note info">            <p>本章节受 <a href="http://yearito.cn/posts/hexo-advanced-settings.html" target="_blank" rel="external nofollow noreferrer noopener">Yearito’s Blog | 站点运行时间统计 </a> 的启发，自行重构了代码逻辑。</p>          </div><p>接下来我们显示网站的运行时间，在这里我做了一些个性化文案，可供大家参考：<br><img alt="网站建站运行时间" title="网站建站运行时间" data-src="https://image.chingow.cn/images/00c3834a-cf72-22a3-cd7c-6486649fd648.png?550x" class="lazyload"></p><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中的添加 <code>ages</code>配置：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">ages:</span> <span class="comment"># site running time</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">birthday:</span> <span class="number">20190419</span>    <span class="comment"># 网站运行时间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">color:</span> <span class="string">"#1094e8"</span></span></pre></td></tr></tbody></table></figure><p>在语言配置文件里，添加表述文案<code>age</code>：</p><figure class="highlight diff"><figcaption><span>themes/next/languages/zh-CN.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">footer:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+   age: 我已在此等候你</span></span></pre></td></tr></tbody></table></figure><p>在主题自定义布局文件中添加以下代码：</p><figure class="highlight html"><figcaption><span>themes/next/layout/_custom/custom.swig</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{# 页脚站点运行时间统计 #}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  {% if theme.footer.ages.enable %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/moment@2.22.2/moment.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/moment-precise-range-plugin@1.3.0/moment-precise-range.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">timer</span><span class="params">()</span> </span>{</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">        <span class="keyword">var</span> ages = moment.preciseDiff(moment(),moment({{ theme.footer.ages.birthday }},<span class="string">"YYYYMMDD"</span>));</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">        <span class="comment">//去除时分秒信息</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">        ages = ages.replace(<span class="regexp">/\s?\d{0,2}\s+hours?/</span>, <span class="string">""</span>);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">        ages = ages.replace(<span class="regexp">/\s?\d{0,2}\s+minutes?/</span>, <span class="string">""</span>);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">        ages = ages.replace(<span class="regexp">/\s?\d{0,2}\s+seconds?/</span>, <span class="string">""</span>);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">        <span class="comment">//将年月日转换为中文</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">        ages = ages.replace(<span class="regexp">/years?/</span>, <span class="string">"年"</span>);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">        ages = ages.replace(<span class="regexp">/months?/</span>, <span class="string">"月"</span>);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">        ages = ages.replace(<span class="regexp">/days?/</span>, <span class="string">"天"</span>);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="handlebars"><span class="xml">        ages = ages.replace(/\d+/g, '<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:</span></span></span><span class="template-variable">{{ theme.footer.ages.color }}</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>$&amp;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>');</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">        span.innerHTML = <span class="string">`{{ __('footer.age')}} <span class="subst">${ages}</span>`</span>;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">      }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">      <span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">      <span class="comment">//插入到agesicon之后</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">      <span class="keyword">var</span> agesicon = <span class="built_in">document</span>.querySelector(<span class="string">".footer-ages-icon"</span>);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">      <span class="built_in">document</span>.querySelector(<span class="string">".copyright"</span>).insertBefore(span, agesicon.nextSibling);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">      timer();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  {% endif %}</span></pre></td></tr></tbody></table></figure><h3 id="添加访客统计"><a href="#添加访客统计" class="headerlink" title="添加访客统计"></a>添加访客统计</h3><p>该功能由 <a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="external nofollow noreferrer noopener">不蒜子</a> 提供。UV：独立访客数，PV：网站浏览量，访客数和浏览量的区别在于一个用户连续点击n篇文章，会记录n次浏览量，但只记录一次访客数，效果如图：<br><img alt="网站访客统计" title="网站访客统计" data-src="https://image.chingow.cn/images/0298aada-faa2-1f09-f68a-e0382168a5ed.png?550x" class="lazyload"></p><div class="note info">            <p>由于不蒜子是基于域名来进行统计计算的，所以通过 localhost:4000 端口访问的时候统计数据UV和PV都会异常的大，属于正常现象。</p>          </div><p>首先，在 <span id="inline-purple">主题配置文件</span> _config.yml 中打开不蒜子功能：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span>   <span class="comment"># 访客数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">user</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span>   <span class="comment"># 访问量</span></span></pre></td></tr></tbody></table></figure><p>然后，在语言配置文件里，修改个性化表述文案：</p><figure class="highlight diff"><figcaption><span>themes/next/languages/zh-CN.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">footer:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">- total_views: 总访问量</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">- total_visitors: 总访客量</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+ total_views: "历经 %s 次回眸才与你相遇"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+ total_visitors: "我的第 %s 位朋友，"</span></span></pre></td></tr></tbody></table></figure><p>最后，修改不蒜子模板文件：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_third-party/analytics/busuanzi-counter.swig</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;div class="busuanzi-count"&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  &lt;script async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+  {% if theme.busuanzi_count.enable %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+  &lt;script async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    {% if theme.busuanzi_count.total_visitors %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-    &lt;span class="post-meta-item-icon"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-      &lt;i class="fa fa-{{ theme.busuanzi_count.total_visitors_icon }}"&gt;&lt;/i&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-    &lt;/span&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-    &lt;span class="site-uv" title="{{ __('footer.total_visitors') }}"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-      &lt;span class="busuanzi-value" id="busuanzi_value_site_uv"&gt;&lt;/span&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+       &lt;span class="site-uv"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+       {{ __('footer.total_visitors', '&lt;span class="busuanzi-value" id="busuanzi_value_site_uv"&gt;&lt;/span&gt;') }}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &lt;/span&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    {% endif %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-   {% if theme.busuanzi_count.total_visitors and theme.busuanzi_count.total_views %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-     &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-   {% endif %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    {% if theme.busuanzi_count.total_views %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-     &lt;span class="post-meta-item-icon"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-       &lt;i class="fa fa-{{ theme.busuanzi_count.total_views_icon }}"&gt;&lt;/i&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-     &lt;/span&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-     &lt;span class="site-pv" title="{{ __('footer.total_views') }}"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-       &lt;span class="busuanzi-value" id="busuanzi_value_site_pv"&gt;&lt;/span&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+     &lt;span class="site-pv"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+       {{ __('footer.total_views', '&lt;span class="busuanzi-value" id="busuanzi_value_site_pv"&gt;&lt;/span&gt;') }}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">      &lt;/span&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    {% endif %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+ {% endif %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">&lt;/div&gt;</span></pre></td></tr></tbody></table></figure><p>在自定义样式文件中添加如下样式：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">//修改不蒜子数据颜色</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.busuanzi-value</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">color</span>: <span class="number">#1890ff</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h2 id="Sidebar"><a href="#Sidebar" class="headerlink" title="Sidebar"></a>Sidebar</h2><p>侧边栏里的信息有很多，比如站点信息、RSS、链接信息、目录信息等等，我们要有选择性的显示。尽量保持Next主题的宗旨 – <span id="inline-green">简洁</span></p><h3 id="显示近期文章"><a href="#显示近期文章" class="headerlink" title="显示近期文章"></a>显示近期文章</h3><p>当你新写了一些好文章，想尽快告诉大家要怎么办呢？放在侧边栏里那是最合适不过了～(￣▽￣～)(～￣▽￣)～ 比如这样：<br><img alt="近期文章" title="近期文章" data-src="https://image.chingow.cn/images/f2840b83-ff46-dd56-0aa1-1af57c5e5dad.png" class="lazyload"></p><p>首先配置开关和文案，便于随时修改。<br>在 <span id="inline-purple">主题配置文件</span> _config.yml 中添加近期文章<code>recent_posts</code>的配置：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 近期文章</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">recent_posts:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="attr">recent_posts_layout:</span> <span class="string">block</span></span></pre></td></tr></tbody></table></figure><p>在语言配置文件里，添加表述文案<code>recent_posts</code>：</p><figure class="highlight diff"><figcaption><span>themes/next/languages/zh-CN.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sidebar:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+   recent_posts: 近期文章</span></span></pre></td></tr></tbody></table></figure><p>在侧边栏原有布局文件中的合适位置添加近期文章显示代码：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_macro/sidebar.swig</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">  {% if theme.social %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  {% endif %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+ &lt;!-- 添加近期文章 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+ {% if theme.recent_posts %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+   &lt;div class="links-of-blogroll motion-element {{ "links-of-blogroll-" + theme.recent_posts_layout  }}"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+     &lt;div class="links-of-blogroll-title"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+       &lt;!-- modify icon to fire by szw --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+       &lt;i class="fa fa-history fa-{{ theme.recent_posts_icon | lower }}" aria-hidden="true"&gt;&lt;/i&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+       {{ __('sidebar.recent_posts') }}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+     &lt;/div&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+     &lt;ul class="links-of-blogroll-list"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+       {% set posts = site.posts.sort('-date') %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+       {% for post in posts.slice('0', '5') %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+         &lt;li&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+           &lt;a href="{{ url_for(post.path) }}" title="{{ post.title }}" target="_blank"&gt;{{ post.title }}&lt;/a&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+         &lt;/li&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+       {% endfor %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+     &lt;/ul&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+   &lt;/div&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+ {% endif %}</span></span></pre></td></tr></tbody></table></figure><h3 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h3><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改<code>back2top</code>的<code>scrollpercent</code>：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span>  <span class="comment">#  浏览页面的时候显示当前浏览进度</span></span></pre></td></tr></tbody></table></figure><p>配置完之后，发现这个按钮颜色有点单调，让它炫酷点的吧 &lt;(￣ˇ￣)/ ，每次刷新可以生成不同的颜色，在自定义样式文件中添加如下样式：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">// 回到顶部样式</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.back-to-top</span> <span class="selector-class">.fa-arrow-up</span><span class="selector-pseudo">:before</span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(random-color(0, 255) - <span class="number">50%</span>, <span class="built_in">random-color</span>(0, 255) - <span class="number">50%</span>, <span class="built_in">random-color</span>(0, 255) - <span class="number">50%</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h3 id="侧边栏移到左边"><a href="#侧边栏移到左边" class="headerlink" title="侧边栏移到左边"></a>侧边栏移到左边</h3><p>用惯了<strong>Ofice</strong>的人习惯导航菜单在左边的格式，如何把侧边栏放在左侧呢？<br>NexT 主题中 Pisces 和 Gemini 支持通过主题配置文件来将侧边栏置于左侧或右侧。<br>在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改配置<code>sidebar</code> ：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Position, available values: left | right (only for Pisces | Gemini).</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">position:</span> <span class="string">left</span>   <span class="comment"># 调整侧边栏显示位置，仅支持 Pisces 和 Gemini 主题</span></span></pre></td></tr></tbody></table></figure><p>而 Muse 和 Mist 则需要深度修改源码才能实现改变侧边栏位置：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar-toggle</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">left</span>: <span class="number">30px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>修改动效脚本代码：</p><figure class="highlight diff"><figcaption><span>themes/next/source/js/src/motion.js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$(document)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  .on('sidebar.isShowing', function() {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    NexT.utils.isDesktop() &amp;&amp; $('body').velocity('stop').velocity(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-     {paddingRight: SIDEBAR_WIDTH},</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+     {paddingLeft: SIDEBAR_WIDTH},</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      SIDEBAR_DISPLAY_DURATION</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  })</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  hideSidebar: function() {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-   NexT.utils.isDesktop() &amp;&amp; $('body').velocity('stop').velocity({paddingRight: 0});</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+   NexT.utils.isDesktop() &amp;&amp; $('body').velocity('stop').velocity({paddingLeft: 0});</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    this.sidebarEl.find('.motion-element').velocity('stop').css('display', 'none');</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    this.sidebarEl.velocity('stop').velocity({width: 0}, {display: 'none'});</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    sidebarToggleLines.init();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>如此以来就可以将侧边栏放置在左边了，但当窗口宽度缩小到991px之后会出现样式错误：侧边栏收缩消失但是页面左侧仍留有空白间距，此时修改如下代码即可：</p><figure class="highlight diff"><figcaption><span>themes/next/source/css/_common/scaffolding/base.styl</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">body {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  position: relative; // Required by scrollspy</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  font-family: $font-family-base;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  font-size: $font-size-base;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  line-height: $line-height-base;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  color: $text-color;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  background: $body-bg-color;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">- +mobile() { padding-left: 0 !important; }</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">- +tablet() { padding-left: 0 !important; }  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+ +mobile() { padding-right: 0 !important; }</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+ +tablet() { padding-right: 0 !important; }</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  +desktop-large() { font-size: $font-size-large; }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h3 id="侧边栏目录展开"><a href="#侧边栏目录展开" class="headerlink" title="侧边栏目录展开"></a>侧边栏目录展开</h3><p>侧边栏的TOC目录每次滑到哪儿，目录展开到哪。这样查看文章结构就很不方便，如何设置才能让文章目录默认全部都展开？<br>在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改配置<code>toc</code> ：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span>  <span class="comment">## 如果标题超长，是否换行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">expand_all:</span> <span class="literal">true</span>  <span class="comment">## 侧边栏是否完全展开</span></span></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了在 NexT(v7.0+) 主题的基础上整体布局美化的方案，主要包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Font：字体、动态背景canvas_ribbon&lt;/li&gt;
&lt;li&gt;Top：进度条、Follow me、菜单背景收缩&lt;/li&gt;
&lt;li&gt;Footer：备案显示、运行时间、访客统计&lt;/li&gt;
&lt;li&gt;Sidebar：近期文章、浏览进度、左边显示、目录展开&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大家可以选择喜欢的方案美化自己的博客，当然最好可以再加入点自己的想法改造。&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客" scheme="http://notes.seirhsiao.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://notes.seirhsiao.com/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://notes.seirhsiao.com/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+NexT(v7.0+) 搭建博客：基础安装</title>
    <link href="http://notes.seirhsiao.com/posts/ae8c6a29/"/>
    <id>http://notes.seirhsiao.com/posts/ae8c6a29/</id>
    <published>2019-04-29T14:16:23.000Z</published>
    <updated>2019-12-07T02:42:46.668Z</updated>
    
    <content type="html"><![CDATA[<p><img alt="Hexo" title="Hexo" data-src="https://image.chingow.cn/background/006tNc79gy1g37jxk0kq5j327a0ki0th.jpg" class="lazyload"></p><p>关于如何搭建Hexo博客的文章已经有很多人写过了，并且有很多人已经写的很深刻很到位了，为什么还要重复写一遍呢？直到我看到了这位同学的博客 <a href="yearito.cn">yearito</a> <strong>（ ps：本站的建站优化大都参考自这里）</strong> ，我有了说服自己的理由：</p><ul><li>你可以参考别人的技术方案，集众所长，亲自实践，然后融入自己的思考写出一篇新文章</li><li>即使并没有做出创新性的贡献，自己重新归纳一遍也有助于梳理流程，深化理解</li></ul><a id="more"></a><p id="div-border-left-red">现在百度 Google 很方便，动动手指就可以搜索到想要的答案，但是太多人都是**『顺手拈来、过目就忘』**，下次遇到同样的问题再搜索一遍。为什么会这样呢？不善于总结，不情愿动手思考，时而久之就会变成所谓的 “代码搬运工” ！</p><p></p><p>闲话不多说了，我们开始吧！</p><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>在 <a href="https://nodejs.org/en/download/" target="_blank" rel="external nofollow noreferrer noopener">官方下载网站</a> 下载源代码，选择最后一项 <code>Source Code</code><br>解压到某一目录, 然后进入此目录,依次执行以下 3 条命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ ./configure</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ make</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">$ sudo make install</span></pre></td></tr></tbody></table></figure><p>安装完后查看<code>node.js</code>版本，检验是否安装成功</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ node -v</span></pre></td></tr></tbody></table></figure><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>在命令行中通过 <strong>npm</strong> 来安装 hexo：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span></pre></td></tr></tbody></table></figure><h3 id="本地启动hexo"><a href="#本地启动hexo" class="headerlink" title="本地启动hexo"></a>本地启动hexo</h3><p>创建一个博客目录（例如 <code>/my-blog</code>），在此目录下，执行初始化命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ mkdir -p my-blog</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> my-blog</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">$ hexo init</span></pre></td></tr></tbody></table></figure><p>执行完毕后，将会生成以下文件结构：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">|-- node_modules       //依赖安装目录</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">|-- scaffolds          //模板文件夹，新建的文章将会从此目录下的文件中继承格式</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">|-- source             //资源文件夹，用于放置图片、数据、文章等资源</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">|   |-- _posts          //文章目录</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">|-- themes             //主题文件夹</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">|   |-- landscape      //默认主题</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">|-- .gitignore         //指定不纳入git版本控制的文件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">|-- _config.yml        //站点配置文件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">|-- db.json</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">|-- package.json</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">`-- package-lock.json</span></pre></td></tr></tbody></table></figure><p>在根目录下执行如下命令启动<strong>hexo</strong>内置的web容器</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo generate     <span class="comment"># 生成静态文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ hexo server       <span class="comment"># 在本地服务器运行</span></span></pre></td></tr></tbody></table></figure><p>在浏览器输入IP地址 <a href="http://localhost:4000" target="_blank" rel="external nofollow noreferrer noopener">http://localhost:4000</a>  就可以看到我们熟悉的** Hello Word **了。</p><p><img alt="Hello Word" title="Hello Word" data-src="https://image.chingow.cn/images/d7cced3b-950e-6d7b-6edc-dc3058646ddb.png" class="lazyload"></p><h3 id="常用命令简化和组合"><a href="#常用命令简化和组合" class="headerlink" title="常用命令简化和组合"></a>常用命令简化和组合</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo g    <span class="comment"># 等同于hexo generate</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ hexo s    <span class="comment"># 等同于hexo server</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">$ hexo p    <span class="comment"># 等同于hexo port </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">$ hexo d    <span class="comment"># 等同于hexo deploy</span></span></pre></td></tr></tbody></table></figure><p>当本地不想使用默认的4000端口时（比如在服务器上，默认使用80端口），可以使用 port 命令更改启动端口<br>另外，<strong>hexo</strong>支持命令合并，比方说 生成静态文件 → 本地启动80端口，我们可以执行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo s -g -p 80</span></pre></td></tr></tbody></table></figure><h2 id="安装NexT主题"><a href="#安装NexT主题" class="headerlink" title="安装NexT主题"></a>安装NexT主题</h2><p>hexo 安装主题的方式非常简单, 只需几个简单的命令即可。<br>将NexT主题文件拷贝至<strong>themes</strong>目录下，然后修改 <span id="inline-blue">站点配置文件</span> _config.yml 中的 <code>theme</code>字段为<code>next</code>即可。</p><p>cd 到博客的根目录下执行以下命令下载主题文件：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> my-blog</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next.git themes/next</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">$ vim _config.yml</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">theme: next</span></pre></td></tr></tbody></table></figure><p>清除 <strong>hexo</strong>缓存，重启服务</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo clean</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ hexo s -g</span></pre></td></tr></tbody></table></figure><p>大部分的设定都能在 <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external nofollow noreferrer noopener">NexT官方文档</a> 里找到, 如主题设定、侧栏、头像、友情链接、打赏等等，在此就不多讲了，照着文档走就行了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.chingow.cn/background/006tNc79gy1g37jxk0kq5j327a0ki0th.jpg&quot; alt=&quot;Hexo&quot; title=&quot;Hexo&quot;&gt;&lt;/p&gt;
&lt;p&gt;关于如何搭建Hexo博客的文章已经有很多人写过了，并且有很多人已经写的很深刻很到位了，为什么还要重复写一遍呢？直到我看到了这位同学的博客 &lt;a href=&quot;yearito.cn&quot;&gt;yearito&lt;/a&gt; &lt;strong&gt;（ ps：本站的建站优化大都参考自这里）&lt;/strong&gt; ，我有了说服自己的理由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你可以参考别人的技术方案，集众所长，亲自实践，然后融入自己的思考写出一篇新文章&lt;/li&gt;
&lt;li&gt;即使并没有做出创新性的贡献，自己重新归纳一遍也有助于梳理流程，深化理解&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://notes.seirhsiao.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://notes.seirhsiao.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>关于字符编码，你所需要知道的（ASCII,Unicode,Utf-8,GB2312…）</title>
    <link href="http://notes.seirhsiao.com/posts/f5f84b52/"/>
    <id>http://notes.seirhsiao.com/posts/f5f84b52/</id>
    <published>2019-04-14T16:08:30.000Z</published>
    <updated>2019-12-07T01:27:07.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于字符编码，你所需要知道的（ASCII-Unicode-Utf-8-GB2312…）"><a href="#关于字符编码，你所需要知道的（ASCII-Unicode-Utf-8-GB2312…）" class="headerlink" title="关于字符编码，你所需要知道的（ASCII,Unicode,Utf-8,GB2312…）"></a>关于字符编码，你所需要知道的（ASCII,Unicode,Utf-8,GB2312…）</h1><blockquote><p>转自 <a href="http://www.imkevinyang.com/2010/06/%E5%85%B3%E4%BA%8E%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%EF%BC%8C%E4%BD%A0%E6%89%80%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84.html" target="_blank" rel="external nofollow noreferrer noopener">Kevin Yang</a></p></blockquote><p>字符编码的问题看似很小，经常被技术人员忽视，但是很容易导致一些莫名其妙的问题。这里总结了一下字符编码的一些普及性的知识，希望对大家有所帮助。</p><h2 id="还是得从ASCII码説起"><a href="#还是得从ASCII码説起" class="headerlink" title="还是得从ASCII码説起"></a>还是得从ASCII码説起</h2><p>説到字符编码，不得不説ASCII码的简史。计算机一开始发明的时候是用来解决数字计算的问题，后来人们发现，计算机还可以做更多的事，例如文本处理。但由于计算机只识“数”，因此人们必须告诉计算机哪个数字来代表哪个特定字符，例如65代表字母‘A’，66代表字母‘B’，以此类推。但是<strong>计算机之间字符-数字的对应关係必须得一致，否则就会造成同一段数字在不同计算机上显示出来的字符不一样。</strong>因此美国国家标准协会ANSI制定了一个标准，规定了常用字符的集合以及每个字符对应的编号，这就是ASCII字符集（Character Set），也称ASCII码。</p><p>当时的计算机普遍使用8比特字节作为最小的存储和处理单元，加之当时用到的字符也很少，26个大小写英文字母还有数字再加上其他常用符号，也不到100个，因此使用7个比特位就可以高效的存储和处理ASCII码，剩下最高位1比特被用作一些通讯系统的奇偶校验。</p><blockquote><p>注意，字节代表系统能够处理的最小单位，不一定是8比特。只是现代计算机的事实标准就是用8比特来代表一个字节。在很多技术规格文献中，为了避免产生歧义，更倾向于使用8位组（Octet）而不是字节（Byte）这个术语来强调8个比特的二进制流。下文中为了便于理解，我会延用大家熟悉的“字节”这个概念。</p></blockquote><p><img alt="ASCII table" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/About_Character_Encoding/ASCII_table.png" class="lazyload"></p><p>ASCII字符集由95个可打印字符（0x20-0x7E）和33个控制字符（0x00-0x19，0x7F）组成。可打印字符用于显示在输出设备上，例如荧屏或者打印纸上，控制字符用于向计算机发出一些特殊指令，例如0x07会让计算机发出哔的一声，0x00通常用于指示字符串的结束，0x0D和0x0A用于指示打印机的打印针头退到行首（回车）并移到下一行（换行）。</p><p>那时候的字符编解码系统非常简单，就是简单的查表过程。例如将字符序列编码为二进制流写入存储设备，只需要在ASCII字符集中依次找到字符对应的字节，然后直接将该字节写入存储设备即可。解码二进制流的过程也是类似。</p><h2 id="OEM字符集的衍生"><a href="#OEM字符集的衍生" class="headerlink" title="OEM字符集的衍生"></a>OEM字符集的衍生</h2><p>当计算机开始发展起来的时候，人们逐渐发现，ASCII字符集里那可怜的128个字符已经不能再满足他们的需求了。人们就在想，一个字节能够表示的数字（编号）有256个，而ASCII字符只用到了0x00~0x7F，也就是佔用了前128个，后面128个数字不用白不用，因此很多人打起了后面这128个数字的主意。可是问题在于，很多人同时有这样的想法，但是大家对于0x80-0xFF这后面的128个数字分别对应什么样的字符，却有各自的想法。这就导致了当时销往世界各地的机器上出现了大量各式各样的OEM字符集。</p><p>下面这张表是IBM-PC机推出的其中一个OEM字符集，字符集的前128个字符和ASCII字符集的基本一致（为什么説基本一致呢，是因为前32个控制字符在某些情况下会被IBM-PC机当作可打印字符解释），后面128个字符空间加入了一些欧洲国家用到的重音字符，以及一些用于画线条画的字符。</p><p><img alt="IBM-PC OEM字符集" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/About_Character_Encoding/IBM_PC_OEM_character_set.png" class="lazyload"></p><p>事实上，大部分OEM字符集是兼容ASCII字符集的，也就是説，大家对于0x00<del>0x7F这个范围的解释基本是相同的，而对于后半部分0x80</del>0xFF的解释却不一定相同。甚至有时候同样的字符在不同OEM字符集中对应的字节也是不同的。</p><p>不同的OEM字符集导致人们无法跨机器交流各种文档。例如职员甲发了一封简历résumés给职员乙，结果职员乙看到的却是r?sum?s，因为é字符在职员甲机器上的OEM字符集中对应的字节是0x82，而在职员乙的机器上，由于使用的OEM字符集不同，对0x82字节解码后得到的字符却是?。</p><h2 id="多字节字符集（MBCS）和中文字符集"><a href="#多字节字符集（MBCS）和中文字符集" class="headerlink" title="多字节字符集（MBCS）和中文字符集"></a>多字节字符集（MBCS）和中文字符集</h2><p>上面我们提到的字符集都是基于单字节编码，也就是説，一个字节翻译成一个字符。这对于拉丁语系国家来説可能没有什么问题，因为他们通过扩展第8个比特，就可以得到256个字符了，足够用了。但是对于亚洲国家来説，256个字符是远远不够用的。因此这些国家的人为了用上电脑，又要保持和ASCII字符集的兼容，就发明了多字节编码方式，相应的字符集就称为多字节字符集。例如中国使用的就是双字节字符集编码（DBCS，Double Byte Character Set）。</p><p>对于单字节字符集来説，代码页中只需要有一张码錶即可，上面记录着256个数字代表的字符。程序只需要做简单的查表操作就可以完成编解码的过程。</p><blockquote><p>代码页是字符集编码的具体实现，你可以把他理解为一张“字符-字节”映射表，通过查表实现“字符-字节”的翻译。下面会有更详细的描述。</p></blockquote><p>而对于多字节字符集，代码页中通常会有很多码錶。那么程序怎么知道该使用哪张码錶去解码二进制流呢？答案是，<strong>根据第一个字节来选择不同的码錶进行解析。</strong></p><p>例如目前最常用的中文字符集GB2312，涵盖了所有简体字符以及一部分其他字符；GBK（K代表扩展的意思）则在GB2312的基础上加入了对繁体字符等其他非简体字符（GB18030字符集不是双字节字符集，我们在讲Unicode的时候会提到）。这两个字符集的字符都是使用1-2个字节来表示。Windows系统採用936代码页来实现对GBK字符集的编解码。在解析字节流的时候，如果遇到字节的最高位是0的话，那么就使用936代码页中的第1张码錶进行解码，这就和单字节字符集的编解码方式一致了。</p><p><img alt="936代码页" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/About_Character_Encoding/Codepage_936.png" class="lazyload"></p><p>当字节的高位是1的时候，确切的説，当第一个字节位于0x81–0xFE之间时，根据第一个字节不同找到代码页中的相应的码錶，例如当第一个字节是0x81，那么对应936中的下面这张码錶：</p><p><img alt="936代码页2" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/About_Character_Encoding/Codepage_936_2.png" class="lazyload"></p><p>（关于936代码页中完整的码錶信息，参见MSDN：<a href="http://msdn.microsoft.com/en-us/library/cc194913%28v=MSDN.10%29.aspx.）" target="_blank" rel="external nofollow noreferrer noopener">http://msdn.microsoft.com/en-us/library/cc194913%28v=MSDN.10%29.aspx.）</a></p><p>按照936代码页的码表，当程序遇到连续字节流0x81 0x40的时候，就会解码为“丂”字符。</p><h2 id="ANSI标准、国家标准、ISO标准"><a href="#ANSI标准、国家标准、ISO标准" class="headerlink" title="ANSI标准、国家标准、ISO标准"></a>ANSI标准、国家标准、ISO标准</h2><p>不同ASCII衍生字符集的出现，让文档交流变得非常困难，因此各种组织都陆续进行了标准化流程。例如美国ANSI组织制定了ANSI标准字符编码（注意，<strong>我们现在通常説到ANSI编码，通常指的是平台的默认编码，例如英文操作系统中是ISO-8859-1，中文系统是GBK</strong>），ISO组织制定的各种ISO标准字符编码，还有各国也会制定一些国家标准字符集，例如中国的GBK，GB2312和GB18030。</p><p>操作系统在发佈的时候，通常会往机器里预装这些标准的字符集还有平台专用的字符集，这样只要你的文档是使用标准字符集编写的，通用性就比较高了。例如你用GB2312字符集编写的文档，在中国大陆内的任何机器上都能正确显示。同时，我们也可以在一台机器上閲读多个国家不同语言的文档了，前提是本机必须安装该文档使用的字符集。</p><h2 id="Unicode的出现"><a href="#Unicode的出现" class="headerlink" title="Unicode的出现"></a>Unicode的出现</h2><p>虽然通过使用不同字符集，我们可以在一台机器上查閲不同语言的文档，但是我们仍然无法解决一个问题：<strong>在一份文档中显示所有字符</strong>。为了解决这个问题，我们需要一个全人类达成共识的巨大的字符集，这就是Unicode字符集。</p><h3 id="Unicode字符集概述"><a href="#Unicode字符集概述" class="headerlink" title="Unicode字符集概述"></a>Unicode字符集概述</h3><p>Unicode字符集涵盖了目前人类使用的所有字符，併为每个字符进行统一编号，分配唯一的字符码（Code Point）。Unicode字符集将所有字符按照使用上的频繁度划分为17个层面（Plane），每个层面上有2<sup>16</sup>=65536个字符码空间。</p><p><img alt="Unicode" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/About_Character_Encoding/Unicode.png" class="lazyload"></p><p>其中第0个层面BMP，基本涵盖了当今世界用到的所有字符。其他的层面要么是用来表示一些远古时期的文字，要么是留作扩展。我们平常用到的Unicode字符，一般都是位于BMP层面上的。目前Unicode字符集中尚有大量字符空间未使用。</p><h3 id="编码系统的变化"><a href="#编码系统的变化" class="headerlink" title="编码系统的变化"></a>编码系统的变化</h3><p>在Unicode出现之前，所有的字符集都是和具体编码方案绑定在一起的，都是直接将字符和最终字节流绑定死了，例如ASCII编码系统规定使用7比特来编码ASCII字符集；GB2312以及GBK字符集，限定了使用最多2个字节来编码所有字符，并且规定了字节序。这样的编码系统通常用简单的查表，也就是通过代码页就可以直接将字符映射为存储设备上的字节流了。例如下面这个例子：</p><p><img alt="编码系统" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/About_Character_Encoding/Coding_system.png" class="lazyload"></p><p>这种方式的缺点在于，字符和字节流之间耦合得太紧密了，从而限定了字符集的扩展能力。假设以后火星人入住地球了，要往现有字符集中加入火星文就变得很难甚至不可能了，而且很容易破坏现有的编码规则。</p><p>因此Unicode在设计上考虑到了这一点，将字符集和字符编码方案分离开。</p><p><img alt="字符编码系统" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/About_Character_Encoding/Character_encoding_system.png" class="lazyload"></p><p>也就是説，<strong>虽然每个字符在Unicode字符集中都能找到唯一确定的编号（字符码，又称Unicode码），但是决定最终字节流的却是具体的字符编码</strong>。例如同样是对Unicode字符“A”进行编码，UTF-8字符编码得到的字节流是0x41，而UTF-16（大端模式）得到的是0x00 0x41。</p><h3 id="常见的Unicode编码"><a href="#常见的Unicode编码" class="headerlink" title="常见的Unicode编码"></a>常见的Unicode编码</h3><h4 id="UCS-2-UTF-16"><a href="#UCS-2-UTF-16" class="headerlink" title="UCS-2/UTF-16"></a>UCS-2/UTF-16</h4><p>如果要我们来实现Unicode字符集中BMP字符的编码方案，我们会怎么实现？由于BMP层面上有2<sup>16</sup>=65536个字符码，因此我们只需要两个字节就可以完全表示这所有的字符了。</p><p>举个例子，“中”的Unicode字符码是0x4E2D(01001110 00101101)，那么我们可以编码为01001110 00101101（大端）或者00101101 01001110 （小端）。</p><p>UCS-2和UTF-16对于BMP层面的字符均是使用2个字节来表示，并且编码得到的结果完全一致。不同之处在于，<strong>UCS-2最初设计的时候只考虑到BMP字符，因此使用固定2个字节长度，也就是説，他无法表示Unicode其他层面上的字符，而UTF-16为了解除这个限制，支持Unicode全字符集的编解码，採用了变长编码，最少使用2个字节，如果要编码BMP以外的字符，则需要4个字节结对</strong>，这里就不讨论那么远，有兴趣可以参考维基百科：<a href="https://en.wikipedia.org/wiki/UTF-16" target="_blank" rel="external nofollow noreferrer noopener">UTF-16/UCS-2</a>。</p><p>Windows从NT时代开始就採用了UTF-16编码，很多流行的编程平台，例如.Net，Java，Qt还有Mac下的Cocoa等都是使用UTF-16作为基础的字符编码。例如代码中的字符串，在内存中相应的字节流就是用UTF-16编码过的。</p><h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><p>UTF-8应该是目前应用最广泛的一种Unicode编码方案。由于UCS-2/UTF-16对于ASCII字符使用两个字节进行编码，存储和处理效率相对低下，并且由于ASCII字符经过UTF-16编码后得到的两个字节，高字节始终是0x00，很多C语言的函数都将此字节视为字符串末尾从而导致无法正确解析文本。因此一开始推出的时候遭到很多西方国家的抵触，大大影响了Unicode的推行。后来聪明的人们发明了UTF-8编码，解决了这个问题。</p><p>UTF-8编码方案採用1-4个字节来编码字符，方法其实也非常简单。</p><p><img alt="UTF-8编码" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/About_Character_Encoding/UTF-8_encoding.png" class="lazyload"></p><p>（上图中的x代表Unicode码的低8位，y代表高8位）</p><p><strong>对于ASCII字符的编码使用单字节，和ASCII编码一摸一样，这样所有原先使用ASCII编解码的文档就可以直接转到UTF-8编码了。对于其他字符，则使用2-4个字节来表示，其中，首字节前置1的数目代表正确解析所需要的字节数，剩馀字节的高2位始终是10。例如首字节是1110yyyy，前置有3个1，説明正确解析总共需要3个字节，需要和后面2个以10开头的字节结合才能正确解析得到字符。</strong></p><p>关于UTF-8的更多信息，参考维基百科：<a href="https://en.wikipedia.org/wiki/UTF-8" target="_blank" rel="external nofollow noreferrer noopener">UTF-8</a>。</p><h4 id="GB18030"><a href="#GB18030" class="headerlink" title="GB18030"></a>GB18030</h4><p>任何能够将Unicode字符映射为字节流的编码都属于Unicode编码。中国的GB18030编码，覆盖了Unicode所有的字符，因此也算是一种Unicode编码。只不过他的编码方式并不像UTF-8或者UTF-16一样，将Unicode字符的编号通过一定的规则进行转换，而只能通过查表的手段进行编码。</p><p>关于GB18030的更多信息，参考：<a href="https://en.wikipedia.org/wiki/GB_18030" target="_blank" rel="external nofollow noreferrer noopener">GB18030</a>。</p><h3 id="Unicode相关的常见问题"><a href="#Unicode相关的常见问题" class="headerlink" title="Unicode相关的常见问题"></a>Unicode相关的常见问题</h3><ul><li><p>Unicode是两个字节吗？<br>Unicode只是定义了一个庞大的、全球通用的字符集，併为每个字符规定了唯一确定的编号，具体存储为什么样的字节流，取决于字符编码方案。推荐的Unicode编码是UTF-16和UTF-8。</p></li><li><p>带签名的UTF-8指的是什么意思？</p><p>带签名指的是字节流以BOM标记开始。很多软件会“智能”的探测当前字节流使用的字符编码，这种探测过程出于效率考虑，通常会提取字节流前面若干个字节，看看是否符合某些常见字符编码的编码规则。由于UTF-8和ASCII编码对于纯英文的编码是一样的，无法区分开来，因此通过在字节流最前面添加BOM标记可以告诉软件，当前使用的是Unicode编码，判别成功率就十分准确了。但是需要注意，不是所有软件或者程序都能正确处理BOM标记，例如PHP就不会检测BOM标记，直接把它当普通字节流解析了。因此如果你的PHP文件是採用带BOM标记的UTF-8进行编码的，那么有可能会出现问题。</p></li><li><p>Unicode编码和以前的字符集编码有什么区别？</p><p>早期字符编码、字符集和代码页等概念都是表达同一个意思。例如GB2312字符集、GB2312编码，936代码页，实际上説的是同个东西。但是对于Unicode则不同，Unicode字符集只是定义了字符的集合和唯一编号，Unicode编码，则是对UTF-8、UCS-2/UTF-16等具体编码方案的统称而已，并不是具体的编码方案。所以当需要用到字符编码的时候，你可以写gb2312，codepage936，utf-8，utf-16，但请不要写unicode（看过别人在网页的meta标籤里头写charset=unicode，有感而发）。</p></li></ul><h3 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h3><p>乱码指的是程序显示出来的字符文本无法用任何语言去解读。一般情况下会包含大量?。乱码问题是所有计算机用户或多或少会遇到的问题。<strong>造成乱码的原因就是因为使用了错误的字符编码去解码字节流，因此当我们在思考任何跟文本显示有关的问题时，请时刻保持清醒：当前使用的字符编码是什么</strong>。只有这样，我们才能正确分析和处理乱码问题。</p><p>例如最常见的网页乱码问题。如果你是网站技术人员，遇到这样的问题，需要检查以下原因：</p><ul><li>服务器返回的响应头Content-Type没有指明字符编码</li><li>网页内是否使用META HTTP-EQUIV标籤指定了字符编码</li><li>网页文件本身存储时使用的字符编码和网页声明的字符编码是否一致<br><img alt="检查网页乱码" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/About_Character_Encoding/Check_webpage_garbled.png" class="lazyload"></li></ul><p>注意，网页解析的过程如果使用的字符编码不正确，还可能会导致脚本或者样式表出错。具体细节可以参考我以前写过的文章：<a href="http://www.imkevinyang.com/2009/08/%E6%96%87%E6%A1%A3%E5%AD%97%E7%AC%A6%E9%9B%86%E5%AF%BC%E8%87%B4%E7%9A%84%E8%84%9A%E6%9C%AC%E9%94%99%E8%AF%AF.html" target="_blank" rel="external nofollow noreferrer noopener">文档字符集导致的脚本错误</a>和<a href="http://www.imkevinyang.com/2009/11/asp-net%E9%A1%B5%E9%9D%A2%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98.html" target="_blank" rel="external nofollow noreferrer noopener">Asp.Net页面的编码问题</a>。</p><p>不久前看到某技术论坛有人反馈，WinForm程序使用Clipboard类的GetData方法去访问剪切板中的HTML内容时会出现乱码的问题，我估计也是由于WinForm在获取HTML文本的时候没有用对正确的字符编码导致的。Windows剪贴板只支持UTF-8编码，也就是説你传入的文本都会被UTF-8编解码。这样一来，只要两个程序都是调用Windows剪切板API编程的话，那么複製粘贴的过程中不会出现乱码。除非一方在获取到剪贴板数据之后使用了错误的字符编码进行解码，才会得到乱码（我做了简单的WinForm剪切板编程实验，发现GetData使用的是系统默认编码，而不是UTF-8编码）。</p><p>关于乱码中出现?或者?，这里需要额外提一下，<strong>当程序使用特定字符编码解析字节流的时候，一旦遇到无法解析的字节流时，就会用解码失败替换字符或者?来替代。因此，一旦你最终解析得到的文本包含这样的字符，而你又无法得到原始字节流的时候，説明正确的信息已经彻底丢失了，尝试任何字符编码都无法从这样的字符文本中还原出正确的信息来</strong>。</p><h3 id="必要的术语解释"><a href="#必要的术语解释" class="headerlink" title="必要的术语解释"></a>必要的术语解释</h3><p><strong>字符集（Character Set）</strong>，字面上的理解就是字符的集合，例如ASCII字符集，定义了128个字符；GB2312定义了7445个字符。而<strong>计算机系统中提到的字符集准确来説，指的是已编号的字符的有序集合（不一定是连续）</strong>。</p><p><strong>字符码（Code Point）</strong>指的就是字符集中每个字符的数字编号。例如ASCII字符集用0-127这连续的128个数字分别表示128个字符；GBK字符集使用区位码的方式为每个字符编号，首先定义一个94X94的矩阵，行称为“区”，列称为“位”，然后将所有国标汉字放入矩阵当中，这样每个汉字就可以用唯一的“区位”码来标识了。例如“中”字被放到54区第48位，因此字符码就是5448。而Unicode中将字符集按照一定的类别划分到0~16这17个层面（Planes）中，每个层面中拥有2<sup>16</sup>=65536个字符码，因此Unicode总共拥有的字符码，也即是Unicode的字符空间总共有17*65536=1114112。</p><p><img alt="Unicode Basic code structure" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/About_Character_Encoding/Unicode_Basic_code_structure.png" class="lazyload"></p><p><strong>编码</strong>的过程是将字符转换成字节流。</p><p><strong>解码</strong>的过程是将字节流解析为字符。</p><p><strong>字符编码（Character Encoding）</strong>是将字符集中的字符码映射为字节流的一种具体实现方案。例如ASCII字符编码规定使用单字节中低位的7个比特去编码所有的字符。例如‘A’的编号是65，用单字节表示就是0x41，因此写入存储设备的时候就是b’01000001’。GBK编码则是将区位码（GBK的字符码）中的区码和位码的分别加上0xA0（160）的偏移（之所以要加上这样的偏移，主要是为了和ASCII码兼容），例如刚刚提到的“中”字，区位码是5448，十六进制是0x3630，区码和位码分别加上0xA0的偏移之后就得到0xD6D0，这就是“中”字的GBK编码结果。</p><p><strong>代码页（Code Page）</strong>一种字符编码具体形式。早期字符相对少，因此通常会使用类似表格的形式将字符直接映射为字节流，然后通过查表的方式来实现字符的编解码。现代操作系统沿用了这种方式。例如Windows使用936代码页、Mac系统使用EUC-CN代码页实现GBK字符集的编码，名字虽然不一样，但对于同一汉字的编码肯定是一样的。</p><p><strong>大小端</strong>的説法源自《格列佛游记》。我们知道，鸡蛋通常一端大一端小，小人国的人们对于剥蛋壳时应从哪一端开始剥起有着不一样的看法。同样，计算机界对于传输多字节字（由多个字节来共同表示一个数据类型）时，是先传高位字节（大端）还是先传低位字节（小端）也有着不一样的看法，这就是计算机里头大小端模式的由来了。无论是写文件还是网络传输，实际上都是往流设备进行写操作的过程，而且这个写操作是从流的低地址向高地址开始写（这很符合人的习惯），对于多字节字来説，如果先写入高位字节，则称作大端模式。反之则称作小端模式。也就是説，大端模式下，字节序和流设备的地址顺序是相反的，而小端模式则是相同的。一般网络协议都採用大端模式进行传输，windows操作系统採用Utf-16小端模式。</p><p>参考链接：</p><ol><li><a href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/" target="_blank" rel="external nofollow noreferrer noopener">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)</a></li><li><a href="http://developers.sun.com/dev/gadc/technicalpublications/articles/gb18030.html" target="_blank" rel="external nofollow noreferrer noopener">http://developers.sun.com/dev/gadc/technicalpublications/articles/gb18030.html</a></li><li><a href="http://en.wikipedia.org/wiki/Universal_Character_Set" target="_blank" rel="external nofollow noreferrer noopener">http://en.wikipedia.org/wiki/Universal_Character_Set</a></li><li><a href="http://en.wikipedia.org/wiki/Code_page" target="_blank" rel="external nofollow noreferrer noopener">http://en.wikipedia.org/wiki/Code_page</a></li></ol><h1 id="Unicode-和-UTF-8-有什么区别？"><a href="#Unicode-和-UTF-8-有什么区别？" class="headerlink" title="Unicode 和 UTF-8 有什么区别？"></a>Unicode 和 UTF-8 有什么区别？</h1><blockquote><p>转发自知乎 盛世唐朝 <a href="https://www.zhihu.com/question/23374078" target="_blank" rel="external nofollow noreferrer noopener">https://www.zhihu.com/question/23374078</a></p></blockquote><p>很久很久以前，有一羣人，他们决定用8个可以开合的晶体管来组合成不同的状态，以表示世界上的万物。他们看到8个开关状态是好的，于是他们把这称为”<strong>字节</strong>“。再后来，他们又做了一些可以处理这些字节的机器，机器开动了，可以用字节来组合出很多状态，状态开始变来变去。他们看到这样是好的，于是它们就这机器称为”<strong>计算机</strong>“。</p><p>开始计算机只在美国用。八位的字节一共可以组合出256(2的8次方)种不同的状态。<br>他们把其中的编号从0开始的32种状态分别规定了特殊的用途，一但终端、打印机遇上约定好的这些字节被传过来时，就要做一些约定的动作：<br>遇上0×10, 终端就换行；<br>遇上0×07, 终端就向人们嘟嘟叫；<br>遇上0x1b, 打印机就打印反白的字，或者终端就用彩色显示字母。<br>他们看到这样很好，于是就把这些0×20以下的字节状态称为”控制码”。他们又把所有的空<br>格、标点符号、数字、大小写字母分别用连续的字节状态表示，一直编到了第127号，这样计算机就可以用不同字节来存储英语的文字了。大家看到这样，都感觉很好，于是大家都把这个方案叫做 <strong>ANSI</strong> 的”Ascii”编码（American Standard Code for Information Interchange，美国信息互换标准代码）。当时世界上所有的计算机都用同样的<strong>ASCII</strong>方案来保存英文文字。</p><p>后来，就像建造巴比伦塔一样，世界各地都开始使用计算机，但是很多国家用的不是英文，他们的字母里有许多是ASCII里没有的，为了可以在计算机保存他们的文字，他们决定採用 127号之后的空位来表示这些新的字母、符号，还加入了很多画表格时需要用下到的横线、竖线、交叉等形状，一直把序号编到了最后一个状态255。从128 到255这一页的字符集被称”<strong>扩展字符集</strong>“。从此之后，贪婪的人类再没有新的状态可以用了，美帝国主义可能没有想到还有第三世界国家的人们也希望可以用到计算机吧！</p><p>等中国人们得到计算机时，已经没有可以利用的字节状态来表示汉字，况且有6000多个常用汉字需要保存呢。但是这难不倒智慧的中国人民，我们不客气地把那些127号之后的奇异符号们直接取消掉, 规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，我们还把数学符号、罗马希腊的字母、日文的假名们都编进去了，连在 ASCII 里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常説的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。中国人民看到这样很不错，于是就把这种汉字方案叫做 “<strong>GB2312</strong>“。GB2312 是对 ASCII 的中文扩展。</p><p>但是中国的汉字太多了，我们很快就就发现有许多人的人名没有办法在这里打出来，特别是某些很会麻烦别人的国家领导人。于是我们不得不继续把GB2312 没有用到的码位找出来老实不客气地用上。后来还是不够用，于是乾脆不再要求低字节一定是127号之后的内码，只要第一个字节是大于127就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字符集里的内容。结果扩展之后的编码方案被称为<strong>GBK</strong> 标准，GBK包括了GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号。 后来少数民族也要用电脑了，于是我们再扩展，又加了几千个新的少数民族的字，GBK扩成了 <strong>GB18030</strong>。从此之后，中华民族的文化就可以在计算机时代中传承了。 中国的程序员们看到这一系列汉字编码的标准是好的，于是通称他们叫做 “<strong>DBCS</strong>“（Double Byte Charecter Set 双字节字符集）。在DBCS系列标准里，最大的特点是两字节长的汉字字符和一字节长的英文字符并存于同一套编码方案里，因此他们写的程序为了支持中文处理，必须要注意字串里的每一个字节的值，如果这个值是大于127的，那么就认为一个双字节字符集里的字符出现了。那时候凡是受过加持，会编程的计算机僧侣们都要每天念下面这个咒语数百遍： “一个汉字算两个英文字符！一个汉字算两个英文字符……”</p><p>因为当时各个国家都像中国这样搞出一套自己的编码标准，结果互相之间谁也不懂谁的编码，谁也不支持别人的编码，连大陆和台湾这样只相隔了150海里，使用着同一种语言的兄弟地区，也分别採用了不同的 DBCS 编码方案——当时的中国人想让电脑显示汉字，就必须装上一个”汉字系统”，专门用来处理汉字的显示、输入的问题，像是那个台湾的愚昧封建人士写的算命程序就必须加装另一套支持 BIG5 编码的什么”倚天汉字系统”才可以用，装错了字符系统，显示就会乱了套！这怎么办？而且世界民族之林中还有那些一时用不上电脑的穷苦人民，他们的文字又怎么办？ 真是计算机的巴比伦塔命题啊！</p><p>正在这时，大天使加百列及时出现了——一个叫 ISO（国际标谁化组织）的国际组织决定着手解决这个问题。他们採用的方法很简单：废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母和符号 的编码！他们打算叫它”Universal Multiple-Octet Coded Character Set”，简称 <strong>UCS</strong>, 俗称 “<strong>unicode</strong>“。</p><p>unicode开始制订时，计算机的存储器容量极大地发展了，空间再也不成为问题了。于是 ISO 就直接规定必须用两个字节，也就是16位来统一表示所有的字符，对于ASCII里的那些”半角”字符，unicode包持其原编码不变，只是将其长度由原来的8位扩展为16位，而其他文化和语言的字符则全部重新统一编码。由于”半角”英文符号只需要用到低8位，所以其高8位永远是0，因此这种大气的方案在保存英文文本时会多浪费一倍的空间。</p><p>这时候，从旧社会里走过来的程序员开始发现一个奇怪的现象：他们的 strlen 函数靠不住了，一个汉字不再是相当于两个字符了，而是一个！是的，从unicode开始，无论是半角的英文字母，还是全角的汉字，它们都是统一的”<strong>一个字符</strong>“！同时，也都是统一的”<strong>两个字节</strong>“，请注意”<strong>字符</strong>“和”<strong>字节</strong>“两个术语的不同，”<strong>字节</strong>“是一个8位的物理存贮单元，而”<strong>字符</strong>“则是一个文化相关的符号。在unicode中，一个字符就是两个字节。一个汉字算两个英文字符的时代已经快过去了。</p><p>unicode同样也不完美，这里就有两个的问题，一个是，如何才能区别unicode和ascii？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储空间来説是极大的浪费，文本文件的大小会因此大出二三倍，这是难以接受的。</p><p>unicode在很长一段时间内无法推广，直到互联网的出现，为解决unicode如何在网络上传输的问题，于是面向传输的众多 <strong>UTF</strong>（UCS Transfer Format）标准出现了，顾名思义，<strong>UTF-8</strong>就是每次8个位传输数据，而<strong>UTF-16</strong>就是每次16个位。UTF-8就是在互联网上使用最广的一种unicode的实现方式，这是为传输而设计的编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度，当字符在ASCII码的范围时，就用一个字节表示，保留了ASCII字符一个字节的编码做为它的一部分，注意的是unicode一箇中文字符佔2个字节，而UTF-8一箇中文字符佔3个字节）。从unicode到utf-8并不是直接的对应，而是要过一些算法和规则来转换。</p><table><thead><tr><th>Unicode符号范围(十六进制)</th><th>UTF-8编码方式（二进制）</th></tr></thead><tbody><tr><td>0000 0000-0000 007F</td><td>0xxxxxxx</td></tr><tr><td>0000 0080-0000 07FF</td><td>110xxxxx 10xxxxxx</td></tr><tr><td>0000 0800-0000 FFFF</td><td>1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>0001 0000-0010 FFFF</td><td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr></tbody></table><p>最后简单总结一下：</p><ul><li>中国人民通过对 ASCII 编码的中文扩充改造，产生了 GB2312 编码，可以表示6000多个常用汉字。</li><li>汉字实在是太多了，包括繁体和各种字符，于是产生了 GBK 编码，它包括了 GB2312 中的编码，同时扩充了很多。</li><li>中国是个多民族国家，各个民族几乎都有自己独立的语言系统，为了表示那些字符，继续把 GBK 编码扩充为 GB18030 编码。</li><li>每个国家都像中国一样，把自己的语言编码，于是出现了各种各样的编码，如果你不安装相应的编码，就无法解释相应编码想表达的内容。</li><li>终于，有个叫 ISO 的组织看不下去了。他们一起创造了一种编码 UNICODE ，这种编码非常大，大到可以容纳世界上任何一个文字和标志。所以只要电脑上有 UNICODE 这种编码系统，无论是全球哪种文字，只需要保存文件的时候，保存成 UNICODE 编码就可以被其他电脑正常解释。</li><li>UNICODE 在网络传输中，出现了两个标准 UTF-8 和 UTF-16，分别每次传输 8个位和 16个位。于是就会有人产生疑问，UTF-8 既然能保存那么多文字、符号，为什么国内还有这么多使用 GBK 等编码的人？因为 UTF-8 等编码体积比较大，佔电脑空间比较多，如果面向的使用人羣绝大部分都是中国人，用 GBK 等编码也可以。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      字符编码的问题看似很小，经常被技术人员忽视，但是很容易导致一些莫名其妙的问题。这里总结了一下字符编码的一些普及性的知识，希望对大家有所帮助。
    
    </summary>
    
    
      <category term="Java" scheme="http://notes.seirhsiao.com/categories/Java/"/>
    
    
      <category term="Android" scheme="http://notes.seirhsiao.com/tags/Android/"/>
    
      <category term="Java" scheme="http://notes.seirhsiao.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>好用的新浪图床工具推荐 - Weibo-Picture-Store</title>
    <link href="http://notes.seirhsiao.com/posts/d786a301/"/>
    <id>http://notes.seirhsiao.com/posts/d786a301/</id>
    <published>2019-04-14T09:02:15.000Z</published>
    <updated>2019-12-07T01:27:08.382Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger">            <p>2019年5月28号更新<br>微博图床已经开始现在外链了，导致在网站上使用微博图床的图片无法显示，如果使用微博作为图床的，应考虑转向其它的图床。</p>          </div><p>对于运营静态网站的人来说，图片存储在哪里是一个值得深思的问题。<br>要考虑到连接速度和存储持久问题。<br>像七牛、腾讯云这些服务商，想要使用存储服务，就需要付费使用。<br>就算有提供免费的存储，但奈何存储空间大小限制，加上要实名认证，就足以将人拒之门外。<br>只能考虑一些即免费又没有空间限制的服务商。<br>国外的一些图片上传网站考虑到在中国大陆的连接速度和有可能被和谐的问题，暂时不考虑。<br>像sm.ms这些图床，因为怕随时会关掉而导致所有链接失效，同时上传后又没有备份，所以也在排除之外。<br>偶然在Github上看到这个新浪图床上传工具，有上传存储记录。同时，新浪作为一个用户量很大的网站，也不用担心会被关闭的问题。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这个图床上传工具叫做 Weibo-Picture-Store,由<a href="https://github.com/Semibold" target="_blank" rel="external nofollow noreferrer noopener">Semibold</a>开发。是一款上传图片到微博并生成外链的 Chrome 浏览器扩展。</p><blockquote><p>chrome webstore 下载地址： <a href="https://chrome.google.com/webstore/detail/微博图床/pinjkilghdfhnkibhcangnpmcpdpmehk" target="_blank" rel="external nofollow noreferrer noopener">https://chrome.google.com/webstore/detail/微博图床/pinjkilghdfhnkibhcangnpmcpdpmehk</a><br>Github: <a href="https://github.com/Semibold/Weibo-Picture-Store" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/Semibold/Weibo-Picture-Store</a></p></blockquote><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>支持点选、拖拽、粘贴以及页面右键菜单上传图片到微博并同步到微相册</li><li>支持拖拽上传文件夹中的图片文件</li><li>支持 JPEG、PNG、GIF 三种图片格式</li><li>支持 SVG、BMP、WebP、ico 有损转换为 PNG</li><li>支持把 HTML5 视频的当前帧上传为 JPG 图像</li><li>支持查看上传记录，简单的浏览及删除操作</li><li>支持生成 URL、HTML、UBB、Markdown 四种格式</li><li>支持单条、多条模式的复制操作</li><li>支持选择协议（http、https 和相对协议）</li><li>支持三种固定裁剪尺寸和用户自定义尺寸</li><li>支持使用微博账号和密码自动登录</li></ul><h2 id="界面介绍"><a href="#界面介绍" class="headerlink" title="界面介绍"></a>界面介绍</h2><h3 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h3><p><img alt="主界面" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Weibo-Picture-Store/Main_interface.png" class="lazyload"></p><ol><li>地址协议选择</li><li>图片裁剪选择</li><li>在单条和多条复制模式之间切换的按钮</li><li>上传记录按钮</li><li>选择上传图片的按钮</li><li>复制当前类型的地址，批量模式下会复制此类型的所有地址</li><li>粘贴区域及拖拽区域，弹窗任何区域都可以使用（这里可以批量粘贴图片链接）</li><li>隐藏菜单，用于放置反馈及其他信息（图中是菜单展开状态）</li><li>在 GitHub 上提交建议或者 BUG</li><li>通过电子邮件反馈问题（如果不方便使用 GitHub）</li><li>捐赠支持一下</li><li>查看更新日志</li></ol><h3 id="上传记录界面"><a href="#上传记录界面" class="headerlink" title="上传记录界面"></a>上传记录界面</h3><p><img alt="上传记录界面" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Weibo-Picture-Store/Upload_record_interface.png" class="lazyload"></p><ol><li>从微相册中移除这张图片</li><li>在图片上右击可以复制图片地址</li><li>批量删除选中的文件（按住 Ctrl 键可以多选）</li><li>图片最近的修改时间</li><li>切换相册（不可用状态）</li><li>切换相册（可用状态）</li></ol><h2 id="上传方式"><a href="#上传方式" class="headerlink" title="上传方式"></a>上传方式</h2><p>支持单张上传和多张上传</p><h3 id="点击上传"><a href="#点击上传" class="headerlink" title="点击上传"></a>点击上传</h3><p><img alt="上传方式" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Weibo-Picture-Store/Upload_method.jpg" class="lazyload"></p><h3 id="拖拽上传"><a href="#拖拽上传" class="headerlink" title="拖拽上传"></a>拖拽上传</h3><p><img alt="拖拽上传" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Weibo-Picture-Store/Drag_and_drop_file_upload.gif" class="lazyload"></p><h3 id="浏览器右键上传"><a href="#浏览器右键上传" class="headerlink" title="浏览器右键上传"></a>浏览器右键上传</h3><p><img alt="浏览器右键上传" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Weibo-Picture-Store/Browser_right_click_upload.jpg" class="lazyload"></p><h2 id="存储位置"><a href="#存储位置" class="headerlink" title="存储位置"></a>存储位置</h2><p>因为上传的时候会读取cookies,所以你要提前登录新浪微博。当然你也可以在扩展中填写微博账号和密码(不推荐)。</p><p><img alt="设置微博账号和密码" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Weibo-Picture-Store/Set_Weibo_account_and_password.jpg" class="lazyload"></p><p>上传后的图片会存储在新浪微博-我的相册里</p><p><img alt="存储位置" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Weibo-Picture-Store/storage_location.jpg" class="lazyload"></p><h2 id="其他资讯"><a href="#其他资讯" class="headerlink" title="其他资讯"></a>其他资讯</h2><ul><li><p>图片上传到哪儿了？<br>上传到用户的微博上了</p></li><li><p>在扩展中填写微博账号和密码，这样做是否安全？<br>你填写的账号和密码存在本地，不会上传到任何服务器上</p></li><li><p>我的常用微博账号是A，我可以在扩展中填写另一个账号B吗？<br>可以但不推荐，因为一个浏览器同时只能有一个微博的登录状态，在使用B时，A可能会被强制登出。若有同时登录两个账户的需求，请使用 Chrome 的多用户模式来避免上述这种情况</p></li><li><p>可以上传的最大图片大小是多少？<br>目前是 20MB</p></li><li><p>如何设置微博图片水印？<br>请参考官方教程设置微博图片水印</p></li><li><p>如何管理已上传的图片？<br>上传记录或者微相册均可以管理</p></li><li><p>如何删除已上传的图片？<br>目前无法删除，微相册中的删除是针对相册的操作，对图片本身没有影响</p></li><li><p>粘贴上传没有效果？<br>粘贴上传只支持复制图片文件，在资源文件管理器中的复制文件并粘贴是没有效果的</p></li><li><p>上传的是 PNG 图片，返回的却是 JPG 后缀的地址？<br>微博不支持 PNG 后缀，后缀对于浏览器判断图片的格式是没有影响的</p></li><li><p>如何使用自定义裁剪？<br>自定义裁剪的格式需要微博支持，否则生成的地址是不能访问的</p></li><li><p>裁剪操作对图片的影响？<br>裁剪适用于 JPEG 格式的图片。PNG 图片裁剪后会丢失透明通道，GIF 则会变成静态图片</p></li><li><p>微相册同步图片的最大数量是多少？<br>1000 张。如果达到这个数量后继续使用，会创建新的相册，如果相册也满了，则不再同步图片</p></li><li><p>微相册数量已达到上限 100 个，不能同步图片了怎么办？<br>前往微相册清理陈旧的相册即可</p></li><li><p>为什么通过复制粘贴的方式上传 GIF 会变成静态图片？<br>在浏览器或操作系统中复制 GIF 时，只有其中一帧被复制到了剪切板，因此上传后会变成静态图片</p></li></ul><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p>  Weibo-Picture-Store：<a href="https://github.com/Semibold/Weibo-Picture-Store" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/Semibold/Weibo-Picture-Store</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      好用的新浪图床工具推荐 - Weibo-Picture-Store
    
    </summary>
    
    
      <category term="Tools" scheme="http://notes.seirhsiao.com/categories/Tools/"/>
    
    
      <category term="工具" scheme="http://notes.seirhsiao.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="图床" scheme="http://notes.seirhsiao.com/tags/%E5%9B%BE%E5%BA%8A/"/>
    
      <category term="chrome插件" scheme="http://notes.seirhsiao.com/tags/chrome%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java知识点复习(二)</title>
    <link href="http://notes.seirhsiao.com/posts/46be9372/"/>
    <id>http://notes.seirhsiao.com/posts/46be9372/</id>
    <published>2019-04-10T12:24:51.000Z</published>
    <updated>2019-12-07T01:18:05.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象程序设计-OOP"><a href="#面向对象程序设计-OOP" class="headerlink" title="面向对象程序设计(OOP)"></a>面向对象程序设计(OOP)</h2><p>面向对象的程序由对象组成的，每个对象包含对用户公开的特定功能部分和隐藏的实现部分。<br>oop将数据摆在第一位，然后考虑操作数据的算法。</p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>要使用OOP，要了解对象的三个主要特性：</p><ul><li>对象的行为(behavior) ———— 可以对对象施加哪些操作，或可以对对象施加哪些方法？</li><li>对象的状态(state) ———— 当施加那些方法时，对象如何响应？</li><li>对象标识(identity) ———— 如何辨别具有相同行为与状态的不同对象？</li></ul><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><ul><li><p>依赖(“uses-a”)<br>如果一个类的方法操作另一个类的对象，我们就说一个类依赖另一个类</p></li><li><p>聚合(“has-a”)<br>聚合意味着类A的对象包含类B的对象</p></li><li><p>继承(“is-a”)<br>类A扩展类B,类A不但包含从类B继承的方法，还会拥有一些额外的功能</p></li></ul><h2 id="使用预定义类"><a href="#使用预定义类" class="headerlink" title="使用预定义类"></a>使用预定义类</h2><h3 id="对象与对象变量"><a href="#对象与对象变量" class="headerlink" title="对象与对象变量"></a>对象与对象变量</h3><p>要想使用对象，就必须首先构造对象，并指定其初始状态。然后，对对象应用方法。<br><code>构造器(constructor)</code>用来构造新实例。构造器是一种特殊的方法，用来构造并初始化对象。</p><p>构造器的名字应与类名相同。<br>以Date类为例，Date类的构造器名为Date。构造一个Date对象，需要在构造器前面加上new操作符。<br><code>new Date()</code><br>这个表达式构造一个新对象，这个对象被初始化啊为当前的日期和时间。<br>为了让构造的对象能多次使用，将对象存放在一个变量<br><code>Date birthday = new Date()</code></p><p>下图显示了引用新构造的对象变量birthday</p><p><img alt="创建一个新对象" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Java_review_2/Java_review_2_Create_a_new_object.jpg" class="lazyload"></p><p>在对象与对象变量之间存在一个重要的区别。例如<br><strong>Date deadline</strong>  //deadline doesn’t refer to any object<br>定义了一个对象变量deadline，它可以引用Date类型的对象。<br>但是，变量deadline不是一个对象，实际上也没有引用对象。</p><p>必须初始化变量deadline,有两个选择。一是用新构造的对象初始化这个变量<br><code>deadline = new Date()</code><br>二是让这个变量引用一个<strong>已存在</strong>的对象：<br><code>deadline = birthday</code><br>现在两个变量引用同一个对象</p><p><img alt="引用同一个对象的对象变量" data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Java_review_2/Java_review_2_references_the_same_object.jpg" class="lazyload"></p><p><strong>一个对象变量并没有实际包含一个对象，而仅仅引用一个对象。</strong><br><strong>在Java中，任何对象变量的值都是对存储在另外一个地方的一个对象的引用</strong></p><p><code>Date deadline = new Date()</code><br>表达式new Date()构造了一个Date类型的对象，并且它的值是对新创建对象的引用。这个引用存储在变量deadline中。</p><p>可以将对象变量设为null,表明这个对象变量目前没有引用任何对象。<br><code>deadline = null;</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      对学习java的一些知识笔记
    
    </summary>
    
    
      <category term="Java" scheme="http://notes.seirhsiao.com/categories/Java/"/>
    
    
      <category term="Android" scheme="http://notes.seirhsiao.com/tags/Android/"/>
    
      <category term="Java" scheme="http://notes.seirhsiao.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java知识点复习(一)</title>
    <link href="http://notes.seirhsiao.com/posts/58a40d07/"/>
    <id>http://notes.seirhsiao.com/posts/58a40d07/</id>
    <published>2019-03-29T14:56:03.000Z</published>
    <updated>2019-12-07T01:18:06.816Z</updated>
    
    <content type="html"><![CDATA[<p>学习Java的一些笔记</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>Java对大小写很敏感</li><li>类名必须以字母开头，后面可以跟字母和数字,也可以用 _和$ 两种符号。不能使用Java保留字。（标准类名：以大写字母开头，如果类名由多个单词组成，每个单词首字母应该要大写</li><li>源代码文件名必须与公共类的名字相同</li><li>为了代码能够执行，必须包含一个main方法</li></ol><h2 id="Java中的三种注释"><a href="#Java中的三种注释" class="headerlink" title="Java中的三种注释"></a>Java中的三种注释</h2><ol><li>单行注释( // )</li><li>多行注释( /*  */)</li><li>多行注释 可以自动生成文档( /**  */)</li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table><thead><tr><th>类型</th><th></th><th>储存需求</th><th>取值范围</th></tr></thead><tbody><tr><td>boolean</td><td></td><td>1字节 (8 bit)</td><td>true, false</td></tr><tr><td>char</td><td></td><td>2字节(16 bit)</td><td>0 ~ 216-1</td></tr><tr><td>byte</td><td>整型</td><td>1字节 (8 bit)</td><td>-128 ~ 127</td></tr><tr><td>short</td><td>整型</td><td>2字节 (16 bit)</td><td>-32 768 ~ 32 767 <br>(-215 ~ 215-1)</td></tr><tr><td>int</td><td>整型</td><td>4字节 (32 bit)</td><td>-2 147 483 648 ~ 2 147 483 647<br>(-231 ~ 231-1)</td></tr><tr><td>long</td><td>整型</td><td>8字节 (64 bit)</td><td>-9 223 372 036 854 776 808 ~ 9 223 372 036 854 775 807 <br>(-263 ~ 263-1)</td></tr><tr><td>float</td><td>浮点类型</td><td>4字节 (32 bit)</td><td>大约±3.402 823 47E + 38F(有效位数为6~7位)</td></tr><tr><td>double</td><td>浮点类型</td><td>8字节 (64 bit)</td><td>大约±1.797 693 134 862 315 70E + 308(有效位数为15位)</td></tr></tbody></table><ol><li>长整数型有一个后缀L (如4000000000L)</li><li>十六进制数值有一个后缀0x (如0xCAFE)</li><li>八进制有一个前缀 0 (如010)</li><li>二进制有一个前缀 0b (如0b1001)</li><li>Float类型的数值有一个后缀F (如 3.14F)</li></ol><h2 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h2><p>final关键字表示变量只能被赋值一次，一旦被赋值后，就不能被更改。<br>例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Final <span class="keyword">double</span> CMCC = <span class="number">2.54</span></span></pre></td></tr></tbody></table></figure><p>如果希望某个常量可以在一个类中的多个方法中使用，称这个常量为类常量。可以使用关键字static final 设置一个类常量，定义的位置在main方法外部。因此，同一个类的其他方法中也可以使用这个常量。如果一个常量被声明为public，那么其他类的方法也可以使用这个常量。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>在java中，算术运算符可以用+ - * / 来代表加减乘除。<br>当参与除(/)运算的两个操作数为整数时，表示整数除法，答案为整数。否则，表示浮点除法。<br>求余数可以用%<br>例如 10%3等于1，10%3.0等于1.0</p><p>注意：整数除以0将会产生一个异常，而浮点数除以0将会得到无穷大或NaN结果。</p><h2 id="i-和-i-的-区别"><a href="#i-和-i-的-区别" class="headerlink" title="i++ 和 ++i 的 区别"></a>i++ 和 ++i 的 区别</h2><ol><li>如果只是看i++和++i，这两个是等价的，都等同于i=i+1，都是变量自身加1。</li><li>在一般情况下，它们都是跟赋值联系在一起。<br>比如：</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">a=i++; <span class="comment">//将i的值赋值给a，即a=i；然后再执行i=i+1；</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">也就是【a=i++;】与【a=i; i=i+<span class="number">1</span>;】等价。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">a=++i;<span class="comment">//将i+1的值赋给a,即a=i+1;然后再执行i=i+1；</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">也就是【a=++i;】与【a=i+<span class="number">1</span>;i=i+<span class="number">1</span>;】等价。</span></pre></td></tr></tbody></table></figure><p>总结一下</p><ul><li>前置++是将自身加1的值赋值给新变量，同时自身也加1；</li><li>后置++是将自身的值赋给新变量，然后才自身加1.</li></ul><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p><strong>三元操作符</strong><br><code>Condition? expression1: expression2</code><br>当Condition为true时，计算或返回第一个表达式expression1，如果为false,则计算第二个表达式expression2.<br>如 x &lt;y ? x: y<br>返回x和y中较小的那个值。</p><h2 id="数值类型之间的转换"><a href="#数值类型之间的转换" class="headerlink" title="数值类型之间的转换"></a>数值类型之间的转换</h2><p>整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。转换过程中可能导致溢出或损失精度</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">低----------------------------------------------------------高</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>, <span class="keyword">short</span>, <span class="keyword">char</span>—&gt; <span class="keyword">int</span> —&gt; <span class="keyword">long</span>—&gt; <span class="keyword">float</span> —&gt; <span class="keyword">double</span></span></pre></td></tr></tbody></table></figure><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><p>必须满足转换前的数据类型的位数要低于转换后的数据类型。<br>自动转换由低到高的顺序转换</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">123456789</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f = n;<span class="comment">//f值为1.234567892E8</span></span></pre></td></tr></tbody></table></figure><p>当使用上面两个数值进行二元操作时（例如 n+f  , n是整数，f是浮点数），先要将两个操作数转换为同一种类型，然后再进行计算。</p><ul><li><p>如果两个操作数中有一个是double类型，另一个操作数就会转换为double类型；</p></li><li><p>否则，如果其中一个操作数是float类型，另一个操作数将会转换为float类型；</p></li><li><p>否则，如果其中一个操作数是long类型，另一个操作数将会转换为long类型。</p></li><li><p>否则，两个操作数都将被转换为int类型。</p></li></ul><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>高的向低的顺序转换</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">3.94</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> y = (<span class="keyword">int</span>) x;</span></pre></td></tr></tbody></table></figure><p>x的结果为3，强制类型转换通过截断小数部分将浮点值转为整型。<br>如果想要四舍五入，得到最接近的整数。可以使用Math.round方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">3.14</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> y = (<span class="keyword">int</span>) Math.round(x);</span></pre></td></tr></tbody></table></figure><p>结果为 4，当调用round时，仍然需要使用强制类型转换(int).其原理是因为round方法返回的结果为long类型。由于存在信息丢失的可能性，所以只有使用显式的强制类型转换才能够将long类型转换成int类型。</p><p>不要在boolean类型与任何类型之间进行强制类型转换，这样可以防止发生错误。</p><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>| 优先级 | 运算符                                                               | 简介                                                       | 结合性   |<br>| —— | ——————————————————————– | ———————————————————- | ——– | ——– |<br>| 1      | [ ]、 .、 ( )                                                        | 方法调用，属性获取 | 从左向右 |<br>| 2      | !、~、 ++、 –                                                       | 一元运算符                                                 | 从右向左 |<br>| 3      | * 、/ 、%                                                            | 乘、除、取模（余数）                                       | 从左向右 |<br>| 4      | + 、 -                                                               | 加减法                                                     | 从左向右 |<br>| 5      | &lt;&lt;、 &gt;&gt;、 &gt;&gt;&gt;                                                        | 左位移、右位移、无符号右移                                 | 从左向右 |<br>| 6      | &lt; 、&lt;= 、&gt;、 &gt;=、 instanceof                                         | 小于、小于等于、大于、大于等于，对象类型判断是否属于同类型 | 从左向右 |<br>| 7      | == 、!=                                                              | 2个值是否相等，2个值是否不等于。 下面有详细的解释          | 从左向右 |<br>| 8      | &amp;                                                                    | 按位与                                                     | 从左向右 |<br>| 9      | ^                                                                    | 按位异或                                                   | 从左向右 |<br>| 10     | |                                                               | 按位或                                                     | 从左向右 |<br>| 11     | &amp;&amp;                                                                   | 短路与                                                     | 从左向右 |<br>| 12     | ||                                                         | 短路或                                                     | 从左向右 |<br>| 13     | ?:                                                                   | 条件运算符                                                 | 从右向左 |<br>| 14     | =、 += 、-= 、*= 、/=、 %=、 &amp;=、 |=、 ^=、 &lt;、&lt;= 、&gt;、&gt;= 、&gt;&gt;= | 混合赋值运算符                                             | 从右向左 |</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="子串substring"><a href="#子串substring" class="headerlink" title="子串substring"></a>子串substring</h3><p>String类的substring方法可以从一个较大的字符串提取出一个子串。</p><p><code>substring(a,b)</code></p><ul><li>a 表示开始的位置（从0开始计数）</li><li>b表示不想复制的第一个位置</li></ul><p>例如</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">String greeting = <span class="string">"hello"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">String s = greeting.substring(<span class="number">0</span>,<span class="number">3</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// s = hel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//从0开始计数，直到3位置，但是不包括3，所以返回 hel</span></span></pre></td></tr></tbody></table></figure><p>substring的一个优点：容易计算子串的长度，长度为b-a。<br>例如 hel的长度为 3-0=3</p><h3 id="检测字符串是否相等"><a href="#检测字符串是否相等" class="headerlink" title="检测字符串是否相等"></a>检测字符串是否相等</h3><p>可以使用equals来检测两个字符串是否相等。<br><code>s.equals(t)</code><br>如果相等，会返回true,否则，返回false. s和t可以是字符串变量，也可以是字符串常量。<br>eg: “hello”.equals(greeting)</p><p>检测是否相等，而且不区分大小写，可以使用equalsIgnoreCase方法。<br>eg: “hello”.equalsIgnoreCase(“HeLLO)</p><p>不能使用==运算符来检测两个字符串是否相同，这个运算符只能够确定两个字符串是否放置在同一个位置。</p><h3 id="空串和Null串"><a href="#空串和Null串" class="headerlink" title="空串和Null串"></a>空串和Null串</h3><p>空串是一个Java对象，有自己的串长度(0)和内容(空)。可以通过调用以下代码检查字符串是否为空。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(str.length()==<span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">或</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (str.equals(<span class="string">""</span>))</span></pre></td></tr></tbody></table></figure><p><code>null</code>表示目前没有任何对象与该变量关联。可以通过调用以下代码检查字符串是否为null</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (str == <span class="keyword">null</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">要检测一个字符串既不是<span class="keyword">null</span>也不是空串：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (str != <span class="keyword">null</span> &amp;&amp; str.length()!=<span class="number">0</span>)</span></pre></td></tr></tbody></table></figure><h3 id="length-与-charAt"><a href="#length-与-charAt" class="headerlink" title="length() 与 charAt()"></a>length() 与 charAt()</h3><p>length方法会返回采用UTF-16编码表示的给定字符串所需的代码单元数量。<br>想要得到实际的长度，即代码点数量，可以调用</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">xxx.codePointCount(<span class="number">0</span>,xxx.length())</span></pre></td></tr></tbody></table></figure><p>调用s.chatAt(n)将返回位置n的代码单元，n介于0~ s.length()-1 之间。<br>eg:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">String greeting = <span class="string">"Hello"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> first = greeting.charAt(<span class="number">0</span>);    <span class="comment">// first is H</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> last = greeting.charAt(<span class="number">4</span>);  <span class="comment">// last is o</span></span></pre></td></tr></tbody></table></figure><p>想得到i个的代码点，可以使用</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> index= greeting.offsetByCodePoints(<span class="number">0</span>,i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cp = greeting.codePonintAt(index);</span></pre></td></tr></tbody></table></figure><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="读取输入"><a href="#读取输入" class="headerlink" title="读取输入"></a>读取输入</h3><p>为了能够读取用户在控制枱的输入，首先需要创建一个Scanner对象，并与“标准输入流”System.in关联。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Scanner in = <span class="keyword">new</span> Scanner (System.in)</span></pre></td></tr></tbody></table></figure><ul><li>next()<br>  读取到输入有效的字符才会结束输入，对于输入有效的字符<strong>之前</strong>的空白会自动去掉，输入有效的字符<strong>之后</strong>的空白作为分隔符或者结束符。next() 不能得到带有空格的字符串。</li><li>nextLine()<br>  以enter为结束符，nextLine()可以得到带有空格的字符串，不会去掉空白，会全盘输出。</li><li>nextInt()<br>  得到int类型的数据。nextDouble(),nextFloat()以此类推。</li><li>boolean hasNext()<br>检测输入中是否有还有其他单词。</li></ul><p>记得要<code>import java.util.*;</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Input_and_Output</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        System.out.print(<span class="string">"what is your name :"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        String name = in.nextLine();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        System.out.print(<span class="string">"age :"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> age = in.nextInt();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"the name is "</span> + name + <span class="string">",the age is "</span>+age);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入结果：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//what is your name :jerry</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//age :24</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//the name is jerry,the age is 24</span></span></pre></td></tr></tbody></table></figure><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>System.out.print(X)会将以x对应的数据类型所允许的最大非0数字位数打印输出x</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">10000.0</span>/<span class="number">3.0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">System.out.print(x);  <span class="comment">// x = 3333.3333333333335</span></span></pre></td></tr></tbody></table></figure><p>为了能够方便格式输出结果，可以使用printf()。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">10000.0</span>/<span class="number">3.0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">"8.2f"</span>,x);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// x = 3333.33 使用8个字符的宽度和小数点后两位字符的精度打印x</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为小数点后2位，为3333.33。但是指定要8个字符的宽度，所以左边会补一个空格</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// x结果为（1个空格）3333.33</span></span></pre></td></tr></tbody></table></figure><p>用于printf的转换符</p><table><thead><tr><th>转换符</th><th>类型</th><th>举例</th></tr></thead><tbody><tr><td>%s</td><td>字符串类型</td><td>“Hello”</td></tr><tr><td>%c</td><td>字符类型</td><td>‘H’</td></tr><tr><td>%b</td><td>布尔类型</td><td>true OR false</td></tr><tr><td>%d</td><td>整数类型（十进制）</td><td>10</td></tr><tr><td>%x</td><td>整数类型（十六进制）</td><td>9f</td></tr><tr><td>%o</td><td>整数类型（八进制）</td><td>237</td></tr><tr><td>%f</td><td>浮点类型</td><td>15.9</td></tr><tr><td>%a</td><td>十六进制浮点类型</td><td>0x1.fccdp3</td></tr><tr><td>%e</td><td>指数类型</td><td>6.23e+24</td></tr><tr><td>%g</td><td>通用浮点类型（f和e类型中较短的）</td><td>42.5000</td></tr><tr><td>%h</td><td>散列码</td><td>42628b2</td></tr><tr><td>%%</td><td>百分比类型</td><td>％</td></tr><tr><td>%n</td><td>换行符</td><td>相当于”\n”换行作用</td></tr><tr><td>%tx</td><td>日期与时间类型（x代表不同的日期与时间转换符）</td><td>见博文下表</td></tr></tbody></table><h3 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h3><p>如果基本的整数和浮点数精度不够满足需求，那么可以使用java.math包中的两个很有用的类：<strong>BigInteger</strong>和<strong>BigDecimal</strong>。这两个类可以处理包含任意长度数字序列的数值。</p><ul><li>BigInteger 实现任意精度的整数运算</li><li>BigDecimal 实现任意精度的浮点数运算</li></ul><p>把普通的数值转换成大数值，可以使用静态的valueOf()方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">BigInteger a = BigInteger.valueOf(<span class="number">100</span>);</span></pre></td></tr></tbody></table></figure><p>大数值的运算不能使用常用的算术运算符（如+，*）处理，而是要使用大数值类中的<code>add</code>和<code>multiply</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">BigInteger c = a.add(b); <span class="comment">// c=a+b</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">BigInteger d = c.multiply(b.add(BigInteger.valueOf(<span class="number">2</span>))); <span class="comment">// d = c*(b+2)</span></span></pre></td></tr></tbody></table></figure><p>其他的运算包括有 <code>subtract(减)</code>，<code>divide(除)</code>和<code>mod(余数)</code></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组声明"><a href="#数组声明" class="headerlink" title="数组声明"></a>数组声明</h3><p>数组是一种数据结构，用来存储同一类型值的集合</p><p>数组声明方式:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array 或者<span class="keyword">int</span> array[]</span></pre></td></tr></tbody></table></figure><p>数组初始化</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arry = <span class="keyword">new</span> <span class="keyword">int</span>[]{<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>}</span></pre></td></tr></tbody></table></figure><p>创建一个数字数组时，所有的元素都初始化为0。<br>boolean数组的元素会初始化为false<br>对象数组的元素会初始化为一个特殊值null</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span>[] test = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;test.length;i++) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  System.out.println(test[i]);}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>输出的结果会是： 0 0 0 0 0</p><p><strong>重要：</strong><br>一旦创据数组，就不能再改变数组的大小。如果需要在运行中扩展数组的大小，则需要使用另一种数据结构——数组列表（array list)</p><h3 id="for-each循环"><a href="#for-each循环" class="headerlink" title="for each循环"></a>for each循环</h3><p>Java有一种很强的循环结构，可以用来依次处理数组中的每个元素而不必为指定下标值而分心。</p><p>格式：<br><code>for(variable:collection) statement</code><br>定义一个变量用于暂存集合中的每一个元素，并执行相应的语句。<br>collection这一集合表达式必须必须是一个数组或者是一个实现了Iterable接口的类对象（例如Arraylist)。<br>eg:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> element ：a)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  System.out.println(element)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//打印数组a的每一个元素，一个元素占一行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// for each element in a</span></span></pre></td></tr></tbody></table></figure><h3 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h3><p>在java中，允许将一个数组变量拷贝到给另一个数组变量。这时，两个变量将引用同一个数组</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = {<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">12</span>};</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] b = a;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">a[<span class="number">5</span>] = <span class="number">12</span> <span class="comment">// b[2] = 12</span></span></pre></td></tr></tbody></table></figure><p>如果想将一个数组的所有值拷贝到一个新的数组去，使用Arrays类的copyTo方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] copieda = Arrays.copyTo(a,a.length);</span></pre></td></tr></tbody></table></figure><p>第二个参数是新数组的长度，可以通过这个方法来增加数组的大小。<br>eg: <code>Arrays.copyTo(a,2*a.length);</code> 增加到2倍大<br>如果数组元素是数字数组时，多余的元素都赋值为0。<br>如果数组元素是boolean数组，多余的元素会赋值为false<br>如果数组元素是对象数组的元素，多余的元素赋值为特殊值null<br>如果长度小于原始数组的长度，则只拷贝前面的数据元素</p><h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h3><p>想要对数组排序，可以使用Arrays类的sort方法<code>Arrays.sort(数组a)</code></p><p>抽奖游戏</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LotteryDrawing</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//抽奖游戏，设置总数n和抽取的数k,随机抽取</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"how many numbers do you need to draw?"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> k = in.nextInt();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"what is the highest number you can draw?"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> n = in.nextInt();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 给 总数赋值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt; numbers.length;i++) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">          numbers[i]= i+<span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;result.length;i++) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">int</span> r = (<span class="keyword">int</span>)(Math.random()*n); <span class="comment">//随机抽取</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">          result[i] = numbers[r];    <span class="comment">//把抽取的值赋给result</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">          numbers[r]=numbers[n-<span class="number">1</span>]; <span class="comment">//避免抽到相同的数，把最尾的值赋给被抽到的值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">          n--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        Arrays.sort(result); <span class="comment">//排序</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"Bet the foolowing combination. It'll make you rich!"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r:result)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">          System.out.println(r);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h3 id="多维数组（矩阵）"><a href="#多维数组（矩阵）" class="headerlink" title="多维数组（矩阵）"></a>多维数组（矩阵）</h3><p>多维数组适用于表示表格或者更加复杂的排列方式。</p><h4 id="声明和初始化"><a href="#声明和初始化" class="headerlink" title="声明和初始化"></a>声明和初始化</h4><p>声明：<code>type arrayName[][]</code>或者<code>type[][] arrayName</code><br>初始化：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">- balance=<span class="keyword">new</span> <span class="keyword">double</span>[rownumber][columnNumber]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">- <span class="keyword">int</span>[][] abc = {{<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>},{<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>},{<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>}}</span></pre></td></tr></tbody></table></figure><p>Java语言中，由于把二维数组看作是数组的数组，数组空间不是连续分配的，所以不要求二维数组每一维的大小相同。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      对学习java的一些知识笔记
    
    </summary>
    
    
      <category term="Java" scheme="http://notes.seirhsiao.com/categories/Java/"/>
    
    
      <category term="Android" scheme="http://notes.seirhsiao.com/tags/Android/"/>
    
      <category term="Java" scheme="http://notes.seirhsiao.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code 插件推荐-VSC Netease Music</title>
    <link href="http://notes.seirhsiao.com/posts/86e73295/"/>
    <id>http://notes.seirhsiao.com/posts/86e73295/</id>
    <published>2019-03-20T16:08:30.000Z</published>
    <updated>2019-12-07T01:18:08.504Z</updated>
    
    <content type="html"><![CDATA[<p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/VSC_Netease_Music/1.png" class="lazyload"></p><p>最近在微博上看到有一位科技博主推荐了一款Visual Studio Code插件,名字叫做 VSC Netease Music。<br>Visual Studio Code的插件真是越来越多样化，看漫画、看小说，现在连聼音乐也都有了。<br>这款插件对我来说最吸引的，应该就是无地区版权限制了。毕竟因为版权原因，网易云音乐早就把我拒之门外了。</p><h2 id="插件简介"><a href="#插件简介" class="headerlink" title="插件简介"></a>插件简介</h2><p>插件是一位叫做<a href="https://github.com/nondanee" target="_blank" rel="external nofollow noreferrer noopener">nondanee</a>的第三方开发者开发的。</p><blockquote><p>插件github地址: <a href="https://github.com/nondanee/vsc-netease-music" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/nondanee/vsc-netease-music</a><br>插件marketplace: <a href="https://marketplace.visualstudio.com/items?itemName=nondanee.vsc-netease-music" target="_blank" rel="external nofollow noreferrer noopener">https://marketplace.visualstudio.com/items?itemName=nondanee.vsc-netease-music</a></p></blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/VSC_Netease_Music/2.gif" class="lazyload"></p><h2 id="插件功能"><a href="#插件功能" class="headerlink" title="插件功能"></a>插件功能</h2><ul><li>发现音乐 (歌单 / 新歌 / 排行榜)</li><li>搜索 (单曲 / 歌手 / 专辑 / 歌单)</li><li>用户登录 (手机号 / 邮箱)</li><li>用户收藏 (歌单 / 歌手 / 专辑)</li><li>每日歌曲推荐 / 推荐歌单 / 私人 FM</li><li>喜欢音乐 / 收藏音乐</li><li>播放模式切换 / 音量调节</li><li>逐行歌词</li><li>热门评论</li><li>快捷键支持</li><li>听歌记录 (不确定有效)</li><li>无海外限制</li></ul><h2 id="插件需求"><a href="#插件需求" class="headerlink" title="插件需求"></a>插件需求</h2><p>我在电脑上可以正常地使用<br><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/VSC_Netease_Music/3.png" class="lazyload"><br>但是Github上看到可能需要替换一些文件才可以正常使用。</p><p><strong>Github原文:</strong></p><p>VS Code for Windows 自 1.31.0 起自带完整的 ffmpeg 动态链接库 (可能是 bug)，无需替换；macOS 与 Linux 平台仍需替换。</p><p>VS Code 使用的 Electron 版本不包含 ffmpeg，需替换自带的 ffmpeg 动态链接库才能正常播放 (每次更新 VS Code 都需重新替换)</p><h3 id="手动替换"><a href="#手动替换" class="headerlink" title="手动替换"></a>手动替换</h3><p>通过 VS Code 版本在 <a href="https://raw.githubusercontent.com/Microsoft/vscode/%version%/.yarnrc" target="_blank" rel="external nofollow noreferrer noopener">https://raw.githubusercontent.com/Microsoft/vscode/%version%/.yarnrc</a> 查看其使用的 Electron 版本，并于 <a href="https://github.com/electron/electron/releases/tag/%version%" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/electron/electron/releases/tag/%version%</a> 下载对应的 Electron 完整版本进行替换</p><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">下载 electron-%version%-win32-%arch%.zip</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">替换 ./ffmpeg.dll</span></pre></td></tr></tbody></table></figure><h4 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">下载 electron-%version%-darwin-x64.zip</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">替换 ./Electron.app/Contents/Frameworks/Electron\ Framework.framework/Libraries/libffmpeg.dylib</span></pre></td></tr></tbody></table></figure><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">下载 electron-%version%-linux-%arch%.zip</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">替换 ./libffmpeg.so</span></pre></td></tr></tbody></table></figure><h3 id="自动替换"><a href="#自动替换" class="headerlink" title="自动替换"></a>自动替换</h3><p>使用 Python 脚本替换 (Python 2/3 均可，绝大部分发行版自带环境)</p><p>默认安装位置下 Linux 和 Windows 需要以管理员身份运行，macOS 不需要</p><h4 id="Windows-Powershell"><a href="#Windows-Powershell" class="headerlink" title="Windows Powershell"></a>Windows Powershell</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Invoke-RestMethod https://gist.githubusercontent.com/nondanee/f157bbbccecfe29e48d87273cd02e213/raw | python</span></pre></td></tr></tbody></table></figure><h4 id="Unix-Shell"><a href="#Unix-Shell" class="headerlink" title="Unix Shell"></a>Unix Shell</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">curl https://gist.githubusercontent.com/nondanee/f157bbbccecfe29e48d87273cd02e213/raw | python</span></pre></td></tr></tbody></table></figure><p>如果 VS Code 使用默认配置安装，脚本会自动寻找并替换，若自定义了安装位置，请自行修改 installation</p><h2 id="插件用法"><a href="#插件用法" class="headerlink" title="插件用法"></a>插件用法</h2><p>按<strong>F1</strong>或者<strong>Ctrl Shift P</strong>打开命令面板</p><p>输入命令前缀 <code>网易云音乐</code> 或 <code>NeteaseMusic</code>就可以使用。<br><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/VSC_Netease_Music/4.png" class="lazyload"><br><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/VSC_Netease_Music/5.png" class="lazyload"><br><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/VSC_Netease_Music/6.png" class="lazyload"></p><p>界面底部还会显示歌词和操作栏<br><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/VSC_Netease_Music/7.png" class="lazyload"></p><p>一边编程，一边听歌，是一种很享受的行为，不用另外开多一个音乐软件。<br>不过涉及到音乐版权问题，这款插件感觉命不久矣。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img alt data-src=&quot;https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/VSC_Netease_Music/1.png&quot; class=&quot;lazyload&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近在微博上看到有一位科技博
      
    
    </summary>
    
    
      <category term="Tools" scheme="http://notes.seirhsiao.com/categories/Tools/"/>
    
    
      <category term="插件" scheme="http://notes.seirhsiao.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Visual Studio Code" scheme="http://notes.seirhsiao.com/tags/Visual-Studio-Code/"/>
    
      <category term="工具" scheme="http://notes.seirhsiao.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>java 开源资源</title>
    <link href="http://notes.seirhsiao.com/posts/58a40d08/"/>
    <id>http://notes.seirhsiao.com/posts/58a40d08/</id>
    <published>2019-02-03T07:39:16.000Z</published>
    <updated>2019-12-05T14:28:26.431Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.importnew.com/14429.html" target="_blank" rel="external nofollow noreferrer noopener">http://www.importnew.com/14429.html</a></p><h1 id="java-开源资源"><a href="#java-开源资源" class="headerlink" title="java 开源资源 "></a><a name="awesome-java"></a>java 开源资源 <a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external nofollow noreferrer noopener"><img alt="Awesome" data-src="https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg" class="lazyload"></a></h1><p>一个很棒的关于Java框架，库和软件的资源列表。</p><ul><li><a href="#awesome-java">Awesome Java</a><ul><li><a href="#ancients">Ancients</a></li><li><a href="#bean-mapping">Bean Mapping</a></li><li><a href="#build">Build</a></li><li><a href="#bytecode-manipulation">Bytecode Manipulation</a></li><li><a href="#cluster-management">Cluster Management</a></li><li><a href="#code-analysis">Code Analysis</a></li><li><a href="#compiler-compiler">Compiler-compiler</a></li><li><a href="#configuration">Configuration</a></li><li><a href="#constraint-satisfaction-problem-solver">Constraint Satisfaction Problem Solver</a></li><li><a href="#continuous-integration">Continuous Integration</a></li><li><a href="#csv">CSV</a></li><li><a href="#data-structures">Data structures</a></li><li><a href="#database">Database</a></li><li><a href="#date-and-time">Date and Time</a></li><li><a href="#dependency-injection">Dependency Injection</a></li><li><a href="#development">Development</a></li><li><a href="#distributed-applications">Distributed Applications</a></li><li><a href="#distributed-databases">Distributed Databases</a></li><li><a href="#distribution">Distribution</a></li><li><a href="#document-processing">Document Processing</a></li><li><a href="#formal-verification">Formal Verification</a></li><li><a href="#functional-programming">Functional Programming</a></li><li><a href="#game-development">Game Development</a></li><li><a href="#gui">GUI</a></li><li><a href="#high-performance">High Performance</a></li><li><a href="#ide">IDE</a></li><li><a href="#imagery">Imagery</a></li><li><a href="#json">JSON</a></li><li><a href="#jvm-and-jdk">JVM and JDK</a></li><li><a href="#logging">Logging</a></li><li><a href="#machine-learning">Machine Learning</a></li><li><a href="#messaging">Messaging</a></li><li><a href="#miscellaneous">Miscellaneous</a></li><li><a href="#monitoring">Monitoring</a></li><li><a href="#native">Native</a></li><li><a href="#natural-language-processing">Natural Language Processing</a></li><li><a href="#networking">Networking</a></li><li><a href="#orm">ORM</a></li><li><a href="#pdf">PDF</a></li><li><a href="#reactive-libraries">Reactive libraries</a></li><li><a href="#rest-frameworks">REST Frameworks</a></li><li><a href="#science">Science</a></li><li><a href="#search">Search</a></li><li><a href="#security">Security</a></li><li><a href="#serialization">Serialization</a></li><li><a href="#server">Server</a></li><li><a href="#template-engine">Template Engine</a></li><li><a href="#testing">Testing</a></li><li><a href="#utility">Utility</a></li><li><a href="#web-crawling">Web Crawling</a></li><li><a href="#web-frameworks">Web Frameworks</a></li></ul></li><li><a href="#resources">Resources</a><ul><li><a href="#communities">Communities</a></li><li><a href="#influential-books">Influential Books</a></li><li><a href="#podcasts">Podcasts</a></li><li><a href="#twitter">Twitter</a></li><li><a href="#websites">Websites</a></li></ul></li><li><a href="#contributing">Contributing</a></li></ul><h2 id="老怪物-Ancients"><a href="#老怪物-Ancients" class="headerlink" title="老怪物(Ancients)"></a><a name="ancients"></a>老怪物(Ancients)</h2><p><em>自存在以来，在疯狂期过后，依旧继续使用很久的工具、库。</em></p><ul><li><a href="http://ant.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Ant</a> - 基于xml的构建管理工具。</li><li><a href="https://github.com/cglib/cglib" target="_blank" rel="external nofollow noreferrer noopener">cglib</a> - 字节码生成库。</li><li><a href="https://glassfish.java.net/" target="_blank" rel="external nofollow noreferrer noopener">GlassFish</a> - 由Oracle为Java EE 参考实现的应用服务器。</li><li><a href="http://hudson-ci.org/" target="_blank" rel="external nofollow noreferrer noopener">Hudson</a> - 持续集成服务器 – 仍在积极开发。</li><li><a href="https://javaserverfaces.java.net/" target="_blank" rel="external nofollow noreferrer noopener">JavaServer Faces</a> - Oracle JSF标准的开源实现，Mojarra。</li><li><a href="https://jsp.java.net/" target="_blank" rel="external nofollow noreferrer noopener">JavaServer Pages</a> - 网页的通用模板与自定义标签库。</li></ul><h2 id="Bean-映射-Bean-Mapping"><a href="#Bean-映射-Bean-Mapping" class="headerlink" title="Bean 映射(Bean Mapping)"></a><a name="bean-mapping"></a>Bean 映射(Bean Mapping)</h2><p><em>轻易实现Bean映射的框架</em></p><ul><li><a href="https://github.com/DozerMapper/dozer/" target="_blank" rel="external nofollow noreferrer noopener">Dozer</a> - 映射器，复制数据从一个对象到另一个，使用注释， API或XML配置。</li><li><a href="https://github.com/mapstruct/mapstruct" target="_blank" rel="external nofollow noreferrer noopener">MapStruct</a> - 代码生成器，基于约定大于配置的基础上，简化了映射不同bean类型。</li><li><a href="https://github.com/jhalterman/modelmapper" target="_blank" rel="external nofollow noreferrer noopener">ModelMapper</a> - ModelMapper是一种智能化的​​对象映射库，彼此对象自动映射。</li><li><a href="https://github.com/orika-mapper" target="_blank" rel="external nofollow noreferrer noopener">Orika</a> -<br>Orika是一个Java Bean映射框架，递归拷贝（在其他功能）数据从一个对象到另一个。</li><li><a href="https://github.com/xebia-france/selma" target="_blank" rel="external nofollow noreferrer noopener">Selma</a> - 傻瓜似的简单静态链接映射。Selma是一个基于注解处理器的Bean映射器。</li></ul><h2 id="构建-Build"><a href="#构建-Build" class="headerlink" title="构建(Build)"></a><a name="build"></a>构建(Build)</h2><p><em>Tools which handle the build cycle and dependencies of an application.</em><br><em>处理应用程序的构建周期和依赖关系的工具。</em></p><ul><li><a href="http://maven.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Maven</a> -<br>Maven使用声明进行构建并进行依赖管理，偏向于使用约定而不是配置进行构建。Maven优于Apache Ant。后者采用了一种过程化的方式进行配置，所以维护起来相当困难。</li><li><a href="http://bazel.io" target="_blank" rel="external nofollow noreferrer noopener">Bazel</a> - 谷歌的构建工具，快速，可靠地生成代码。</li><li><a href="http://gradle.org/" target="_blank" rel="external nofollow noreferrer noopener">Gradle</a> - Gradle采用增量构建。Gradle通过Groovy编程而不是传统的XML声明进行配置。Gradle可以很好地配合Maven进行依赖管理，并且把Ant脚本当作头等公民。</li></ul><h2 id="字节码操作-Bytecode-Manipulation"><a href="#字节码操作-Bytecode-Manipulation" class="headerlink" title="字节码操作(Bytecode Manipulation)"></a><a name="bytecode-manipulation"></a>字节码操作(Bytecode Manipulation)</h2><p><em>编程操作Java字节码的函数库。</em></p><ul><li><a href="http://asm.ow2.org/" target="_blank" rel="external nofollow noreferrer noopener">ASM</a> - 通用底层字节码操作及分析。</li><li><a href="http://bytebuddy.net/" target="_blank" rel="external nofollow noreferrer noopener">Byte Buddy</a> - 使流畅的API进一步简化字节码生成。</li><li><a href="http://byteman.jboss.org/" target="_blank" rel="external nofollow noreferrer noopener">Byteman</a> - 操纵字节码在运行时通过DSL（规则），主要用于测试/故障排除。</li><li><a href="http://jboss-javassist.github.io/javassist/" target="_blank" rel="external nofollow noreferrer noopener">Javassist</a> - 尝试简化字节码编辑。</li></ul><h2 id="集成管理-Cluster-Management"><a href="#集成管理-Cluster-Management" class="headerlink" title="集成管理(Cluster Management)"></a><a name="cluster-management"></a>集成管理(Cluster Management)</h2><p><em>可动态集群内管理应用程序的框架。</em></p><ul><li><a href="http://aurora.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Aurora</a> - Apache Aurora是Mesos架构用于长时间运行的服务和cron作业。</li><li><a href="http://getsingularity.com/" target="_blank" rel="external nofollow noreferrer noopener">Singularity</a> -<br>Singularity是一个Mesos架构，使部署和操作方便。它支持Web服务，后台运行，调度作业和一次性任务。</li></ul><h2 id="代码分析-Code-Analysis"><a href="#代码分析-Code-Analysis" class="headerlink" title="代码分析(Code Analysis)"></a><a name="code-analysis"></a>代码分析(Code Analysis)</h2><p><em>软件度量和质量评估工具。</em></p><ul><li><a href="https://github.com/checkstyle/checkstyle" target="_blank" rel="external nofollow noreferrer noopener">Checkstyle</a> - 对编程规范和标准进行静态分析。</li><li><a href="https://github.com/google/error-prone" target="_blank" rel="external nofollow noreferrer noopener">Error Prone</a> - 捕获常见的编程错误，编译时错误。</li><li><a href="http://findbugs.sourceforge.net/" target="_blank" rel="external nofollow noreferrer noopener">FindBugs</a> - 通过字节码静态分析找出潜在Bug。</li><li><a href="http://jqassistant.org/" target="_blank" rel="external nofollow noreferrer noopener">jQAssistant</a> - 基于Neo4j查询语言的静态代码分析。</li><li><a href="https://github.com/pmd/pmd" target="_blank" rel="external nofollow noreferrer noopener">PMD</a> - 对源代码中不良编程习惯进行分析。</li><li><a href="http://www.sonarqube.org/" target="_blank" rel="external nofollow noreferrer noopener">SonarQube</a> - 通过插件集成其它分析组件，提供评估最终结果报告。</li></ul><h2 id="编译器-Compiler-compiler"><a href="#编译器-Compiler-compiler" class="headerlink" title="编译器(Compiler-compiler)"></a><a name="compiler-compiler"></a>编译器(Compiler-compiler)</h2><p><em>创建分析器、解释器和编译器的框架。</em></p><ul><li><a href="http://www.antlr.org/" target="_blank" rel="external nofollow noreferrer noopener">ANTLR</a> - 功能完备的自顶向下分析复杂框架。</li><li><a href="https://javacc.java.net/" target="_blank" rel="external nofollow noreferrer noopener">JavaCC</a> - 相对ANTLR更具体，上手略为简单。支持语法语法超前预测（syntactic lookahead）。</li></ul><h2 id="配置-Configuration"><a href="#配置-Configuration" class="headerlink" title="配置(Configuration)"></a><a name="configuration"></a>配置(Configuration)</h2><p><em>提供外部配置的库。</em></p><ul><li><a href="https://github.com/typesafehub/config" target="_blank" rel="external nofollow noreferrer noopener">config</a> - JVM语言配置库。</li><li><a href="https://github.com/lviggiano/owner" target="_blank" rel="external nofollow noreferrer noopener">owner</a> - 减少模板属性。</li></ul><h2 id="约束满足问题求解-Constraint-Satisfaction-Problem-Solver"><a href="#约束满足问题求解-Constraint-Satisfaction-Problem-Solver" class="headerlink" title="约束满足问题求解(Constraint Satisfaction Problem Solver)"></a><a name="constraint-satisfaction-problem-solver"></a>约束满足问题求解(Constraint Satisfaction Problem Solver)</h2><p><em>帮助实现优化和满足性问题的库。</em></p><ul><li><a href="http://choco-solver.org/" target="_blank" rel="external nofollow noreferrer noopener">Choco</a> - 现成的约束满足问题的解决者，它使用约束编程技术。</li><li><a href="https://github.com/radsz/jacop/" target="_blank" rel="external nofollow noreferrer noopener">JaCoP</a> - 包括用于FlatZinc语言的接口，从而使其能够执行MiniZinc模型。</li><li><a href="http://www.optaplanner.org/" target="_blank" rel="external nofollow noreferrer noopener">OptaPlanner</a> - 业务规划和资源调度优化求解器。</li><li><a href="http://www.sat4j.org/" target="_blank" rel="external nofollow noreferrer noopener">Sat4J</a> - 最先进的SAT求解布尔和优化的问题。</li></ul><h2 id="持续集成Continuous-Integration"><a href="#持续集成Continuous-Integration" class="headerlink" title="持续集成Continuous Integration)"></a><a name="continuous-integration"></a>持续集成Continuous Integration)</h2><p><em>支持持续集成、测试和应用发布的工具。</em></p><ul><li><a href="https://www.atlassian.com/software/bamboo" target="_blank" rel="external nofollow noreferrer noopener">Bamboo</a> - Atlassian的持续集成（CI）解决方案，包含很多其它产品。</li><li><a href="https://circleci.com/" target="_blank" rel="external nofollow noreferrer noopener">CircleCI</a> - 提供托管服务，可免费试用。</li><li><a href="https://codeship.com/features" target="_blank" rel="external nofollow noreferrer noopener">Codeship</a> - 提供托管服务，提供有限免费计划。</li><li><a href="http://fabric8.io/" target="_blank" rel="external nofollow noreferrer noopener">fabric8</a> - 容器集成平台。</li><li><a href="https://www.thoughtworks.com/go/" target="_blank" rel="external nofollow noreferrer noopener">Go</a> - ThoughtWork开源持续集成解决方案。</li><li><a href="http://jenkins-ci.org/" target="_blank" rel="external nofollow noreferrer noopener">Jenkins</a> - 提供基于服务器的部署服务。</li><li><a href="http://www.jetbrains.com/teamcity/" target="_blank" rel="external nofollow noreferrer noopener">TeamCity</a> - JetBrain持续集成方案，提供免费版。</li><li><a href="https://travis-ci.org" target="_blank" rel="external nofollow noreferrer noopener">Travis</a> - 提供托管服务，常用于开源项目。</li></ul><h2 id="CSV数据-CSV"><a href="#CSV数据-CSV" class="headerlink" title="CSV数据(CSV)"></a><a name="csv"></a>CSV数据(CSV)</h2><p><em>简化读取/写入CSV数据的框架和库。</em></p><ul><li><a href="http://opencsv.sourceforge.net" target="_blank" rel="external nofollow noreferrer noopener">opencsv</a> - 有商业友好的许可的简单的CSV分析器。</li><li><a href="https://github.com/uniVocity/univocity-parsers" target="_blank" rel="external nofollow noreferrer noopener">uniVocity-parsers</a> - 其中速度最快，功能最齐全的CSV ，还配备了解析器TSV和固定宽度的记录。</li></ul><h2 id="数据库-Database"><a href="#数据库-Database" class="headerlink" title="数据库(Database)"></a><a name="database"></a>数据库(Database)</h2><p><em>简化数据库交互的工具、库。</em></p><ul><li><a href="https://hive.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Hive</a> - 建立在Hadoop之上的数据仓库。</li><li><a href="http://phoenix.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Phoenix</a> - 在HBase的高性能关系数据库层的低延迟应用</li><li><a href="https://crate.io/" target="_blank" rel="external nofollow noreferrer noopener">Crate</a> -<br>实现数据同步，共享，缩放，和复制的分布式数据存储方案。此外，它提供了一个基于SQL语法来跨集群执行查询。</li><li><a href="https://github.com/vladmihalcea/flexy-pool" target="_blank" rel="external nofollow noreferrer noopener">FlexyPool</a> - 带有的度量和故障切换策略的通用连接池解决方案。</li><li><a href="http://flywaydb.org/" target="_blank" rel="external nofollow noreferrer noopener">Flyway</a> - 使用Java API轻松完成数据库迁移工具。</li><li><a href="http://h2database.com/" target="_blank" rel="external nofollow noreferrer noopener">H2</a> - 小型SQL数据库，以内存操作著称。</li><li><a href="https://github.com/brettwooldridge/HikariCP" target="_blank" rel="external nofollow noreferrer noopener">HikariCP</a> - 高性能的JDBC连接池。</li><li><a href="http://jdbi.org/" target="_blank" rel="external nofollow noreferrer noopener">JDBI</a> - 便捷的JDBC抽象。</li><li><a href="https://github.com/xetorthio/jedis" target="_blank" rel="external nofollow noreferrer noopener">Jedis</a> - 一个小的客户端使用命令的方式与Redis的交互。</li><li><a href="http://www.jooq.org/" target="_blank" rel="external nofollow noreferrer noopener">jOOQ</a> - 基于SQL schema生成类型安全代码。</li><li><a href="http://www.liquibase.org/" target="_blank" rel="external nofollow noreferrer noopener">Liquibase</a> - 独立于数据库的库，用于跟踪，管理和应用数据库模式的变化。</li><li><a href="http://www.mapdb.org/" target="_blank" rel="external nofollow noreferrer noopener">MapDB</a> - 嵌入式数据库引擎，提供支持磁盘上或离堆内存的并发集合。</li><li><a href="https://github.com/facebook/presto" target="_blank" rel="external nofollow noreferrer noopener">Presto</a> - 针对大数据的分布式SQL查询引擎。</li><li><a href="http://www.querydsl.com/" target="_blank" rel="external nofollow noreferrer noopener">Querydsl</a> - 针对Java的类型安全统一查询。</li><li><a href="https://github.com/mrniko/redisson" target="_blank" rel="external nofollow noreferrer noopener">Redisson</a> - Redis的服务器之上的分布式可扩展数据结构。</li></ul><h2 id="数据结构-Data-structures"><a href="#数据结构-Data-structures" class="headerlink" title="数据结构(Data structures)"></a><a name="data-structures"></a>数据结构(Data structures)</h2><p><em>高效的和具体的数据结构</em></p><ul><li><a href="https://avro.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Avro</a> -  数据交换格式特色：动态类型，没有标签的数据，没有手动分配的ID 。</li><li><a href="https://orc.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Orc</a> - 基于Hadoop的工作负载的快速高效的列存储格式。</li><li><a href="http://parquet.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Parquet</a> -  基于由谷歌Dremel paper组装算法的柱状存储格式。</li><li><a href="https://thrift.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Thrift</a> - 起源于Facebook的数据交换格式。</li><li><a href="http://pcollections.org/" target="_blank" rel="external nofollow noreferrer noopener">Persistent Collection</a> - Java集合框架的持久性和不可改变的库。</li><li><a href="https://github.com/google/protobuf" target="_blank" rel="external nofollow noreferrer noopener">Protobuf</a> - 谷歌的数据交换格式。</li><li><a href="https://github.com/real-logic/simple-binary-encoding" target="_blank" rel="external nofollow noreferrer noopener">SBE</a> - 简单二进制编码，最快的消息中的一格式。</li><li><a href="https://github.com/square/wire" target="_blank" rel="external nofollow noreferrer noopener">Wire</a> - 清洁，轻便的协议缓冲区。</li><li><h2 id="日期和时间-Date-and-Time"><a href="#日期和时间-Date-and-Time" class="headerlink" title="日期和时间(Date and Time)"></a><a name="date-and-time"></a>日期和时间(Date and Time)</h2></li></ul><p><em>处理日期和时间的函数库。</em></p><ul><li><a href="http://www.joda.org/joda-time/" target="_blank" rel="external nofollow noreferrer noopener">Joda-Time</a> - Java 8出现之前，它是日期、时间处理的标准函数库。</li><li><a href="https://github.com/ThreeTen/threetenbp" target="_blank" rel="external nofollow noreferrer noopener">ThreeTenBP</a> - 由Joda-Time的作者实现JSR 310接口（ java.time包）。</li><li><a href="https://github.com/MenoData/Time4J" target="_blank" rel="external nofollow noreferrer noopener">Time4J</a> - Java高级日期、时间函数库。</li></ul><h2 id="依赖注入-Dependency-Injection"><a href="#依赖注入-Dependency-Injection" class="headerlink" title="依赖注入(Dependency Injection)"></a><a name="dependency-injection"></a>依赖注入(Dependency Injection)</h2><p><em>帮助代码实现<a href="https://en.wikipedia.org/wiki/Inversion_of_control" target="_blank" rel="external nofollow noreferrer noopener">控制反转模式</a>的函数库。</em></p><ul><li><a href="https://deltaspike.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache DeltaSpike</a> - CDI扩展框架。</li><li><a href="http://google.github.io/dagger/" target="_blank" rel="external nofollow noreferrer noopener">Dagger2</a> - 没有反射的编译时注入框架。</li><li><a href="https://github.com/google/guice" target="_blank" rel="external nofollow noreferrer noopener">Guice</a> - 轻量级注入框架，功能强大可与Dagger媲美。</li><li><a href="https://hk2.java.net" target="_blank" rel="external nofollow noreferrer noopener">HK2</a> - 轻量级的动力依赖注入框架。</li></ul><h2 id="开发库-Development"><a href="#开发库-Development" class="headerlink" title="开发库(Development)"></a><a name="development"></a>开发库(Development)</h2><p><em>从基础层次上改进开发流程。</em></p><ul><li><a href="https://github.com/sviperll/adt4j" target="_blank" rel="external nofollow noreferrer noopener">ADT4J</a> - JSR-269 代码生成代数数据类型。</li><li><a href="https://eclipse.org/aspectj/" target="_blank" rel="external nofollow noreferrer noopener">AspectJ</a> - 面向切面编程扩展，与程序无缝连接。</li><li><a href="https://github.com/google/auto" target="_blank" rel="external nofollow noreferrer noopener">Auto</a> - 源代码生成器集合。</li><li><a href="http://dcevm.github.io/" target="_blank" rel="external nofollow noreferrer noopener">DCEVM</a> - 通过修改JVM，在运行时可无限次重定义已加载的类。OpenJDK 7、8已提供支持，详情可查看这个<a href="http://dcevm.github.io/" target="_blank" rel="external nofollow noreferrer noopener">分支（fork）</a>。</li><li><a href="https://github.com/HotswapProjects/HotswapAgent" target="_blank" rel="external nofollow noreferrer noopener">HotswapAgent</a> - 无限运行时类和资源重定义。</li><li><a href="http://immutables.github.io/" target="_blank" rel="external nofollow noreferrer noopener">Immutables</a> - 类似于Scala示例库。</li><li><a href="https://github.com/jhipster/generator-jhipster" target="_blank" rel="external nofollow noreferrer noopener">JHipster</a> -<br>Yeoman 源代码生成器，创建基于Spring的引导和AngularJS应用程序。</li><li><a href="http://zeroturnaround.com/software/jrebel/" target="_blank" rel="external nofollow noreferrer noopener">JRebel</a> - 商用软件，无需重新部署可即时重新加载代码及配置。</li><li><a href="https://projectlombok.org/" target="_blank" rel="external nofollow noreferrer noopener">Lombok</a> - 代码生成器，旨在减少Java冗余代码。</li><li><a href="https://github.com/spring-projects/spring-loaded" target="_blank" rel="external nofollow noreferrer noopener">Spring Loaded</a> -另一个JVM类重载代理。</li><li><a href="http://vertx.io/" target="_blank" rel="external nofollow noreferrer noopener">vert.x</a> - JVM多语言事件驱动应用框架。</li></ul><h2 id="分布式应用-Distributed-Applications"><a href="#分布式应用-Distributed-Applications" class="headerlink" title="分布式应用(Distributed Applications)"></a><a name="distributed-applications"></a>分布式应用(Distributed Applications)</h2><p><em>用来开发分布式、具有容错性应用程序的函数库和框架。</em></p><ul><li><a href="http://akka.io" target="_blank" rel="external nofollow noreferrer noopener">Akka</a> - 构建并发、分布式和具有容错功能的事件驱动应用程序所需的工具包和运行时。</li><li><a href="http://storm.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Storm</a> - 分布式实时计算系统。</li><li><a href="http://zookeeper.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache ZooKeeper</a> - 为大型分布式系统，使用分布式配置、同步和命名注册提供协调服务。</li><li><a href="http://www.axonframework.org/" target="_blank" rel="external nofollow noreferrer noopener">Axon Framework</a> - 用于创建CQRS应用的框架。</li><li><a href="http://hazelcast.org/" target="_blank" rel="external nofollow noreferrer noopener">Hazelcast</a> - 分布式、高可扩展性内存网格。</li><li><a href="https://github.com/Netflix/Hystrix" target="_blank" rel="external nofollow noreferrer noopener">Hystrix</a> - 为分布式系统提供延迟和容错处理。</li><li><a href="http://www.jgroups.org/" target="_blank" rel="external nofollow noreferrer noopener">JGroups</a> - 一组提供可靠消息传输的工具包，可用来创建集群。集群中的节点可互相发送消息。</li><li><a href="http://orbit.bioware.com/" target="_blank" rel="external nofollow noreferrer noopener">Orbit</a> - 虚拟Actors，添加另一个抽象层级到传统Actors。</li><li><a href="http://www.paralleluniverse.co/quasar/" target="_blank" rel="external nofollow noreferrer noopener">Quasar</a> - 为JVM提供轻量级线程和Actor。</li></ul><h2 id="分布式数据库-Distributed-Databases"><a href="#分布式数据库-Distributed-Databases" class="headerlink" title="分布式数据库(Distributed Databases)"></a><a name="distributed-databases"></a>分布式数据库(Distributed Databases)</h2><p><em>Databases in a distributed system that appear to applications as a single data source.</em></p><ul><li><a href="http://cassandra.apache.org" target="_blank" rel="external nofollow noreferrer noopener">Apache Cassandra</a> - Column-oriented and providing high availability with no single point of failure.</li><li><a href="http://hbase.apache.org" target="_blank" rel="external nofollow noreferrer noopener">Apache HBase</a> - Hadoop database for big data.</li><li><a href="http://druid.io" target="_blank" rel="external nofollow noreferrer noopener">Druid</a> - Real-time and historical OLAP data store that excel at aggregation and approximation queries.</li><li><a href="http://infinispan.org/" target="_blank" rel="external nofollow noreferrer noopener">Infinispan</a> - Highly concurrent key/value datastore used for caching.</li><li><a href="http://opentsdb.net" target="_blank" rel="external nofollow noreferrer noopener">OpenTSDB</a> - Scalable and distributed time series database written on top of Apache HBase.</li></ul><h2 id="Distribution"><a href="#Distribution" class="headerlink" title="Distribution"></a>Distribution</h2><p><em>Tools which handle the distribution of applications in native formats.</em></p><ul><li><a href="https://bintray.com/" target="_blank" rel="external nofollow noreferrer noopener">Bintray</a> - Version control for binaries which handles the publishing. Can also be used with Maven or Gradle and has a free plan for open-source software or several business plans.</li><li><a href="http://www.capsule.io/" target="_blank" rel="external nofollow noreferrer noopener">Capsule</a> - Simple and powerful packaging and deployment. A fat JAR on steroids or a “Docker for Java” that supports JVM-optimized containers.</li><li><a href="http://search.maven.org/" target="_blank" rel="external nofollow noreferrer noopener">Central Repository</a> - Largest binary component repository available as a free service to the open-source community. Default used by Apache Maven and available in all other build tools.</li><li><a href="http://izpack.org/" target="_blank" rel="external nofollow noreferrer noopener">IzPack</a> - Setup authoring tool for cross-platform deployments.</li><li><a href="https://jitpack.io/" target="_blank" rel="external nofollow noreferrer noopener">JitPack</a> - Easy to use package repository for GitHub. Builds Maven/Gradle projects on demand and publishes ready-to-use packages.</li><li><a href="http://launch4j.sourceforge.net/" target="_blank" rel="external nofollow noreferrer noopener">Launch4j</a> - Wraps JARs in lightweight and native Windows executables.</li><li><a href="http://www.sonatype.com/nexus" target="_blank" rel="external nofollow noreferrer noopener">Nexus</a> - Binary management with proxy and caching capabilities.</li><li><a href="https://github.com/libgdx/packr/" target="_blank" rel="external nofollow noreferrer noopener">packr</a> - Packs JARs, assets and the JVM for native distribution on Windows, Linux and Mac OS X.</li></ul><h2 id="Document-Processing"><a href="#Document-Processing" class="headerlink" title="Document Processing"></a>Document Processing</h2><p><em>Libraries that assist with processing office document formats.</em></p><ul><li><a href="http://poi.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache POI</a> - Supports OOXML (XLSX, DOCX, PPTX) as well as OLE2 (XLS, DOC or PPT).</li><li><a href="http://documents4j.com" target="_blank" rel="external nofollow noreferrer noopener">documents4j</a> - API for document format conversion using third-party converters such as MS Word.</li><li><a href="http://www.jopendocument.org/" target="_blank" rel="external nofollow noreferrer noopener">jOpenDocument</a> - Processes the OpenDocument format.</li></ul><h2 id="Formal-Verification"><a href="#Formal-Verification" class="headerlink" title="Formal Verification"></a>Formal Verification</h2><p><em>Formal-methods tools: proof assistants, model checking, symbolic execution etc.</em></p><ul><li><a href="https://github.com/ksen007/janala2" target="_blank" rel="external nofollow noreferrer noopener">CATG</a> - Concolic unit testing engine. Automatically generates unit tests using formal methods.</li><li><a href="http://types.cs.washington.edu/checker-framework/" target="_blank" rel="external nofollow noreferrer noopener">Checker Framework</a> - Pluggable type systems. Includes nullness types, physical units, immutability types and more.</li><li><a href="http://plse.cs.washington.edu/daikon/" target="_blank" rel="external nofollow noreferrer noopener">Daikon</a> - Daikon detects likely program invariants and can generate JML specs based on those invariats.</li><li><a href="http://www.jmlspecs.org" target="_blank" rel="external nofollow noreferrer noopener">Java Modeling Language (JML)</a> - Behavioral interface specification language that can be used to specify the behavior of code modules. It combines the design by contract approach of Eiffel and the model-based specification approach of the Larch family of interface specification languages, with some elements of the refinement calculus. Used by several other verification tools.</li><li><a href="http://babelfish.arc.nasa.gov/trac/jpf" target="_blank" rel="external nofollow noreferrer noopener">Java Path Finder (JPF)</a> - JVM formal verification tool containing a model checker and more. Created by NASA.</li><li><a href="https://github.com/osl/jcute" target="_blank" rel="external nofollow noreferrer noopener">jCUTE</a> - Concolic unit testing engine that automatically generates unit tests. Concolic execution combines randomized concrete execution with symbolic execution and automatic constraint solving.</li><li><a href="http://massoni.computacao.ufcg.edu.br/home/jmlok" target="_blank" rel="external nofollow noreferrer noopener">JMLOK 2.0</a> - Detects nonconformances between code and JML specification through the feedback-directed random tests generation, and suggests a likely cause for each nonconformance detected.</li><li><a href="http://key-project.org/" target="_blank" rel="external nofollow noreferrer noopener">KeY</a> - The KeY System is a formal software development tool that aims to integrate design, implementation, formal specification, and formal verification of object-oriented software as seamlessly as possible. Uses JML for specification and symbolic execution for verification.</li><li><a href="http://openjml.github.io/" target="_blank" rel="external nofollow noreferrer noopener">OpenJML</a> - Translates JML specifications into SMT-LIB format and passes the proof problems implied by the program to backend solvers.</li></ul><h2 id="Functional-Programming"><a href="#Functional-Programming" class="headerlink" title="Functional Programming"></a>Functional Programming</h2><p><em>Libraries that facilitate functional programming.</em></p><ul><li><a href="https://github.com/aol/cyclops" target="_blank" rel="external nofollow noreferrer noopener">Cyclops</a> - Monad and stream utilities, comprehensions, pattern matching, trampolines and much more.</li><li><a href="https://github.com/derive4j/derive4j" target="_blank" rel="external nofollow noreferrer noopener">derive4j</a> - Java 8 annotation processor and framework for deriving algebraic data types constructors, pattern-matching, morphisms.</li><li><a href="https://bitbucket.org/atlassian/fugue" target="_blank" rel="external nofollow noreferrer noopener">Fugue</a> - Functional extensions to Guava.</li><li><a href="http://www.functionaljava.org" target="_blank" rel="external nofollow noreferrer noopener">Functional Java</a> - Implements numerous basic and advanced programming abstractions that assist composition-oriented development.</li><li><a href="http://javaslang.com" target="_blank" rel="external nofollow noreferrer noopener">Javaslang</a> - Functional component library that provides persistent data types and functional control structures.</li><li><a href="https://github.com/jOOQ/jOOL" target="_blank" rel="external nofollow noreferrer noopener">jOOλ</a> - Extension to Java 8 which aims to fix gaps in lambda, providing numerous missing types and a rich set of sequential Stream API additions.</li></ul><h2 id="Game-Development"><a href="#Game-Development" class="headerlink" title="Game Development"></a>Game Development</h2><p><em>Frameworks that support the development of games.</em></p><ul><li><a href="http://jmonkeyengine.org/" target="_blank" rel="external nofollow noreferrer noopener">jMonkeyEngine</a> - Game engine for modern 3D development.</li><li><a href="https://libgdx.badlogicgames.com/" target="_blank" rel="external nofollow noreferrer noopener">libGDX</a> - All-round cross-platform, high-level framework.</li><li><a href="http://www.lwjgl.org/" target="_blank" rel="external nofollow noreferrer noopener">LWJGL</a> - Robust framework that abstracts libraries like OpenGL/CL/AL.</li></ul><h2 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h2><p><em>Libraries to create modern graphical user interfaces.</em></p><ul><li><a href="http://www.oracle.com/technetwork/java/javase/overview/javafx-overview-2158620.html" target="_blank" rel="external nofollow noreferrer noopener">JavaFX</a> - The successor of Swing.</li><li><a href="http://www.oracle.com/technetwork/java/javase/downloads/javafxscenebuilder-info-2157684.html" target="_blank" rel="external nofollow noreferrer noopener">Scene Builder</a> - Visual layout tool for JavaFX applications.</li><li><a href="http://www.eclipse.org/swt/" target="_blank" rel="external nofollow noreferrer noopener">SWT</a> - The Standard Widget Toolkit (SWT) is a graphical widget toolkit for use with the Java platform.</li></ul><h2 id="High-Performance"><a href="#High-Performance" class="headerlink" title="High Performance"></a>High Performance</h2><p><em>Everything about high performance computation, from collections to specific libraries.</em></p><ul><li><a href="https://github.com/real-logic/Agrona" target="_blank" rel="external nofollow noreferrer noopener">Agrona</a> - Data structures and utility methods that are common in high-performance applications.</li><li><a href="http://lmax-exchange.github.io/disruptor/" target="_blank" rel="external nofollow noreferrer noopener">Disruptor</a> - Inter-thread messaging library.</li><li><a href="http://fastutil.di.unimi.it/" target="_blank" rel="external nofollow noreferrer noopener">fastutil</a> - Fast and compact type-specific collections.</li><li><a href="https://github.com/goldmansachs/gs-collections" target="_blank" rel="external nofollow noreferrer noopener">GS Collections</a> - Collection framework inspired by Smalltalk.</li><li><a href="http://labs.carrotsearch.com/hppc.html" target="_blank" rel="external nofollow noreferrer noopener">HPPC</a> - Primitive collections.</li><li><a href="http://javolution.org/" target="_blank" rel="external nofollow noreferrer noopener">Javolution</a> - Library for real-time and embedded systems.</li><li><a href="https://github.com/JCTools/JCTools" target="_blank" rel="external nofollow noreferrer noopener">JCTools</a> - Concurrency tools currently missing from the JDK.</li><li><a href="https://github.com/OpenHFT/Koloboke" target="_blank" rel="external nofollow noreferrer noopener">Koloboke</a> - Hash sets and hash maps.</li><li><a href="http://trove.starlight-systems.com/" target="_blank" rel="external nofollow noreferrer noopener">Trove</a> - Primitive collections.</li></ul><h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><p><em>Integrated development environments that try to simplify several aspects of development.</em></p><ul><li><a href="http://www.eclipse.org/" target="_blank" rel="external nofollow noreferrer noopener">Eclipse</a> - Established, open-souce project with support for lots of plugins and languages.</li><li><a href="http://www.jetbrains.com/idea/" target="_blank" rel="external nofollow noreferrer noopener">IntelliJ IDEA</a> - Supports a lot of JVM languages and provides good options for Android development. The commercial edition targets the enterprise sector.</li><li><a href="https://netbeans.org/" target="_blank" rel="external nofollow noreferrer noopener">NetBeans</a> - Provides integration for several Java SE and EE features from database access to HTML5.</li></ul><h2 id="Imagery"><a href="#Imagery" class="headerlink" title="Imagery"></a>Imagery</h2><p><em>Libraries that assist with the creation, evaluation or manipulation of graphical images.</em></p><ul><li><a href="https://github.com/thebuzzmedia/imgscalr" target="_blank" rel="external nofollow noreferrer noopener">Imgscalr</a> - Simple and efficient hardware-accelerated image-scaling library implemented in pure Java 2D.</li><li><a href="http://square.github.io/picasso/" target="_blank" rel="external nofollow noreferrer noopener">Picasso</a> - Image downloading and caching library for Android.</li><li><a href="https://github.com/coobird/thumbnailator" target="_blank" rel="external nofollow noreferrer noopener">Thumbnailator</a> - Thumbnailator is a high-quality thumbnail generation library for Java.</li><li><a href="https://github.com/zxing/zxing" target="_blank" rel="external nofollow noreferrer noopener">ZXing</a> - Multi-format 1D/2D barcode image processing library.</li></ul><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p><em>Libraries that simplify JSON processing.</em></p><ul><li><a href="http://owlike.github.io/genson/" target="_blank" rel="external nofollow noreferrer noopener">Genson</a> - Powerful and easy to use Java to JSON conversion library.</li><li><a href="https://github.com/google/gson" target="_blank" rel="external nofollow noreferrer noopener">Gson</a> - Serializes objects to JSON and vice versa. Good performance with on-the-fly usage.</li><li><a href="http://wiki.fasterxml.com/JacksonHome" target="_blank" rel="external nofollow noreferrer noopener">Jackson</a> - Similar to GSON but has performance gains if you need to instantiate the library more often.</li><li><a href="https://github.com/bluelinelabs/LoganSquare" target="_blank" rel="external nofollow noreferrer noopener">LoganSquare</a> - JSON parsing and serializing library based on Jackson’s streaming API. Outpeforms GSON &amp; Jackson’s library.</li></ul><h2 id="JVM-and-JDK"><a href="#JVM-and-JDK" class="headerlink" title="JVM and JDK"></a>JVM and JDK</h2><p><em>Current implementations of the JVM/JDK.</em></p><ul><li><a href="https://jdk9.java.net/" target="_blank" rel="external nofollow noreferrer noopener">JDK 9</a> - Early access releases of JDK 9.</li><li><a href="http://openjdk.java.net/" target="_blank" rel="external nofollow noreferrer noopener">OpenJDK</a> - Open-source implementation.</li></ul><h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><p><em>Libraries that log the behavior of an application.</em></p><ul><li><a href="http://logging.apache.org/log4j/" target="_blank" rel="external nofollow noreferrer noopener">Apache Log4j 2</a> - Complete rewrite with a powerful plugin and configuration architecture.</li><li><a href="https://www.graylog.org/" target="_blank" rel="external nofollow noreferrer noopener">graylog</a> - Open-source aggregator suited for extended role and permission management.</li><li><a href="https://www.elastic.co/products/kibana" target="_blank" rel="external nofollow noreferrer noopener">kibana</a> - Analyzes and visualizes log files. Some features require payment.</li><li><a href="http://logback.qos.ch/" target="_blank" rel="external nofollow noreferrer noopener">Logback</a> - Robust logging library with interesting configuration options via Groovy.</li><li><a href="https://www.elastic.co/products/logstash" target="_blank" rel="external nofollow noreferrer noopener">logstash</a> - Tool for managing log files.</li><li><a href="https://github.com/dropwizard/metrics" target="_blank" rel="external nofollow noreferrer noopener">Metrics</a> - Expose metrics via JMX or HTTP and can send them to a database.</li><li><a href="http://www.slf4j.org/" target="_blank" rel="external nofollow noreferrer noopener">SLF4J</a> - Abstraction layer which is to be used with an implementation.</li></ul><h2 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h2><p><em>Tools that provide specific statistical algorithms which allow learning from data.</em></p><ul><li><a href="https://flink.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Flink</a> - Fast and reliable large-scale data processing engine.</li><li><a href="http://hadoop.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Hadoop</a> - Storage and large-scale processing of data-sets on clusters of commodity hardware.</li><li><a href="https://mahout.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Mahout</a> - Scalable algorithms focused on collaborative filtering, clustering and classification.</li><li><a href="http://spark.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Spark</a> - Data analytics cluster computing framework.</li><li><a href="http://deepdive.stanford.edu" target="_blank" rel="external nofollow noreferrer noopener">DeepDive</a> - Creates structured information from unstructured data and integrates it into an existing database.</li><li><a href="http://deeplearning4j.org/" target="_blank" rel="external nofollow noreferrer noopener">Deeplearning4j</a> - Distributed and multi-threaded deep learning library.</li><li><a href="http://h2o.ai/" target="_blank" rel="external nofollow noreferrer noopener">H2O</a> - Analytics engine for statistics over big data.</li><li><a href="https://github.com/EdwardRaff/JSAT" target="_blank" rel="external nofollow noreferrer noopener">JSAT</a> - Algorithms for pre-processing, classification, regression, and clustering with support for multi-threaded execution.</li><li><a href="http://www.cs.waikato.ac.nz/ml/weka/" target="_blank" rel="external nofollow noreferrer noopener">Weka</a> - Collection of algorithms for data mining tasks ranging from pre-processing to visualization.</li></ul><h2 id="Messaging"><a href="#Messaging" class="headerlink" title="Messaging"></a>Messaging</h2><p><em>Tools that help to send messages between clients in order to ensure protocol independency.</em></p><ul><li><a href="https://github.com/real-logic/Aeron" target="_blank" rel="external nofollow noreferrer noopener">Aeron</a> - Efficient reliable unicast and multicast message transport.</li><li><a href="http://activemq.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache ActiveMQ</a> - Message broker that implements JMS and converts synchronous to asynchronous communication.</li><li><a href="http://camel.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Camel</a> - Glues together different transport APIs via Enterprise Integration Patterns.</li><li><a href="http://kafka.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Kafka</a> - High-throughput distributed messaging system.</li><li><a href="http://hermes.allegro.tech" target="_blank" rel="external nofollow noreferrer noopener">Hermes</a> - Fast and reliable message broker built on top of Kafka.</li><li><a href="http://hornetq.jboss.org/" target="_blank" rel="external nofollow noreferrer noopener">JBoss HornetQ</a> - Clear, concise, modular and made to be embedded.</li><li><a href="https://github.com/zeromq/jeromq" target="_blank" rel="external nofollow noreferrer noopener">JeroMQ</a> - Implementation of ZeroMQ.</li><li><a href="https://github.com/igniterealtime/Smack/" target="_blank" rel="external nofollow noreferrer noopener">Smack</a> - Cross-platform XMPP client library.</li></ul><h2 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h2><p><em>Everything else.</em></p><ul><li><a href="https://github.com/iluwatar/java-design-patterns" target="_blank" rel="external nofollow noreferrer noopener">Design Patterns</a> - Implementation and explanation of the most common design patterns.</li><li><a href="https://github.com/google/jimfs" target="_blank" rel="external nofollow noreferrer noopener">Jimfs</a> - In-memory file system.</li><li><a href="https://code.google.com/p/lanterna/" target="_blank" rel="external nofollow noreferrer noopener">Lanterna</a> - Easy console text GUI library similar to curses.</li><li><a href="http://lightadmin.org/" target="_blank" rel="external nofollow noreferrer noopener">LightAdmin</a> - Pluggable CRUD UI library for rapid application development.</li><li><a href="https://github.com/winterbe/java8-tutorial" target="_blank" rel="external nofollow noreferrer noopener">Modern Java - A Guide to Java 8</a> - Popular Java 8 guide.</li><li><a href="http://openrefine.org/" target="_blank" rel="external nofollow noreferrer noopener">OpenRefine</a> - Tool for working with messy data: cleaning, transforming, extending it with web services and linking it to databases.</li><li><a href="https://robovm.com/" target="_blank" rel="external nofollow noreferrer noopener">RoboVM</a> - Commercial framework with a free trial to write native iOS apps.</li></ul><h2 id="Monitoring"><a href="#Monitoring" class="headerlink" title="Monitoring"></a>Monitoring</h2><p><em>Tools that monitor applications in production.</em></p><ul><li><a href="http://www.appdynamics.com/" target="_blank" rel="external nofollow noreferrer noopener">AppDynamics</a> - Commercial performance monitor.</li><li><a href="https://github.com/javamelody/javamelody" target="_blank" rel="external nofollow noreferrer noopener">JavaMelody</a> - Performance monitoring and profiling.</li><li><a href="https://github.com/jmxtrans/jmxtrans/" target="_blank" rel="external nofollow noreferrer noopener">jmxtrans</a> - Tool to connect to multiple JVMs and to query them for their attributes via JMX. Its query language is based on JSON, which allows non-Java programmers to access the JVMs attributes. Likewise, this tool supports different output writes, including Graphite, Ganglia, StatsD, among others.</li><li><a href="http://www.kamon.io/" target="_blank" rel="external nofollow noreferrer noopener">Kamon</a> - Tool for monitoring applications running on the JVM.</li><li><a href="http://newrelic.com/" target="_blank" rel="external nofollow noreferrer noopener">New Relic</a> - Commercial performance monitor.</li><li><a href="https://sematext.com/spm/" target="_blank" rel="external nofollow noreferrer noopener">SPM</a> - Commercial performance monitor with distributing transaction tracing for JVM apps.</li><li><a href="https://www.takipi.com/" target="_blank" rel="external nofollow noreferrer noopener">Takipi</a> - Commercial in-production error monitoring and debugging.</li></ul><h2 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h2><p><em>For working with platform-specific native libraries.</em></p><ul><li><a href="https://github.com/java-native-access/jna" target="_blank" rel="external nofollow noreferrer noopener">JNA</a> - Work with native libraries without writing JNI. Also provides interfaces to common system libraries.</li><li><a href="https://github.com/jnr/jnr-ffi" target="_blank" rel="external nofollow noreferrer noopener">JNR</a> - Work with native libraries without writing JNI. Also provides interfaces to common system libraries. Same goals as JNA, but faster, and serves as the basis for the upcoming <a href="http://openjdk.java.net/projects/panama/" target="_blank" rel="external nofollow noreferrer noopener">Project Panama</a>.</li></ul><h2 id="Natural-Language-Processing"><a href="#Natural-Language-Processing" class="headerlink" title="Natural Language Processing"></a>Natural Language Processing</h2><p><em>Libraries that specialize on processing text.</em></p><ul><li><a href="https://opennlp.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache OpenNLP</a> - Toolkit for common tasks like tokenization.</li><li><a href="http://nlp.stanford.edu/software/corenlp.shtml" target="_blank" rel="external nofollow noreferrer noopener">CoreNLP</a> - Stanford’s CoreNLP provides a set of fundamental tools for tasks like tagging, named entity recognition, sentiment analysis and many more.</li><li><a href="http://alias-i.com/lingpipe/" target="_blank" rel="external nofollow noreferrer noopener">LingPipe</a> - Toolkit for a variety of tasks ranging from POS tagging to sentiment analysis.</li><li><a href="http://mallet.cs.umass.edu/" target="_blank" rel="external nofollow noreferrer noopener">Mallet</a> - Statistical natural language processing, document classification, clustering, topic modeling and more.</li></ul><h2 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h2><p><em>Libraries for network programming.</em></p><ul><li><a href="https://github.com/AsyncHttpClient/async-http-client" target="_blank" rel="external nofollow noreferrer noopener">Async Http Client</a> - Asynchronous HTTP and WebSocket client library.</li><li><a href="https://grizzly.java.net/" target="_blank" rel="external nofollow noreferrer noopener">Grizzly</a> - NIO framework. Used as a network layer in Glassfish.</li><li><a href="http://netty.io/" target="_blank" rel="external nofollow noreferrer noopener">Netty</a> - Framework for building high performance network applications.</li><li><a href="http://square.github.io/okhttp/" target="_blank" rel="external nofollow noreferrer noopener">OkHttp</a> - HTTP+SPDY client.</li><li><a href="http://undertow.io/" target="_blank" rel="external nofollow noreferrer noopener">Undertow</a> - Web server providing both blocking and non-blocking API’s based on NIO. Used as a network layer in WildFly.</li></ul><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p><em>APIs which handle the persistence of objects.</em></p><ul><li><a href="http://ebean-orm.github.io/" target="_blank" rel="external nofollow noreferrer noopener">Ebean</a> - Provides simple and fast data access.</li><li><a href="https://www.eclipse.org/eclipselink/" target="_blank" rel="external nofollow noreferrer noopener">EclipseLink</a> - Supports a number of persistence standards: JPA, JAXB, JCA and SDO.</li><li><a href="http://hibernate.org/orm/" target="_blank" rel="external nofollow noreferrer noopener">Hibernate</a> - Robust and widely used with an active community.</li><li><a href="http://mybatis.org/mybatis-3/" target="_blank" rel="external nofollow noreferrer noopener">MyBatis</a> - Couples objects with stored procedures or SQL statements.</li><li><a href="http://ormlite.com/" target="_blank" rel="external nofollow noreferrer noopener">OrmLite</a> - Lightweight package avoiding the complexity and overhead of other ORM products.</li></ul><h2 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h2><p><em>Everything that helps with the creation of PDF files.</em></p><ul><li><a href="http://xmlgraphics.apache.org/fop/" target="_blank" rel="external nofollow noreferrer noopener">Apache FOP</a> - Creates PDF from XSL-FO.</li><li><a href="http://pdfbox.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache PDFBox</a> - Toolbox for creating and manipulating PDF.</li><li><a href="http://dynamicreports.org/" target="_blank" rel="external nofollow noreferrer noopener">DynamicReports</a> - Simplifies JasperReports.</li><li><a href="https://github.com/flyingsaucerproject/flyingsaucer" target="_blank" rel="external nofollow noreferrer noopener">flyingsaucer</a> - XML/XHTML and CSS 2.1 renderer.</li><li><a href="http://itextpdf.com/" target="_blank" rel="external nofollow noreferrer noopener">iText</a> - Creates PDF files programmatically but requires a license for commercial purposes.</li><li><a href="http://community.jaspersoft.com/project/jasperreports-library" target="_blank" rel="external nofollow noreferrer noopener">JasperReports</a> - Complex reporting engine.</li></ul><h2 id="Performance-analysis"><a href="#Performance-analysis" class="headerlink" title="Performance analysis"></a>Performance analysis</h2><p><em>Tools for performance analysis, profiling and benchmarking.</em></p><ul><li><a href="https://github.com/giltene/jHiccup" target="_blank" rel="external nofollow noreferrer noopener">jHiccup</a> - Logs and records platform JVM stalls.</li><li><a href="http://openjdk.java.net/projects/code-tools/jmh/" target="_blank" rel="external nofollow noreferrer noopener">JMH</a> - Microbenchmarking tool for the JVM.</li><li><a href="https://www.ej-technologies.com/products/jprofiler/overview.html" target="_blank" rel="external nofollow noreferrer noopener">JProfiler</a> - Commercial profiler.</li><li><a href="https://github.com/LatencyUtils/LatencyUtils" target="_blank" rel="external nofollow noreferrer noopener">LatencyUtils</a> - Utilities for latency measurement and reporting.</li><li><a href="http://visualvm.java.net/" target="_blank" rel="external nofollow noreferrer noopener">VisualVM</a> - Visual interface for detailed information about running applications.</li><li><a href="https://www.yourkit.com/features/" target="_blank" rel="external nofollow noreferrer noopener">YourKit Java Profiler</a> - Commercial profiler.</li></ul><h2 id="Reactive-libraries"><a href="#Reactive-libraries" class="headerlink" title="Reactive libraries"></a>Reactive libraries</h2><p><em>Libraries for developing reactive applications.</em></p><ul><li><a href="https://github.com/reactive-streams/reactive-streams-jvm/" target="_blank" rel="external nofollow noreferrer noopener">Reactive Streams</a> - Provide a standard for asynchronous stream processing with non-blocking backpressure.</li><li><a href="http://projectreactor.io/" target="_blank" rel="external nofollow noreferrer noopener">Reactor</a> - Library for building reactive fast-data applications.</li><li><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external nofollow noreferrer noopener">RxJava</a> - Library for composing asynchronous and event-based programs using observable sequences from the JVM.</li></ul><h2 id="REST-Frameworks"><a href="#REST-Frameworks" class="headerlink" title="REST Frameworks"></a>REST Frameworks</h2><p><em>Frameworks specifically for creating RESTful services.</em></p><ul><li><a href="https://dropwizard.github.io/dropwizard/" target="_blank" rel="external nofollow noreferrer noopener">Dropwizard</a> - Opinionated framework for setting up modern web applications with Jetty, Jackson, Jersey and Metrics.</li><li><a href="https://github.com/Netflix/feign" target="_blank" rel="external nofollow noreferrer noopener">Feign</a> - HTTP client binder inspired by Retrofit, JAXRS-2.0, and WebSocket.</li><li><a href="https://jersey.java.net/" target="_blank" rel="external nofollow noreferrer noopener">Jersey</a> - JAX-RS reference implementation.</li><li><a href="http://resteasy.jboss.org/" target="_blank" rel="external nofollow noreferrer noopener">RESTEasy</a> - Fully certified and portable implementation of the JAX-RS specification.</li><li><a href="https://github.com/RestExpress/RestExpress" target="_blank" rel="external nofollow noreferrer noopener">RestExpress</a> - Thin wrapper on the JBOSS Netty HTTP stack to provide scaling and performance.</li><li><a href="http://restx.io" target="_blank" rel="external nofollow noreferrer noopener">RestX</a> - Framework based on annotation processing and compile-time source generation.</li><li><a href="http://square.github.io/retrofit/" target="_blank" rel="external nofollow noreferrer noopener">Retrofit</a> - Type-safe REST client.</li><li><a href="http://sparkjava.com/" target="_blank" rel="external nofollow noreferrer noopener">Spark</a> - Sinatra inspired framework.</li><li><a href="http://swagger.io/" target="_blank" rel="external nofollow noreferrer noopener">Swagger</a> - Swagger is a specification and complete framework implementation for describing, producing, consuming, and visualizing RESTful web services.</li></ul><h2 id="Science"><a href="#Science" class="headerlink" title="Science"></a>Science</h2><p><em>Libraries for scientific computing and analysis.</em></p><ul><li><a href="http://jwork.org/dmelt/" target="_blank" rel="external nofollow noreferrer noopener">DataMelt</a> - Environment for scientific computation, data analysis and data visualization.</li><li><a href="https://github.com/jgrapht/jgrapht" target="_blank" rel="external nofollow noreferrer noopener">JGraphT</a> - Graph library that provides mathematical graph-theory objects and algorithms.</li><li><a href="http://jscience.org/" target="_blank" rel="external nofollow noreferrer noopener">JScience</a> - Provides a set of classes to work with scientific measurements and units.</li></ul><h2 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h2><p><em>Engines which index documents for search and analysis.</em></p><ul><li><a href="http://lucene.apache.org/solr/" target="_blank" rel="external nofollow noreferrer noopener">Apache Solr</a> - Enterprise search engine optimized for high volume traffic.</li><li><a href="https://www.elastic.co/" target="_blank" rel="external nofollow noreferrer noopener">Elasticsearch</a> - Distributed, multitenant-capable full-text search engine with a RESTful web interface and schema-free JSON documents.</li></ul><h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><p><em>Libraries that handle security, authentication, authorization or session management.</em></p><ul><li><a href="http://shiro.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Shiro</a> - Performs authentication, authorization, cryptography and session management.</li><li><a href="https://www.bouncycastle.org/java.html" target="_blank" rel="external nofollow noreferrer noopener">Bouncy Castle</a> - All-purpose cryptographic library. JCA provider, wide range of functions from basic helpers to PGP/SMIME operations.</li><li><a href="https://cryptomator.org/" target="_blank" rel="external nofollow noreferrer noopener">Cryptomator</a> - Multiplatform transparent client-side encryption of files in the cloud.</li><li><a href="https://github.com/google/keyczar" target="_blank" rel="external nofollow noreferrer noopener">Google Keyczar</a> - Easy to use, yet safe encryption framework with key versioning.</li><li><a href="http://keycloak.jboss.org/" target="_blank" rel="external nofollow noreferrer noopener">Keycloak</a> - Integrated SSO and IDM for browser apps and RESTful web services.</li><li><a href="http://picketlink.org/" target="_blank" rel="external nofollow noreferrer noopener">PicketLink</a> - Umbrella project for security and identity management.</li></ul><h2 id="Serialization"><a href="#Serialization" class="headerlink" title="Serialization"></a>Serialization</h2><p><em>Libraries that handle serialization with high efficiency.</em></p><ul><li><a href="https://github.com/google/flatbuffers" target="_blank" rel="external nofollow noreferrer noopener">FlatBuffers</a> - Memory efficient serialization library that can access serialized data without unpacking and parsing it.</li><li><a href="https://github.com/RuedigerMoeller/fast-serialization" target="_blank" rel="external nofollow noreferrer noopener">FST</a> - JDK compatible high performance object graph serialization.</li><li><a href="https://github.com/EsotericSoftware/kryo" target="_blank" rel="external nofollow noreferrer noopener">Kryo</a> - Fast and efficient object graph serialization framework.</li><li><a href="https://github.com/msgpack/msgpack-java" target="_blank" rel="external nofollow noreferrer noopener">MessagePack</a> - Efficient binary serialization format.</li></ul><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p><em>Servers which are specifically used to deploy applications.</em></p><ul><li><a href="http://tomcat.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Tomcat</a> - Robust all-round server for Servlet and JSP.</li><li><a href="http://tomee.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache TomEE</a> - Tomcat plus Java EE.</li><li><a href="http://www.eclipse.org/jetty/" target="_blank" rel="external nofollow noreferrer noopener">Jetty</a> - Lightweight, small server, often embedded in projects.</li><li><a href="https://developer.ibm.com/wasdev/" target="_blank" rel="external nofollow noreferrer noopener">WebSphere Liberty</a> - Lightweight, modular server developed by IBM.</li><li><a href="http://www.wildfly.org/" target="_blank" rel="external nofollow noreferrer noopener">WildFly</a> - Formerly known as JBoss and developed by Red Hat with extensive Java EE support.</li></ul><h2 id="Template-Engine"><a href="#Template-Engine" class="headerlink" title="Template Engine"></a>Template Engine</h2><p><em>Tools which substitute expressions in a template.</em></p><ul><li><a href="http://velocity.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Velocity</a> - Templates for HTML pages, emails or source code generation in general.</li><li><a href="http://freemarker.incubator.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">FreeMarker</a> - General templating engine without any heavyweight or opinionated dependencies.</li><li><a href="http://jknack.github.io/handlebars.java/" target="_blank" rel="external nofollow noreferrer noopener">Handlebars.java</a> - Logic-less and semantic Mustache templates.</li><li><a href="http://www.thymeleaf.org/" target="_blank" rel="external nofollow noreferrer noopener">Thymeleaf</a> - Aims to be a substitute for JSP and works for XML files in general.</li></ul><h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p><em>Tools that test from model to the view.</em></p><ul><li><a href="http://jmeter.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache JMeter</a> - Functional testing and performance measurements.</li><li><a href="http://arquillian.org/" target="_blank" rel="external nofollow noreferrer noopener">Arquillian</a> - Integration and functional testing platform for Java EE containers.</li><li><a href="http://joel-costigliola.github.io/assertj/" target="_blank" rel="external nofollow noreferrer noopener">AssertJ</a> - Fluent assertions that improve readability.</li><li><a href="https://github.com/jayway/awaitility" target="_blank" rel="external nofollow noreferrer noopener">Awaitility</a> - DSL for synchronizing asynchronous operations.</li><li><a href="http://citrusframework.org/" target="_blank" rel="external nofollow noreferrer noopener">Citrus</a> - Integration testing framework with focus on client- and serverside messaging.</li><li><a href="https://github.com/cucumber/cucumber-jvm" target="_blank" rel="external nofollow noreferrer noopener">Cucumber</a> - BDD testing framework.</li><li><a href="http://gatling.io/" target="_blank" rel="external nofollow noreferrer noopener">Gatling</a> - Load testing tool designed for ease of use, maintainability and high performance.</li><li><a href="http://www.icegreen.com/greenmail/" target="_blank" rel="external nofollow noreferrer noopener">GreenMail</a> - In-memory email server for integration testing. Supports SMTP, POP3 and IMAP including SSL.</li><li><a href="http://hamcrest.org/JavaHamcrest/" target="_blank" rel="external nofollow noreferrer noopener">Hamcrest</a> - Matchers that can be combined to create flexible expressions of intent.</li><li><a href="http://jgiven.org" target="_blank" rel="external nofollow noreferrer noopener">JGiven</a> - Developer-friendly BDD testing framework compatible with JUnit and TestNG.</li><li><a href="http://jmockit.org/" target="_blank" rel="external nofollow noreferrer noopener">JMockit</a> - Mocks static, final methods and more.</li><li><a href="http://junit.org/" target="_blank" rel="external nofollow noreferrer noopener">JUnit</a> - Common testing framework.</li><li><a href="https://pragmatists.github.io/JUnitParams/" target="_blank" rel="external nofollow noreferrer noopener">JUnitParams</a> - Creation of readable and maintainable parametrised tests.</li><li><a href="https://github.com/mockito/mockito" target="_blank" rel="external nofollow noreferrer noopener">Mockito</a> - Creation of test double objects in automated unit tests for the purpose of TDD or BDD.</li><li><a href="https://github.com/dreamhead/moco" target="_blank" rel="external nofollow noreferrer noopener">Moco</a> - Concise web services for stubs and mocks, Duke’s Choice Award 2013.</li><li><a href="http://pitest.org" target="_blank" rel="external nofollow noreferrer noopener">PIT</a> - Fast mutation-testing framework for evaluating fault-detection abilities of existing JUnit or TestNG test-suites.</li><li><a href="https://github.com/jayway/powermock" target="_blank" rel="external nofollow noreferrer noopener">PowerMock</a> -  Enables mocking of static methods, constructors, final classes and methods, private methods and removal of static initializers.</li><li><a href="https://github.com/jayway/rest-assured" target="_blank" rel="external nofollow noreferrer noopener">REST Assured</a> - Java DSL for easy testing for REST/HTTP services.</li><li><a href="http://selenide.org/" target="_blank" rel="external nofollow noreferrer noopener">Selenide</a> - Concise API around Selenium to write stable and readable UI tests.</li><li><a href="http://docs.seleniumhq.org/" target="_blank" rel="external nofollow noreferrer noopener">Selenium</a> - Portable software testing framework for web applications.</li><li><a href="http://docs.spockframework.org/" target="_blank" rel="external nofollow noreferrer noopener">Spock</a> - JUnit-compatible framework featuring an expressive Groovy-derived specification language.</li><li><a href="http://testng.org/" target="_blank" rel="external nofollow noreferrer noopener">TestNG</a> - Testing framework.</li><li><a href="https://github.com/google/truth" target="_blank" rel="external nofollow noreferrer noopener">Truth</a> - Google’s assertion and proposition framework.</li><li><a href="http://www.unitils.org/" target="_blank" rel="external nofollow noreferrer noopener">Unitils</a> - Modular testing library for unit and integration testing.</li><li><a href="http://wiremock.org/" target="_blank" rel="external nofollow noreferrer noopener">WireMock</a> - Stubbs and mocks web services.</li></ul><h2 id="Utility"><a href="#Utility" class="headerlink" title="Utility"></a>Utility</h2><p><em>Libraries which provide general utility functions.</em></p><ul><li><a href="http://commons.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Commons</a> - Provides different general purpose functions like configuration, validation, collections, file upload or XML processing.</li><li><a href="http://args4j.kohsuke.org/" target="_blank" rel="external nofollow noreferrer noopener">args4j</a> - Command line arguments parser.</li><li><a href="http://www.crashub.org" target="_blank" rel="external nofollow noreferrer noopener">CRaSH</a> - Provides a CLI for running processes.</li><li><a href="https://github.com/gephi/gephi/" target="_blank" rel="external nofollow noreferrer noopener">Gephi</a> - Cross-platform for visualizing and manipulating large graph networks.</li><li><a href="https://github.com/google/guava" target="_blank" rel="external nofollow noreferrer noopener">Guava</a> - Collections, caching, primitives support, concurrency libraries, common annotations, string processing, I/O, and so forth.</li><li><a href="http://jade.tilab.com/" target="_blank" rel="external nofollow noreferrer noopener">JADE</a> - Framework and environment for building and to debugging multi-agent systems.</li><li><a href="http://www.javatuples.org/" target="_blank" rel="external nofollow noreferrer noopener">javatuples</a> - Tuples.</li><li><a href="http://jcommander.org/" target="_blank" rel="external nofollow noreferrer noopener">JCommander</a> - Command line arguments parser.</li><li><a href="http://protege.stanford.edu/" target="_blank" rel="external nofollow noreferrer noopener">Protégé</a> - Provides an ontology editor and a framework to build knowledge-based systems.</li></ul><h2 id="Web-Crawling"><a href="#Web-Crawling" class="headerlink" title="Web Crawling"></a>Web Crawling</h2><p><em>Libraries that analyze the content of websites.</em></p><ul><li><a href="http://nutch.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Nutch</a> - Highly extensible, highly scalable web crawler for production environment.</li><li><a href="https://github.com/yasserg/crawler4j" target="_blank" rel="external nofollow noreferrer noopener">Crawler4j</a> - Simple and lightweight web crawler.</li><li><a href="http://jsoup.org/" target="_blank" rel="external nofollow noreferrer noopener">JSoup</a> - Scrapes, parses, manipulates and cleans HTML.</li></ul><h2 id="Web-Frameworks"><a href="#Web-Frameworks" class="headerlink" title="Web Frameworks"></a>Web Frameworks</h2><p><em>Frameworks that handle the communication between the layers of an web application.</em></p><ul><li><a href="http://tapestry.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Tapestry</a> - Component-oriented framework for creating dynamic, robust, highly scalable web applications.</li><li><a href="http://wicket.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache Wicket</a> - Component-based web application framework similar to Tapestry with a stateful GUI.</li><li><a href="http://www.gwtproject.org/" target="_blank" rel="external nofollow noreferrer noopener">Google Web Toolkit</a> - Toolbox which includes a Java-to-JavaScript compiler for client-side code, XML parser, API for RPC, JUnit integration, internationalization support and widgets for the GUI.</li><li><a href="https://grails.org/" target="_blank" rel="external nofollow noreferrer noopener">Grails</a> - Groovy framework with the aim to provide a highly productive environment by favoring convention over configuration, no XML and support for mixins.</li><li><a href="http://www.ninjaframework.org/" target="_blank" rel="external nofollow noreferrer noopener">Ninja</a> - Full stack web framework.</li><li><a href="http://www.pippo.ro/" target="_blank" rel="external nofollow noreferrer noopener">Pippo</a> - Small, highly modularized Sinatra-like framework.</li><li><a href="https://www.playframework.com/" target="_blank" rel="external nofollow noreferrer noopener">Play</a> - Uses convention over configuration, hot code reloading and display of errors in the browser.</li><li><a href="http://primefaces.org/" target="_blank" rel="external nofollow noreferrer noopener">PrimeFaces</a> - JSF framework which has a free and a commercial version with support. Provides several frontend components.</li><li><a href="http://ratpack.io/" target="_blank" rel="external nofollow noreferrer noopener">Ratpack</a> - Set of libraries that facilitate fast, efficient, evolvable and well tested HTTP applications.</li><li><a href="http://projects.spring.io/spring-boot/" target="_blank" rel="external nofollow noreferrer noopener">Spring Boot</a> - Microframework which simplifies the development of new Spring applications.</li><li><a href="http://projects.spring.io/spring-framework/" target="_blank" rel="external nofollow noreferrer noopener">Spring</a> - Provides many packages ranging from dependency injection to aspect-oriented programming to security.</li><li><a href="https://vaadin.com/" target="_blank" rel="external nofollow noreferrer noopener">Vaadin</a> - Event-driven framework build on top of GWT. Uses server-side architecture with Ajax on the client-side.</li></ul><h1 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h1><h2 id="Communities"><a href="#Communities" class="headerlink" title="Communities"></a>Communities</h2><p><em>Active discussions.</em></p><ul><li><a href="https://www.reddit.com/r/java" target="_blank" rel="external nofollow noreferrer noopener">r/java</a> - Subreddit for the Java community.</li><li><a href="http://stackoverflow.com/questions/tagged/java" target="_blank" rel="external nofollow noreferrer noopener">stackoverflow</a> - Question/answer platform.</li><li><a href="http://virtualjug.com/" target="_blank" rel="external nofollow noreferrer noopener">vJUG</a> - Virtual Java User Group.</li></ul><h2 id="Influential-Books"><a href="#Influential-Books" class="headerlink" title="Influential Books"></a>Influential Books</h2><p><em>Books that had a high impact and are still worth reading.</em></p><ul><li><a href="http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683" target="_blank" rel="external nofollow noreferrer noopener">Effective Java (2nd Edition)</a></li><li><a href="http://www.amazon.com/Java-Action-Lambdas-functional-style-programming/dp/1617291994/" target="_blank" rel="external nofollow noreferrer noopener">Java 8 in Action</a></li><li><a href="http://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601" target="_blank" rel="external nofollow noreferrer noopener">Java Concurrency in Practice</a></li><li><a href="http://www.amazon.com/Thinking-Java-Edition-Bruce-Eckel/dp/0131872486" target="_blank" rel="external nofollow noreferrer noopener">Thinking in Java</a></li></ul><h2 id="Podcasts"><a href="#Podcasts" class="headerlink" title="Podcasts"></a>Podcasts</h2><p><em>Something to listen to while programming.</em></p><ul><li><a href="http://virtualjug.com/podcast/" target="_blank" rel="external nofollow noreferrer noopener">The Java Council</a></li><li><a href="http://www.javaposse.com/" target="_blank" rel="external nofollow noreferrer noopener">The Java Posse</a> - Discontinued as of 02/2015.</li></ul><h2 id="Twitter"><a href="#Twitter" class="headerlink" title="Twitter"></a>Twitter</h2><p><em>Active accounts to follow. Descriptions from Twitter.</em></p><ul><li><a href="https://twitter.com/AdamBien/" target="_blank" rel="external nofollow noreferrer noopener">Adam Bien</a> - Freelancer: Author, JavaONE Rockstar Speaker, Consultant, Java Champion.</li><li><a href="https://twitter.com/shipilev" target="_blank" rel="external nofollow noreferrer noopener">Aleksey Shipilëv</a> - Performance Geek, Benchmarking Tzar, Concurrency Bug Hunter.</li><li><a href="https://twitter.com/agoncal/" target="_blank" rel="external nofollow noreferrer noopener">Antonio Goncalves</a> - Java Champion, JUG Leader, Devoxx France, Java EE 6/7, JCP, Author.</li><li><a href="https://twitter.com/arungupta/" target="_blank" rel="external nofollow noreferrer noopener">Arun Gupta</a> - Java Champion, JavaOne Rockstar, UG Leader, Devoxx4Kids-er, Red Hatter.</li><li><a href="https://twitter.com/BrianGoetz" target="_blank" rel="external nofollow noreferrer noopener">Brian Goetz</a> - Java Language Architect at Oracle.</li><li><a href="https://twitter.com/brunoborges" target="_blank" rel="external nofollow noreferrer noopener">Bruno Borges</a> - Product Manager/Java Jock at Oracle.</li><li><a href="https://twitter.com/edburns" target="_blank" rel="external nofollow noreferrer noopener">Ed Burns</a> - Consulting Member of the Technical Staff at Oracle.</li><li><a href="https://twitter.com/baeldung" target="_blank" rel="external nofollow noreferrer noopener">Eugen Paraschiv</a> - Author of the Spring Security Course.</li><li><a href="https://twitter.com/JavaFXpert" target="_blank" rel="external nofollow noreferrer noopener">James Weaver</a> - Java/JavaFX/IoT developer, author and speaker.</li><li><a href="https://twitter.com/Java_EE/" target="_blank" rel="external nofollow noreferrer noopener">Java EE</a> - Official Java EE Twitter account.</li><li><a href="https://twitter.com/Oraclejavamag" target="_blank" rel="external nofollow noreferrer noopener">Java Magazine</a> - Official Java Magazine account.</li><li><a href="https://twitter.com/javanetbuzz/" target="_blank" rel="external nofollow noreferrer noopener">Java.net</a> - Official Java.net account.</li><li><a href="https://twitter.com/java/" target="_blank" rel="external nofollow noreferrer noopener">Java</a> - Official Java Twitter account.</li><li><a href="https://twitter.com/javinpaul" target="_blank" rel="external nofollow noreferrer noopener">Javin Paul</a> - Well-known Java blogger.</li><li><a href="https://twitter.com/lukaseder" target="_blank" rel="external nofollow noreferrer noopener">Lukas Eder</a> - Founder and CEO Data Geekery (jOOQ).</li><li><a href="https://twitter.com/mariofusco" target="_blank" rel="external nofollow noreferrer noopener">Mario Fusco</a> - RedHatter, JUG coordinator, frequent speaker and author.</li><li><a href="https://twitter.com/mreinhold" target="_blank" rel="external nofollow noreferrer noopener">Mark Reinhold</a> - Chief Architect, Java Platform Group, Oracle.</li><li><a href="https://twitter.com/myfear" target="_blank" rel="external nofollow noreferrer noopener">Markus Eisele</a> - Java EE evangelist, Red Hat.</li><li><a href="https://twitter.com/karianna" target="_blank" rel="external nofollow noreferrer noopener">Martijn Verburg</a> - London JUG co-leader, speaker, author, Java Champion and much more.</li><li><a href="https://twitter.com/mjpt777" target="_blank" rel="external nofollow noreferrer noopener">Martin Thompson</a> - Pasty faced performance gangster.</li><li><a href="https://twitter.com/OpenJDK" target="_blank" rel="external nofollow noreferrer noopener">OpenJDK</a> - Official OpenJDK account.</li><li><a href="https://twitter.com/PeterLawrey" target="_blank" rel="external nofollow noreferrer noopener">Peter Lawrey</a> - Peter Lawrey, Java performance expert.</li><li><a href="https://twitter.com/reza_rahman" target="_blank" rel="external nofollow noreferrer noopener">Reza Rahman</a> - Java EE/GlassFish/WebLogic evangelist, author, speaker, open source hacker.</li><li><a href="https://twitter.com/radcortez" target="_blank" rel="external nofollow noreferrer noopener">Roberto Cortez</a> - Java EE/JPA expert, speaker, open source.</li><li><a href="https://twitter.com/sjmaple" target="_blank" rel="external nofollow noreferrer noopener">Simon Maple</a> - Java Champion, virtualJUG founder, LJC leader, RebelLabs author.</li><li><a href="https://twitter.com/jodastephen" target="_blank" rel="external nofollow noreferrer noopener">Stephen Colebourne</a> - Java Champion, speaker.</li><li><a href="https://twitter.com/kablosna" target="_blank" rel="external nofollow noreferrer noopener">Tim Boudreau</a> - Author and NetBeans guru.</li><li><a href="https://twitter.com/trisha_gee" target="_blank" rel="external nofollow noreferrer noopener">Trisha Gee</a> - Java Champion and speaker.</li></ul><h2 id="Websites"><a href="#Websites" class="headerlink" title="Websites"></a>Websites</h2><p><em>Sites to read.</em></p><ul><li><a href="https://android-arsenal.com" target="_blank" rel="external nofollow noreferrer noopener">Android Arsenal</a></li><li><a href="http://google-styleguide.googlecode.com/svn/trunk/javaguide.html" target="_blank" rel="external nofollow noreferrer noopener">Google Java Style</a></li><li><a href="http://www.infoq.com/" target="_blank" rel="external nofollow noreferrer noopener">InfoQ</a></li><li><a href="http://www.javacodegeeks.com/" target="_blank" rel="external nofollow noreferrer noopener">Java Code Geeks</a></li><li><a href="http://blog.jooq.org/" target="_blank" rel="external nofollow noreferrer noopener">Java, SQL, and jOOQ</a></li><li><a href="https://home.java.net/" target="_blank" rel="external nofollow noreferrer noopener">Java.net</a></li><li><a href="https://dzone.com/java-jdk-development-tutorials-tools-news" target="_blank" rel="external nofollow noreferrer noopener">Javalobby</a></li><li><a href="http://www.javaworld.com/" target="_blank" rel="external nofollow noreferrer noopener">JavaWorld</a></li><li><a href="https://jaxenter.com/" target="_blank" rel="external nofollow noreferrer noopener">JAXenter</a></li><li><a href="http://zeroturnaround.com/rebellabs/" target="_blank" rel="external nofollow noreferrer noopener">RebelLabs</a></li><li><a href="http://www.javaspecialists.eu/archive/archive.jsp" target="_blank" rel="external nofollow noreferrer noopener">The Java Specialist’ Newsletter</a></li><li><a href="http://blog.takipi.com/" target="_blank" rel="external nofollow noreferrer noopener">The Takipi Blog</a></li><li><a href="http://www.theserverside.com/" target="_blank" rel="external nofollow noreferrer noopener">TheServerSide.com</a></li><li><a href="http://www.thoughts-on-java.org/" target="_blank" rel="external nofollow noreferrer noopener">Thoughts On Java</a></li><li><a href="http://vanillajava.blogspot.ch/" target="_blank" rel="external nofollow noreferrer noopener">Vanilla Java</a></li><li><a href="http://vladmihalcea.com/" target="_blank" rel="external nofollow noreferrer noopener">Vlad Mihalcea on Hibernate</a></li><li><a href="https://www.voxxed.com/" target="_blank" rel="external nofollow noreferrer noopener">Voxxed</a></li></ul><h1 id="Contributing"><a href="#Contributing" class="headerlink" title="Contributing"></a>Contributing</h1><p>Contributions are very welcome!</p><p>Please have a look at <a href="https://github.com/akullpp/awesome-java/blob/master/CONTRIBUTING.md" target="_blank" rel="external nofollow noreferrer noopener">CONTRIBUTING</a> for guidelines.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.importnew.com/14429.html&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;http://www.importnew.com/14429.
      
    
    </summary>
    
    
      <category term="Books" scheme="http://notes.seirhsiao.com/categories/Books/"/>
    
    
      <category term="翻译" scheme="http://notes.seirhsiao.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="java" scheme="http://notes.seirhsiao.com/tags/java/"/>
    
      <category term="资源" scheme="http://notes.seirhsiao.com/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Jekyll主题收藏</title>
    <link href="http://notes.seirhsiao.com/posts/845ade14/"/>
    <id>http://notes.seirhsiao.com/posts/845ade14/</id>
    <published>2019-02-03T07:39:16.000Z</published>
    <updated>2019-12-07T08:51:16.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2014-02-23"><a href="#2014-02-23" class="headerlink" title="2014/02/23"></a>2014/02/23</h2><p>从wordpress都现在的jekyll，博客采用的平台及其主题一直处于变更状态。一方面本小子喜爱折腾，另一方面，随着浏览的网页多了，本小子审美似乎也在不断的提升。从开始接触jekyll都现在正式敲定主题，本小子在寻找主题的过程了，找到了一些简约、大方、美观的jekyll主题，在这里做一下记录，收藏一下,某天或许要修改模板了，或许可以直接在这些模板的基础上改进。</p><hr><h3 id="项目模板"><a href="#项目模板" class="headerlink" title="项目模板"></a>项目模板</h3><p><a href="http://jekyllrb.com/" target="_blank" rel="external nofollow noreferrer noopener">Jeklly</a>官网本身采用的就是Jekyll,设计大方美观，不过我不怎么喜欢它页面的配置。灰黑配色虽然很适合在编程时可以护眼，但作为一个网页配色，灰黑我会很慎用它们作为主配色。GitHub上fork该repository的人很多啊。<br><img alt data-src="http://ww3.sinaimg.cn/large/ad9597a3gw1edt9j58knhj21070iydjq.jpg" class="lazyload"><br>对应中文项目模板为<a href="http://jekyllcn.com/" target="_blank" rel="external nofollow noreferrer noopener">jekyllcn</a><br>![2014-04-16 15_40_35-Jekyllcn](/images/posts/2014-04-16 15_40_35-Jekyllcn.png)</p><hr><h3 id="公司模板"><a href="#公司模板" class="headerlink" title="公司模板"></a>公司模板</h3><ol><li><p>mmistakes/made-mistakes，演示<a href="http://mademistakes.com/" target="_blank" rel="external nofollow noreferrer noopener">主页</a>，稍微改改应该可以直接作为公司用的模板。<br><img alt data-src="http://ww2.sinaimg.cn/large/ad9597a3gw1edt69ng30oj213m0lraep.jpg" class="lazyload"></p></li><li><p><a href="http://libgit2.github.com/" target="_blank" rel="external nofollow noreferrer noopener">libgit2</a><br>![2014-04-15 08_50_20-libgit2](/images/posts/2014-04-15 08_50_20-libgit2.png)</p></li></ol><hr><h3 id="学术主页模板"><a href="#学术主页模板" class="headerlink" title="学术主页模板"></a>学术主页模板</h3><ol><li>jansel.github.io，演示<a href="http://jasonansel.com/" target="_blank" rel="external nofollow noreferrer noopener">主页</a> 页面元素简约、可以作为学术主页模板<br><img alt data-src="http://ww4.sinaimg.cn/large/ad9597a3jw1edupinefcpj213z0lmdl9.jpg" class="lazyload"></li></ol><hr><h3 id="博客模板"><a href="#博客模板" class="headerlink" title="博客模板"></a>博客模板</h3><ol><li>mmistakes/so-simple-theme，演示<a href="http://mmistakes.github.io/so-simple-theme/" target="_blank" rel="external nofollow noreferrer noopener">主页</a> 很简约大方的一个博客模板。<br><img alt data-src="http://ww3.sinaimg.cn/large/ad9597a3gw1edt6dvwlamj213o0lqwgt.jpg" class="lazyload"></li><li>mmistakes/hpstr-jekyll-theme，演示<a href="http://mmistakes.github.io/hpstr-jekyll-theme/" target="_blank" rel="external nofollow noreferrer noopener">主页</a> 也是<a href="https://github.com/mmistakes" target="_blank" rel="external nofollow noreferrer noopener">mmistakes</a>设计的，很喜欢他的作品，堪称艺术品。<br><img alt data-src="http://ww1.sinaimg.cn/large/ad9597a3gw1edt6har9zzj213l0lowim.jpg" class="lazyload"></li><li>mmistakes/minimal-mistakes，演示<a href="http://mmistakes.github.io/minimal-mistakes/" target="_blank" rel="external nofollow noreferrer noopener">主页</a> 不解释，直接看网页截图。<br><img alt data-src="http://ww4.sinaimg.cn/large/ad9597a3gw1edt6jgv94fj213l0logva.jpg" class="lazyload"></li><li>aigarsdz/brume，演示<a href="http://dzerviniks.com/" target="_blank" rel="external nofollow noreferrer noopener">主页</a>,很简洁美观的一个博客主题，也是我现在博客用的模板。前段时间想用该模板在我的<code>master</code>下简历博客分支，结果发现了这个模板还有点问题，然后在<code>brume</code>向aigarsdz提交了个问题，没想到aigarsdz很快就回了，很nice。<br><img alt data-src="http://ww2.sinaimg.cn/large/ad9597a3jw1edt9bryyrfj21070j0dii.jpg" class="lazyload"></li><li>Github <a href="https://github.com/likebeta" target="_blank" rel="external nofollow noreferrer noopener">likebeta</a>，演示<a href="http://blog.ixxoo.me/" target="_blank" rel="external nofollow noreferrer noopener">主页</a>,页面大方美观，还用了豆瓣API把豆瓣上的个人书单列出了，页面配色也很不错。<br><img alt data-src="http://ww2.sinaimg.cn/large/ad9597a3gw1edt8x5x3mrj21070iyn13.jpg" class="lazyload"></li><li>tswicegood/travisswicegood.com，演示<a href="http://travisswicegood.com/" target="_blank" rel="external nofollow noreferrer noopener">主页</a>,第5个主题跟这个很相似。<br><img alt data-src="http://ww2.sinaimg.cn/large/ad9597a3gw1edupyosyaaj213z0lkn3k.jpg" class="lazyload"></li><li>Github <a href="https://github.com/luolinjia" target="_blank" rel="external nofollow noreferrer noopener">luolinjia</a>,设计得很不错的一个博客，作者写作很勤啊。<a href="http://ideex.name/" target="_blank" rel="external nofollow noreferrer noopener">主页</a><br><img alt data-src="http://ww4.sinaimg.cn/large/ad9597a3jw1edt934q8g5j21060ixgov.jpg" class="lazyload"></li><li>webfrogs.github.com，演示<a href="http://webfrogs.me/" target="_blank" rel="external nofollow noreferrer noopener">主页</a>,文章排版很好看，之前用过一段时间，后来觉得导航没涉及好，就换成别的了。<br><img alt data-src="http://ww4.sinaimg.cn/large/ad9597a3gw1eduptez21dj213z0lldja.jpg" class="lazyload"></li><li>mojombo/mojombo.github.io，演示<a href="http://tom.preston-werner.com/" target="_blank" rel="external nofollow noreferrer noopener">主页</a>，简约风。<br><img alt data-src="http://ww4.sinaimg.cn/large/ad9597a3gw1eduq24i2lsj213v0lmwig.jpg" class="lazyload"></li><li>liberize.github.com，演示<a href="http://liberize.me" target="_blank" rel="external nofollow noreferrer noopener">主页</a> 看着还行。<br><img alt data-src="http://ww2.sinaimg.cn/large/ad9597a3gw1eduq8nv6zcj213z0lktfg.jpg" class="lazyload"></li><li><a href="https://github.com/corincole/corincole.com" target="_blank" rel="external nofollow noreferrer noopener">corincole.com</a>,演示<a href="http://www.corincole.com" target="_blank" rel="external nofollow noreferrer noopener">主页</a></li><li>[lazywei.github.io]，演示<a href="http://lazywei.github.io" target="_blank" rel="external nofollow noreferrer noopener">主页</a>，简约风。</li><li>hexo-theme-raytaylorism <a href="http://raytaylorlin.com/" target="_blank" rel="external nofollow noreferrer noopener">Demo</a>。<br>![2014-04-16 15_31_54-Ray-Lin’s world](/images/posts/2014-04-16 15_31_54-Ray-Lin’s world.png)</li><li><a href="http://xguox.github.io/" target="_blank" rel="external nofollow noreferrer noopener">xguox.github.com</a>。 </li><li><a href="http://webfrogs.me/" target="_blank" rel="external nofollow noreferrer noopener">webfrogs</a>,跟<a href="http://yihui.name/cn/" target="_blank" rel="external nofollow noreferrer noopener">yihui.name</a>的一样。</li><li><a href="http://macduff.github.io/" target="_blank" rel="external nofollow noreferrer noopener">macduff.github.com</a>,原来为自己配置MathJax是找到的一个博客，容器居中应该更好看。<br>![2014-04-16 15_48_13-Liquid-Inertia](/images/posts/2014-04-16 15_48_13-Liquid-Inertia.png)</li><li><a href="http://www.poised-flw.com" target="_blank" rel="external nofollow noreferrer noopener">Poised-flw-blog</a>,<a href="https://github.com/luofei2011/Poised-flw-blog" target="_blank" rel="external nofollow noreferrer noopener">Github</a>。</li></ol><hr><p>补充三个寻找模板的地方：</p><ol><li><a href="http://jekyllthemes.org/" target="_blank" rel="external nofollow noreferrer noopener">Jekyll Theme</a>官方提供的主题模板，上面有很多好看的模板供选择。</li><li><a href="https://github.com/jekyll/jekyll/wiki/Sites" target="_blank" rel="external nofollow noreferrer noopener">Jekyll wiki site</a>,表单上列举了很多采用Jekyll模板的网站，可以在这里面找别人的模板，fork过来就可以用了。</li><li><a href="http://www.zhanxin.info/themes.html" target="_blank" rel="external nofollow noreferrer noopener">掌心</a>,在该页，作者提供了几个自己制作的Jekyll主题，其中有几个本小子很喜欢。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2014-02-23&quot;&gt;&lt;a href=&quot;#2014-02-23&quot; class=&quot;headerlink&quot; title=&quot;2014/02/23&quot;&gt;&lt;/a&gt;2014/02/23&lt;/h2&gt;&lt;p&gt;从wordpress都现在的jekyll，博客采用的平台及其主题一直处于变更
      
    
    </summary>
    
    
      <category term="Jekyll" scheme="http://notes.seirhsiao.com/categories/Jekyll/"/>
    
    
  </entry>
  
  <entry>
    <title>Jekyll写作技巧小札</title>
    <link href="http://notes.seirhsiao.com/posts/845ade15/"/>
    <id>http://notes.seirhsiao.com/posts/845ade15/</id>
    <published>2019-02-03T07:39:16.000Z</published>
    <updated>2019-12-07T08:51:43.999Z</updated>
    
    <content type="html"><![CDATA[<p>今天本小子又发现新大陆了，<a href="http://jekyllrb.com/" target="_blank" rel="external nofollow noreferrer noopener">jekyllrb</a>,对应的中文文档为<a href="http://jekyllcn.com/" target="_blank" rel="external nofollow noreferrer noopener">jekyllcn</a>,感谢这帮帅小伙助力开源，世界因开源精神更美好。本小子通读了翻译的文档，发觉关于Jekyll的很多知识点本小子都没注意到，所以对那份文档做些读后笔记，方便需用之时查询。</p><hr><h2 id="代码编辑"><a href="#代码编辑" class="headerlink" title="代码编辑"></a>代码编辑</h2><p><strong>代码高亮</strong><br>本小子之前在博文里贴整段代码时采用的都是三个点加语言类型，今天读文档时，发觉还可以采用Liquid 标记：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{% highlight text %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{%<span class="built_in"> raw </span>%}{% highlight python %}{% endraw %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">def process_image(imagename,resultname,<span class="attribute">params</span>=<span class="string">"--edge-thresh 10 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="string">                  --peak-thresh 5"</span>):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="string">""</span><span class="string">" process an image and save the results in a file"</span><span class="string">""</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> imagename[-3:] != <span class="string">'pgm'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        #create a pgm file</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        im = Image.open(imagename).convert(<span class="string">'L'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        im.save(<span class="string">'tmp.pgm'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        imagename = <span class="string">'tmp.pgm'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    cmmd = str(<span class="string">"sift "</span>+imagename+<span class="string">" --output="</span>+resultname+</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                <span class="string">" "</span>+params)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    os.system(cmmd)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="builtin-name">print</span> <span class="string">'processed'</span>, imagename, <span class="string">'to'</span>, resultname</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">{%<span class="built_in"> raw </span>%}{% endhighlight %}{% endraw %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">{% endhighlight %}</span></pre></td></tr></tbody></table></figure><p>输出的结果为：</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{% <span class="keyword">highlight</span> <span class="keyword">python</span> %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">def process_image(imagename,resultname,params=<span class="comment">"--edge-thresh 10 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">                  --peak-thresh <span class="number">5</span><span class="comment">"):</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="string">""</span><span class="string">" process an image and save the results in a file"</span><span class="string">""</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> imagename[-<span class="number">3</span>:] != <span class="string">'pgm'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        #create <span class="keyword">a</span> pgm <span class="keyword">file</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">im</span> = Image.<span class="keyword">open</span>(imagename).convert(<span class="string">'L'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">im</span>.save(<span class="string">'tmp.pgm'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        imagename = <span class="string">'tmp.pgm'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    cmmd = str(<span class="string">"sift "</span>+imagename+<span class="string">" --output="</span>+resultname+</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                <span class="string">" "</span>+params)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    os.<span class="built_in">system</span>(cmmd)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">print</span> <span class="string">'processed'</span>, imagename, <span class="string">'to'</span>, resultname</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">{% endhighlight %}</span></pre></td></tr></tbody></table></figure><p><strong>代码显示行数</strong><br>要想在代码前面显示代码的行数，可以添加关键字<code>linenos</code>,这样完整的高亮开始标记将会是:</p><figure class="highlight django"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name">highlight</span> text %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name">raw</span> %}</span><span class="template-tag">{% <span class="name">highlight</span> python linenos %}</span><span class="template-tag">{% <span class="name">endraw</span> %}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name">endhighlight</span> %}</span></span></pre></td></tr></tbody></table></figure><p><strong>代码片段包含类Liquid语法</strong></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{% raw %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>{% block title %}{% endblock %}<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        {% block content %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        {% endblock %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">{% endraw %}</span></pre></td></tr></tbody></table></figure><p>这是在<a href="http://yuanyong.org/blog/use-django-bulding-a-blog-three.html" target="_blank" rel="external nofollow noreferrer noopener">Django开发简易博客三</a>中遇到的一个问题，由于上面代码中含类Liquid语法，写完push上去后，github一直发邮件报错，查阅资料后发觉是上面代码片段中包含有类Liquid语法。可以通过加rawtag解决这个问题。</p><p>此外，像<a href="http://yuanyong.org/blog/use-django-bulding-a-blog-three.html" target="_blank" rel="external nofollow noreferrer noopener">Django开发简易博客三</a>中{{STATIC_URL}}也要用raw来进行屏蔽。</p><hr><h2 id="预定义的全局变量"><a href="#预定义的全局变量" class="headerlink" title="预定义的全局变量"></a>预定义的全局变量</h2><p><code>permalink</code>：如果你需要让你的博客中的URL地址不同于默认值 <code>/year/month/day/title.html</code> 这样，那么当你设置这个变量后，就会使用最终的URL地址。本小子<code>HOME</code>和文章的头部已经有时间戳了，所以再<code>url</code>里显得有点多余，而且本小子比较喜欢简洁的<code>url</code>,所以本小子的博客采用的是：<code>permalink: /:title.html</code>。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天本小子又发现新大陆了，&lt;a href=&quot;http://jekyllrb.com/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;jekyllrb&lt;/a&gt;,对应的中文文档为&lt;a href=&quot;htt
      
    
    </summary>
    
    
      <category term="Jekyll" scheme="http://notes.seirhsiao.com/categories/Jekyll/"/>
    
    
  </entry>
  
  <entry>
    <title>Ruby 实现各种排序查找算法</title>
    <link href="http://notes.seirhsiao.com/posts/f5f84c58/"/>
    <id>http://notes.seirhsiao.com/posts/f5f84c58/</id>
    <published>2019-02-03T07:39:16.000Z</published>
    <updated>2019-12-08T13:50:23.463Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#bubble">冒泡排序</a></li><li><a href="#straight_insertion">直接插入排序</a></li><li><a href="#shell">希尔排序</a></li><li><a href="#quickly">快速排序</a></li><li><a href="#straight_select">直接选择排序</a></li><li><a href="#heap">堆排序</a></li></ul><p>之前在微博上看到旧金山大学的David Galles教授用HTML5+js技术分别演示了6中数学排序算法的基本原理，便想用ruby分别实现这六种算法。</p><p><a href="http://www.webhek.com/misc/comparison-sort/" target="_blank" rel="external nofollow noreferrer noopener">用HTML5实现的各种排序算法的动画比较</a></p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p><a href="#bubble">冒泡排序</a></p><p>算法原理：</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#冒泡排序的算法复杂度为O(n^2)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(list)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    list.each_index <span class="keyword">do</span> <span class="params">|index|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        (list.length - index - <span class="number">1</span>).times <span class="keyword">do</span> <span class="params">|e|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> list[e] &gt; list[e + <span class="number">1</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">                list[e], list[e + <span class="number">1</span>] = list[e + <span class="number">1</span>], list[e]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure><h4 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h4><p><a href="#straight_insertion">直接插入排序</a></p><p>算法原理：</p><p>第一趟比较前两个数，然后把第二个数按大小插入到有序表中； 第二趟把第三个数据与前两个数从前向后扫描，把第三个数按大小插入到有序表中；依次进行下去，进行了(n-1)趟扫描以后就完成了整个排序过程。</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">straight_insertion_sort</span><span class="params">(list)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  (<span class="number">1</span>...list.length).each <span class="keyword">do</span> <span class="params">|i|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    temp = list[i]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    (<span class="number">0</span>...i).each { <span class="params">|j|</span> list[j], list[i] = list[i], list[j] <span class="keyword">if</span> list[j] &gt;= temp }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  list</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure><p>直接插入排序属于稳定的排序，最坏时间复杂性为O(n^2)，空间复杂度为O(1)。</p><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p><a href="#shell">希尔排序</a></p><p>算法原理：</p><p>排序过程：先取一个正整数d1&lt;n，把所有序号相隔d1的数组元素放一组，组内进行直接插入排序；然后取d2&lt;d1，重复上述分组和排序操作；直至di=1，即所有记录放进一个组中排序为止。</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(list)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  d = list.length</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">while</span> d &gt; <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    d = d / <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   (<span class="number">0</span>...list.length).each <span class="keyword">do</span> <span class="params">|i|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    (<span class="number">0</span>...list.length-d).step(d) <span class="keyword">do</span> <span class="params">|j|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">     <span class="keyword">if</span> list[j] &gt;= list[j+d]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      list[j], list[j+d] = list[j+d], list[j]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">     <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">break</span> <span class="keyword">if</span> d == <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  list</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure><p>希尔排序的时间复杂度与增量序列的选取有关, 希尔排序的时间复杂度与增量序列的选取有关.</p><p>###快速排序<br><a href="#quickly">快速排序</a></p><p>算法原理：<br>快速排序是C.R.A.Hoare于1962年提出的一种划分交换排序。它采用了一种分治的策略，通常称其为分治法(Divide-and-ConquerMethod)。<br>步骤：</p><ol><li>从数列中挑出一个元素，称为 “基准”（pivot），</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ol><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#快速排序的平均时间复杂度为O(nlogn)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quicksort</span><span class="params">(list)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> list <span class="keyword">if</span> list.length &lt;= <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    pivot = list.pop</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    less    <span class="params">||</span>= []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    greater <span class="params">||</span>= []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    (list - [pivot]).each <span class="keyword">do</span> <span class="params">|element|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        element &lt; pivot ? less &lt;&lt; element : greater &lt;&lt; element</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    quicksort(less) + [pivot] + quicksort(greater)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure><p>以上方法可以做进一步的简化：</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quicksort</span><span class="params">(list)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> list <span class="keyword">if</span> list.length &lt;= <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    pivot = list.pop</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#partition是一个迭代器，它返回两个数组，第一个数组包含了代码块中返回true的元素，第二个数组包含剩下的</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    less, greater = list.partition { <span class="params">|e|</span> e &lt; pivot }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    quicksort(less) + [pivot] + quicksort(greater)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure><h3 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h3><p><a href="#straight_select">直接选择排序</a></p><h4 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h4><p>第一次从R[0]<del>R[n-1]中选取最小值，与R[0]交换，第二次从R[1]</del>R[n-1]中选取最小值，与R[1]交换，….，第i次从R[i-1]<del>R[n-1]中选取最小值，与R[i-1]交换，…..，第n-1次从R[n-2]</del>R[n-1]中选取最小值，与R[n-2]交换，总共通过n-1次，得到一个按排序码从小到大排列的有序序列</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">straight_select_sort</span><span class="params">(array)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> array <span class="keyword">if</span> array.length == <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="number">0</span>...array.length).each <span class="keyword">do</span> <span class="params">|i|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    min, index = array[i], i</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    (i...array.length).each { <span class="params">|j|</span> min, index = array[j], j <span class="keyword">if</span> array[j] &lt; min }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    array[i], array[index] = array[index] , array[i]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  array</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure><p>平均时间复杂度为O(n^2)</p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p><a href="#heap">堆排序</a></p><p>堆排序(Heapsort)是指利用堆积树（堆）这种数据结构所设计的一种排序算法，它是选择排序的一种。可以利用数组的特点快速定位指定索引的元素。堆分为大根堆和小根堆，是完全二叉树。</p><p>完全二叉树：除最后一层外，每一层上的节点数均达到最大值；在最后一层上只缺少右边的若干结点。</p><p>堆（二叉堆）：二叉堆的数据结构是一个可以被看成是完全二叉树（或近似完全二叉树）的数组，二叉树的每一个节点都对应了数组中的一个元素。</p><p>大根堆和小根堆：根结点（亦称为堆顶）的关键字是堆里所有结点关键字中最小者的堆称为小根堆，又称最小堆。根结点（亦称为堆顶）的关键字是堆里所有结点关键字中最大者，称为大根堆，又称最大堆。</p><p>将数组转化为堆：</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_min_heap</span><span class="params">(arr)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   (arr.length/<span class="number">2</span>-<span class="number">1</span>).downto(<span class="number">0</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     puts i</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     min_heap_fixdown(arr, i, arr.length)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   arr</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">min_heap_fixdown</span><span class="params">(arr, i, n)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">   left = <span class="number">2</span> * i + <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">while</span>(left &lt; n)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">     <span class="keyword">if</span> left + <span class="number">1</span> &lt; n <span class="keyword">and</span> arr[left] &gt; arr[left + <span class="number">1</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">       left += <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">     <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">     <span class="keyword">if</span> arr[left] &lt; arr[i]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">      arr[left], arr[i] = arr[i], arr[left]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">      i = left</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">      left = <span class="number">2</span> * i + <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">     <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">break</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">     <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">puts make_min_heap([<span class="number">40</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">15</span>, <span class="number">1</span>]).inspect =&gt; [<span class="number">1</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">15</span>, <span class="number">40</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">puts make_min_heap([<span class="number">9</span>,<span class="number">12</span>,<span class="number">17</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">20</span>,<span class="number">60</span>,<span class="number">65</span>,<span class="number">4</span>,<span class="number">19</span>]).inspect =&gt; [<span class="number">4</span>, <span class="number">9</span>, <span class="number">17</span>, <span class="number">12</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">65</span>, <span class="number">30</span>, <span class="number">50</span>]</span></pre></td></tr></tbody></table></figure><p>堆排序：</p><p>首先可以看到堆建好之后堆中第0个数据是堆中最小的数据。取出这个数据再执行下堆的删除操作。这样堆中第0个数据又是堆中最小的数据，重复上述步骤直至堆中只有一个数据时就直接取出这个数据。由于堆也是用数组模拟的，故堆化数组后，第一次将A[0]与A[n - 1]交换，再对A[0…n-2]重新恢复堆。第二次将A[0]与A[n – 2]交换，再对A[0…n - 3]重新恢复堆，重复这样的操作直到A[0]与A[1]交换。由于每次都是将最小的数据并入到后面的有序区间，故操作完成后整个数组就有序了。有点类似于直接选择排序。</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(arr)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   (arr.length - <span class="number">1</span>).downto(<span class="number">0</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     arr[i], arr[<span class="number">0</span>] = arr[<span class="number">0</span>], arr[i]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     min_heap_fixdown(arr, <span class="number">0</span>, i)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   arr</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">puts heap_sort(make_min_heap([<span class="number">9</span>,<span class="number">12</span>,<span class="number">17</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">20</span>,<span class="number">60</span>,<span class="number">65</span>,<span class="number">4</span>,<span class="number">19</span>])).inspect =&gt; [<span class="number">65</span>, <span class="number">60</span>, <span class="number">50</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">19</span>, <span class="number">17</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">4</span>]</span></pre></td></tr></tbody></table></figure><p>注意使用最小堆排序后是递减数组，要得到递增数组，可以使用最大堆。</p><p>堆排序的时间复杂度为O(NlogN)</p><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><h4 id="算法要求"><a href="#算法要求" class="headerlink" title="算法要求"></a>算法要求</h4><ol><li>必须采用顺序存储结构；</li><li>数组必须是有序的；</li></ol><h4 id="算法原理-1"><a href="#算法原理-1" class="headerlink" title="算法原理"></a>算法原理</h4><p>折半查找法也称为二分查找法，它充分利用了元素间的次序关系，采用分治策略，可在最坏的情况下用O(log n)完成搜索任务。它的基本思想是，将n个元素分成个数大致相同的两半，取a[n/2]与欲查找的x作比较，如果x=a[n/2]则找到x，算法终止。如 果x&lt;a[n/2]，则我们只要在数组a的左半部继续搜索x（这里假设数组元素呈升序排列）。如果x&gt;a[n/2]，则我们只要在数组a的右 半部继续搜索x。</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(list, len, key)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    left, right = <span class="number">0</span>, len - <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> left &lt;= right</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        mid = (left + right) &gt;&gt; <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> list[mid] == key</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> mid</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">elsif</span> list[mid] &gt; key</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            right = mid -<span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            left = mid + <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      sort
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://notes.seirhsiao.com/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>linux 常用命令</title>
    <link href="http://notes.seirhsiao.com/posts/58a41d08/"/>
    <id>http://notes.seirhsiao.com/posts/58a41d08/</id>
    <published>2019-02-03T07:39:16.000Z</published>
    <updated>2019-12-07T09:06:33.267Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ps-产看当前进程状态"><a href="#ps-产看当前进程状态" class="headerlink" title="ps 产看当前进程状态"></a>ps 产看当前进程状态</h4><ul><li><code>ps -</code> :显示所有进程，等同于<code>-e</code></li><li><code>ps -u uid or username</code> :选择有效的用户id或者是用户名</li></ul><h4 id="chown-更改指定文件的拥有者群组"><a href="#chown-更改指定文件的拥有者群组" class="headerlink" title="chown 更改指定文件的拥有者群组"></a>chown 更改指定文件的拥有者群组</h4><blockquote><p><code>chown</code> [选项]… [所有者][:[组]] 文件…</p></blockquote><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">chown user:group log.txt //更改文件拥有者和群组</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">chown user log.txt    //更改文件拥有者</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">chown :group log.txt //只更改文件群组</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">// -R: 改变指定目录以及其子目录下的所有文件的拥有者和群组</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">// -v: 显示详细信息</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">chown -R -v user:group <span class="built_in">log</span></span></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      linux
    
    </summary>
    
    
      <category term="Linux" scheme="http://notes.seirhsiao.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Mysql 学习</title>
    <link href="http://notes.seirhsiao.com/posts/92d20c8/"/>
    <id>http://notes.seirhsiao.com/posts/92d20c8/</id>
    <published>2019-02-03T07:39:16.000Z</published>
    <updated>2019-12-08T14:11:06.177Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、连接Mysql"><a href="#1、连接Mysql" class="headerlink" title="1、连接Mysql"></a>1、连接Mysql</h3><p><strong>格式：</strong>  <code>mysql -h主机地址 -u用户名 －p用户密码</code></p><ol><li>连接到本机上的MYSQL。<br>首先打开DOS窗口，然后进入目录mysql\bin，再键入命令<code>mysql -u root -p</code>，回车后提示你输密码.注意用户名前可以有空格也可以没有空格，但是密码前必须没有空格，否则让你重新输入密码。<br><img alt="01" data-src="/static/images/mysql/01.webp" class="lazyload"></li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span></pre></td></tr></tbody></table></figure><p>如果刚安装好MYSQL，超级用户root是没有密码的，故直接回车即可进入到MYSQL中了，MYSQL的提示符是： <code>mysql&gt;</code></p><ol start="2"><li><p>连接到远程主机上的MYSQL。假设远程主机的IP为：<code>110.110.110.110</code>，用户名为<code>root</code>,密码为<code>123456</code>。则键入以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql -h110.110.110.110 -u root -p 123456; <span class="comment">#（注:u与root之间可以不用加空格，其它也一样）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456 -h127.0.0.1 -P3306</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># -h 指定远程mysql数据库ip</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># -P 指定mysql端口号</span></span></pre></td></tr></tbody></table></figure></li><li><p>通过socket连接：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456 -S/tmp/mysql.sock //只适合在本机</span></pre></td></tr></tbody></table></figure></li></ol><p><strong>连接mysql后操作一些命令：</strong><br> <code>mysql -uroot -p123456 -e "show databases"</code>//-e选项后可以跟一些操作命令，多用在shell脚本中。</p><p><img alt="img" data-src="https://pic4.zhimg.com/80/v2-93fadd7d638c35065172997b1641abb7_hd.jpg" class="lazyload"></p><ol start="4"><li>退出MYSQL命令： <code>exit</code> （回车）<br><img alt="02" data-src="/static/images/mysql/02.webp" class="lazyload"></li></ol><h3 id="2、修改密码"><a href="#2、修改密码" class="headerlink" title="2、修改密码"></a>2、修改密码</h3><ol><li><p>更改mysql的root账户密码：<br>mysql中root账户和系统root不是一个账户</p><ul><li><p>1.1 更改环境变量PATH，增加mysql绝对路径<br>由于mysql安装目录为<code>/usr/local/mysql/</code>，所以系统不能直接使用mysql，需把<code>/usr/local/mysql/bin/</code>目录加入环境变量</p><p>临时加入：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/mysql/bin/</span></pre></td></tr></tbody></table></figure><p>永久生效：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span></pre></td></tr></tbody></table></figure><p>增加一行 </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/mysql/bin</span></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span></pre></td></tr></tbody></table></figure></li></ul></li><li><p>给root加个密码ab12。</p><ul><li>默认没有密码时设置密码：</li></ul><p> <strong>格式：</strong> <code>mysqladmin -u</code>用户名 <code>-p</code>旧密码 <code>password</code> 新密码<br> 首先在DOS下进入目录mysql\bin，然后键入以下命令</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysqladmin -u root password <span class="string">'123456'</span> <span class="comment"># 设置root密码为123456</span></span></pre></td></tr></tbody></table></figure><p> 注：因为开始时root没有密码，所以-p旧密码一项就可以省略了。</p></li><li><p>再将root的密码改为djg345。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -p ab12 password djg345</span></pre></td></tr></tbody></table></figure></li><li><p>进入mysql命令行：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456 <span class="comment"># -p后面直接跟密码</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">mysql -uroot -p       <span class="comment"># 不跟密码</span></span></pre></td></tr></tbody></table></figure></li><li><p>不知道root密码时密码重置：</p></li></ol><ul><li>vim /etc/my.cnf//增加skip-grant</li><li>重启mysql服务 /etc/init.d/mysqld restart</li><li>mysql -uroot //此时不需要密码就可以进入mysql</li><li>use mysql; //切换到mysql库中</li><li>update user set password=password(‘learnlinux’) where user=’root’; //user表是存放用户名密码和授权等信息</li><li>退出mysql把my.cnf中增加的skip grant删掉，如果不删所有的用户都可以不输入密码直接进入mysql，非常不安全，重启mysql服务。</li></ul><p><img alt="img" data-src="https://pic4.zhimg.com/80/v2-e2cbb35d4a7e277c248ca9cc5fbee65f_hd.jpg" class="lazyload"></p><h3 id="3、增加新用户"><a href="#3、增加新用户" class="headerlink" title="3、增加新用户"></a>3、增加新用户</h3><p><strong>注意：</strong> 和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符</p><p><strong>格式：</strong> <code>grant select on 数据库.* to 用户名@登录主机 identified by “密码”</code></p><ul><li><p>1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">delete</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> [email=test1@”%]test1@”%[/email]” <span class="keyword">Identified</span> <span class="keyword">by</span> “abc”;</span></pre></td></tr></tbody></table></figure><p>但增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以在internet上的任何一台电脑上登录你的mysql数据库并对你的数据可以为所欲为了，解决办法见2。</p></li><li><p>2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">delete</span> <span class="keyword">on</span> mydb.* <span class="keyword">to</span> [email=test2@localhost]test2@localhost[/email] <span class="keyword">identified</span> <span class="keyword">by</span> “abc”;</span></pre></td></tr></tbody></table></figure><p>如果你不想test2有密码，可以再打一个命令将密码消掉。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">delete</span> <span class="keyword">on</span> mydb.* <span class="keyword">to</span> [email=test2@localhost]test2@localhost[/email] <span class="keyword">identified</span> <span class="keyword">by</span> “”;</span></pre></td></tr></tbody></table></figure></li></ul><h3 id="4-1-创建数据库"><a href="#4-1-创建数据库" class="headerlink" title="4.1 创建数据库"></a>4.1 创建数据库</h3><p><strong>注意：</strong> 创建数据库之前要先连接Mysql服务器</p><p><strong>命令：</strong> <code>create database &lt;数据库名&gt;</code></p><p><strong>例1：</strong> 建立一个名为xhkdb的数据库</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; create database xhkdb;</span></pre></td></tr></tbody></table></figure><p><strong>例2：</strong> 创建数据库并分配用户</p><ul><li><p>① <code>CREATE DATABASE 数据库名</code>;</p></li><li><p>② <code>GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON 数据库名.* TO 数据库名@localhost IDENTIFIED BY '密码';</code></p></li><li><p>③ <code>SET PASSWORD FOR '数据库名'@'localhost' = OLD_PASSWORD('密码');</code></p></li></ul><p>依次执行3个命令完成数据库创建。注意：中文 “密码”和“数据库”是户自己需要设置的。</p><h3 id="4-2-显示数据库"><a href="#4-2-显示数据库" class="headerlink" title="4.2 显示数据库"></a>4.2 显示数据库</h3><p><strong>命令：</strong> <code>show databases （注意：最后有个s）</code></p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span></pre></td></tr></tbody></table></figure><p><strong>注意：</strong> 为了不再显示的时候乱码，要修改数据库默认编码。以下以GBK编码页面为例进行说明：</p><ul><li>1、修改MYSQL的配置文件：<code>my.ini</code>里面修改<code>default-character-set=gbk</code></li><li>2、代码运行时修改：<ul><li>① Java代码：<code>jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=gbk</code></li><li>② PHP代码：<code>header("Content-Type:text/html;charset=gb2312");</code></li><li>③ C语言代码：<code>int mysql_set_character_set( MYSQL * mysql, char * csname)；</code></li></ul></li></ul><p>该函数用于为当前连接设置默认的字符集。字符串csname指定了1个有效的字符集名称。连接校对成为字符集的默认校对。该函数的工作方式与SET NAMES语句类似，但它还能设置mysql- &gt; charset的值，从而影响了由<code>mysql_real_escape_string()</code>设置的字符集。</p><h3 id="4-3-删除数据库"><a href="#4-3-删除数据库" class="headerlink" title="4.3 删除数据库"></a>4.3 删除数据库</h3><p><strong>命令：</strong> <code>drop database &lt;数据库名&gt;</code><br><strong>例如：</strong> 删除名为 xhkdb的数据库</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; drop database xhkdb;</span></pre></td></tr></tbody></table></figure><p><strong>例子1：</strong> 删除一个已经确定存在的数据库</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; drop database drop_database;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Query OK, 0 rows affected (0.00 sec)</span></pre></td></tr></tbody></table></figure><p><strong>例子2：</strong> 删除一个不确定存在的数据库</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; drop database drop_database;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">ERROR 1008 (HY000): Can't <span class="keyword">drop</span> <span class="keyword">database</span> <span class="string">'drop_database'</span>; database doesn't exist</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   //发生错误，不能删除'drop_database'数据库，该数据库不存在。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">mysql&gt; drop database if exists drop_database;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)//产生一个警告说明此数据库不存在</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">mysql&gt; create database drop_database;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">Query OK, 1 row affected (0.00 sec)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">mysql&gt; drop database if exists drop_database;//if exists 判断数据库是否存在，不存在也不产生错误</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">Query OK, 0 rows affected (0.00 sec)</span></pre></td></tr></tbody></table></figure><h3 id="4-4-连接数据库"><a href="#4-4-连接数据库" class="headerlink" title="4.4 连接数据库"></a>4.4 连接数据库</h3><p><strong>命令：</strong>  <code>use &lt;数据库名&gt;</code></p><p><strong>例如：</strong> 如果xhkdb数据库存在，尝试存取它：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; use xhkdb;</span></pre></td></tr></tbody></table></figure><p>屏幕提示：<code>Database changed</code></p><p><code>use</code> 语句可以通告MySQL把<code>db_name</code>数据库作为默认（当前）数据库使用，用于后续语句。该数据库保持为默认数据库，直到语段的结尾，或者直到发布一个不同的USE语句：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; USE db1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT COUNT(*) FROM mytable;   # selects from db1.mytable</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">mysql&gt; USE db2;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT COUNT(*) FROM mytable;   # selects from db2.mytable</span></pre></td></tr></tbody></table></figure><p>使用USE语句为一个特定的当前的数据库做标记，不会阻碍您访问其它数据库中的表。下面的例子可以从db1数据库访问作者表，并从db2数据库访问编辑表：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; USE db1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT author_name,editor_name FROM author,db2.editor</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    -&gt;        WHERE author.editor_id = db2.editor.editor_id;</span></pre></td></tr></tbody></table></figure><p>USE语句被设立出来，用于与Sybase相兼容。</p><p>有些网友问到，连接以后怎么退出。其实，不用退出来，use 数据库后，使用<code>show databases</code>就能查询所有数据库，如果想跳到其他数据库，用<br>   <code>use 其他数据库名字</code><br>就可以了。</p><h3 id="4-5-当前选择的数据库"><a href="#4-5-当前选择的数据库" class="headerlink" title="4.5 当前选择的数据库"></a>4.5 当前选择的数据库</h3><p><strong>命令：</strong> <code>mysql&gt; select database();</code></p><p>MySQL中SELECT命令类似于其他编程语言里的print或者write，你可以用它来显示一个字符串、数字、数学表达式的结果等等。如何使用MySQL中SELECT命令的特殊功能？</p><ol><li><p>显示MYSQL的版本</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; select version(); </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">-----------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">| version()             | </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">-----------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">| 6.0.4-alpha-community | </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">-----------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span></pre></td></tr></tbody></table></figure></li><li><p>显示当前时间</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; select now(); </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">| now()               | </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">| 2009-09-15 22:35:32 | </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span></pre></td></tr></tbody></table></figure></li><li><p>显示年月日</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAYOFMONTH</span>(<span class="keyword">CURRENT_DATE</span>); </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">--------------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">| DAYOFMONTH(CURRENT_DATE) | </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">--------------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">|                       15 | </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">--------------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(<span class="keyword">CURRENT_DATE</span>); </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">| MONTH(CURRENT_DATE) | </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">|                   9 | </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(<span class="keyword">CURRENT_DATE</span>); </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">--------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">| YEAR(CURRENT_DATE) | </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">--------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">|               2009 | </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">--------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></tbody></table></figure></li><li><p>显示字符串</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT "welecome to my blog!"; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">----------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">| welecome to my blog! | </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">----------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">| welecome to my blog! | </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">----------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="number">5.</span> 当计算器用</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ((<span class="number">4</span> * <span class="number">4</span>) / <span class="number">10</span> ) + <span class="number">25</span>; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">----------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">| ((4 * 4) / 10 ) + 25 | </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">----------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">|                26.60 | </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">----------------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></tbody></table></figure></li><li><p>串接字符串</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">CONCAT</span>(f_name, <span class="string">" "</span>, l_name) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">AS</span> <span class="keyword">Name</span> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> employee_data </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">where</span> title = <span class="string">'Marketing Executive'</span>; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">| Name          | </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">| Monica Sehgal | </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">| Hal Simlai    | </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">| Joseph Irvine | </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------------+ </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></tbody></table></figure></li></ol><p><strong>注意：</strong>这里用到<code>CONCAT()</code>函数，用来把字符串串接起来。另外，我们还用到以前学到的AS给结果列’CONCAT(f_name, “ “, l_name)’起了个假名。</p><h3 id="5-1-创建数据表"><a href="#5-1-创建数据表" class="headerlink" title="5.1 创建数据表"></a>5.1 创建数据表</h3><p><strong>命令：</strong> <code>create table &lt;表名&gt; ( &lt;字段名1&gt; &lt;类型1&gt; [,..&lt;字段名n&gt; &lt;类型n&gt;]);</code><br>例如，建立一个名为MyClass的表，</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">字段名       数字类型    数据宽度    是否为空    是否主键        自动增加            默认值 </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">id        int     4       否       primary key auto_increment      </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">name      char    20      否                                       </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">sex       int     4       否                                   0   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">degree    double  16      是</span></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; table</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">primary key auto_increment</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"> default</span></pre></td></tr></tbody></table></figure><h3 id="5-3-删除数据表"><a href="#5-3-删除数据表" class="headerlink" title="5.3 删除数据表"></a>5.3 删除数据表</h3><p><strong>命令：</strong> <code>drop table &lt;表名&gt;</code></p><p><strong>例如：</strong> 删除表名为 MyClass 的表</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; drop table MyClass;</span></pre></td></tr></tbody></table></figure><p><code>DROP TABLE</code>用于取消一个或多个表。您必须有每个表的DROP权限。所有的表数据和表定义会被取消，所以使用本语句要小心！</p><p><strong>注意：</strong> 对于一个带分区的表，<code>DROP TABLE</code>会永久性地取消表定义，取消各分区，并取消储存在这些分区中的所有数据。<code>DROP TABLE</code>还会取消与被取消的表有关联的分区定义（.par）文件。</p><p>对与不存在的表，使用<code>IF EXISTS</code>用于防止错误发生。当使用<code>IF EXISTS</code>时，对于每个不存在的表，会生成一个NOTE。</p><p><code>RESTRICT</code>和<code>CASCADE</code>可以使分区更容易。目前，<code>RESTRICT</code>和<code>CASCADE</code>不起作用。</p><h3 id="5-4-表插入数据"><a href="#5-4-表插入数据" class="headerlink" title="5.4 表插入数据"></a>5.4 表插入数据</h3><p><strong>命令：</strong> <code>insert into &lt;表名&gt; [( &lt;字段名1&gt;[,..&lt;字段名n &gt; ])] values ( 值1 )[, ( 值n )]</code></p><p><strong>例如：</strong><br>往表 MyClass中插入二条记录, 这二条记录表示：编号为1的名为Tom的成绩为96.45, 编号为2 的名为Joan 的成绩为82.99， 编号为3 的名为Wang 的成绩为96.5。</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into MyClass values(1,'Tom',96.45),(2,'Joan',82.99), (2,'Wang', 96.59);</span></pre></td></tr></tbody></table></figure><p><strong>注意：</strong> <code>insert into</code>每次只能向表中插入一条记录。</p><h3 id="5-5-查询表中的数据"><a href="#5-5-查询表中的数据" class="headerlink" title="5.5 查询表中的数据"></a>5.5 查询表中的数据</h3><ul><li>1)、查询所有行<br>  <strong>命令： ** <code>select &lt;字段1，字段2，...&gt; from &lt; 表名 &gt; where &lt; 表达式 &gt;</code><br>  **例如：</strong> 查看表 MyClass 中所有数据  <figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from MyClass;</span></pre></td></tr></tbody></table></figure></li><li>2）、查询前几行数据<br>  <strong>例如：</strong> 查看表 MyClass 中前2行数据  <figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from MyClass order by id limit 0,2;</span></pre></td></tr></tbody></table></figure>  <code>select</code>一般配合<code>where</code>使用，以查询更精确更复杂的数据。</li></ul><h3 id="5-6-删除表中数据"><a href="#5-6-删除表中数据" class="headerlink" title="5.6 删除表中数据"></a>5.6 删除表中数据</h3><p><strong>命令：</strong> <code>delete from 表名 where 表达式</code><br><strong>例如：</strong> 删除表 MyClass中编号为1 的记录</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; delete from MyClass where id=1;</span></pre></td></tr></tbody></table></figure><p>在这次删除之后，表是这样的：</p><table><thead><tr><th>FirstName</th><th>LastName</th><th>Age</th></tr></thead><tbody><tr><td>Glenn</td><td>Quagmire</td><td>33</td></tr></tbody></table><h3 id="5-7-修改表中数据"><a href="#5-7-修改表中数据" class="headerlink" title="5.7 修改表中数据"></a>5.7 修改表中数据</h3><p><strong>语法：</strong> <code>update 表名 set 字段=新值,… where 条件</code></p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; update MyClass set name='Mary' where id=1;</span></pre></td></tr></tbody></table></figure><p><strong>例子1：</strong> 单表的MySQL UPDATE语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> [<span class="keyword">LOW_PRIORITY</span>] [<span class="keyword">IGNORE</span>] tbl_name <span class="keyword">SET</span> col_name1=expr1 [, col_name2=expr2 ...] [<span class="keyword">WHERE</span> where_definition] [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...] [<span class="keyword">LIMIT</span> <span class="keyword">row_count</span>]</span></pre></td></tr></tbody></table></figure><p><strong>例子2：</strong> 多表的UPDATE语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> [<span class="keyword">LOW_PRIORITY</span>] [<span class="keyword">IGNORE</span>] table_references <span class="keyword">SET</span> col_name1=expr1 [, col_name2=expr2 ...] [<span class="keyword">WHERE</span> where_definition]</span></pre></td></tr></tbody></table></figure><p><code>UPDATE</code>语法可以用新值更新原有表行中的各列。<code>SET</code>子句指示要修改哪些列和要给予哪些值。<code>WHERE</code>子句指定应更新哪些行。如果没有<code>WHERE</code>子句，则更新所有的行。如果指定了<code>ORDER BY</code>子句，则按照被指定的顺序对行进行更新。<code>LIMIT</code>子句用于给定一个限值，限制可以被更新的行的数目。</p><h3 id="5-8-增加字段"><a href="#5-8-增加字段" class="headerlink" title="5.8 增加字段"></a>5.8 增加字段</h3><p><strong>命令：</strong> <code>alter table 表名 add字段 类型 其他;</code><br><strong>例如：</strong> 在表MyClass中添加了一个字段passtest，类型为<code>int(4)</code>，默认值为0</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table MyClass add passtest int(4) default '0'</span></pre></td></tr></tbody></table></figure><ul><li><p>加索引</p>  <figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table 表名 add index 索引名 (字段名1[，字段名2 …]);</span></pre></td></tr></tbody></table></figure><p>  <strong>例子：</strong> <code>mysql&gt; alter table employee add index emp_name (name);</code></p></li><li><p>加主关键字的索引</p>  <figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table 表名 add primary key (字段名);</span></pre></td></tr></tbody></table></figure><p>  <strong>例子：</strong> <code>mysql&gt; alter table employee add primary key(id);</code></p></li><li><p>加唯一限制条件的索引</p>  <figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table 表名 add unique 索引名 (字段名);</span></pre></td></tr></tbody></table></figure><p>  <strong>例子：</strong> <code>mysql&gt; alter table employee add unique emp_name2(cardnumber);</code></p></li><li><p>删除某个索引</p>  <figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table 表名 drop index 索引名;</span></pre></td></tr></tbody></table></figure><p>  <strong>例子：</strong> <code>mysql&gt;alter table employee drop index emp_name;</code></p></li><li><p>增加字段：</p>  <figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE table_name ADD field_name field_type;</span></pre></td></tr></tbody></table></figure></li><li><p>修改原字段名称及类型：</p>  <figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE table_name CHANGE old_field_name new_field_name field_type;</span></pre></td></tr></tbody></table></figure></li><li><p>删除字段：</p>  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">MySQL <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> field_name;</span></pre></td></tr></tbody></table></figure></li></ul><h3 id="5-9-修改表名"><a href="#5-9-修改表名" class="headerlink" title="5.9 修改表名"></a>5.9 修改表名</h3><p><strong>命令：</strong> <code>rename table 原表名 to 新表名;</code></p><p><strong>例如：</strong> 在表MyClass名字更改为YouClass</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql&gt; rename table MyClass to YouClass;</span></pre></td></tr></tbody></table></figure><p>当你执行 <code>RENAME</code> 时，你不能有任何锁定的表或活动的事务。你同样也必须有对原初表的 <code>ALTER</code> 和 <code>DROP</code> 权限，以及对新表的 <code>CREATE</code> 和 <code>INSERT</code> 权限。</p><p>如果在多表更名中，MySQL 遭遇到任何错误，它将对所有被更名的表进行倒退更名，将每件事物退回到最初状态。</p><p><code>RENAME TABLE</code> 在 MySQL 3.23.23 中被加入。</p><h3 id="6、备份数据库"><a href="#6、备份数据库" class="headerlink" title="6、备份数据库"></a>6、备份数据库</h3><p>命令在DOS的<code>[url=file://\mysql\bin]\mysql\bin[/url]</code>目录下执行</p><ol><li>导出整个数据库<br>导出文件默认是存在<code>mysql\bin</code>目录下<figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">mysqldump -u user_name -p123456 database_name &gt; outfile_name.sql</span></pre></td></tr></tbody></table></figure></li><li>导出一个表<figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">mysqldump -u user_name -p database_name table_name &gt; outfile_name.sql</span></pre></td></tr></tbody></table></figure></li><li>导出一个数据库结构<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysqldump -u user_name -p -d –add-<span class="keyword">drop</span>-<span class="keyword">table</span> database_name &gt; outfile_name.sql</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">-d 没有数据 –<span class="keyword">add</span>-<span class="keyword">drop</span>-<span class="keyword">table</span> 在每个<span class="keyword">create</span>语句之前增加一个<span class="keyword">drop</span> <span class="keyword">table</span></span></pre></td></tr></tbody></table></figure></li><li>带语言参数导出<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p –default-character-<span class="keyword">set</span>=latin1 –<span class="keyword">set</span>-<span class="keyword">charset</span>=gbk –<span class="keyword">skip</span>-opt database_name &gt; outfile_name.sql</span></pre></td></tr></tbody></table></figure>例如，将aaa库备份到文件back_aaa中：<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">　　[root@test1 root]<span class="comment"># cd　/home/data/mysql</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">　　[root@test1 mysql]<span class="comment"># mysqldump -u root -p --opt aaa &gt; back_aaa</span></span></pre></td></tr></tbody></table></figure></li></ol><h3 id="7-1-一个建库和建表的实例1"><a href="#7-1-一个建库和建表的实例1" class="headerlink" title="7.1 一个建库和建表的实例1"></a>7.1 一个建库和建表的实例1</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> school; //如果存在SCHOOL则删除</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> school; //建立库SCHOOL</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> school; //打开库SCHOOL</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher //建立表TEACHER</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">3</span>) auto_increment <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  address <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">default</span> ‘深圳’,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">year</span> <span class="built_in">date</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">); //建表结束</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">//以下为插入字段</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher <span class="keyword">values</span>(”,’allen’,<span class="string">'大连一中’,'</span><span class="number">1976</span><span class="number">-10</span><span class="number">-10</span>′);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher <span class="keyword">values</span>(”,’jack’,<span class="string">'大连二中’,'</span><span class="number">1975</span><span class="number">-12</span><span class="number">-23</span>′);</span></pre></td></tr></tbody></table></figure><p>如果你在mysql提示符键入上面的命令也可以，但不方便调试。</p><ul><li><p>1、你可以将以上命令原样写入一个文本文件中，假设为<code>school.sql</code>，然后复制到c:\下，并在DOS状态进入目录<code>[url=file://\mysql\bin]\mysql\bin[/url]</code>，然后键入以下命令：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql -uroot -p密码 &lt; c:\school.sql</span></pre></td></tr></tbody></table></figure><p>如果成功，空出一行无任何显示；如有错误，会有提示。（以上命令已经调试，你只要将//的注释去掉即可使用）。</p></li><li><p>2、或者进入命令行后使用 <code>mysql&gt; source c:\school.sql;</code>也可以将<code>school.sql</code>文件导入数据库中。</p></li></ul><h3 id="7-2-一个建库和建表的实例2"><a href="#7-2-一个建库和建表的实例2" class="headerlink" title="7.2 一个建库和建表的实例2"></a>7.2 一个建库和建表的实例2</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> school; //如果存在SCHOOL则删除</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> school; //建立库SCHOOL</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> school; //打开库SCHOOL</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher //建立表TEACHER</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">3</span>) auto_increment <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  address <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">default</span> <span class="string">''</span>深圳<span class="string">''</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">year</span> <span class="built_in">date</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">); //建表结束</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">//以下为插入字段</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher <span class="keyword">values</span>(<span class="string">''''</span>,<span class="string">''</span>glchengang<span class="string">''</span>,<span class="string">''</span>深圳一中<span class="string">''</span>,<span class="string">''</span><span class="number">1976</span><span class="number">-10</span><span class="number">-10</span><span class="string">''</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher <span class="keyword">values</span>(<span class="string">''''</span>,<span class="string">''</span>jack<span class="string">''</span>,<span class="string">''</span>深圳一中<span class="string">''</span>,<span class="string">''</span><span class="number">1975</span><span class="number">-12</span><span class="number">-23</span><span class="string">''</span>);</span></pre></td></tr></tbody></table></figure><p><strong>注：</strong> 在建表中</p><ul><li><p>1、将ID设为长度为3的数字字段:<code>int(3)</code>；并让它每个记录自动加一:auto_increment；并不能为空:<code>not null</code>；而且让他成为主字段<code>primary key</code>。</p></li><li><p>2、将<code>NAME</code>设为长度为10的字符字段</p></li><li><p>3、将<code>ADDRESS</code>设为长度50的字符字段，而且缺省值为深圳。</p></li><li><p>4、将<code>YEAR</code>设为日期字段。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      mysql
    
    </summary>
    
    
      <category term="Sql" scheme="http://notes.seirhsiao.com/categories/Sql/"/>
    
    
  </entry>
  
  <entry>
    <title>sublime 快捷键集合</title>
    <link href="http://notes.seirhsiao.com/posts/62f96e9a/"/>
    <id>http://notes.seirhsiao.com/posts/62f96e9a/</id>
    <published>2019-02-03T07:39:16.000Z</published>
    <updated>2019-12-08T14:11:06.178Z</updated>
    
    <content type="html"><![CDATA[<h4 id="查找功能"><a href="#查找功能" class="headerlink" title="查找功能"></a>查找功能</h4><ul><li><code>Command + Shift + F</code>: 从当前项目中搜索目标;</li><li><code>Command + F</code>: 从当前文件中搜索目标;</li><li><code>Command + P</code>: 可寻找匹配的文件，方法，跳转行号等功能;</li><li><code>#</code>: 跳转到指定的symbol;</li><li><code>:</code>: 跳转到指定的行号;</li><li><code>@</code>: 跳转到指定的方法或函数;</li></ul><h4 id="编辑功能"><a href="#编辑功能" class="headerlink" title="编辑功能"></a>编辑功能</h4><h5 id="单行或多行编辑"><a href="#单行或多行编辑" class="headerlink" title="单行或多行编辑"></a>单行或多行编辑</h5><ul><li><code>Command + L</code>: 选中当前行, 按住Command，持续点击L可以依次选取多行</li><li><code>Command + Shift + L</code>: 同时编辑多行，此时光标位于每行的行末，点击右键可以将光标移至行首</li><li><code>Command + Enter</code>: 在当前行后插入新行</li><li><code>Command + Shift + Enter</code>: 在当前行前插入新行</li><li><code>Control + Shift + K</code>: 删除当前行</li><li><code>Command + Shift + D</code>: 复制当前行或多行</li><li><code>Command + J</code>: 合并单行或多行J</li><li><code>Control + M</code>: 跳转至对应的括号</li><li><code>cmd + KU</code>:    小写转大写</li><li><code>cmd + KL</code>:    大写转小写</li></ul><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><ul><li><code>Command + /</code>: 注释当前行或所选的行</li><li><code>Command + Alt + /</code>: 块注释</li></ul><h5 id="选取字符"><a href="#选取字符" class="headerlink" title="选取字符"></a>选取字符</h5><ul><li><code>Command + D</code>: 首先用光标选取字符，按住Command，持续点击D可以选取当前文件相同的字符,如果需要跳过当前选中的字符，<code>Command+K, Command +D</code>,如过要消除当前选中的字符，<code>Command + U</code></li><li><code>Command + Control + G</code>: 一次性选取所有相同的词</li><li><code>Control + Shift + M</code>: 选取括号中的内容</li></ul><h5 id="拆分窗口"><a href="#拆分窗口" class="headerlink" title="拆分窗口"></a>拆分窗口</h5><ul><li><code>Command + Alt + 1</code>: 单个窗口;</li><li><code>Command + Alt + 2</code>: 拆分为两个窗口;</li><li><code>Command + Alt + 5</code>: 拆分为两行两列（共四格）窗口;</li><li><code>Control + (1,2,3,4)</code>: 跳转至相应的窗口;</li><li><code>Control + shift + (1,2,3,4)</code>: 将当前的文件移动到对应的窗口;</li></ul><h5 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h5><h6 id="打开vim模式"><a href="#打开vim模式" class="headerlink" title="打开vim模式"></a>打开vim模式</h6><p>在<code>Preferences-&gt;Setting:user</code>中添加以下代码：</p><figure class="highlight prolog"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">"ignored_packages"</span>: [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"Vintage"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">]</span></pre></td></tr></tbody></table></figure><h6 id="显示全路径"><a href="#显示全路径" class="headerlink" title="显示全路径"></a>显示全路径</h6><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">"show_full_path":</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><h6 id="高亮编辑中的那一行"><a href="#高亮编辑中的那一行" class="headerlink" title="高亮编辑中的那一行"></a>高亮编辑中的那一行</h6><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">"highlight_line":</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><h6 id="保存的时候把无用的空格去掉"><a href="#保存的时候把无用的空格去掉" class="headerlink" title="保存的时候把无用的空格去掉"></a>保存的时候把无用的空格去掉</h6><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">"trim_trailing_white_space_on_save":</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><h6 id="宽度指导线"><a href="#宽度指导线" class="headerlink" title="宽度指导线"></a>宽度指导线</h6><figure class="highlight prolog"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">"rulers"</span>: [<span class="number">80</span>]</span></pre></td></tr></tbody></table></figure><p>这个数字是字符的宽度，当开启这个设置的时候，会出现一条垂直的虚线。但你的代码宽度超出这条线的时候，说明你要重新组织一下了</p><h6 id="加粗文件夹名称"><a href="#加粗文件夹名称" class="headerlink" title="加粗文件夹名称"></a>加粗文件夹名称</h6><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">"bold_folder_labels":</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;查找功能&quot;&gt;&lt;a href=&quot;#查找功能&quot; class=&quot;headerlink&quot; title=&quot;查找功能&quot;&gt;&lt;/a&gt;查找功能&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Command + Shift + F&lt;/code&gt;: 从当前项目中搜索目标;&lt;/li&gt;
&lt;li&gt;&lt;
      
    
    </summary>
    
    
      <category term="Tools" scheme="http://notes.seirhsiao.com/categories/Tools/"/>
    
    
  </entry>
  
  <entry>
    <title>Learn Mongodb</title>
    <link href="http://notes.seirhsiao.com/posts/2ba8dc9d/"/>
    <id>http://notes.seirhsiao.com/posts/2ba8dc9d/</id>
    <published>2019-02-03T07:39:16.000Z</published>
    <updated>2019-12-07T02:47:35.417Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">//Update Homebrew’s package database</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">brew update</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">//Install MongoDB</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">brew install mongodb</span></pre></td></tr></tbody></table></figure><h4 id="Run-Mongodb"><a href="#Run-Mongodb" class="headerlink" title="Run Mongodb"></a>Run Mongodb</h4><p>在你第一次启动<code>mongodb</code>之前，需要创建一个供<code>mongodb</code>写数据的文件夹，默认使用<code>/data/db</code>目录，<br>并且要确保这个目录有读写权限。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mkdir -p /data/db</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">chown -R <span class="variable">$USER</span>:<span class="variable">$GRUOP</span> /data/db</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">mongod</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">mongo //连接到数据库</span></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      mongodb
    
    </summary>
    
    
      <category term="Mongodb" scheme="http://notes.seirhsiao.com/categories/Mongodb/"/>
    
    
  </entry>
  
  <entry>
    <title>Git 常用命令</title>
    <link href="http://notes.seirhsiao.com/posts/845ade19/"/>
    <id>http://notes.seirhsiao.com/posts/845ade19/</id>
    <published>2019-02-03T07:39:16.000Z</published>
    <updated>2019-12-07T12:52:34.829Z</updated>
    
    <content type="html"><![CDATA[<h4 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h4><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在终端输入：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">➜ git --version</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">git version 1.8.4</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">➜ git config --list</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">color.ui=<span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">user.name=seirhsiao</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">user.email=seirhsiao@gmail.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">core.repositoryformatversion=0</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">core.filemode=<span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">remote.origin.url=.....</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">remote.origin.fetch=.....</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">➜ git config --list --global</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">user.name=seirhsiao</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">user.email=seirhsiao@gmail.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">push.default=current</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑Git配置文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">git config -e [--global]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">git config [--global] user.name <span class="string">"[name]"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">git config [--global] user.email <span class="string">"[email address]"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">//设置用户名和邮箱，每次的commit都会使用这些信息</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"seirhsiao"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">git config --global user.email seirhsiao@gmail.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">//当git需要你手动输入信息时，你可以设置需要打开的编辑器，默认是vim</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">git config --global core.editor <span class="string">"open -a 'Sublime Text 2'"</span></span></pre></td></tr></tbody></table></figure><p>关于 config 的种类</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Config file location</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># global 表示配置全局信息，配置之后无论你在该系统上做任何事情，Git都会使用这些信息。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    --global              use global<span class="built_in"> config </span>file</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    --system              use<span class="built_in"> system config </span>file</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    --local               use repository<span class="built_in"> config </span>file</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    -f, --file &lt;file&gt;     use given<span class="built_in"> config </span>file</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    --blob &lt;blob-id&gt;      read<span class="built_in"> config </span><span class="keyword">from</span> given blob object</span></pre></td></tr></tbody></table></figure><p>使用 `git config <key>`` 来检查某一项配置信息</key></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git config user.name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">seirhsiao</span></pre></td></tr></tbody></table></figure><p>用来查看当前的配置信息，如果是新安装的，那么需要对global信息进行配置。配置的方法有两种，一个个变量配置，或者一起配置：</p><ul><li><p>单独配置：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">➜  git config --global user.name hsiao</span></pre></td></tr></tbody></table></figure></li><li><p>一起配置：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">➜ git config --global --add user.name hsiao</span></pre></td></tr></tbody></table></figure></li><li><p>增加多个键值对</p></li><li><p>删除配置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">➜  ~  git config --global --<span class="built_in">unset</span> user.name xys</span></pre></td></tr></tbody></table></figure></li><li><p>配置别名<br>这个功能在shell中是很常用的。我们可以做一些别名来取代比较复杂的指令。<br>比如：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git config --global alias.st status</span></pre></td></tr></tbody></table></figure></li></ul><p>我们使用st来取代status。</p><p>附上一个比较吊的：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git config --global alias.lg <span class="string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</span></span></pre></td></tr></tbody></table></figure><p><strong>PS</strong>:用git log –graph命令可以看到分支合并图。</p><ul><li>配置文件<br>git的配置文件其实我们是可以找到的，就在.git目录下：<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">➜  testGit git:(master) ls -a</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">.          ..         .git       README.txt</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">➜  testGit git:(master) <span class="built_in">cd</span> .git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">➜  .git git:(master) ls</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">HEAD        description index       logs        packed-refs</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">config      hooks       info        objects     refs</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">➜  .git git:(master)</span></pre></td></tr></tbody></table></figure></li></ul><p>我们打开config文件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[core]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    repositoryformatversion = 0</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    filemode = true</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    bare = false</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    logallrefupdates = true</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    ignorecase = true</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    precomposeunicode = false</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">[remote "origin"]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    url = git@github.com:seirhsiao/testGit.git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    fetch = +refs/heads/*:refs/remotes/origin/*</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">[branch "master"]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    remote = origin</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    merge = refs/heads/master</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">[branch "dev"]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    remote = origin</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    merge = refs/heads/dev</span></pre></td></tr></tbody></table></figure><p><img alt="github contributions graph" data-src="/static/images/git/github-contribution.png" class="lazyload"></p><blockquote><p>每个github账户都会有‘贡献图表’，如果你的commit没有出现在图表上，说明你github账户的邮箱和当前repo配置的邮箱不一致</p></blockquote><h4 id="git工作流"><a href="#git工作流" class="headerlink" title="git工作流"></a>git工作流</h4><p>你的本地仓库由 git 维护的三棵“树”组成。第一个是你的工作目录，它持有实际文件；第二个是暂存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，它指向你最后一次提交的结果。</p><p><img alt="git work flow" data-src="/static/images/git/git_workflow.png" class="lazyload"><br><img alt="git low" data-src="/static/images/git/git.png" class="lazyload"></p><p>工作区与暂存区<br>Git通常是工作在三个区域上：</p><ul><li>工作区</li><li>暂存区</li><li>历史区</li><li>其中工作区就是我们平时工作、修改代码的区域，而历史区，用来保存各个版本，而暂存区，则是Git的核心所在。</li></ul><p>暂存区保存在我们前面讲的那个.git的隐藏文件夹中，是一个叫index的文件。</p><p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。<br><img alt="git work" data-src="/static/images/git/git_work_flow.png" class="lazyload"></p><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul><blockquote><p>引用自<a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external nofollow noreferrer noopener">git简明指南</a></p></blockquote><h4 id="git基础"><a href="#git基础" class="headerlink" title="git基础"></a>git基础</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git init        <span class="comment"># 把当前文件夹初始化为一个git repo</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;URL&gt; <span class="comment"># 获取一个已经存在的git repo的拷贝</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">git status      <span class="comment"># 查看当前git repo的状态</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">git status -s   <span class="comment"># 简化输出</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">git add &lt;file&gt;  <span class="comment"># 添加文件到暂存区</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">git diff        <span class="comment"># 比较你的工作目录和暂存区的差别</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">git commit      <span class="comment"># 提交</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">git commit -am <span class="string">"xxxxxxxxx"</span> <span class="comment"># 跳过暂存区直接提交</span></span></pre></td></tr></tbody></table></figure><p><img alt="文件状态的生命周期" data-src="/static/images/git/git_status_lifecycle.png" class="lazyload"></p><p>在过去很长的一段时间里，我一直错误的以为 git commit -am 是 git add + git commit -m 的简写，虽然效果是一样的，但别后的实现却是不同的，<br>git add是先把change加载到暂存区，然后通过commit提交，而git commit -am 是跳过了暂存区，直接提交。</p><blockquote><p>每一次commit都会为创建一个项目的快照，方便回滚或比较。</p></blockquote><h4 id="git-init-建代码库"><a href="#git-init-建代码库" class="headerlink" title="git init 建代码库"></a>git init 建代码库</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git init</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">git init [project-name]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [url]</span></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ git init</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Initialized empty Git repository <span class="keyword">in</span> /Users/shenglanya/Desktop/.git/</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#然后使用 ls -a 可查看隐藏文件，发现存在名为 .git 的子目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">$ ls -a</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">.     .DS_Store   .localized</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">..        .git        pic</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 接着进入子目录,发现此目录中包含你初始化仓库中所有的必须文件，这些文件是 Git 仓库的骨干</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> .git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">$ ls</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">HEAD      config      hooks       objects</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">branches  description info        refs</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 接着需要跟踪项目里的文件，需要注意的是，当创建一个新的项目里的文件时，它默认是未被跟踪的，所以此时我们需要手动的将它添加到版本控制中，也就是被跟踪</span></span></pre></td></tr></tbody></table></figure><h4 id="git-add-rm-增加-删除文件"><a href="#git-add-rm-增加-删除文件" class="headerlink" title="git add/rm 增加/删除文件"></a>git add/rm 增加/删除文件</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git add [file1] [file2] ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">git add [dir]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">git add .</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">git add -p</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">git rm [file1] [file2] ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">git rm --cached [file]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">git mv [file-original] [file-renamed]</span></pre></td></tr></tbody></table></figure><h4 id="git-查看信息"><a href="#git-查看信息" class="headerlink" title="git 查看信息"></a>git 查看信息</h4><h5 id="git-查看状态"><a href="#git-查看状态" class="headerlink" title="git 查看状态"></a>git 查看状态</h5><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git status</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">git shortlog -sn</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">git blame [file]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">git reflog</span></pre></td></tr></tbody></table></figure><h5 id="git-log-查看提交历史"><a href="#git-log-查看提交历史" class="headerlink" title="git log 查看提交历史"></a>git log 查看提交历史</h5><p>git log是我使用最频繁的git命令之一，尤其是在团队协作的项目中，每天都会有大量的commit，如果你想查看自己的或同事的commit内容，git log命令可以很好的帮助你。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> -S [keyword]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> [tag] HEAD --grep feature</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --follow [file]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">git whatchanged [file]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> -p [file]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示过去5次提交</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> -5 --pretty --oneline</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span>    <span class="comment"># 按时间顺序逆序列出所有的commit</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> -p <span class="comment"># 输出commit的详细信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> -p -n <span class="comment"># 查看最近的n条commit</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --author=hsiao <span class="comment"># 查看作者是'liuzxc'的提交记录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --since=<span class="string">'2014-12-01'</span> <span class="comment"># 查看2014年12月1号以来的提交记录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --since=2.weeks <span class="comment"># 查看最近两周的提交记录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline <span class="comment"># 一行显示历史提交记录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --decorate --graph --oneline --all       <span class="comment"># 显示当前及之前的版本号</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline   <span class="comment"># 将版本历史显示为一行，历史版本号全部显示</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline --abbrev-commit  <span class="comment"># 将版本历史显示为一行，历史版本号部分显示</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph      <span class="comment"># 查看分支合并图</span></span></pre></td></tr></tbody></table></figure><h5 id="git-diff-差异"><a href="#git-diff-差异" class="headerlink" title="git diff 差异"></a>git diff 差异</h5><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git diff</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">git diff --cached [file]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">git diff HEAD</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">git diff [first-branch]...[second-branch]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">git diff --shortstat <span class="string">"@{0 day ago}"</span></span></pre></td></tr></tbody></table></figure><h5 id="git-show-显示"><a href="#git-show-显示" class="headerlink" title="git show 显示"></a>git show 显示</h5><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git show [commit]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">git show --name-only [commit]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">git show [commit]:[filename]</span></pre></td></tr></tbody></table></figure><h4 id="git-commit-代码提交"><a href="#git-commit-代码提交" class="headerlink" title="git commit 代码提交"></a>git commit 代码提交</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git commit -m [message]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">git commit [file1] [file2] ... -m [message]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">git commit -a</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">git commit -v</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">git commit --amend -m [message]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改已经提交的注释</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">git commit --amend [file1] [file2] ...</span></pre></td></tr></tbody></table></figure><h4 id="git-fetch-push-远程同步"><a href="#git-fetch-push-远程同步" class="headerlink" title="git fetch/push 远程同步"></a>git fetch/push 远程同步</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git fetch [remote]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示所有远程仓库</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">git remote -v</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">git remote -v //列出目前存在的远程分支</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">git remote show [remote]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">git remote add [shortname] [url]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">git pull [remote] [branch]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">git push [remote] [branch]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">git push [remote] --force</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">git push [remote] --all</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">git fetch //从远程分支获取最新版本到本地，默认是master分支</span></pre></td></tr></tbody></table></figure><p><code>git fetch</code> 和 <code>git pull</code>的区别:</p><ul><li>git fetch: 从远端分支拉取但不合并</li><li>git pull:  从远端分支拉去并自动合并，相当于 git fetch + git merge</li></ul><h4 id="git-tag-标签"><a href="#git-tag-标签" class="headerlink" title="git tag 标签"></a>git tag 标签</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git tag</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">git tag [tag]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">git tag [tag] [commit]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除本地tag</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">git tag -d [tag]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除远程tag</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">git push origin :refs/tags/[tagName]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看tag信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">git show [tag]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交指定tag</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">git push [remote] [tag]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交所有tag</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">git push [remote] --tags</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">git checkout -b [branch] [tag]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">git tag <span class="comment"># 列出当前所有的tag</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">git tag -a v1.2.4 -m <span class="string">"xxxxxx"</span> <span class="comment"># -a:创建tag； －m:添加注释</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">git push origin --tags <span class="comment"># 将本地创建的tag push到远端</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">git show &lt;tag_name&gt; <span class="comment"># 现实tag的详细信息</span></span></pre></td></tr></tbody></table></figure><blockquote><p>git push并不会将tag随同数据一起push到远端服务器</p></blockquote><h4 id="git-branch-分支"><a href="#git-branch-分支" class="headerlink" title="git branch 分支"></a>git branch 分支</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git branch</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有远程分支</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">git branch -r</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">git branch -a</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">git branch [branch-name]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">git checkout -b [branch]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">git branch [branch] [commit]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">git branch --track [branch] [remote-branch]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">git checkout [branch-name]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到上一个分支</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">git checkout -</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">git merge [branch]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">git cherry-pick [commit]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除分支</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">git branch -d [branch-name]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除远程分支</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">git push origin --delete [branch-name]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">git branch -dr [remote/branch]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个分支并切换到新建分支</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">git checkout -b new_branch</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 等同于</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">git branch new_branch</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">git checkout new_branch</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除本地分支</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">git branch -d new_branch</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果分支中包含未合并的工作内容，删除分支会导致数据丢失，因此－d会报错，</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果你确实要删除分支的改动，可以使用－D强制删除</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">git branch -D new_branch</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除远端分支</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">git push origin :&lt;branch_name&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看哪些分支已被并入当前分支,如果你要清理本地无用的分支，该命令非常有用。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">git branch --merge</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看尚未合并的分支</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">git branch --no-merged</span></pre></td></tr></tbody></table></figure><h4 id="git-revert-reset-撤销-重置错误的提交"><a href="#git-revert-reset-撤销-重置错误的提交" class="headerlink" title="git revert/reset 撤销/重置错误的提交"></a>git revert/reset 撤销/重置错误的提交</h4><p>在日常的工作中，有时候可能会出现这样的失误：将错误的内容提交到了远程仓库，那么应该如何取消这次错误的提交呢？</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git checkout [file]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">git checkout [commit] [file]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">git checkout .</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">git reset [file]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">git reset --hard</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">git reset [commit]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">git reset --hard [commit]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">git reset --keep [commit]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">git revert [commit]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">git stash</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">git stash pop</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果错误的把某些文件放进暂存区，可以使用以下命令取消</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 丢弃本地工作目录的改动，此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;file&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;commit_id&gt; <span class="comment"># 回退到这个commit_id</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD   <span class="comment"># 取消当前的commit</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^  <span class="comment"># 取消上一次的commit</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^^ <span class="comment"># 回退到上上个版本，以此类推，一次提交即为一个版本</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~2 <span class="comment"># 取消最近两次的提交</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">git reset --hard e9efa77 <span class="comment"># 回退到 e9efa77  版本</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">//<span class="keyword">then</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">git push origin HEAD --force <span class="comment"># 强制提交到远程仓库</span></span></pre></td></tr></tbody></table></figure><h4 id="如何把一个已经存在的-new-project-添加到-github"><a href="#如何把一个已经存在的-new-project-添加到-github" class="headerlink" title="如何把一个已经存在的 new project 添加到 github"></a>如何把一个已经存在的 new project 添加到 github</h4><ol><li>在 github 创建一个新的 repo；</li><li><code>git init</code> (初始化 new project)</li><li><code>git add .</code> (添加所有的本地文件到 local repo)</li><li><code>git commit -m "first commit"</code> (提交文件到 local repo)</li><li><code>git remote add origin remote repository URL</code> (设置remote url，告诉你本地的内容应该被 push 到哪里)</li><li><code>git push origin master</code> (把本地内容推送到远端)</li></ol><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul><li>[git-workflow(<a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html" target="_blank" rel="external nofollow noreferrer noopener">http://www.ruanyifeng.com/blog/2015/12/git-workflow.html</a>)</li><li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external nofollow noreferrer noopener">git-cheat-sheet</a></li><li><a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="external nofollow noreferrer noopener">git-branch-model</a></li><li><a href="http://zhoulingyu.com/2017/05/08/Git-Work-Flow/" target="_blank" rel="external nofollow noreferrer noopener">git-work-fl</a></li></ul><h4 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h4><ul><li><a href="http://iissnan.com/progit/" target="_blank" rel="external nofollow noreferrer noopener">Pro Git 简体中文版</a></li><li><a href="https://www.atlassian.com/git/tutorials" target="_blank" rel="external nofollow noreferrer noopener">atlassian Git Tutorials</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      git
    
    </summary>
    
    
      <category term="Git" scheme="http://notes.seirhsiao.com/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>Git常用命令速查表</title>
    <link href="http://notes.seirhsiao.com/posts/845ade18/"/>
    <id>http://notes.seirhsiao.com/posts/845ade18/</id>
    <published>2019-02-03T07:39:16.000Z</published>
    <updated>2019-12-07T00:58:09.464Z</updated>
    
    <content type="html"><![CDATA[<p><code>master</code>: 默认开发分支</p><p><code>origin</code>: 默认远程版本库</p><p><code>Head</code>: 默认开发分支</p><p><code>Head^</code>: Head的父提交</p><p>###创建版本库</p><figure class="highlight crmsh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">clone</span> <span class="title">&lt;url</span>&gt;   <span class="comment">#克隆远程版本库</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ git init          <span class="comment">#初始化本地版本库</span></span></pre></td></tr></tbody></table></figure><p>###修改和提交</p><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git status        <span class="comment">#查看状态</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git diff          <span class="comment">#查看变更内容</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git add .         <span class="comment">#跟踪所有改动过的文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git add &lt;file&gt;    <span class="comment">#跟踪指定的文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git mv &lt;old&gt;&lt;new&gt; <span class="comment">#文件改名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git rm&lt;file&gt;      <span class="comment">#删除文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git rm --cached&lt;file&gt;            <span class="comment">#停止跟踪文件但不删除</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git commit -m <span class="string">"commit messages"</span>  <span class="comment">#提交所有更新过的文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git commit --amend               <span class="comment">#修改最后一次改动</span></span></pre></td></tr></tbody></table></figure><p>###查看提交历史</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span>                    <span class="comment">#查看提交历史</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -p &lt;file&gt;          <span class="comment">#查看指定文件的提交历史</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git blame &lt;file&gt;           <span class="comment">#以列表方式查看指定文件的提交历史</span></span></span></pre></td></tr></tbody></table></figure><p>###撤销</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD      <span class="comment">#撤销工作目录中所有未提交文件的修改内容</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout HEAD &lt;file&gt;   <span class="comment">#撤销指定的未提交文件的修改内容</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git revert &lt;commit&gt;        <span class="comment">#撤销指定的提交</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --before=<span class="string">"1 days"</span>  <span class="comment">#退回到之前1天的版本</span></span></span></pre></td></tr></tbody></table></figure><p>###分支与标签</p><figure class="highlight crmsh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git branch                   <span class="comment">#显示所有本地分支</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ git checkout <span class="tag">&lt;branch/tag&gt;</span>    <span class="comment">#切换到指定分支和标签</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">$ git branch <span class="tag">&lt;new-branch&gt;</span>      <span class="comment">#创建新分支</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">$ git branch -d <span class="tag">&lt;branch&gt;</span>       <span class="comment">#删除本地分支</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">tag</span>                      <span class="title">#列出所有本地标签</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="title">$</span> git <span class="keyword">tag</span> <span class="title">&lt;tagname</span>&gt;            <span class="comment">#基于最新提交创建标签</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">tag</span> <span class="title">-d</span> <span class="tag">&lt;tagname&gt;</span>         <span class="comment">#删除标签</span></span></pre></td></tr></tbody></table></figure><p>###合并与衍合</p><figure class="highlight dts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git merge <span class="params">&lt;branch&gt;</span>        <span class="meta">#合并指定分支到当前分支</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ git rebase <span class="params">&lt;branch&gt;</span>       <span class="meta">#衍合指定分支到当前分支</span></span></pre></td></tr></tbody></table></figure><p>###远程操作</p><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git remote -v                   <span class="comment">#查看远程版本库信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git remote show &lt;remote&gt;        <span class="comment">#查看指定远程版本库信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git remote add &lt;remote&gt; &lt;url&gt;   <span class="comment">#添加远程版本库</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git fetch &lt;remote&gt;              <span class="comment">#从远程库获取代码</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git pull &lt;remote&gt; &lt;branch&gt;      <span class="comment">#下载代码及快速合并</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git push &lt;remote&gt; &lt;branch&gt;      <span class="comment">#上传代码及快速合并</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git push &lt;remote&gt; <span class="symbol">:&lt;branch/tag-name&gt;</span>  <span class="comment">#删除远程分支或标签</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git push --tags                       <span class="comment">#上传所有标签</span></span></pre></td></tr></tbody></table></figure><p>###资料链接</p><ol><li><a href="https://try.github.io/levels/1/challenges/1" target="_blank" rel="external nofollow noreferrer noopener">Try Git</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;master&lt;/code&gt;: 默认开发分支&lt;/p&gt;
&lt;p&gt;&lt;code&gt;origin&lt;/code&gt;: 默认远程版本库&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Head&lt;/code&gt;: 默认开发分支&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Head^&lt;/code&gt;: Head的父提交&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Git" scheme="http://notes.seirhsiao.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://notes.seirhsiao.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础</title>
    <link href="http://notes.seirhsiao.com/posts/58a40d09/"/>
    <id>http://notes.seirhsiao.com/posts/58a40d09/</id>
    <published>2019-02-03T07:39:16.000Z</published>
    <updated>2019-12-07T01:04:13.214Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#variables">变量</a></li><li><a href="#statement">控制语句</a></li><li><a href="#java_api">Java API</a></li><li><a href="#class">类</a></li><li><a href="#inherit">继承</a></li><li><a href="#abstract">抽象</a></li><li><a href="#interface">接口</a></li><li><a href="#constructor">构造器</a></li><li><a href="#static">静态</a></li><li><a href="#exception">异常处理</a></li><li><a href="#thread">线程</a></li></ul><p>####变量<br><a href="#variables">变量</a></p><p><code>Java</code> 有两种变量：</p><ol><li><code>primitive</code>主数据类型（<code>boolean</code>, <code>char</code>, <code>integer</code>, <code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>float</code>, <code>double</code>)</li><li>引用</li></ol><ul><li>变量命名规则： 必须以字母，下划线<code>_</code>或<code>$</code>符号开头；</li><li>实例变量有默认值，局部变量没有默认值；</li></ul><p>变量的比较：</p><ul><li><code>==</code>用于比较两个primitive主数据类型货判断两个引用是否引用同一个对象；</li><li><code>equals()</code>来判断两个对象是否在意义上相等（例如两个<code>String</code>对象是否带有相同的字节组合）;</li></ul><blockquote><p><code>Integer</code> 和 <code>int</code> 的区别: <code>int</code> 是 <code>Java</code> 提供的原始数据类型，而 <code>Integer</code> 是 <code>Java</code> 为 <code>int</code> 提供的封装类，它提供了很多整数相关的<br>操作方法；<code>int</code> 的默认值是0，而 <code>Integer</code> 的默认值是 <code>null</code></p></blockquote><p>####控制语句<br><a href="#statement">控制语句</a></p><h5 id="if…esle"><a href="#if…esle" class="headerlink" title="if…esle"></a>if…esle</h5><ol><li>if语句</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">90</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(score &gt; <span class="number">100</span>){</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  System.out.println(<span class="string">"....."</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//以上可以简写为：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(score &gt; <span class="number">100</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  System.out.println(<span class="string">"....."</span>);</span></pre></td></tr></tbody></table></figure><ol start="2"><li>if…else 语句</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">90</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(score &gt; <span class="number">100</span>){</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  System.out.println(<span class="string">"....."</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">} <span class="keyword">else</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  System.out.println(<span class="string">"....."</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><ol start="3"><li>if…else if…else</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">90</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">100</span>) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  System.out.println(<span class="string">"....."</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">90</span>) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  System.out.println(<span class="string">"....."</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">} <span class="keyword">else</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  ....</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>#####switch</p><ul><li><code>switch</code>语句中的条件表达式的值只能是int，string或枚举类型</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">90</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(score){</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">90</span> :</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    System.out.println(<span class="string">"A"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">50</span> :</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    System.out.println(<span class="string">"B"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    System.out.println(<span class="string">"C"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>#####循环</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) {...}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : arr) {...}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(i &lt; arr.length) {...}</span></pre></td></tr></tbody></table></figure><p>可以通过 break 关键字跳出当前循环，如果要跳出嵌套循环该如何做呢？</p><ol><li>使用标号</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ok:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">10</span> &amp;&amp; !bo; i++){</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   System.out.println(<span class="string">"i:"</span>+i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;j++){</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      System.out.println(<span class="string">"j:"</span>+j);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span>(j==<span class="number">8</span>){</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">         <span class="keyword">break</span> ok;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">   }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><ol start="2"><li>控制外层循环表达式</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> con = <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">10</span> &amp;&amp; !con; i++){</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"i:"</span>+i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;j++){</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   System.out.println(<span class="string">"j:"</span>+j);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">if</span>(j==<span class="number">8</span>){</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      con = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">break</span> ok;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">   }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>####Java API<br><a href="#java_api">Java API</a></p><p>要使用<code>API</code>中的类，你必须要知道它被放在哪个包中，有两种方式指定 <code>Java</code> 使用的类：</p><ol><li><code>import</code> 把 <code>import</code> 放在源文件的最前面；</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span></pre></td></tr></tbody></table></figure><ol start="2"><li>在程序中打出全名；</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">java.util.ArrayList&lt;String&gt; myList = <span class="keyword">new</span> java.util.ArrayList&lt;String&gt;();</span></pre></td></tr></tbody></table></figure><p><code>ArrayList: ArrayList</code> 不同于普通数组，创建时不需要指定大小，并且可以调用其提供的大量方法；</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  ArrayList&lt;String&gt; myList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  String a = <span class="keyword">new</span> String(<span class="string">"liu"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  myList.add(a);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  String b = <span class="string">"xing"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  myList.add(b);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  System.out.println(<span class="string">"the array list length is: "</span> + myList.size());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  String c = myList.get(<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  System.out.println(c);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">boolean</span> isIn = myList.contains(b);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> i = myList.indexOf(a);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">boolean</span> isEmpty = myList.isEmpty();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>Math:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Math.ceil(<span class="number">11.3</span>) =&gt; <span class="number">12</span> 向上取整</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Math.floor(<span class="number">11.6</span>) =&gt; <span class="number">11</span> 向下取整</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Math.round(<span class="number">11.5</span>) =&gt; <span class="number">12</span> 四舍五入向下取整，算法为Math.floor(x+<span class="number">0.5</span>)</span></pre></td></tr></tbody></table></figure><p>####类<br><a href="#class">类</a></p><p><code>public class Test{...}</code></p><ul><li>类名必须和文件名相同</li><li>一个文件可以有多个类，但是只能有一个是public的</li></ul><p>#####内部类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>{...}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><ol><li>内部类可以使用外部类的所有方法和变量</li><li>内部类的实例一定会绑在外部类的实例上</li></ol><p>####继承<br><a href="#inherit">继承</a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> &lt;子类&gt; <span class="keyword">extends</span> &lt;父类&gt; </span>{}</span></pre></td></tr></tbody></table></figure><p>继承下来的方法可以被覆盖掉，但是实例变量不能被覆盖掉</p><p>#####4种访问权限：</p><ol><li><code>private</code>: <code>private</code>类型的成员不会被继承；</li><li><code>default</code>: 只有在同一包中的默认事物可以存取；</li><li><code>protected</code>: 允许不在相同包的子类继承受保护的部分；</li><li><code>public</code>: 任何程序代码都可以存取的公开事物；<code>public</code>类型的成员会被继承；</li></ol><table><thead><tr><th>Modifier</th><th>Class</th><th>Package</th><th>Subclass</th><th>World</th></tr></thead><tbody><tr><td>public</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>protected</td><td>Y</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>no modifier</td><td>Y</td><td>Y</td><td>N</td><td>N</td></tr><tr><td>private</td><td>Y</td><td>N</td><td>N</td><td>N</td></tr></tbody></table><p>#####方法的覆盖：</p><ol><li>参数必须一样，且返回类型必须兼容；</li><li>不能降低方法的存取权限；</li></ol><p>#####方法的重载：</p><p>重载的意义是方法的名称相同，但参数不同，重载与多态毫无关系。</p><ol><li>返回类型可以不同，但不可以只改变返回类型；</li><li>可以更改存取权限；</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beFriendly</span><span class="params">()</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   System.out.println(<span class="string">"father befriendly"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">return</span> <span class="number">5</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> weight = <span class="number">15</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beFriendly</span><span class="params">()</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">super</span>.beFriendly(); <span class="comment">//可以用super调用父类的方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    System.out.println(<span class="string">"son befriendly"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">6</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    Cat c = <span class="keyword">new</span> Cat();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    c.beFriendly();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    System.out.println(c.age());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    System.out.println(c.weight);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>####抽象<br><a href="#abstract">抽象</a></p><p>抽象类：抽象类代表没有人能创建出该类的实例，抽象类除了被继承过之外，没有用途，没有值，没有目的。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>{}</span></pre></td></tr></tbody></table></figure><p>抽象方法：抽象方法代表此方法一定被覆盖过。</p><ul><li>抽象方法没有实体</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span></pre></td></tr></tbody></table></figure><ul><li>如果声明一个抽象的方法，必须将类也标记为抽象的，不能在非抽象类中拥有抽象方法，但抽象类中可以有非抽象方法。</li></ul><p>####接口<br><a href="#interface">接口</a></p><p>接口<code>interface</code>可以用来解决多重继承问题,接口的方法一定是抽象的。</p><p>接口的定义：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pet</span> </span>{....}</span></pre></td></tr></tbody></table></figure><p>接口的实现：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Canine</span> <span class="keyword">implements</span> <span class="title">Pet</span> </span>{....}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//类可以实现多个接口</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Canine</span> <span class="keyword">implements</span> <span class="title">Pet</span>, <span class="title">Saveable</span>, <span class="title">Paintable</span> </span>{....}</span></pre></td></tr></tbody></table></figure><p>Pet.java:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pet</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//接口的方法必须是抽象的，所以它们没有内容，必须以分号结尾</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">beFriendly</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>Dog.java:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Pet</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> <span class="comment">//Dog类必须实现Pet的方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beFriendly</span><span class="params">()</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   System.out.println(<span class="string">"befriendly"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">   System.out.println(<span class="string">"play"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">   Dog d = <span class="keyword">new</span> Dog();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">   d.beFriendly();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">   d.play();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>####构造器<br><a href="#constructor">构造器</a></p><p>#####构造函数</p><p>构造函数带有你在初始化对象时会执行的程序代码，也就是新建一个对象时会被执行，如果你没有写构造函数，编译器会帮你写。<br>但是需要注意，编译器只会在你完全没有设定构造函数时才会帮你写构造函数。如果你已经写了一个有参数的构造函数，并且你还<br>需要一个没有参数的构造函数，你必须自己手动写。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//构造函数没有返回类型，而且要与类的名称相同</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Duck</span><span class="params">()</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    System.out.println(<span class="string">"duck initlalize"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Duck</span><span class="params">(<span class="keyword">int</span> i)</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    System.out.println(<span class="string">"initlalize:"</span> + i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    Duck d = <span class="keyword">new</span> Duck();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><blockquote><p>在 <code>Ruby</code> 中构造函数名为 <code>intialize</code>，但是 <code>Ruby</code> 和 <code>Java</code> 不同的是，<code>Ruby</code> 并不支持函数重载，它通过设置默认参数来实现带有<br>不同个数参数的构造函数</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class">   <span class="title">def</span> <span class="title">initialize</span>(<span class="title">name</span> </span>= nil)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     puts <span class="string">"init object"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   end</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">end</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">d = Duck.<span class="keyword">new</span></span></pre></td></tr></tbody></table></figure><p>在创建新对象时，所有继承下来的构造函数都会执行，先执行父类的，再执行子类的</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck1</span> <span class="keyword">extends</span> <span class="title">Duck</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Duck1</span><span class="params">()</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">       System.out.println(<span class="string">"duck1 initialize"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      Duck1 d = <span class="keyword">new</span> Duck1();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">   }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">➜</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">=&gt; duck initlalize</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">   duck1 initlalize</span></pre></td></tr></tbody></table></figure><blockquote><p><code>Ruby</code> 在创建新的对象时，并不会自动执行来自父类的构造函数</p></blockquote><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     puts <span class="string">"duck init"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck1</span> &lt; Duck</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">     <span class="comment">#可以使用super调用父类的构造函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">     <span class="comment">#super</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">     puts <span class="string">"duck1 init"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">d1 = Duck1.new =&gt; <span class="string">"duck1 init"</span></span></pre></td></tr></tbody></table></figure><p>super() VS this()</p><ol><li><code>super()</code> 用于调用父类的构造函数</li><li><code>this()</code> 用于从某个构造函数调用同一个类的另外一个构造函数，<code>this()</code> 只能用在构造函数中，且必须是第一行语句</li><li>每个构造函数可以选择调用 <code>super()</code> 或 <code>this()</code>，但不能同时调用</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck1</span> <span class="keyword">extends</span> <span class="title">Duck</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Duck1</span><span class="params">()</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">       System.out.println(<span class="string">"duck1 initialize"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Duck1</span><span class="params">(<span class="keyword">int</span> i)</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">       <span class="keyword">this</span>(); <span class="comment">//调用上面的构造函数Duck1()</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">       System.out.println(<span class="string">"duck1 initialize"</span> + i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      Duck1 d = <span class="keyword">new</span> Duck1(<span class="number">100</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">   }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">=&gt; duck initlalize</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">   duck1 initialize</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">   duck1 initialize100</span></pre></td></tr></tbody></table></figure><p>####静态<br><a href="#static">静态</a></p><p>#####静态方法</p><p>用<code>static</code>关键字标记方法是静态方法</p><ol><li>静态的方法不能调用非静态的变量</li><li>静态方法也不能调用非静态的方法</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     System.out.println(<span class="string">"static method"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      Test.test();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      Test t = <span class="keyword">new</span> Test();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      t.test(); <span class="comment">// Java 类的实例可以调用静态方法， 而 Ruby 不可以</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">   }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><blockquote><p><code>Java</code> 中的静态方法类似于 <code>Ruby</code> 的类方法，但不同的是 <code>Java</code> 的静态方法可以被类的实例所调用，<br>而 <code>Ruby</code> 类的实例无法调用类方法</p></blockquote><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">test</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">       puts <span class="string">"class method"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">Test.test</span></pre></td></tr></tbody></table></figure><p>#####静态变量</p><ol><li>静态变量被同类的所有实例所共享</li><li>静态变量会在该类的任何静态方法执行之前就初始化</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    count++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    System.out.println(<span class="string">"count: "</span>+ count);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">     Test t = <span class="keyword">new</span> Test();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">     Test t1 = <span class="keyword">new</span> Test();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">   }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">count: <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">count: <span class="number">2</span></span></pre></td></tr></tbody></table></figure><blockquote><p><code>Java</code> 的静态变量类似于 <code>Ruby</code> 的类变量</p></blockquote><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    @@count = <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      @@count += <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      puts <span class="string">"@@count: <span class="subst">#{@@count}</span>"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">t = Test.new</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">t1 = Test.new</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">@@count: <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">@@count: <span class="number">2</span></span></pre></td></tr></tbody></table></figure><p>#####静态final变量</p><p>一个被标记为 <code>final</code> 的变量到表它一旦被初始化之后就不会改动，也就是说类加载之后静态 <code>fianl</code> 变量就一直会维持原值</p><ol><li>常量的名称应该是大写字母</li><li><code>Java</code> 中的常量是把变量同时标记为 <code>static</code> 和 <code>final</code> 的</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   <span class="comment">//常量的名称应该是大写字母</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE = <span class="number">100</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">     System.out.println(Test.SIZE);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">   }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>#######final的其他用途</p><ol><li><code>final</code> 的 <code>method</code>不能被覆盖；</li><li><code>final</code> 的类不能被继承；</li></ol><p>####异常处理<br><a href="#exception">异常处理</a></p><p>异常是一种 <code>Exception</code> 类型的对象<br>编译器不会注意 <code>RuntimeException</code> 类型的异常<br>方法可以用 <code>throws</code> 关键字抛出异常对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//危险动作</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">} <span class="keyword">catch</span>(Exception ex) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//尝试恢复</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">} <span class="keyword">finally</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//不管有没有异常都得执行的程序</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">divide</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">10</span>;i&gt;=<span class="number">0</span>;i--){</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="number">100</span>/i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">     }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">     Test t = <span class="keyword">new</span> Test();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">     <span class="keyword">try</span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">       t.divide();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">       System.out.println(<span class="string">"test1"</span>); <span class="comment">//如果divide()不出异常，该句不会被执行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">     } <span class="keyword">catch</span>(Exception ex) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">       System.out.println(<span class="string">"exception found"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">     } <span class="keyword">finally</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">       System.out.println(<span class="string">"finally"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">     }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">   }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><blockquote><p><code>java</code>的异常处理机制与<code>ruby</code>的非常相似</p></blockquote><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">rescue</span>(exception ex)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">ensure</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure><p>######处理多种异常</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> <span class="keyword">throws</span> Exception1, Exception2 </span>{....}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    ...play()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">} <span class="keyword">catch</span>(Exception1 ex1) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">} <span class="keyword">catch</span>(Exception2 ex2) {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>####线程<br><a href="#thread">线程</a></p><h5 id="Java-有两种方法来创建线程："><a href="#Java-有两种方法来创建线程：" class="headerlink" title="Java 有两种方法来创建线程："></a>Java 有两种方法来创建线程：</h5><ul><li>从 <code>Thread</code> 类继承一个新的线程类，重载它的 <code>run()</code> 方法</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        play();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">       System.out.println(Thread.currentThread().getName());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">       Thread1 t = <span class="keyword">new</span> Thread1();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">       t.setName(<span class="string">"liu"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">       t.start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">       System.out.println(<span class="string">"main"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">   }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><ul><li>实现 <code>Runnable</code> 接口，覆盖它的 <code>run()</code> 方法</li></ul><p>实现 <code>Runnable</code> 接口来建立给 <code>thread</code> 运行的任务</p><p><code>Runnable</code> 接口只有一个方法：<code>public void run()</code>，且没有参数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">      doMore();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doMore</span><span class="params">()</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      System.out.println(<span class="string">"MyRunnable"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTester</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        Runnable threadJob = <span class="keyword">new</span> MyRunnable();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//将Runnable的实例传给Thread的构造函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        Thread myThread = <span class="keyword">new</span> Thread(threadJob);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//调用start()才会让线程开始执行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        myThread.start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"back main"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h5 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h5><figure>    <img data-src="/images/java01.png" class="lazyload">    <figcaption>Java 线程状态图</figcaption></figure><ol><li>新建状态（<code>New</code>）：新创建了一个线程对象</li><li>就绪状态（<code>Runnable</code>）：线程对象创建后，其他线程调用了该对象的 start() 方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。</li><li>运行状态（<code>Running</code>）：就绪状态的线程获取了CPU，执行程序代码。</li><li>阻塞状态（<code>Blocked</code>）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：<ul><li>等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。</li><li>同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。</li><li>其他阻塞：运行的线程执行<code>sleep()</code>或<code>join()</code>方法，或者发出了<code>I/O</code>请求时，<code>JVM</code>会把该线程置为阻塞状态。当<code>sleep()</code>状态超时、<code>join()</code>等待线程终止或者超时、或者<code>I/O</code>处理完毕时，线程重新转入就绪状态。</li></ul></li><li>死亡状态（<code>Dead</code>）：线程执行完了或者因异常退出了<code>run()</code>方法，该线程结束生命周期</li></ol><h5 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h5><p>可以调用 <code>Thread</code> 类的方法 <code>getPriority()</code> 和 <code>setPriority()</code> 来存取线程的优先级, 线程的优先级是1-10之间的正整数</p><ul><li>最低优先级： 1</li><li>最高优先级：10</li><li>默认优先级： 5</li></ul><p>#####synchronized</p><p><code>synchronized</code> 关键字来修饰方法使它每次只能被单一的线程存取。</p><p><code>private synchronized void play(){...}</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>;i&gt;<span class="number">0</span>;i--){</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">": "</span> + <span class="number">10</span>/i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">     }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">     Runnable job = <span class="keyword">new</span> Test();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">     Thread one = <span class="keyword">new</span> Thread(job);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">     Thread two = <span class="keyword">new</span> Thread(job);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">     one.setName(<span class="string">"one"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">     two.setName(<span class="string">"two"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">     one.start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">     two.start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">     }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"> =&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">one: <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">one: <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">one: <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">two: <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">two: <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">two: <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">two: <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">two: <span class="number">10</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">one: <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">one: <span class="number">10</span></span></pre></td></tr></tbody></table></figure><p>加上 <code>synchronized</code> 关键字后：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>;i&gt;<span class="number">0</span>;i--){</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">": "</span> + <span class="number">10</span>/i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">     }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">     Runnable job = <span class="keyword">new</span> Test();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">     Thread one = <span class="keyword">new</span> Thread(job);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">     Thread two = <span class="keyword">new</span> Thread(job);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">     one.setName(<span class="string">"one"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">     two.setName(<span class="string">"two"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">     one.start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">     two.start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">     }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">=&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">one: <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">one: <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">one: <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">one: <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">one: <span class="number">10</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">two: <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">two: <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">two: <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">two: <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">two: <span class="number">10</span></span></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      java
    
    </summary>
    
    
      <category term="Java" scheme="http://notes.seirhsiao.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>clojure学习 —— 学习资料汇总</title>
    <link href="http://notes.seirhsiao.com/posts/955788d1/"/>
    <id>http://notes.seirhsiao.com/posts/955788d1/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:36:32.448Z</updated>
    
    <content type="html"><![CDATA[<p>Clojure（发音类似”closure”，[‘kləʊʒə(r)]）是一套现代的Lisp语言的动态语言版，它是一个函数式多用途的语言，其语法和其他的Lisp一样，都是建立在 S-expression 之上，即”全是括号，前缀表达式”的语言。</p><p>Clojure可以执行于Java虚拟机（JVM）、通用语言运行时（CLR），以及JavaScript引擎之上。与其他Lisp一样，Clojure认为代码即数据，同时有复杂的宏系统。</p><a id="more"></a><h3 id="Clojure-的理念和特性"><a href="#Clojure-的理念和特性" class="headerlink" title="Clojure 的理念和特性"></a>Clojure 的理念和特性</h3><p>Clojure是什么，为什么有人要学这门语言? 总的来说，那些认为 Clojure会在现有的大多数编程语言中取得成功的人至少基于这样一个理由: 它是一门新的，支持并发的语言。而那些对lisp语言缺乏了解的人却往往会认为：这是一门相当奇怪的，充斥着令人困惑的圆括号和方括号的语言.</p><p>但是，不争的事实是 Clojure 在市场上赢得比其他新诞生的编程语言更多的追捧和表现，更强的发展势头。它第一个对外的发行版是在2007年秋季的时候发布的，在2009年5月发行了第一个稳定版，到这个时候，它已经培育了一个活跃的、充满热情的社区，一个欣欣向荣的开发工具和类库的生态系统，它们被用在迅速增长的一系列专业的应用程序中。</p><h3 id="下一代的语言"><a href="#下一代的语言" class="headerlink" title="下一代的语言"></a>下一代的语言</h3><p>每一年，在世界范围内的众多机构中的都有很多有才华的计算机科学家通过发表成千上万的论文来阐发它们新的和有趣的想法。这些新的概念在经受了自然选择和沉淀后，其中那些优秀和有用的部分会被准许进入实际的应用环境中。</p><p>Clojure 包括了众多尚未在其他(任何)编程语言的实现中出现的最新的想法和伟大的理念. 这其中最引人注目的就是涉及并发程序的部分：软件内存交互和基于代理的进程调度 (Software Transactional Memory and agent-based processing ) 被 “烧录进” (嵌入)到 Clojure编程语言的底层. 除此之外(例如持续不可更改 persistent immutability) 还拥有很多精妙的设计理念，这些设计理念是现代学术研究的成果，也是数十载实践的经验。</p><p>抛开Clojure的学术背景，Clojure 是主要设计原则是坚持: 有用性(useful 有益处的) 高于可用性. 它的高级属性是被精心选择的,目的是向程序员提供健壮的、干净的代码，以便程序员容易理解和高效编程. Clojure虽然有很强的学术背景支持，但是绝不是一门只在象牙塔中的语言，每天都有众多开发者在各自的开发领域内使用它。</p><h3 id="动态而强有力-没错-它是lisp"><a href="#动态而强有力-没错-它是lisp" class="headerlink" title="动态而强有力 (没错,它是lisp!)"></a>动态而强有力 (没错,它是lisp!)</h3><p>对下面语句的意思的理解会因为读者编程经验的不同而有很大差异，它可能会让你非常兴奋，也可能让你产生一些轻微的不适. Clojure 是完全的，真正意义上的神圣的lisp语言的一个方言。</p><p>lisp语言因为其无以伦比强大能力和几乎无穷的表达力而获得了盛誉，Clojure自然也不例外。它的功能和元编程的能力是建立在这样的基础之上的：异常驯服的C语言的”石头” 或 具有延展性的java语言的”木头” . 你可以用几百行甚至几十行Clojure代码取替代几千行静态语言的代码，伴随着这而来的是bug数量的减少和开发时间的缩短。</p><p>样板代码(Boilerplate code )被完全删去. 域指定语言(Domain Specific Languages ) 不仅简单，而且更一般化–lisp程序往往是按照 “自下而上” 的开发方式写成的。展开式(演进式)的 结构和语法更适合特定的问题领域。你在程序运行的时候取修改程序，而不需要重新编译或重启程序。</p><p>但是，历史上也有对lisp进行诋毁的人，或许称为抱怨更为合适. lisp发展过程中，没有完整的规范, 各种不兼容的实现,陈旧落伍的限制.cruft accumulate 在其存在的四五十年里一直存在. 对于 大多数人来说，它的语法过于诡异了。</p><p>Clojure 修正上面的大多数这些问题. 它保留了 lisp 的思想和哲学,并同时清除了过去的很多限制. Clojure 高速、干净、具有优先能力和优雅的特征. 但是没有改变lisp中 “代码也是数据” 的哲学. Clojure 语言在直觉和观感上比历史上的lisp更易于阅读. 在后面开始学习的初级阶段,你就发现虽然 仍有各种括号,但是代码是难以置信的容易读和写。</p><p>对于那些熟悉lisp语言的人来说,他们很快就会发现他们非常适应Clojure. 对于那些原先没有接触 过lisp的人来说，也没有必要担心， Clojure是简洁和无痛学习。</p><h3 id="官方文档："><a href="#官方文档：" class="headerlink" title="官方文档："></a>官方文档：</h3><p><a href="http://clojure.org/documentation" target="_blank" rel="external nofollow noreferrer noopener">http://clojure.org/documentation</a> </p><h3 id="中文资料（强烈推荐）："><a href="#中文资料（强烈推荐）：" class="headerlink" title="中文资料（强烈推荐）："></a>中文资料（强烈推荐）：</h3><ol><li>clojure入门教程<br><a href="http://xumingming.sinaapp.com/302/clojure-functional-programming-for-the-jvm-clojure-tutorial/" target="_blank" rel="external nofollow noreferrer noopener">http://xumingming.sinaapp.com/302/clojure-functional-programming-for-the-jvm-clojure-tutorial/</a> </li><li>clojure文档翻译<br><a href="http://code.google.com/p/clojure-doc-en2ch/w/list" target="_blank" rel="external nofollow noreferrer noopener">http://code.google.com/p/clojure-doc-en2ch/w/list</a> </li><li>clojure手册（低版本）<br><a href="http://qiujj.com/static/clojure-handbook.html" target="_blank" rel="external nofollow noreferrer noopener">http://qiujj.com/static/clojure-handbook.html</a> </li><li>clojure中文社区：<br><a href="http://blog.clojure.cn/" target="_blank" rel="external nofollow noreferrer noopener">http://blog.clojure.cn/</a> </li><li>Lisp中文社区：<br><a href="http://www.lispchina.com/" target="_blank" rel="external nofollow noreferrer noopener">http://www.lispchina.com/</a></li></ol><h3 id="英文资料（强烈推荐）："><a href="#英文资料（强烈推荐）：" class="headerlink" title="英文资料（强烈推荐）："></a>英文资料（强烈推荐）：</h3><p><a href="http://clojure-doc.org/articles/content.html" target="_blank" rel="external nofollow noreferrer noopener">http://clojure-doc.org/articles/content.html</a> </p><h3 id="clojure-开源工具："><a href="#clojure-开源工具：" class="headerlink" title="clojure 开源工具："></a>clojure 开源工具：</h3><blockquote></blockquote><p><code>clojure工具箱汇总：</code><br><a href="http://www.clojure-toolbox.com/" target="_blank" rel="external nofollow noreferrer noopener">http://www.clojure-toolbox.com/</a><br><code>ring server：</code><br><a href="https://github.com/ring-clojure/ring/wiki" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/ring-clojure/ring/wiki</a><br><code>compojure：</code><br><a href="https://github.com/weavejester/compojure/wiki" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/weavejester/compojure/wiki</a><br><code>noir web框架：</code><br><a href="http://www.webnoir.org" target="_blank" rel="external nofollow noreferrer noopener">http://www.webnoir.org</a><br><code>sandbar session框架：</code><br><a href="https://github.com/brentonashworth/sandbar/wiki" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/brentonashworth/sandbar/wiki</a><br><code>clojureQL连接数据库：</code><br><a href="http://www.clojureql.org/" target="_blank" rel="external nofollow noreferrer noopener">http://www.clojureql.org/</a><br><code>datomic数据库：</code><br><a href="http://www.datomic.com/" target="_blank" rel="external nofollow noreferrer noopener">http://www.datomic.com/</a><br><code>fleetdb数据库：</code><br><a href="http://fleetdb.org/" target="_blank" rel="external nofollow noreferrer noopener">http://fleetdb.org/</a><br><a href="https://github.com/mmcgrana/fleetdb-client" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/mmcgrana/fleetdb-client</a><br><code>pdf处理：</code><br><a href="https://github.com/yogthos/clj-pdf" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/yogthos/clj-pdf</a><br><code>csv处理：</code><br><a href="https://github.com/clojure/data.csv" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/clojure/data.csv</a><br><code>json库：</code><br><a href="https://github.com/dakrone/cheshire" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/dakrone/cheshire</a><br><a href="https://github.com/mmcgrana/clj-json" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/mmcgrana/clj-json</a><br><code>mail库：</code><br><a href="https://github.com/clojurewerkz/mailer" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/clojurewerkz/mailer</a><br><a href="https://github.com/MayDaniel/clj-mail" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/MayDaniel/clj-mail</a><br><code>图形处理库：</code><br><a href="https://github.com/mikera/clisk" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/mikera/clisk</a><br><a href="https://github.com/ztellman/penumbra/wiki/Applications" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/ztellman/penumbra/wiki/Applications</a><br><a href="https://github.com/quil/quil" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/quil/quil</a><br><code>音频处理库：</code><br><a href="https://github.com/overtone/overtone" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/overtone/overtone</a><br><code>报表工具库：</code><br><a href="http://incanter.org/" target="_blank" rel="external nofollow noreferrer noopener">http://incanter.org/</a><br><code>定时任务框架：</code><br><a href="http://clojurequartz.info" target="_blank" rel="external nofollow noreferrer noopener">http://clojurequartz.info</a><br><code>webservices</code><br><a href="http://clojure-liberator.github.com" target="_blank" rel="external nofollow noreferrer noopener">http://clojure-liberator.github.com</a></p><p>附：编程语言发展的编年史</p><p>编程语言的历史早于真正意义的计算机的出现。19世纪就有“可编程的”织布机和钢琴弹奏装置出现，它们都是领域特定语言(DSL)的样例。</p><ul><li>1951 – Regional Assembly Language</li><li>1952 – Autocode</li><li>1954 – IPL (LISP语言的祖先)</li><li>1955 – FLOW-MATIC (COBOL语言的祖先)</li><li>1957 – FORTRAN (第一个编译型语言)</li><li>1957 – COMTRAN (COBOL语言的祖先)</li><li>1958 – LISP</li><li>1958 – ALGOL 58</li><li>1959 – FACT (COBOL语言的祖先)</li><li>1959 – COBOL</li><li>1959 – RPG</li><li>1962 – APL</li><li>1962 – Simula</li><li>1962 – SNOBOL</li><li>1963 – CPL (C语言的祖先)</li><li>1964 – BASIC</li><li>1964 – PL/I</li><li>1966 – JOSS</li><li>1967 – BCPL (C语言的祖先)</li><li>1968 – Logo</li><li>1969 – B (C语言的祖先)</li><li>1970 – Pascal</li><li>1970 – Forth</li><li>1972 – C</li><li>1972 – Smalltalk</li><li>1972 – Prolog</li><li>1973 – ML</li><li>1975 – Scheme</li><li>1978 – SQL</li><li>1980 – C++ (既有类的C语言，更名于1983年7月)</li><li>1983 – Ada</li><li>1984 – Common Lisp</li><li>1984 – MATLAB</li><li>1985 – Eiffel</li><li>1986 – Objective-C</li><li>1986 – Erlang</li><li>1987 – Perl</li><li>1988 – Tcl</li><li>1988 – Mathematica</li><li>1989 – FL</li><li>1990 – Haskell</li><li>1991 – Python</li><li>1991 – Visual Basic</li><li>1993 – Ruby</li><li>1993 – Lua</li><li>1994 – CLOS (ANSI Common Lisp的一部分)</li><li>1995 – Java</li><li>1995 – Delphi (Object Pascal)</li><li>1995 – JavaScript</li><li>1995 – PHP</li><li>1996 – WebDNA</li><li>1997 – Rebol</li><li>1999 – D</li><li>2000 – ActionScript</li><li>2001 – C#</li><li>2001 – Visual Basic .NET</li><li>2002 – F#</li><li>2003 – Groovy</li><li>2003 – Scala</li><li>2007 – Clojure</li><li>2009 – Go</li><li>2011 – Dart<br>据统计已有256种编程语言，这么多的语言中只有一些是常用的或实用的。</li></ul><p>从1951年至今，人类一共发明了256种编程语言，每一种语言的出现都带有某些新特征。编程语言不断的在革新，很快就会有超出这个清单的新编程语言出现。更多参考 程序员必须知道的编程语言编年史</p><p>参考文章<br><a href="http://blog.csdn.net/sunboy_2050/article/details/17225813" target="_blank" rel="external nofollow noreferrer noopener">Clojure 学习入门（1）—— 学习资料</a><br><a href="http://dead-knight.iteye.com/blog/1827196" target="_blank" rel="external nofollow noreferrer noopener">clojure-学习资料汇总</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Clojure（发音类似”closure”，[‘kləʊʒə(r)]）是一套现代的Lisp语言的动态语言版，它是一个函数式多用途的语言，其语法和其他的Lisp一样，都是建立在 S-expression 之上，即”全是括号，前缀表达式”的语言。&lt;/p&gt;
&lt;p&gt;Clojure可以执行于Java虚拟机（JVM）、通用语言运行时（CLR），以及JavaScript引擎之上。与其他Lisp一样，Clojure认为代码即数据，同时有复杂的宏系统。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
  </entry>
  
  <entry>
    <title>AWK语言详解</title>
    <link href="http://notes.seirhsiao.com/posts/d5b3edf3/"/>
    <id>http://notes.seirhsiao.com/posts/d5b3edf3/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:37:26.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二-AWK语言详解"><a href="#二-AWK语言详解" class="headerlink" title="二. AWK语言详解"></a>二. AWK语言详解</h2><p>=====================</p><p>本章将主要通过示例来解释构成awk程序的概念。因为这是对语言的全面描述，材料会很详细，因此我们推荐你浏览略读，需要的时候再回来核对细节。</p><a id="more"></a><p>最简单的awk程序就是一个模式-动作语句的序列：::</p><pre><code>pattern    { action }pattern    { action }...</code></pre><p>某些语句中，可能没有模式；另一些语句中，可能没有动作及其大括号。awk检查你的程序以确认不存在语法错误后，一次读取一行输入，并对每一行按序处理模式。对于每个匹配到当前输入行的模式，执行其关联的动作。不存在模式，则匹配每个输入行，因此没有模式的每个动作对于每个输入行都要执行。一个仅包含模式的模式-动作语句将打印匹配该模式的每个输入行。本章的大部分内容中，名词”输入行(input-line)”和”记录(record)” 是同义的。2.5小节中，我们将讨论多行记录，即一个记录包含多行输入。</p><p>本章的第一节将详细描述模式。第二节通过表达式、赋值以及控制语句来描述动作。剩下的章节覆盖函数定义，输出，输入，以及awk程序如何调用其他程序等内容。多数章节包含了主要特性的概要。</p><p><strong>输入文件</strong> countries</p><p>本章中，我们使用一个名为 <code>countries</code> 的文件作为许多awk程序的输入。文件的每行包含一个国家的名字，以千平方英里为单位的面积，以百万为单位的人口数，以及属于哪个洲。数据是1984年的，苏联(USSR)被武断地归入了亚洲。文件中，四列数据以制表符tab分隔；以单个空格将 <code>North</code> 、 <code>South</code> 与 <code>America</code> 分隔开。</p><p>文件 <code>countries</code> 包含如下数据行：::</p><pre><code>USSR       8649      275        AsiaCanada       3852       25        North AmericaChina       3705     1032        AsiaUSA           3615      237        North AmericaBrazil       3286      134        South AmericaIndia       1267      746        AsiaMexico        762       78        North AmericaFrance        211       55        EuropeJapan        144      120        AsiaGermany         96       61        EuropeEngland         94       56        Europe</code></pre><p>本章的其余部分，如果没有明确说明输入文件，那么就是使用文件 <code>countries</code> 。</p><p><strong>程序的格式</strong></p><p>模式-动作语句以及动作中的语句通常以换行分隔，如果它们以分号分隔，则多个语句可以出现在一行中。分号可以放在任意语句的尾部。</p><p>动作的开大括号必须与其对应的模式处于同一行；动作的其余部分，包括闭大括号，则可以出现接下来的行中。</p><p>空行会被忽略；一般为了提高程序的可读性会在语句的前面或者后面插入空行。在操作符和操作数的两边插入空格和制表符也是为了提高可读性。</p><p>任意行的末尾可能会有注释。注释以符号 <code>#</code> 开始，结束于行尾，就像这样</p><p>::</p><pre><code>{ print $1, $3 }    # print country name and population</code></pre><p>长语句可以跨越多行，但要在断行的地方加入一个反斜杠和一个换行符：::</p><pre><code>{ print \        $1,        # country name        $2,        # area in thousands of square miles        $3 }    # population in millions</code></pre><p>如上例所示，语句也可以逗号断行，在每个断行的末尾也可以加入注释。</p><p>本书中，我们使用了多种格式风格，部分是为了说明相异之处，部分是为了避免程序占用太多的行空间。类似于本章中的简短程序，格式并不是很重要，但一致性与可读性可以帮助更长的程序保持可控。</p><h3 id="2-1-模式"><a href="#2-1-模式" class="headerlink" title="2.1 模式"></a>2.1 模式</h3><p>模式控制着动作的执行：模式匹配，其关联的动作则执行。本节将描述6种模式及其匹配条件。</p><p><strong>模式摘要</strong></p><ol><li><code>BEGIN</code> { 语句 }<br>在读取任何输入前执行一次 <code>语句</code></li><li><code>END</code> { 语句 }<br>读取所有输入之后执行一次 <code>语句</code></li><li>表达式 { 语句 }<br>对于 <code>表达式</code> 为真（即，非零或非空）的行，执行 <code>语句</code></li><li>/正则表达式/ { 语句 }<br>如果输入行包含字符串与 <code>正则表达式</code> 相匹配，则执行 <code>语句</code></li><li>组合模式 { 语句 }<br>一个 <code>组合模式</code> 通过与（&amp;&amp;），或（||），非（|），以及括弧来组合多个表达式；对于组合模式为真的每个输入行，执行 <code>语句</code></li><li>模式1，模式2 { 语句 }<br>范围模式(range pattern)匹配从与 <code>模式1</code> 相匹配的行到与 <code>模式2</code> 相匹配的行（包含该行）之间的所有行，对于这些输入行，执行 <code>语句</code> 。</li></ol><p>BEGIN和END不与其他模式组合。范围模式不可以是任何其他模式的一部分。BEGIN和END是仅有的必须搭配动作的模式。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;二-AWK语言详解&quot;&gt;&lt;a href=&quot;#二-AWK语言详解&quot; class=&quot;headerlink&quot; title=&quot;二. AWK语言详解&quot;&gt;&lt;/a&gt;二. AWK语言详解&lt;/h2&gt;&lt;p&gt;=====================&lt;/p&gt;
&lt;p&gt;本章将主要通过示例来解释构成awk程序的概念。因为这是对语言的全面描述，材料会很详细，因此我们推荐你浏览略读，需要的时候再回来核对细节。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://notes.seirhsiao.com/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://notes.seirhsiao.com/tags/linux/"/>
    
      <category term="awk" scheme="http://notes.seirhsiao.com/tags/awk/"/>
    
  </entry>
  
  <entry>
    <title>AWK入门指南</title>
    <link href="http://notes.seirhsiao.com/posts/69de0ee2/"/>
    <id>http://notes.seirhsiao.com/posts/69de0ee2/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:39:12.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-AWK入门指南"><a href="#一-AWK入门指南" class="headerlink" title="一. AWK入门指南"></a>一. AWK入门指南</h2><p>Awk是一种便于使用且表达能力强的程序设计语言，可应用于各种计算和数据处理任务。本章是个入门指南，让你能够尽快地开始编写你自己的程序。第二章将描述整个语言，而剩下的章节将向你展示如何使用Awk来解决许多不同方面的问题。纵观全书，我们尽量选择了一些对你有用、有趣并且有指导意义的实例。</p><a id="more"></a><h4 id="1-1-起步"><a href="#1-1-起步" class="headerlink" title="1.1 起步"></a>1.1 起步</h4><p>有用的awk程序往往很简短，仅仅一两行。假设你有一个名为 <code>emp.data</code> 的文件，其中包含员工的姓名、薪资（美元/小时）以及小时数，一个员工一行数据，如下所示：</p><table><thead><tr><th>name</th><th align="center">wage</th><th align="right">hours</th></tr></thead><tbody><tr><td>Beth</td><td align="center">4.00</td><td align="right">0</td></tr><tr><td>Dan</td><td align="center">3.75</td><td align="right">10</td></tr><tr><td>kathy</td><td align="center">4.00</td><td align="right">15</td></tr><tr><td>Mark</td><td align="center">5.00</td><td align="right">20</td></tr><tr><td>Mary</td><td align="center">5.50</td><td align="right">22</td></tr><tr><td>Susie</td><td align="center">4.25</td><td align="right">18</td></tr></tbody></table><p>现在你想打印出工作时间超过零小时的员工的姓名和工资（薪资乘以时间）。这种任务对于awk来说就是小菜一碟。输入这个命令行就可以了：::</p><pre><code>awk '$3 &gt;0 { print $1, $2 * $3 }' emp.data</code></pre><p>你应该会得到如下输出：</p><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Kathy <span class="number">40</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Mark <span class="number">100</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Mary <span class="number">121</span>   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">Susie <span class="number">76.5</span></span></pre></td></tr></tbody></table></figure><p>该命令行告诉系统执行引号内的awk程序，从输入文件 <code>emp.data</code> 获取程序所需的数据。引号内的部分是个完整的awk程序，包含单个模式-动作语句。模式 <code>$3&gt;0</code> 用于匹配第三列大于0的输入行，动作::</p><pre><code>{ print $1, $2 * $3 }</code></pre><p>打印每个匹配行的第一个字段以及第二第三字段的乘积。</p><p>如果你想打印出还没工作过的员工的姓名，则输入命令行：::</p><pre><code>awk '$3 == 0 { print $1 }' emp.data</code></pre><p>这里，模式 <code>$3 == 0</code> 匹配第三个字段等于0的行，动作::</p><pre><code>{ print $1 }</code></pre><p>打印该行的第一个字段。</p><p>当你阅读本书时，应该尝试执行与修改示例程序。大多数程序都很简短，所以你能快速理解awk是如何工作的。在Unix系统上，以上两个事务在终端里看起来是这样的：<br> </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"> $ awk <span class="string">'$3 &gt; 0 { print $1, $2 * $3 }'</span> emp.data  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  Kathy 40  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  Mark 100  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  Mary 121  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  Susie 76.5  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'$3 == 0 { print $1 }'</span> emp.data </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  Beth  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  Dan  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">$</span></pre></td></tr></tbody></table></figure><p></p><p>行首的 <code>$</code> 是系统提示符，也许在你的机器上不一样。</p><p><strong>AWK程序的结构</strong></p><p>让我们回头看一下到底发生了什么事情。上述的命令行中，引号之间的部分是awk编程语言写就的程序。本章中的每个awk程序都是一个或多个模式-动作语句的序列：</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="section">pattern</span>   { <span class="attribute">action</span> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">pattern   { <span class="attribute">action</span> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr></tbody></table></figure><p>awk的基本操作是一行一行地扫描输入，搜索匹配任意程序中模式的行。词语“匹配”的准确意义是视具体的模式而言，对于模式 <code>$3 &gt;0</code> 来说，意思是“条件为真”。</p><p>每个模式依次测试每个输入行。对于匹配到行的模式，其对应的动作（也许包含多步）得到执行，然后读取下一行并继续匹配，直到所有的输入读取完毕。</p><p>上面的程序都是模式与动作的典型示例。::</p><pre><code>$3 == 0 { print $1 }</code></pre><p>是单个模式-动作语句；对于第三个字段为0的每行，打印其第一个字段。</p><p>模式-动作语句中的模式或动作（但不是同时两者）都可以省略。如果某个模式没有动作，例如：::</p><pre><code>$3 == 0</code></pre><p>那么模式匹配到的每一行（即，对于该行，条件为真）都会被打印出来。该程序会打印 <code>emp.data</code> 文件中第三个字段为0的两行</p><p> Beth  4.00    0<br> Dan   3.75    0</p><p>如果有个没有模式的动作，例如：::</p><pre><code>{ print $1 }</code></pre><p>那么这种情况下的动作会打印每个输入行的第一列。</p><p>由于模式和动作两者任一都是可选的，所以需要使用大括号包围动作以区分于其他模式。</p><p><strong>执行AWK程序</strong></p><p>执行awk程序的方式有多种。你可以输入如下形式的命令行：::</p><pre><code>awk 'program' input files</code></pre><p>从而在每个指定的输入文件上执行这个program。例如，你可以输入：::</p><pre><code>awk '$3 == 0 { print $1 }' file1 file2</code></pre><p>打印file1和file2文件中第三个字段为0的每一行的第一个字段。</p><p>你可以省略命令行中的输入文件，仅输入：::</p><pre><code>awk 'program'</code></pre><p>这种情况下，awk会将program应用于你在终端中接着输入的任意数据行，直到你输入一个文件结束信号（Unix系统上为control-d）。如下是Unix系统的一个会话示例：</p><p><code>$ awk '$3 == 0 { print $1 }'</code><br>  Beth    4.00    0</p><p><strong>Beth</strong></p><p>  Dan   3.75    0</p><p><strong>Dan</strong></p><p>  Kathy 3.75    10<br>  Kathy 3.75    0</p><p><strong>Kathy</strong></p><p>  …</p><p>加粗的字符是计算机打印的。</p><p>这个动作非常便于尝试awk：输入你的程序，然后输入数据，观察发生了什么。我们再次鼓励你尝试这些示例并进行改动。</p><p>注意命令行中的程序是用单引号包围着的。这会防止shell解释程序中 <code>$</code> 这样的字符，也允许程序的长度超过一行。</p><p>当程序比较短小（几行的长度）的时候，这种约定会很方便。然而，如果程序较长，将程序写到一个单独的文件中会更加方便。假设存在程序 <code>progfile</code> ，输入命令行：::</p><pre><code>awk -f progfile     optional list of input files</code></pre><p>其中 <code>-f</code> 选项指示awk从指定文件中获取程序。可以使用任意文件名替换 <code>progfile</code> 。</p><p><strong>错误</strong></p><p>如果你的awk程序存在错误，awk会给你一段诊断信息。例如，如果你打错了大括号，如下所示：::</p><pre><code>awk '$3 == 0 [ print $1 }' emp.data</code></pre><p>你会得到如下信息：</p><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">awk: syntax error at source line <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> context <span class="keyword">is</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">         $<span class="number">3</span> == <span class="number">0</span> &gt;&gt;&gt; [ &lt;&lt;&lt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">         extra }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">         missing ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">awk: bailing <span class="keyword">out</span> at source line <span class="number">1</span></span></pre></td></tr></tbody></table></figure><p>“Syntax error”意味着在 <code>&gt;&gt;&gt; &lt;&lt;&lt;</code> 标记的地方检测到语法错误。“Bailing out”意味着没有试图恢复。有时你会得到更多的帮助-关于错误是什么，比如大括号或括弧不匹配。</p><p>因为存在句法错误，awk就不会尝试执行这个程序。然而，有些错误，直到你的程序被执行才会检测出来。例如，如果你试图用零去除某个数，awk会在这个除法的地方停止处理并报告输入行的行号以及在程序中的行号（这话是什么意思？难道输入行的行号是忽略空行后的行号？）。</p><h4 id="1-2-简单输出"><a href="#1-2-简单输出" class="headerlink" title="1.2 简单输出"></a>1.2 简单输出</h4><hr><p>这一节接下来的部分包含了一些短小，典型的awk程序，基于操纵上文中提到的<br><code>emp.data</code> 文件. 我们会简单的解释程序在做什么，但这些例子主要是为了介绍<br>awk 中常见的一些简单有用的操作 – 打印字段, 选择输入, 转换数据. 我们并<br>没有展现 awk 程序能做的所有事情, 也并不打算深入的去探讨例子中的一些细节.<br>但在你读完这一节之后, 你将能够完成一些简单的任务, 并且你将发现在阅读后<br>面章节的时候会变的容易的多.</p><p>我们通常只会列出程序部分, 而不是整个命令行. 在任何情况下, 程序都可以用<br>引号包含起来放到 awk 命令的地一个参数中运行, 就像上文中展示的那样, 或者<br>把它放到一个文件中使用 awk 的 <code>-f</code> 参数调用它.</p><p>在 awk 中仅仅只有两种数据类型: 数值 和 字符构成的字符串. <code>emp.data</code> 是<br>一个包含这类信息的典型文件 – 混合了被空格和(或)制表符分割的数字和词语.</p><p>Awk 程序一次从输入文件的中读取一行内容并把它分割成一个个字段, 通常默认<br>情况下, 一个字段是一个不包含任何空格或制表符的连续字符序列. 当前输入的<br>行中的地一个字段被称做 <code>$1</code>, 第二个是 <code>$2</code>, 以此类推. 整个行的内容被定<br>义为 <code>$0</code>. 每一行的字段数量可以不同.</p><p>通常, 我们要做的仅仅只是打印出每一行中的某些字段, 也许还要做一些计算.<br>这一节的程序基本上都是这种形式.</p><p><strong>打印每一行</strong></p><p>如果一个动作没有任何模式, 这个动作会对所有输入的行进行操作. <code>print</code> 语<br>句用来打印(输出)当前输入的行, 所以程序 ::</p><pre><code>{ print }</code></pre><p>会输出所有输入的内容到标准输出. 由于 $0 表示整行, ::</p><pre><code>{ print $0 }</code></pre><p>也会做一样的事情.</p><p><strong>打印特定字段</strong></p><p>使用一个 <code>print</code> 语句可以在同一行中输出不止一个字段. 下面的程序输出了每<br>行输入中的第一和第三个字段 ::</p><pre><code>{ print $1, $3 }</code></pre><p>使用 <code>emp.data</code> 作为输入, 它将会得到 ::</p><pre><code>Beth 0Dan 0Kathy 10Mark 20Mary 22Susie 18</code></pre><p>在 <code>print</code> 语句中被逗号分割的表达式, 在默认情况下他们将会用一个空格分割<br>来输出. 每一行 <code>print</code> 生成的内容都会以一个换行符作为结束. 但这些默认行<br>为都可以自定义; 我们将在第二章中介绍具体的方法.</p><p><strong>NF, 字段数量</strong></p><p>很显然你可能会发现你总是需要通过 $1, $2 这样来指定不同的字段, 但任何表<br>达式都可以使用在$之后来表达一个字段的序号; 表达式会被求值并用于表示字段<br>序号. Awk会对当前输入的行有多少个字段进行计数, 并且将当前行的字段数量存<br>储在一个内建的称作 <code>NF</code> 的变量中. 因此, 下面的程序 ::</p><pre><code>{ print NF, $1, $NF }</code></pre><p>会依次打印出每一行的字段数量, 第一个字段的值, 最后一个字段的值.</p><p><strong>计算和打印</strong></p><p>你也可以对字段的值进行计算后再打印出来. 下面的程序 ::</p><pre><code>{ print $1, $2 * $3 }</code></pre><p>是一个典型的例子. 它会打印出姓名和员工的合计支出(以小时计算): ::</p><pre><code>Beth 0Dan 0Kathy 40Mark 100Mary 121Susie 76.5</code></pre><p>我们马上就会学到怎么让这个输出看起来更漂亮.</p><p><strong>打印行号</strong></p><p>Awk提供了另一个内建变量, 叫做 <code>NR</code>, 它会存储当前已经读取了多少行的计数.<br>我们可以使用 <code>NR</code> 和 <code>$0</code> 给 <code>emp.data</code> 的没一行加上行号: ::</p><pre><code>{ print NR, $0 }</code></pre><p>打印的输出看起来会是这样: ::</p><pre><code>1 Beth   4.00     02 Dan    3.75     03 Kathy  4.00    104 Mark   5.00    205 Mary   5.50    226 Susie  4.25   1 8</code></pre><p><strong>在输出中添加内容</strong></p><p>你当然也可以在字段中间或者计算的值中间打印输出想要的内容: ::</p><pre><code>{ print "total pay for", $1, "is", $2 * $3 }</code></pre><p>输出 ::</p><pre><code>total pay for Beth is 0total pay for Dan is 0total pay for Kathy is 40total pay for Mark is 100total pay for Mary is 121total pay for Susie is 76.5</code></pre><p>在打印语句中, 双引号内的文字将会在字段和计算的值中插入输出.</p><h4 id="1-3-高级输出"><a href="#1-3-高级输出" class="headerlink" title="1.3 高级输出"></a>1.3 高级输出</h4><hr><p><code>print</code> 语句可用于快速而简单的输出。若要严格按照你所想的格式化输出，则需要使用 <code>printf</code> 语句。正如我将在2.4节所见， <code>printf</code> 几乎可以产生任何形式的输出，但在本节中，我们仅展示其部分功能。</p><p><strong>字段排队</strong></p><p><code>printf</code> 语句的形式如下：::</p><pre><code>printf(format, value1, value2, ..., valuen)</code></pre><p>其中 <code>format</code> 是字符串，包含要逐字打印的文本，穿插着 <code>format</code> 之后的每个值该如何打印的规格(specification)。一个规格是一个 <code>%</code> 符，后面跟着一些字符，用来控制一个 <code>value</code> 的格式。第一个规格说明如何打印 <code>value1</code> ，第二个说明如何打印 <code>value2</code> ，… 。因此，有多少 <code>value</code> 要打印，在 <code>format</code> 中就要有多少个 <code>%</code> 规格。</p><p>这里有个程序使用 <code>printf</code> 打印每位员工的总薪酬：::</p><pre><code>{ printf("total pay for %s is $%.2f\n", $1, $2 * $3) }</code></pre><p><code>printf</code> 语句中的规格字符串包含两个 <code>%</code> 规格。第一个是 <code>%s</code> ，说明以字符串的方式打印第一个值 <code>$1</code> 。第二个是 <code>%.2f</code> ，说明以数字的方式打印第二个值 <code>$2*$3</code> ，并保留小数点后面两位。规格字符串中其他东西，包括美元符号，仅逐字打印。字符串尾部的 <code>\\n</code> 代表开始新的一行，使得后续输出将从下一行开始。以 <code>emp.data</code> 为输入，该程序产生：</p><p>::</p><pre><code>total pay for Beth is $0.00total pay for Dan is $0.00total pay for Kathy is $40.00total pay for Mark is $100.00total pay for Mary is $121.00total pay for Susie is $76.50</code></pre><p><code>printf</code> 不会自动产生空格或者新的行，必须是你自己来创建，所以不要忘了 <code>\\n</code> 。</p><p>另一个程序是打印每位员工的姓名与薪酬：::</p><pre><code>{ printf("%-8s $%6.2f\n", $1, $2 * $3) }</code></pre><p>第一个规格 <code>%-8s</code> 将一个姓名以字符串形式在8个字符宽度的字段中左对齐输出。第二个规格 <code>%6.2f</code> 将薪酬以数字的形式，保留小数点后两位，在6个字符宽度的字段中输出。</p><p>::</p><pre><code>Beth     $  0.00Dan      $  0.00Kathy    $ 40.00Mark     $100.00Mary     $121.00Susie    $ 76.50</code></pre><p>之后我们将展示更多的 <code>printf</code> 示例。一切精彩尽在2.4小节。</p><p><strong>排序输出</strong></p><p>假设你想打印每位员工的所有数据，包括他或她的薪酬，并以薪酬递增的方式进行排序输出。最简单的方式是使用awk将每位员工的总薪酬置于其记录之前，然后利用一个排序程序来处理awk的输出。Unix上，命令行如下::</p><pre><code>awk '{ printf("%6.2f    %s\n", $2 * $3, $0) }' emp.data | sort</code></pre><p>将awk的输出通过管道传给 <code>sort</code> 命令，输出为：</p><p>::</p><pre><code>  0.00    Beth  4.00 0  0.00    Dan   3.75 0 40.00    Kathy 4.00 10 76.50    Susie 4.25 18100.00    Mark  5.00 20121.00    Mary  5.50 22</code></pre><h4 id="1-4-选择"><a href="#1-4-选择" class="headerlink" title="1.4 选择"></a>1.4 选择</h4><hr><p>Awk的模式适合用于为进一步的处理从输入中选择相关的数据行。由于不带动作的模式会打印所有匹配模式的行，所以很多awk程序仅包含一个模式。本节将给出一些有用的模式示例。</p><p><strong>通过对比选择</strong></p><p>这个程序使用一个对比模式来选择每小时赚5美元或更多的员工记录，也就是，第二个字段大于等于5的行：::</p><pre><code>$2 &gt;= 5</code></pre><p>从 <code>emp.data</code> 中选出这些行：::</p><pre><code>Mark    5.00    20Mary    5.50    22</code></pre><p><strong>通过计算选择</strong></p><p>程序</p><p>::</p><pre><code>$2 * $3 &gt; 50 { printf("$%.2f for %s\n", $2 * $3, $1) }</code></pre><p>打印出总薪资超过50美元的员工的薪酬。</p><p><strong>通过文本内容选择</strong></p><p>除了数值测试，你还可以选择包含特定单词或短语的输入行。这个程序会打印所有第一个字段为 <code>Susie</code> 的行：::</p><pre><code>$1 == "Susie"</code></pre><p>操作符 <code>==</code> 用于测试相等性。你也可以使用称为 <code>正则表达式</code> 的模式查找包含任意字母组合，单词或短语的文本。这个程序打印任意位置包含 <code>Susie</code> 的行：::</p><pre><code>/Susie/</code></pre><p>输出为这一行：::</p><pre><code>Susie   4.25    18</code></pre><p>正则表达式可用于指定复杂的多的模式；2.1节将会有全面的论述。</p><p><strong>模式组合</strong></p><p>可以使用括号和逻辑操作符与 <code>&amp;&amp;</code> ， 或 <code>||</code> ， 以及非 <code>!</code> 对模式进行组合。程序::</p><pre><code>$2 &gt;= 4 || $3 &gt;= 20</code></pre><p>会打印 <code>$2</code> (第二个字段) 大于等于 <code>4</code> 或者 <code>$3</code> (第三个字段) 大于等于 <code>20</code> 的行：::</p><pre><code>Beth    4.00    0kathy   4.00    10Mark    5.00    20Mary    5.50    22Susie   4.25    18</code></pre><p>两个条件都满足的行仅打印一次。与如下包含两个模式程序相比：::</p><pre><code>$2 &gt;= 4$3 &gt;= 20</code></pre><p>如果某个输入行两个条件都满足，这个程序会打印它两遍：::</p><pre><code>Beth    4.00    0Kathy   4.00    10Mark    5.00    20Mark    5.00    20Mary    5.50    22Mary    5.50    22Susie   4.25    18</code></pre><p>注意如下程序::</p><pre><code>!($2 &lt; 4 &amp;&amp; $3 &lt; 20)</code></pre><p>会打印极不满足 <code>$2</code> 小于4也不满足 <code>$3</code> 小于20的行；这个条件与上面第一个模式组合等价，虽然也许可读性差了点。</p><p><strong>数据验证</strong></p><p>实际的数据中总是会存在错误的。在数据验证-检查数据的值是否合理以及格式是否正确-方面，Awk是个优秀的工具。</p><p>数据验证本质上是否定的：不是打印具备期望属性的行，而是打印可疑的行。如下程序使用对比模式<br>将5个数据合理性测试应用于 <code>emp.data</code> 的每一行：::</p><pre><code>NF != 3     { print $0, "number of fields is not equal to 3" }$2 &lt; 3.35   { print $0, "rate is below minimum wage" }$2 &gt; 10     { print $0, "rate exceeds $10 per hour" }$3 &lt; 0      { print $0, "negative hours worked" }$3 &gt; 60     { print $0, "too many hours worked" }</code></pre><p>如果没有错误，则没有输出。</p><p><strong>BEGIN与END</strong></p><p>特殊模式 <code>BEGIN</code> 用于匹配第一个输入文件的第一行之前的位置， <code>END</code> 则用于匹配处理过的最后一个文件的最后一行之后的位置。这个程序使用 <code>BEGIN</code> 来输出一个标题：::</p><pre><code>BEGIN { print "Name    RATE    HOURS"; print ""}      { print }</code></pre><p>输出为：::</p><pre><code>NAME    RATE    HOURSBeth    4.00    0Dan     3.75    0Kathy   4.00    10Mark    5.00    20Mary    5.50    22Susie   4.25    18</code></pre><p>程序的动作部分你可以在一行上放多个语句，不过要使用分号进行分隔。注意 普通的 <code>print</code> 是打印当前输入行，与之不同的是 <code>print ""</code> 会打印一个空行。</p><h4 id="1-5-使用AWK进行计算"><a href="#1-5-使用AWK进行计算" class="headerlink" title="1.5 使用AWK进行计算"></a>1.5 使用AWK进行计算</h4><hr><p>一个动作就是一个以新行或者分号分隔的语句序列。你已经见过一些其动作仅是单个 <code>print</code> 语句的例子。本节将提供一些执行简单的数值以及字符串计算的语句示例。在这些语句中，你不仅可以使用像 <code>NF</code> 这样的内置变量，还可以创建自己的变量用于计算、存储数据诸如此类的操作。awk中，用户创建的变量不需要声明。</p><p><strong>计数</strong></p><p>这个程序使用一个变量 <code>emp</code> 来统计工作超过15个小时的员工的数目：::</p><pre><code>$3 &gt; 15 { emp = emp + 1 }END     { print emp, "employees worked more than 15 hours" }</code></pre><p>对于第三个字段超过15的每行， <code>emp</code> 的前一个值加1。以 <code>emp.data</code> 为输入，该程序产生：::</p><pre><code>3 employees worked more than 15 hours</code></pre><p>用作数字的awk变量的默认初始值为0，所以我们不需要初始化 <code>emp</code> 。</p><p><strong>求和与平均值</strong></p><p>为计算员工的数目，我们可以使用内置变量 <code>NR</code> ，它保存着到目前位置读取的行数；在所有输入的结尾它的值就是所读的所有行数。</p><p>::</p><pre><code>END { print NR, "employees" }</code></pre><p>输出为：::</p><pre><code>6 employees</code></pre><p>如下是一个使用 <code>NR</code> 来计算薪酬均值的程序：::</p><pre><code>    { pay = pay + $2 * $3 }END { print NR, "employees"       print "total pay is", pay       print "average pay is", pay/NR     }</code></pre><p>第一个动作累计所有员工的总薪酬。 <code>END</code> 动作打印出</p><p>::</p><pre><code>6 employeestotal pay is 337.5average pay is 56.25</code></pre><p>很明显， <code>printf</code> 可用来产生更简洁的输出。并且该程序也有个潜在的错误：在某种不太可能发生的情况下， <code>NR</code> 等于0，那么程序会试图执行零除，从而产生错误信息。</p><p><strong>处理文本</strong></p><p>awk的优势之一是能像大多数语言处理数字一样方便地处理字符串。awk变量可以保存数字也可以保存字符串。这个程序会找出时薪最高的员工：::</p><pre><code>$2 &gt; maxrate { maxrate = $2; maxemp = $1 }END { print "highest hourly rate:", maxrate, "for", maxemp }</code></pre><p>输出</p><p>::</p><pre><code>highest hourly rate: 5.50 for Mary</code></pre><p>这个程序中，变量 <code>maxrate</code> 保存着一个数值，而变量 <code>maxemp</code> 则是保存着一个字符串。（如果有几个员工都有着相同的最大时薪，该程序则只找出第一个。）</p><p><strong>字符串连接</strong></p><p>可以合并老字符串来创建新字符串。这种操作称为 <code>连接（concatenation）</code> 。程序</p><p>::</p><pre><code>    { names = names $1 " "}END { print names }</code></pre><p>通过将每个姓名和一个空格附加到变量 <code>names</code> 的前一个值， 来将所有员工的姓名收集进单个字符串中。最后 <code>END</code> 动作打印出 <code>names</code> 的值：::</p><pre><code>Beth Dan Kathy Mark Mary Susie</code></pre><p>awk程序中，连接操作的表现形式是将字符串值一个接一个地写出来。对于每个输入行，程序的第一个语句先连接三个字符串： <code>names</code> 的前一个值、当前行的第一个字段以及一个空格，然后将得到的字符串赋值给 <code>names</code> 。因此，读取所有的输入行之后， <code>names</code> 就是个字符串，包含所有员工的姓名，每个姓名后面跟着一个空格。用于保存字符串的变量的默认初始值是空字符串(也就是说该字符串包含零个字符)，因此这个程序中的 <code>names</code> 不需要显式初始化。</p><p><strong>打印最后一个输入行</strong></p><p>虽然在 <code>END</code> 动作中 <code>NR</code> 还保留着它的值，但 <code>$0</code> 没有。程序</p><p>::</p><pre><code>    { last = $0 }END { print last }</code></pre><p>是打印最后一个输入行的一种方式：::</p><pre><code>Susie   4.25    18</code></pre><p><strong>内置函数</strong></p><p>我们已看到awk提供了内置变量来保存某些频繁使用的数量，比如：字段的数量和输入行的数量。类似地，也有内置函数用来计算其他有用的数值。除了平方根、对数、随机数诸如此类的算术函数，也有操作文本的函数。其中之一是 <code>length</code> ，计算一个字符串中的字符数量。例如，这个程序会计算每个人的姓名的长度：::</p><pre><code>{ print $1, length($1) }</code></pre><p>结果：::</p><pre><code>Beth 4Dan 3Kathy 5Mark 4Mary 4Susie 5</code></pre><p><strong>行、单词以及字符的计数</strong></p><p>这个程序使用了 <code>length</code> 、 <code>NF</code> 、以及  <code>NR</code> 来统计输入中行、单词以及字符的数量。为了简便，我们将每个字段看作一个单词。</p><p>::</p><pre><code>    { nc = nc + length($0) + 1       nw = nw + NF     }END { print NR, "lines,", nw, "words,", nc, "characters" }</code></pre><p>文件 <code>emp.data</code> 有::</p><pre><code>6 lines, 18 words, 77 characters</code></pre><p><code>$0</code> 并不包含每个输入行的末尾的换行符，所以我们要另外加个1。</p><h4 id="1-6-控制语句"><a href="#1-6-控制语句" class="headerlink" title="1.6 控制语句"></a>1.6 控制语句</h4><hr><p>Awk为选择提供了一个 <code>if-else</code> 语句，以及为循环提供了几个语句，所以都效仿C语言中对应的控制语句。它们仅可以在动作中使用。</p><p><strong>if-else语句</strong></p><p>如下程序将计算时薪超过6美元的员工的总薪酬与平均薪酬。它使用一个 <code>if</code> 来防范计算平均薪酬时的零除问题。</p><p>::</p><pre><code>$2 &gt; 6 { n = n + 1; pay = pay + $2 * $3 }END    { if (n &gt; 0)             print n, "employees, total pay is", pay,                      "average pay is", pay/n         else             print "no employees are paid more than $6/hour"        }</code></pre><p><code>emp.data</code> 的输出是：::</p><pre><code>no employees are paid more than $6/hour</code></pre><p><code>if-else</code> 语句中，<code>if</code> 后的条件会被计算。如果为真，执行第一个 <code>print</code> 语句。否则，执行第二个 <code>print</code> 语句。注意我们可以使用一个逗号将一个长语句截断为多行来书写。</p><p><strong>while语句</strong></p><p>一个 <code>while</code> 语句有一个条件和一个执行体。条件为真时执行体中的语句会被重复执行。这个程序使用公式 :math:<code>value = amount (1 + rate)^{years}</code></p><p>来演示以特定的利率投资一定量的钱，其数值是如何随着年数增长的。</p><p>::</p><pre><code># interest1 - 计算复利#   输入: 钱数    利率    年数#   输出: 复利值{   i = 1    while (i &lt;= $3) {        printf("\t%.2f\n", $1 * (1 + $2) ^ i)        i = i + 1    }}</code></pre><p>条件是 <code>while</code> 后括弧包围的表达式；循环体是条件后大括号包围的两个表达式。 <code>printf</code> 规格字符串中的 <code>\\t</code> 代表制表符； <code>^</code> 是指数操作符。从 <code>#</code> 开始到行尾的文本是注释，会被awk忽略，但能帮助程序的读者理解程序做的事情。</p><p>你可以为这程序输入三个一组的数字，看看不一样的钱数、利率、以及年数会产生什么。例如，如下事务演示了1000美元，利率为6%与12%，5年的复利分别是如何增长的：::</p><pre><code>$ awk -f interest1 1000 .06 5         1060.00         1123.60         1191.02         1262.48         1338.23 1000 .12 5         1120.00         1254.40         1404.93         1573.52         1762.34</code></pre><p><strong>for语句</strong></p><p>另一个语句， <code>for</code> ，将大多数循环都包含的初始化、测试、以及自增压缩成一行。如下是之前利息计算的 <code>for</code> 版本：::</p><pre><code># interest1 - 计算复利#   输入: 钱数    利率    年数#   输出: 每年末的复利{ for (i = 1; i &lt;= $3; i = i + 1)     printf("\t%.2f\n", $1 * (1 + $2) ^ i)}</code></pre><p>初始化 <code>i = 1</code> 只执行一次。接下来，测试条件 <code>i &lt;= $3</code> ；如果为真，则执行循环体的 <code>printf</code> 语句。循环体执行结束后执行自增 <code>i = i + 1</code> ，接着由另一次条件测试开始下一个循环迭代。代码更加紧凑，并且由于循环体仅是一条语句，所以不需要大括号来包围它。</p><h3 id="1-7-数组"><a href="#1-7-数组" class="headerlink" title="1.7 数组"></a>1.7 数组</h3><hr><p>awk为存储一组相关的值提供了数组。虽然数组给予了awk很强的能力，但在这里我们仅展示一个简单的例子。如下程序将按行逆序打印输入。第一个动作将输入行存为数组 <code>line</code> 的连续元素；即第一行放在 <code>line[1]</code> ，第二行放在 <code>line[2]</code> , 依次继续。 <code>END</code> 动作使用一个 <code>while</code> 语句从后往前打印数组中的输入行：::</p><pre><code># 反转 - 按行逆序打印输入    { line[NR] = $0 }  # 记下每个输入行END { i = NR           # 逆序打印      while (i &gt; 0) {        print line[i]        i = i - 1      }    }</code></pre><p>以 <code>emp.data</code> 为输入，输出为</p><p>::</p><pre><code>Susie    4.25   18Mary     5.50   22Mark     5.00   20Kathy    4.00   10Dan      3.75   0Beth     4.00   0</code></pre><p>如下是使用 <code>for</code> 语句实现的相同示例：::</p><pre><code># 反转 - 按行逆序打印输入    { line[NR] = $0 }   # 记下每个输入行END { for (i = NR; i &gt; 0; i = i - 1)        print line[i]    }</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-AWK入门指南&quot;&gt;&lt;a href=&quot;#一-AWK入门指南&quot; class=&quot;headerlink&quot; title=&quot;一. AWK入门指南&quot;&gt;&lt;/a&gt;一. AWK入门指南&lt;/h2&gt;&lt;p&gt;Awk是一种便于使用且表达能力强的程序设计语言，可应用于各种计算和数据处理任务。本章是个入门指南，让你能够尽快地开始编写你自己的程序。第二章将描述整个语言，而剩下的章节将向你展示如何使用Awk来解决许多不同方面的问题。纵观全书，我们尽量选择了一些对你有用、有趣并且有指导意义的实例。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://notes.seirhsiao.com/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://notes.seirhsiao.com/tags/linux/"/>
    
      <category term="awk" scheme="http://notes.seirhsiao.com/tags/awk/"/>
    
  </entry>
  
  <entry>
    <title>Clojure 学习 —— 字符串</title>
    <link href="http://notes.seirhsiao.com/posts/69baf7da/"/>
    <id>http://notes.seirhsiao.com/posts/69baf7da/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:39:11.200Z</updated>
    
    <content type="html"><![CDATA[<p>clojure 字符串常用函数</p><a id="more"></a><h3 id="一、创建"><a href="#一、创建" class="headerlink" title="一、创建"></a>一、创建</h3><p><strong>函数<code>str</code></strong><br>函数 (<code>str</code>)： 接受任意数量的参数。如果参数不是字符串则将其转换为字符串，返回创建的新字符串。如果没有参数或为nil，则返回空字符串””</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure">   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">str</span></span> <span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">"1"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">str</span></span> <span class="number">-2.5</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">"-2.5"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"a"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">"a"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"abc"</span> <span class="number">123</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">"abc123"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">str</span></span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">""  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">str</span></span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">"(1 2 3)"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">str</span></span> <span class="literal">nil</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">""  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">str</span></span> null)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">java.lang.Exception: Unable to resolve symbol: null in this context (NO_SOURCE_FILE:149)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"null"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">"null"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"abc "</span> <span class="number">123</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">"abc 123"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">str</span></span> <span class="number">123</span> <span class="number">345</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">"123345"</span></pre></td></tr></tbody></table></figure><p>其它比较少用的创建函数<br><code>print-str</code>、<code>println-str</code>、<code>pr-str</code>、<code>prn-str</code>、<code>with-out-str</code> </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">print-str</span> <span class="string">"abc"</span> <span class="number">234</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">"abc 234"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">println-str</span> <span class="string">"abc"</span> <span class="number">234</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">"abc 234\n"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">pr-str</span> <span class="string">"abc"</span> <span class="number">234</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">"\"abc\" 234"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">prn-str</span> <span class="string">"abc"</span> <span class="number">234</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">"\"abc\" 234\n"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">with-out-str</span> <span class="string">"abc"</span> <span class="number">234</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">""</span></pre></td></tr></tbody></table></figure><h3 id="二、string操作"><a href="#二、string操作" class="headerlink" title="二、string操作"></a>二、string操作</h3><p><strong><code>count</code>函数</strong><br><code>count</code>函数：接受字符串参数时，返回字符串的字符数。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">count</span></span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: Wrong number of args (0) passed to: core$count (NO_SOURCE_FILE:175)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">count</span></span> <span class="literal">nil</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">0  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">count</span></span> <span class="string">"abc123"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">6</span></pre></td></tr></tbody></table></figure><p><strong><code>subs</code>函数</strong><br><code>subs</code>函数：接受两个或三个参数, 第一个是字符串，第二个是一个整数偏移量，第三个（可选）是另一个整数偏移量。函数返回从第一个偏移量（含），到第二个（不含）偏移量或者结尾（如果没有第二个偏移量）截取的子字符串。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">subs</span> <span class="string">"ithomer"</span> <span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">"thomer"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">subs</span> <span class="string">"ithomer"</span> <span class="number">1</span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">"th"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">subs</span> <span class="string">"ithomer"</span> <span class="number">1</span> (<span class="name"><span class="builtin-name">count</span></span> <span class="string">"ithomer"</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">"thomer"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">subs</span> <span class="string">"ithomer"</span> <span class="number">1</span> <span class="number">20</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">java.lang.StringIndexOutOfBoundsException: String index out of range: 20 (NO_SOURCE_FILE:0)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">subs</span> <span class="string">"ithomer"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: Wrong number of args (1) passed to: core$subs (NO_SOURCE_FILE:0)</span></pre></td></tr></tbody></table></figure><p><strong><code>format</code>函数</strong><br><code>format</code>函数：用于格式化字符串。使用jdk的java.util.Formatter类完成格式化。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">format</span></span> <span class="string">"hello %s"</span> <span class="string">"ithomer.net"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">"hello ithomer.net"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">format</span></span> <span class="string">"%5d"</span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">"    3"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">format</span></span> <span class="string">"%-5d"</span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">"3    "  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">format</span></span> <span class="string">"%05d"</span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">"00003"</span></pre></td></tr></tbody></table></figure><p><strong>检查函数</strong><br>字符串检查函数 (<code>string?</code>)： 接受一个参数，如果是字符串返回true，否则返回false </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">string?</span></span> <span class="string">"abc"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">string?</span></span> <span class="string">"123"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">string?</span></span> <span class="number">123</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">string?</span></span> <span class="literal">nil</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">false</span></pre></td></tr></tbody></table></figure><p>字符检查函数(<code>char?</code>)：接受一个参数，如果是字符类型返回true，否则返回false </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">char?</span></span> <span class="string">"abc"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">char?</span></span> \a)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">char?</span></span> 'a')  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">java.lang.Exception: Unmatched delimiter: )  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">char?</span></span> a)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">java.lang.Exception: Unable to resolve symbol: a in this context (NO_SOURCE_FILE:222)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">char?</span></span> <span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">char?</span></span> \<span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">char?</span></span> <span class="literal">nil</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">false</span></pre></td></tr></tbody></table></figure><h3 id="三、参考资料"><a href="#三、参考资料" class="headerlink" title="三、参考资料"></a>三、参考资料</h3><p><a href="http://blog.csdn.net/sunboy_2050/article/details/17225913" target="_blank" rel="external nofollow noreferrer noopener">Clojure 学习入门（4）—— 字符串 </a><br><a href="http://dead-knight.iteye.com/blog/1827681" target="_blank" rel="external nofollow noreferrer noopener">lojure-基本语法-符号及关键字</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      clojure 字符串常用函数
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Clojure 学习 —— 基本运算</title>
    <link href="http://notes.seirhsiao.com/posts/ceee0cc3/"/>
    <id>http://notes.seirhsiao.com/posts/ceee0cc3/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:36:25.583Z</updated>
    
    <content type="html"><![CDATA[<p>clojure 几种基本运算简单介绍及示常见运算示例</p><a id="more"></a><h3 id="一、算术运算"><a href="#一、算术运算" class="headerlink" title="一、算术运算"></a>一、算术运算</h3><p><strong>加法<code>+</code></strong><br>加法函数(+)： 接受任意数值类型的参数，返回它们的和；没有参数时返回0。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$clojure  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Clojure 1.2.1  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">+</span></span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">0  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">+</span></span> <span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">1  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">+</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">10</span></pre></td></tr></tbody></table></figure><p><strong>减法<code>-</code></strong><br>减法函数(-)：接受任意数值类型的参数。如果只有一个参数，则返回它相反的数。当有多个参数时，返回第一个参数减去后面所有参数的结果。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">-</span></span> <span class="number">1</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">-1    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">-</span></span> <span class="number">10</span> <span class="number">2</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">8    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">-</span></span> <span class="number">10</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">1</span></pre></td></tr></tbody></table></figure><p><strong>乘法<code>*</code></strong><br>乘法函数(*)：接受任意数值类型的参数并返回它们的乘积，如果只有一个参数，返回1。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">*</span></span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">1    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">1</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">1    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">6    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">0</span></pre></td></tr></tbody></table></figure><p><strong>除法<code>/</code></strong><br>除法函数 (/)：接受任意数值类型的参数。第一个参数是分子，其他任意参数是分母。如果没有分母，则函数返回 1 / 分子，否则返回分子除以分母。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (/)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: Wrong number of args (0) passed to: core$-SLASH- (NO_SOURCE_FILE:0)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (/ <span class="number">2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">1/2  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (/ <span class="number">2</span> <span class="number">10</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">1/5  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (/ <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">6</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">1/48</span></pre></td></tr></tbody></table></figure><p><strong>商<code>quot</code></strong><br>商函数 (quot)：接受两个数值类型参数并返回第一个参数除以第二个参数的整数商。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">quot</span></span> <span class="number">10</span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">3  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">quot</span></span> <span class="number">10</span> <span class="number">-3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">-3  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">quot</span></span> <span class="number">-10</span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">-3  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">quot</span></span> <span class="number">11</span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">3  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">quot</span></span> <span class="number">12</span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">4  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">quot</span></span> <span class="number">-5.9</span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">-1  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">quot</span></span> <span class="number">15</span> <span class="number">0</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">java.lang.ArithmeticException: Divide by zero (NO_SOURCE_FILE:0)</span></pre></td></tr></tbody></table></figure><p><strong>注意：商函数quot与/函数不是等价的</strong> </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">=</span></span> (/ <span class="number">4</span> <span class="number">2</span>) (<span class="name"><span class="builtin-name">quot</span></span> <span class="number">4</span> <span class="number">2</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">=</span></span> (/ <span class="number">3</span> <span class="number">2</span>) (<span class="name"><span class="builtin-name">quot</span></span> <span class="number">3</span> <span class="number">2</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (/ <span class="number">3</span> <span class="number">2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">3/2  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">quot</span></span> <span class="number">3</span> <span class="number">2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">1</span></pre></td></tr></tbody></table></figure><p><strong>取余<code>rem</code></strong><br>余数函数 (rem)：接受两个数值类型参数并返回第一个参数除以第二个参数的余数。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">rem</span></span> <span class="number">10</span> <span class="number">9</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">1  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">rem</span></span> <span class="number">2</span> <span class="number">2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">0  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">rem</span></span> <span class="number">10</span> <span class="number">-3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">1  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">rem</span></span> <span class="number">-10</span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">-1  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">rem</span></span> <span class="number">-10</span> <span class="number">-3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">-1</span></pre></td></tr></tbody></table></figure><p><strong>取模<code>mod</code></strong><br>取模函数（mod）：接收两个数值类型参数，如果两个参数为正整数或者同为负整数，则与rem函数返回值一致；如果其中有一个负数，则结果为rem返回值与第二个参数之和。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">mod</span></span> <span class="number">10</span> <span class="number">9</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">1  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">mod</span></span> <span class="number">2</span> <span class="number">2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">0  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">mod</span></span> <span class="number">10</span> <span class="number">-3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">-2  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">mod</span></span> <span class="number">-10</span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">2  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">mod</span></span> <span class="number">-10</span> <span class="number">-3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">-1  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">mod</span></span> <span class="number">10</span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">1</span></pre></td></tr></tbody></table></figure><p><code>(rem 10 -3)</code>和<code>(mod 10 -3)</code>结果不一致，分别为1，-2。-2是如何得到的？由于<code>（rem 10 -3）</code>的返回值为1，那么<code>（mod 10 -3）</code>的返回值为<code>(+ 1 (rem 10 -3))=-2</code><br>贴上mod函数源码，仅供参考。 </p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> mod    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"Modulus of num and div. Truncates toward negative infinity."</span>    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  {<span class="symbol">:added</span> <span class="string">"1.0"</span>    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   <span class="symbol">:static</span> <span class="literal">true</span>}    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  [num div]     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">let</span></span> [m (<span class="name"><span class="builtin-name">rem</span></span> num div)]     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">or</span></span> (<span class="name"><span class="builtin-name">zero?</span></span> m) (<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">pos?</span></span> num) (<span class="name"><span class="builtin-name">pos?</span></span> div)))    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      m     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      (<span class="name"><span class="builtin-name">+</span></span> m div))))</span></pre></td></tr></tbody></table></figure><p><strong>增量函数<code>inc</code></strong><br>函数 (inc)：接受一个数值类型参数并返回它的值加1。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">inc</span></span> <span class="number">1</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">2    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">inc</span></span> <span class="number">-1</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">0</span></pre></td></tr></tbody></table></figure><p><strong>减量函数``dec`</strong><br>减量函数 (dec)：接受一个数值类型参数并返回它的值减1。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">dec</span></span> <span class="number">1</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">0    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">dec</span></span> <span class="number">-1</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">-2</span></pre></td></tr></tbody></table></figure><p><strong>最大函数<code>max</code></strong><br>最大数函数 (max)：接受任意数值类型的参数并返回最大的。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">max</span></span> <span class="number">5</span> <span class="number">-1</span> <span class="number">2</span> <span class="number">3</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">5</span></pre></td></tr></tbody></table></figure><p><strong>最小函数<code>min</code></strong><br> 最小数函数 (min)：接受任意数值类型的参数并返回最小的。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">min</span></span> <span class="number">5</span> <span class="number">-1</span> <span class="number">2</span> <span class="number">3.9</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">-1</span></pre></td></tr></tbody></table></figure><p><strong>精度函数<code>with-precision</code></strong><br>精度函数with-precision：针对大数据值操作的精度、小数点运算函数。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">with-precision</span> <span class="number">10</span> (/ <span class="number">1</span>M <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">0.3333333333M  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">with-precision</span> <span class="number">2</span> (/ <span class="number">100</span>M <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">33M  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">with-precision</span> <span class="number">4</span> (/ <span class="number">100</span>M <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">33.33M</span></pre></td></tr></tbody></table></figure><h3 id="二、比较运算："><a href="#二、比较运算：" class="headerlink" title="二、比较运算："></a>二、比较运算：</h3><p>*<em>值相等<code>=</code> *</em><br>值相等(=)：函数接受若干参数，比较若干参数值是否相等。一个参数时，返回true。参数可以为nil。与java中的equals一致。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">=</span></span> <span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">=</span></span> <span class="number">1</span> <span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">=</span></span> <span class="number">1</span> <span class="number">1.0</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">=</span></span> <span class="number">1</span> <span class="number">2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">=</span></span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">=</span></span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">=</span></span> <span class="literal">nil</span> <span class="literal">nil</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">true</span></pre></td></tr></tbody></table></figure><p><strong>等价值<code>==</code></strong><br> 等价值函数：接受若干参数，比较若干参数值是否等价。一个参数时，返回true。参数可以为nil、keyword等 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">==</span></span> <span class="number">1</span> <span class="number">1.0</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">==</span></span> <span class="symbol">:foo</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">==</span></span> <span class="literal">nil</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">==</span></span> <span class="literal">nil</span> <span class="literal">nil</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">java.lang.NullPointerException (NO_SOURCE_FILE:0)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">==</span></span> <span class="number">1</span> <span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">==</span></span> <span class="number">1</span> <span class="number">2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">false</span></pre></td></tr></tbody></table></figure><p><strong>值不同函数<code>not=</code></strong><br>等价于<code>(not (= obj1 obj2))</code></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">not=</span></span> <span class="number">1</span> <span class="number">1</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">false    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">not=</span></span> <span class="number">1</span> <span class="number">2</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">true    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">not=</span></span> <span class="number">1</span> <span class="number">1.0</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">true    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">not=</span></span> <span class="literal">true</span> <span class="literal">true</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">false    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">not=</span></span> <span class="literal">true</span> <span class="literal">false</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">true    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">not=</span></span> <span class="literal">true</span> <span class="literal">true</span> <span class="literal">false</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">true</span></pre></td></tr></tbody></table></figure><p><strong>小于 <code>&lt;</code></strong><br>小于函数 (&lt;)：受任意数值类型的参数，如果它们按升序排列返回true，否则返回false。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">&lt;</span></span> <span class="number">5</span> <span class="number">10</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">true    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">&lt;</span></span> <span class="number">5</span> <span class="number">10</span> <span class="number">9</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">false    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">&lt;</span></span> <span class="number">1</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">true</span></pre></td></tr></tbody></table></figure><p><strong>大于 <code>&gt;</code></strong><br>大于函数 (&gt;)：受任意数值类型的参数，如果它们按降序排列返回true，否则返回false。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">&gt;</span></span> <span class="number">5</span> <span class="number">2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">&gt;</span></span> <span class="number">5</span> <span class="number">10</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">&gt;</span></span> <span class="number">5</span> <span class="number">10</span> <span class="number">9</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">&gt;</span></span> <span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">&gt;</span></span> <span class="number">0</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">&gt;</span></span> <span class="number">-1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">true</span></pre></td></tr></tbody></table></figure><p><strong>大于等于 <code>&gt;=</code></strong><br>大于等于函数 (&gt;=)：接受任意数值类型的参数，如果它们按降序排列或顺序相等返回true，否则返回false。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">&gt;=</span></span> <span class="number">10</span> <span class="number">5</span> <span class="number">5</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">&gt;=</span></span> <span class="number">10</span> <span class="number">5</span> <span class="number">6</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">&gt;=</span></span> <span class="number">10</span> <span class="number">5</span> <span class="number">4</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">true</span></pre></td></tr></tbody></table></figure><p><strong>小于等于 <code>&lt;=</code></strong><br>小于等于函数 (&lt;=)：接受任意数值类型的参数，如果它们按升序排列或顺序相等返回true，否则返回false。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">&lt;=</span></span> <span class="number">2</span> <span class="number">5</span> <span class="number">5</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">&lt;=</span></span> <span class="number">2</span> <span class="number">5</span> <span class="number">4</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">&lt;=</span></span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">true</span></pre></td></tr></tbody></table></figure><h3 id="三、验证函数："><a href="#三、验证函数：" class="headerlink" title="三、验证函数："></a>三、验证函数：</h3><p><strong>0检查<code>zero?</code></strong><br>0检查函数 (zero?)： 接受一个数值类型参数，如果是0返回true，否则返回false </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">zero?</span></span> <span class="number">0.0</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">zero?</span></span> <span class="number">0</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">zero?</span></span> <span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">zero?</span></span> <span class="number">0.1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">false</span></pre></td></tr></tbody></table></figure><p><strong>正数检查<code>pos?</code></strong><br>正数检查函数 (pos?)：接受一个数值类型参数，如果是大于0返回true，否则返回false </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">pos?</span></span> <span class="number">-2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">pos?</span></span> <span class="number">1.2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">pos?</span></span> <span class="number">0</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">pos?</span></span> <span class="number">+0</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">pos?</span></span> <span class="number">0.1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">true</span></pre></td></tr></tbody></table></figure><p><strong>负数检查<code>neg?</code></strong><br>负数检查函数 (neg?)： 接受一个数值类型参数，如果是小于0返回true，否则返回false </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">neg?</span></span> <span class="number">-3</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">true    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">neg?</span></span> <span class="number">0</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">false</span></pre></td></tr></tbody></table></figure><p><strong>偶数检查<code>even?</code></strong> </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">even?</span></span> <span class="number">10</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">even?</span></span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">even?</span></span> <span class="number">0</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">even?</span></span> <span class="number">-10</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">true</span></pre></td></tr></tbody></table></figure><p><strong>奇数检查<code>odd?</code></strong> </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">odd?</span></span> <span class="number">10</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">odd?</span></span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">odd?</span></span> <span class="number">0</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">odd?</span></span> <span class="number">-10</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">odd?</span></span> <span class="number">-9</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">true</span></pre></td></tr></tbody></table></figure><p><strong>数值检查<code>number?</code></strong><br>数值检查函数 (number?)： 接受一个参数，如果是数值返回true，否则返回false </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">number?</span></span> <span class="number">3.2</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">true    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">number?</span></span> <span class="string">"2"</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">false</span></pre></td></tr></tbody></table></figure><h3 id="四、强制转换："><a href="#四、强制转换：" class="headerlink" title="四、强制转换："></a>四、强制转换：</h3><p>强制转换支持以下类型： </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>  Coerce to <span class="keyword">byte</span>.     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span>  Coerce to <span class="keyword">short</span>.     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>  Coerce to <span class="keyword">int</span>.     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span>  Coerce to <span class="keyword">long</span>.     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span>  Coerce to <span class="keyword">float</span>.     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span>  Coerce to <span class="keyword">double</span>.     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">bigint  Coerce to BigInteger.     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">bigdec  Coerce to BigDecimal.     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">num  Coerce to Number.     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">rationalize  returns the rational value of num</span></pre></td></tr></tbody></table></figure><p>示例：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">double</span></span> <span class="number">12</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">12.0  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">short</span></span> <span class="number">10000</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">10000  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">short</span></span> <span class="number">1000000000</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: Value out of range for short: 1000000000 (NO_SOURCE_FILE:0)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">int</span></span> <span class="number">22.2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">22  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">long</span> <span class="number">22.2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">22  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">float</span></span> <span class="number">22</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">22.0  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">bigint</span></span> <span class="number">100000000000</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">100000000000  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">bigdec</span></span> <span class="number">100000000000</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">100000000000M  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">num</span></span> <span class="number">22.22</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">22.22  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">num</span></span> <span class="string">"22.22"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Number (NO_SOURCE_FILE:0)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">rationalize</span></span> <span class="number">22.22</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">1111/50  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">rationalize</span></span> <span class="number">0.5</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">1/2</span></pre></td></tr></tbody></table></figure><p>五、参考资料<br><a href="http://blog.csdn.net/sunboy_2050/article/details/17225793" target="_blank" rel="external nofollow noreferrer noopener">Clojure 学习入门（3）—— 数字类型</a><br><a href="http://dead-knight.iteye.com/blog/1827360" target="_blank" rel="external nofollow noreferrer noopener">clojure-基本语法-数字类型</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      clojure 几种基本运算简单介绍及示常见运算示例
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Clojure 学习 —— 符号及关键字</title>
    <link href="http://notes.seirhsiao.com/posts/6dc5d2e6/"/>
    <id>http://notes.seirhsiao.com/posts/6dc5d2e6/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:39:09.329Z</updated>
    
    <content type="html"><![CDATA[<p>clojure 关键字简单介绍与示例</p><a id="more"></a><h3 id="一、创建："><a href="#一、创建：" class="headerlink" title="一、创建："></a>一、创建：</h3><p><strong><code>Keyword</code>：</strong> 关键字是一个内部字符串; 两个同样的关键字指向同一个对象; 通常被用来作为<code>map</code>的<code>key</code>。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">keyword</span></span> <span class="string">"foo"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">:foo  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">keyword</span></span> 'foo)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">:foo  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">keyword</span></span> <span class="string">"abc def"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">:abc def  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">keyword</span></span> <span class="string">"abcdef"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">:abcdef  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">keyword</span></span> <span class="string">"/abc/def/ghi"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">:/abc/def/ghi  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">keyword</span></span> <span class="string">"user"</span> <span class="string">"foo"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">:user/foo  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">keyword</span></span> <span class="literal">nil</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">nil  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">keyword</span></span> <span class="number">123</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">nil  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">keyword</span></span> <span class="number">0</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">nil</span></pre></td></tr></tbody></table></figure><p><strong><code>Symbol</code>：</strong> <code>Symbol</code>是用来给东西命名的. 这些名字是被限制在名字空间里面的，要么是指定的名字空间，要么是当前的名字空间. </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">symbol</span></span> 'foo)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">foo  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">symbol</span></span> <span class="string">"foo"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">foo  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">symbol</span></span> <span class="string">"clojure.core"</span> <span class="string">"foo"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">clojure.core/foo  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">symbol</span></span> <span class="string">"abc def"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">abc def  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">symbol</span></span> <span class="string">"abcdef"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">abcdef  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">symbol</span></span> <span class="literal">nil</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">java.lang.NullPointerException (NO_SOURCE_FILE:0)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">symbol</span></span> <span class="number">0</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String (NO_SOURCE_FILE:0)</span></pre></td></tr></tbody></table></figure><h3 id="二、用法："><a href="#二、用法：" class="headerlink" title="二、用法："></a>二、用法：</h3><p><strong><code>name</code></strong>： <code>name</code>函数接受一个参数，如果该参数为字符串，则直接返回该参数。如果不是字符串，则返回名称值。代码如下： </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">name</span></span> <span class="symbol">:foo</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">"foo"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">name</span></span> 'foo)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">"foo"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">name</span></span> <span class="string">"foo"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">"foo"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">name</span></span> <span class="literal">nil</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">java.lang.NullPointerException (NO_SOURCE_FILE:0)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">name</span></span> <span class="number">0</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">java.lang.ClassCastException: java.lang.Integer cannot be cast to clojure.lang.Named (NO_SOURCE_FILE:0)</span></pre></td></tr></tbody></table></figure><p><strong><code>intern</code>：</strong> <code>intern</code>函数有两个实现：<code>(intern ns name)</code>、<code>(intern ns name val)</code>。 </p><p>根据命名空间ns中查找是否存在符号name，不存在，则创建；最有一个参数val作为值与符号进行绑定，代码如下： </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">intern</span></span> 'user 'x)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#'user/x  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> x  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: Var user/x is unbound. (NO_SOURCE_FILE:0)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">intern</span></span> 'user 'x <span class="string">"1"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">#'user/x  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> x  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">"1"</span></pre></td></tr></tbody></table></figure><p><strong><code>namespace</code>：</strong>  <code>namespace</code>函数根据给定的符号、或者关键字返回所在的命名空间名称，如果当前没有，则返回<code>nil</code>，代码如下： </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">symbol</span></span> 'xx)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">xx  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">namespace</span></span> 'user/xxx)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">"user"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">namespace</span></span> 'xxx)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">nil  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> x <span class="symbol">:val</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">#'user/x  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">namespace</span></span> 'x)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">nil  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">namespace</span></span> 'user/x)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">"user"</span></pre></td></tr></tbody></table></figure><h3 id="三、检查："><a href="#三、检查：" class="headerlink" title="三、检查："></a>三、检查：</h3><p><code>keyword?</code>、<code>symbol?</code>用于检查指定的参数是否为关键字、或者是符号，是则返回<code>true</code>，否则返回<code>false</code>。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">symbol?</span></span> 'x)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">symbol?</span></span> <span class="string">"x"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">keyword?</span></span> 'x)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">keyword?</span></span> <span class="symbol">:x</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">keyword?</span></span> <span class="string">"x"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">false</span></pre></td></tr></tbody></table></figure><p>四、参考资料<br><a href="http://blog.csdn.net/sunboy_2050/article/details/17225729" target="_blank" rel="external nofollow noreferrer noopener">Clojure 学习入门（5）—— 关键字</a><br><a href="http://dead-knight.iteye.com/blog/1830465" target="_blank" rel="external nofollow noreferrer noopener">clojure-基本语法-符号及关键字</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      clojure 关键字简单介绍与示例
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Clojure 学习 —— 条件判断</title>
    <link href="http://notes.seirhsiao.com/posts/203e8a64/"/>
    <id>http://notes.seirhsiao.com/posts/203e8a64/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:39:08.736Z</updated>
    
    <content type="html"><![CDATA[<p>clojure 条件判断简单介绍及常见函数(宏)示例</p><a id="more"></a><h3 id="一、标准的流程控制"><a href="#一、标准的流程控制" class="headerlink" title="一、标准的流程控制"></a>一、标准的流程控制</h3><p>*<em><code>if</code>： *</em><br>将一个判断表达式作为它的第一个参数进行求值。如果求值为<code>true</code>，那么就返回它的第二个参数（相当于“<code>then</code>”子句）的求值结果。如果结果为<code>false</code>（包括<code>nil</code>）就返回第三个参数的求值结果（相当于“<code>else</code>”子句），前提是有提供第三个参数并且不为空。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defn</span></span> is-small [number] (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">&lt;</span></span> number <span class="number">100</span>) <span class="string">"yes"</span> <span class="string">"no"</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#'user/is-small  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">is-small</span> <span class="number">50</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">"yes"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">is-small</span> <span class="number">110</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">"no"</span></pre></td></tr></tbody></table></figure><p><code>if</code>条件中除了<code>false</code>和<code>nil</code>，其他都为<code>true</code>： </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">if</span></span> <span class="literal">true</span> <span class="string">"true"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">"true"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">if</span></span> <span class="number">0</span> <span class="string">"true"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">"true"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">if</span></span> <span class="string">""</span> <span class="string">"true"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">"true"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">if</span></span> <span class="literal">nil</span> <span class="string">"true"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">nil  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">if</span></span> <span class="literal">false</span> <span class="string">"true"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">nil</span></pre></td></tr></tbody></table></figure><p><strong><code>if-not</code>：</strong><br>跟 <code>if</code> 的用法相同，但是作用是相反的。当逻辑为<code>false</code>的时候会去计算第二个参数的值，为<code>true</code>的时候才计算第三个参数的值 。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">if-not</span></span> (<span class="name"><span class="builtin-name">zero?</span></span> <span class="number">0</span>) <span class="string">"no"</span> <span class="string">"yes"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">"yes"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">not</span></span> (<span class="name"><span class="builtin-name">zero?</span></span> <span class="number">0</span>)) <span class="string">"no"</span> <span class="string">"yes"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">"yes"</span></pre></td></tr></tbody></table></figure><p><strong><code>if-let</code>：</strong><br><code>if-let</code>宏接受两个参数，第一个参数为绑定变量，第二个参数为表达式。并根据第二个表达式参数返回的值确定执行<code>then</code>、<code>else</code>语句。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defn</span></span> if-let-test [arg] (<span class="name"><span class="builtin-name">if-let</span></span> [x arg] <span class="string">"true"</span> <span class="string">"false"</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#'user/if-let-test  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">if-let-test</span> <span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">"true"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">if-let-test</span> <span class="literal">nil</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">"false"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">if-let-test</span> <span class="literal">false</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">"false"</span></pre></td></tr></tbody></table></figure><p><strong><code>when</code>：</strong><br><code>when</code>没有<code>else</code>子句，如果<code>when</code>后面第一个参数为<code>true</code>，则执行条件后的所有语句，否则返回<code>nil</code>。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">when</span></span> <span class="literal">false</span> (<span class="name">println</span> <span class="string">"is true"</span>) <span class="string">"return true"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">nil  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">when</span></span> <span class="literal">true</span> (<span class="name">println</span> <span class="string">"is true"</span>) <span class="string">"return true"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">is true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">"return true"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> has-value (<span class="name"><span class="builtin-name">when</span></span> <span class="literal">true</span> (<span class="name">println</span> <span class="string">"hello world"</span>) <span class="string">"returned value"</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">hello world  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">#'user/has-value  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> has-value  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">"returned value"</span></pre></td></tr></tbody></table></figure><p><strong><code>when-not</code>：</strong><br><code>when-not</code>与<code>when</code>类似，只是第一个参数返回<code>false</code>，才执行后面所有语句，否则返回<code>nil</code>。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">when-not</span></span>  <span class="literal">false</span> (<span class="name">println</span> <span class="string">"is true"</span>) <span class="string">"return true"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">is true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">"return true"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">when-not</span></span> <span class="literal">true</span> (<span class="name">println</span> <span class="string">"is true"</span>) <span class="string">"return true"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">nil</span></pre></td></tr></tbody></table></figure><p><strong><code>when-let</code>：</strong><br><code>when-let</code>与<code>if-let</code>类似，只有绑定变量值不是<code>false</code>、<code>nil</code>时，才执行后面所有语句，否则直接返回<code>nil</code>。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">when-let</span></span> [a <span class="literal">true</span>] (<span class="name">println</span> <span class="string">"true"</span>) <span class="string">"return true"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">"return true"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">when-let</span></span> [a <span class="literal">false</span>] (<span class="name">println</span> <span class="string">"true"</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">nil  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">when-let</span></span> [a <span class="literal">nil</span>] (<span class="name">println</span> <span class="string">"true"</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">nil</span></pre></td></tr></tbody></table></figure><p><strong><code>cond</code>：</strong><br><code>cond</code> 可以有任意个“判断/表达式”对，作为它的参数。如果满足第一个判断，就执行第一个判断对应的表达式。如果没有满足第一个条件，就会尝试后面的判断表达式，以此类推。如果一个都没有满足，那么返回 <code>nil</code> 除非你用一个 <code>:else</code> 关键字放在最后来抓住剩下的所有可能性。<code>cond</code>类似于<code>java</code>中的<code>switch..case..default</code>语句，如： </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defn</span></span> f [n] (<span class="name"><span class="builtin-name">cond</span></span> (<span class="name"><span class="builtin-name">&lt;</span></span> n <span class="number">0</span>) <span class="string">"&lt;0"</span> (<span class="name"><span class="builtin-name">&lt;</span></span> n <span class="number">10</span>) <span class="string">"&lt;10"</span> <span class="symbol">:else</span> <span class="string">"&gt;=10"</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#'user/f  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">f</span> <span class="number">-2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">"&lt;0"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">f</span> <span class="number">2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">"&lt;10"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">f</span> <span class="number">10</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">"&gt;=10"</span></pre></td></tr></tbody></table></figure><p><strong><code>case</code>：</strong><br><code>case</code>可以简单理解为<code>java</code>中<code>switch</code>的<code>case</code>，如下 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">let</span></span> [mystr <span class="string">"hello"</span>]<span class="comment">;首先绑定mystr的值为hello  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">          (case mystr    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">            "" 0   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            "hello" (count mystr)));case用于匹配mystr的值  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">5       </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">let</span></span> [mystr <span class="string">"no match"</span>]   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">          (case mystr    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                "" 0   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                "hello" (count mystr)   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                "default")) ;最后一个表达式只有匹配不成功时才执行  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">"default"</span></pre></td></tr></tbody></table></figure><p><code>case</code>可以用列表一次匹配多个值： </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defn</span></span> f [x] (<span class="name"><span class="builtin-name">case</span></span> x  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">       (5 10) "*5"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">       (3 6 9) "*3"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">       "others"))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">#'user/f  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">f</span> <span class="number">5</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">"*5"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">f</span> <span class="number">10</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">"*5"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">f</span> <span class="number">6</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">"*3"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">f</span> <span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">"others"</span></pre></td></tr></tbody></table></figure><p><strong><code>do</code>：</strong><br><code>do</code>执行多条语句，返回最后一条语句值 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> v (<span class="name"><span class="builtin-name">do</span></span> (<span class="name">println</span> <span class="number">123</span>) (<span class="name">println</span> <span class="number">321</span>) <span class="number">-1</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">123  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">321  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">#'user/v  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> v  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">-1</span></pre></td></tr></tbody></table></figure><p><strong><code>loop</code>、<code>recur</code>：</strong><br>如果递归的层次太深的话，那么可能会产生内存不足的情况。所以一些编程语言利用 “<code>tail call optimization</code>” (<code>TCO</code>)的技术来解决这个问题。在Clojure里面避免这个问题的一个办法是使用<code>loop</code> 和 <code>recur</code>。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">;定义递归语句完成10+9+……1=55  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">loop</span></span> [sum <span class="number">0</span> cnt <span class="number">10</span>] (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">=</span></span> cnt <span class="number">0</span>) sum (<span class="name"><span class="builtin-name">recur</span></span> (<span class="name"><span class="builtin-name">+</span></span> cnt sum) (<span class="name"><span class="builtin-name">dec</span></span> cnt))))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">55</span></pre></td></tr></tbody></table></figure><p><code>loop/recur</code> 组合把一个看似递归的调用变成一个迭代 — 迭代不需要占用栈空间。 <code>loop special form</code> 跟<code>let special form</code> 类似的地方是它们都会建立一个本地<code>binding</code>，但是同时它也建立一个递归点， 而这个递归点就是<code>recur</code>的参数里面的那个函数。<code>loop</code>给这些<code>binding</code>一个初始值。对<code>recur</code> 的调用使得程序的控制权返回给loop 并且给那些本地<code>binding</code>赋了新的值。给<code>recur</code>传递的参数一定要和<code>loop</code>所创建的<code>binding</code>的个数一样。同样<code>recur</code>只能出现在<code>loop</code>这个<code>special form</code>的最后一行</p><h3 id="二、参考资料"><a href="#二、参考资料" class="headerlink" title="二、参考资料"></a>二、参考资料</h3><p><a href="http://blog.csdn.net/sunboy_2050/article/details/17226571" target="_blank" rel="external nofollow noreferrer noopener">Clojure 学习入门（15）—— 条件判断</a><br><a href="http://dead-knight.iteye.com/blog/1828668" target="_blank" rel="external nofollow noreferrer noopener">clojure-基本语法-流程控制（一）</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      clojure 条件判断简单介绍及常见函数(宏)示例
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Clojure 学习 —— 函数定义</title>
    <link href="http://notes.seirhsiao.com/posts/f45f9581/"/>
    <id>http://notes.seirhsiao.com/posts/f45f9581/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:39:09.835Z</updated>
    
    <content type="html"><![CDATA[<p>clojure 函数简单介绍与常见函数及示例</p><a id="more"></a><h3 id="一、创建函数："><a href="#一、创建函数：" class="headerlink" title="一、创建函数："></a>一、创建函数：</h3><p><strong><code>fn</code>：</strong> <code>fn</code>是一个宏，用于定义一个简单的函数，如下： </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">fn</span></span> [] <span class="string">"hello"</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">#&lt;user$eval375$fn__376 user$eval375$fn__376@eabd2f&gt;    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> ((<span class="name"><span class="builtin-name">fn</span></span> [] <span class="string">"hello"</span>))    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">"hello"    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> ((<span class="name"><span class="builtin-name">fn</span></span> [x] x) <span class="string">"hello"</span>) <span class="comment">; 带参数    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">"hello"    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> ((<span class="name"><span class="builtin-name">fn</span></span> [x] (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"hello "</span> x)) <span class="string">"ithomer"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">"hello ithomer"</span></pre></td></tr></tbody></table></figure><p>简短的函数可以使用<code>#()</code>，<code>%</code>表示唯一的参数；<code>%1、%2 ..</code>依次表示第1、2、..个参数；<code>%&amp;</code>表示所有参数，如下： </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">#</span>(/ % <span class="number">3</span>) <span class="number">4</span>)   <span class="comment">;结果为 4/3  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">4/3    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">#</span>(/ %<span class="number">2</span> %<span class="number">1</span>) <span class="number">3</span> <span class="number">4</span>)   <span class="comment">;结果为 4/3   </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">4/3    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">#</span>(<span class="name"><span class="builtin-name">apply</span></span> / %&amp;) <span class="number">3</span> <span class="number">5</span> <span class="number">7</span>)   <span class="comment">;结果为3/5/7    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">3/35</span></pre></td></tr></tbody></table></figure><p>下面是几个定义函数的例子： </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> ((<span class="name"><span class="builtin-name">fn</span></span> [x] (<span class="name"><span class="builtin-name">+</span></span> <span class="number">1</span> x)) <span class="number">3</span>)  <span class="comment">;一个参数完成加1的功能    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">4    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">#</span>(<span class="name"><span class="builtin-name">+</span></span> <span class="number">1</span> %) <span class="number">3</span>)  <span class="comment">;使用#符号完成加1的功能    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">4    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> ((<span class="name"><span class="builtin-name">fn</span></span> [x y] (<span class="name"><span class="builtin-name">*</span></span> x y)) <span class="number">3</span> <span class="number">4</span>)  <span class="comment">;两个参数，实现乘积的功能    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">12    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">#</span>(<span class="name"><span class="builtin-name">*</span></span> %<span class="number">1</span> %<span class="number">2</span>) <span class="number">3</span> <span class="number">4</span>)  <span class="comment">;使用#符号完成两个参数乘积的功能    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">12</span></pre></td></tr></tbody></table></figure><p><strong><code>defn</code>：</strong> <code>defn</code> 宏用来定义一个函数。它的参数包括一个函数名字，一个可选的注释字符串，参数列表，然后一个方法体。而函数的返回值则是方法体里面最后一个表达式的值。所有的函数都会返回一个值， 只是有的返回的值是<code>nil</code>。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defn</span></span> f1 [] <span class="string">"hello ithomer"</span>)              <span class="comment">;定义无参函数    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">#'user/f1  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">f1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">"hello ithomer"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defn</span></span> f2 [x] (<span class="name"><span class="builtin-name">format</span></span> <span class="string">"hello %s"</span> x))       <span class="comment">;定义一个参数函数   </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">#'user/f2  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">f2</span> <span class="string">"ithomer"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">"hello ithomer"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defn</span></span> f3 [x y] (<span class="name"><span class="builtin-name">+</span></span> x y))                   <span class="comment">;定义两个参数相加的函数    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">#'user/f3    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">f3</span> <span class="number">2</span> <span class="number">4</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">6    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defn</span></span> f4 <span class="string">"f4 function comment"</span> [] (<span class="name">println</span> <span class="string">"f4 function here"</span>))       <span class="comment">;带注释的函数    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">#'user/f4    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">f4</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">f4 function here  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">nil   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">doc</span> f4)          <span class="comment">;通过doc查看函数注释信息    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">-------------------------  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">user/f4  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">([])  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  f4 function comment  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">nil  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defn</span></span> f5 ([] (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"no parameter"</span>))    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">                ([name] (str "my name is " name)))      ;定义重载的函数（无参数、一个参数）  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">#'user/f5    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">f5</span>)                  <span class="comment">; 无参数  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">"no parameter"    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">f5</span> <span class="string">"clojure"</span>)        <span class="comment">; 一个参数  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">"my name is clojure"    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defn</span></span> f1 [&amp; a] (<span class="name"><span class="builtin-name">str</span></span> a))       <span class="comment">;定义变参函数    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">#'user/f1    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">f1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">"(1 2 3)"    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defn</span></span> m [&amp; arg] (<span class="name"><span class="builtin-name">str</span></span> arg <span class="string">", size="</span> (<span class="name"><span class="builtin-name">count</span></span> arg)))      <span class="comment">;定义变参函数    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">#'user/m    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">m</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">"(1 2 3 4 5), size=5"    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">m</span> <span class="string">"a"</span> <span class="number">1</span> <span class="number">2.3</span> <span class="number">-1</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">"(\"a\" 1 2.3 -1), size=4"    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defn</span></span> exp [a f1 b f2 c] (<span class="name">f2</span> (<span class="name">f1</span> a b) c))              <span class="comment">;函数作为参数    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">#'user/exp    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">exp</span> <span class="number">5</span> - <span class="number">2</span> + <span class="number">3</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">6    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defn</span></span> f [a] (<span class="name"><span class="builtin-name">fn</span></span> [b] (<span class="name"><span class="builtin-name">-</span></span> a b)))                     <span class="comment">;函数作为返回值    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">#'user/f    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> ((<span class="name">f</span> <span class="number">7</span>) <span class="number">4</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">3</span></pre></td></tr></tbody></table></figure><p><strong><code>defn-</code>：</strong> <code>defn-</code>与<code>defn</code>功能一致，都是用于定义函数的，<code>defn-</code>定义的函数作用域是私有的，而defn定义的函数是公有的，如下： </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">ns</span></span> test1)                    <span class="comment">;ns的意思是切换到指定的命名空间，如果不存在，则新建该命名空间    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">nil    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">test1=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defn-</span></span> foo [] <span class="string">"hello ithomer"</span>)           <span class="comment">;定义私有函数foo，返回字符串world    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">#'test1/foo    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">test1=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defn</span></span> bar [] (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"hello "</span> (<span class="name">foo</span>)))       <span class="comment">;定义公有函数bar，并调用私有函数foo    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">#'test1/bar    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">test1=&gt;</span><span class="clojure"> (<span class="name">foo</span>)            <span class="comment">;当前命名空间内调用foo函数    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">"hello ithomer"   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">test1=&gt;</span><span class="clojure"> (<span class="name">bar</span>)            <span class="comment">;当前命名空间内调用bar函数    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">"hello hello ithomer"   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="meta">test1=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">ns</span></span> test2)       <span class="comment">;切换到test2命名空间中    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">nil    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="meta">test2=&gt;</span><span class="clojure"> (<span class="name">test1/bar</span>)      <span class="comment">;调用test1命名空间的bar函数，返回成功    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">"hello hello ithomer"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="meta">test2=&gt;</span><span class="clojure"> (<span class="name">test1/foo</span>)      <span class="comment">;调用test1命名空间的foo函数，出现异常，提示test1的foo函数不是公开的    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: var: #'test1/foo is not public (NO_SOURCE_FILE:79)</span></pre></td></tr></tbody></table></figure><p><strong>组合函数<code>comp</code>：</strong> 形如   <code>((comp f1 f2 .. fn) arg1 arg2 .. argn)</code><br>就是对参数从右到左组合执行所有函数，可以转变为： <code>(f1 (f2 (.. (fn arg1 arg2 .. argn))))</code><br>举例如下： </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defn</span></span> f [x y] (<span class="name"><span class="builtin-name">-</span></span> (<span class="name"><span class="builtin-name">*</span></span> x y)))<span class="comment">;使用defn定义函数方式    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">#user/f    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">f</span> <span class="number">2</span> <span class="number">4</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">-8    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> fc (<span class="name"><span class="builtin-name">comp</span></span> - *))<span class="comment">;使用comp定义组合函数方式    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">#user/fc    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">fc</span> <span class="number">2</span> <span class="number">4</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">-8</span></pre></td></tr></tbody></table></figure><p><strong>偏函数<code>partial</code>：</strong> 形如 <code>((partial  f  arg1 arg2 .. argn)  arga argb .. argz)</code><br>就是执行： <code>(f  arg1 arg2 .. argn  arga argb .. argz)</code> </p><p><strong>注意：</strong> 偏函数的第一个参数是一个函数，后面至少有1个其他参数<br><code>partial</code>函数称为“偏函数”或者“部分完整函数”，因为它是不完整的，定义也用<code>def</code>而不是<code>defn</code>。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defn</span></span> f [n] (<span class="name"><span class="builtin-name">*</span></span> n <span class="number">10</span>))<span class="comment">;正常函数    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">#'user/f    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">f</span> <span class="number">2</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">20    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> fp (<span class="name"><span class="builtin-name">partial</span></span> * <span class="number">10</span>))<span class="comment">;偏函数    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">#'user/fp    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">fp</span> <span class="number">2</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">20</span></pre></td></tr></tbody></table></figure><p><strong><code>constantly</code>函数：</strong> <code>constantly</code>函数接受一个参数<code>x</code>，并返回一个变参函数，该变参函数无论参数是什么，都返回这个<code>x</code>值。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> consf (<span class="name"><span class="builtin-name">constantly</span></span> <span class="string">"a"</span>))    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">#'user/consf    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">consf</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">"a"    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">consf</span> <span class="string">"a"</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">"a"    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">consf</span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>])    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">"a"</span></pre></td></tr></tbody></table></figure><h3 id="二、函数调用"><a href="#二、函数调用" class="headerlink" title="二、函数调用"></a>二、函数调用</h3><p><strong><code>-&gt;</code>：</strong> 宏<code>-&gt;</code> 我们也称为 “<code>thread</code>” 宏，它本质上是调用一系列的函数，前一个函数的返回值作为后一个函数的参数，返回最后一次函数调用的值，比如下面两行代码的作用是一样的： </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">.toUpperCase</span> <span class="string">"a b c d"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">"A B C D"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">.replace</span> (<span class="name">.toUpperCase</span> <span class="string">"a b c d"</span>) <span class="string">"A"</span> <span class="string">"X"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">"X B C D"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">.split</span> (<span class="name">.replace</span> (<span class="name">.toUpperCase</span> <span class="string">"a b c d"</span>) <span class="string">"A"</span> <span class="string">"X"</span>) <span class="string">" "</span>)              <span class="comment">; 数组  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">#&lt;String[] [Ljava.lang.String;@41ab11b0&gt;  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">first</span></span> (<span class="name">.split</span> (<span class="name">.replace</span> (<span class="name">.toUpperCase</span> <span class="string">"a b c d"</span>) <span class="string">"A"</span> <span class="string">"X"</span>) <span class="string">" "</span>))    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">"X"   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">-&gt;</span></span> <span class="string">"a b c d"</span> .toUpperCase)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">"A B C D"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">-&gt;</span></span> <span class="string">"a b c d"</span> .toUpperCase (<span class="name">.replace</span> <span class="string">"A"</span> <span class="string">"X"</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">"X B C D"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">-&gt;</span></span> <span class="string">"a b c d"</span> .toUpperCase (<span class="name">.replace</span> <span class="string">"A"</span> <span class="string">"X"</span>) (<span class="name">.split</span> <span class="string">" "</span>))            <span class="comment">; 数组  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">#&lt;String[] [Ljava.lang.String;@58e41bc3&gt;  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">-&gt;</span></span> <span class="string">"a b c d"</span> .toUpperCase (<span class="name">.replace</span> <span class="string">"A"</span> <span class="string">"X"</span>) (<span class="name">.split</span> <span class="string">" "</span>) first)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">"X"</span></pre></td></tr></tbody></table></figure><p>这样调用的好处是更少的()，也更接近于<code>scala</code>的习惯。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">-&gt;</span></span> (/ <span class="number">144</span> <span class="number">12</span>) (/ <span class="number">2</span> <span class="number">3</span>) str keyword list)   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(:2)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">list</span></span> (<span class="name"><span class="builtin-name">keyword</span></span> (<span class="name"><span class="builtin-name">str</span></span> (/ (/ <span class="number">144</span> <span class="number">12</span>) <span class="number">2</span> <span class="number">3</span>))))   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(:2)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">-&gt;</span></span> (/ <span class="number">144</span> <span class="number">12</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">12  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">-&gt;</span></span> (/ <span class="number">144</span> <span class="number">12</span>) (/ <span class="number">2</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">2  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">-&gt;</span></span> (/ <span class="number">144</span> <span class="number">12</span>) (/ <span class="number">2</span> <span class="number">3</span>) str)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">"2"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">-&gt;</span></span> (/ <span class="number">144</span> <span class="number">12</span>) (/ <span class="number">2</span> <span class="number">3</span>) str keyword)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">:2  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">-&gt;</span></span> (/ <span class="number">144</span> <span class="number">12</span>) (/ <span class="number">2</span> <span class="number">3</span>) str keyword list)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">(:2)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (/ (/ <span class="number">144</span> <span class="number">12</span>) <span class="number">2</span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">2  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">str</span></span> (/ (/ <span class="number">144</span> <span class="number">12</span>) <span class="number">2</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">"2"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">keyword</span></span> (<span class="name"><span class="builtin-name">str</span></span> (/ (/ <span class="number">144</span> <span class="number">12</span>) <span class="number">2</span> <span class="number">3</span>)))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">:2  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">list</span></span> (<span class="name"><span class="builtin-name">keyword</span></span> (<span class="name"><span class="builtin-name">str</span></span> (/ (/ <span class="number">144</span> <span class="number">12</span>) <span class="number">2</span> <span class="number">3</span>))))   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">(:2)</span></pre></td></tr></tbody></table></figure><p>上面两句结果一样。<br><strong><code>-&gt;&gt;</code>：</strong> 后面的函数迭代使用之前的函数结果作为最后一个参数，返回最后一次函数调用的值，试看下面两个语句： </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">-&gt;</span></span> <span class="number">10</span> (/ <span class="number">3</span>))      <span class="comment">; 10/3  10作为/函数第一个参数    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">10/3  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">-&gt;&gt;</span></span> <span class="number">10</span> (/ <span class="number">3</span>))  <span class="comment">; 3/10  10作为/函数最后一个参数    </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">3/10</span></pre></td></tr></tbody></table></figure><p><strong><code>eval</code>：</strong> <code>eval</code>解析表达式数据结构（不是字符串），并返回结果。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">eval</span></span> (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"(println 1)"</span>))            <span class="comment">;str函数返回字符串  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">"(println 1)"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">read-string</span> <span class="string">"(println 1)"</span>)           <span class="comment">;而read-string函数用于从字符串中读取对象  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(println 1)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">eval</span></span> (<span class="name">read-string</span> <span class="string">"(println 1)"</span>))    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">1  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">nil</span></pre></td></tr></tbody></table></figure><p><strong><code>apply</code>函数：</strong><br><code>apply</code> 把给定的集合里面的所有元素一次性地给指定的函数作为参数调用，然后返回这个函数的返回值。可以把<code>apply</code>看作是<code>SQL</code>里面的聚合函数，如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">apply</span></span> + [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>])    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">10</span></pre></td></tr></tbody></table></figure><h3 id="三、函数检查"><a href="#三、函数检查" class="headerlink" title="三、函数检查"></a>三、函数检查</h3><p><strong><code>fn?</code>：</strong> <code>fn?</code>用于检查给定的参数是否为函数，是返回<code>true</code>，否则返回<code>false</code>，如： </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">fn?</span></span> #(<span class="string">"test"</span>))    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">fn?</span></span> <span class="number">1</span>)    </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">fn?</span></span> <span class="literal">nil</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">fn?</span></span> +)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">fn?</span></span> mod)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">fn?</span></span> rem)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">fn?</span></span> =)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">fn?</span></span> with-precision)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">java.lang.Exception: Can't take value of a macro: #'clojure.core/with-precision (NO_SOURCE_FILE:32)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">fn?</span></span> min)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">fn?</span></span> &gt;=)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">true</span></pre></td></tr></tbody></table></figure><p>参考推荐：</p><p><a href="http://dead-knight.iteye.com/category/269733" target="_blank" rel="external nofollow noreferrer noopener">clojure 学习</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      clojure 函数简单介绍与常见函数及示例
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Clojure 学习 —— 正则表达式</title>
    <link href="http://notes.seirhsiao.com/posts/2cfc7ba0/"/>
    <id>http://notes.seirhsiao.com/posts/2cfc7ba0/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:39:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>clojure 中正则表达式简单介绍与常见正则表达式处理相关函数及示例</p><a id="more"></a><h3 id="一、创建正则表达式"><a href="#一、创建正则表达式" class="headerlink" title="一、创建正则表达式"></a>一、创建正则表达式</h3><p><strong><code>re-pattern</code>函数：</strong><br>函数 (<code>re-pattern</code>) 接受一个字符串参数，返回一个正则表达式样式(<code>java.util.regex.Pattern</code>类的实例）。这个样式能用于正则表达式匹配</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">re-pattern</span> <span class="string">"\\d+"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">#"\d+"</span></pre></td></tr></tbody></table></figure><p>也可以使用读取宏来直接用文本的方式输入正则表达式：在字符串前使用<code>#</code>符号。和用<code>re-pattern</code>函数生成的一样，例如，下面的表示方式和前面的例子是相同的：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> #<span class="string">"\\d+"</span>  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">#"\d+"</span></pre></td></tr></tbody></table></figure><p><strong><code>re-matcher</code>函数：</strong><br><code>re-matcher</code>函数接受两个参数：一个正则表达式样式和一个字符串。返回一个有状态的”<code>matcher</code>“对象，提供给其它正则函数而不是直接提供样式。<code>Matchers</code>是<code>java.util.regex.Matcher</code>.类的实例。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">re-matcher</span> #<span class="string">"\d+"</span> <span class="string">"abc12345def"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">#&lt;Matcher java.util.regex.Matcher[pattern=\d+ region=0,11 lastmatch=]&gt;  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> matcher-num (<span class="name">re-matcher</span> #<span class="string">"\d+"</span> <span class="string">"abc12345def"</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">#'user/matcher-num  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">re-find</span></span> matcher-num)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">"12345"</span></pre></td></tr></tbody></table></figure><p>这里的<code>def</code>函数用于定义变量，后面会描述</p><h3 id="二、使用正则表达式："><a href="#二、使用正则表达式：" class="headerlink" title="二、使用正则表达式："></a>二、使用正则表达式：</h3><p><strong><code>re-find</code>函数：</strong><br><code>re-find</code>接受一个样式与一个字符串或者一个<code>matcher</code>。每次调用，返回<code>matcher</code>中下一个符合正则匹配的结果。</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">user=&gt; (re-find #"\d+" "abc123")  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">"123"</span></span></pre></td></tr></tbody></table></figure><p><strong><code>re-matches</code>函数：</strong><br><code>re-matches</code>接受两个参数：一个正则表达式样式和一个字符串。返回任何和正则表达式样式匹配的字符串，如果没有匹配则返回<code>nil</code>。例如下面的代码：</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">user=&gt; (re-matches #"hello" "hello,world")  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="literal">nil</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">user=&gt; (re-matches #"hello.*" "hello,world")  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="string">"hello,world"</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">user=&gt; (re-matches #"hello,(.*)" "hello,world")  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">[<span class="string">"hello,world"</span> <span class="string">"world"</span>]</span></pre></td></tr></tbody></table></figure><p><strong><code>re-seq</code>函数：</strong><br><code>re-seq</code>接受一个样式与一个字符串。它返回一个使用永久匹配（<code>matcher</code>）的lazy sequence(懒序列)（这个<code>sequence</code>在一个连续的样式匹配的字符串中）</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">re-seq</span> #<span class="string">"\d"</span> <span class="string">"clojure 1.1.0"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">("1" "1" "0")  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">re-seq</span> #<span class="string">"\w+"</span> <span class="string">"mary had a little lamb"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">("mary" "had" "a" "little" "lamb")</span></pre></td></tr></tbody></table></figure><p><strong><code>re-groups</code>函数：</strong><br>接受一个<code>matcher</code>，返回从接近的发现与匹配的集合。如果没有嵌套集合，则返回一个完全匹配的字符串。如果有嵌套集合，则返回<code>vector</code>集合，第一个元素是完全匹配的（非嵌套）</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> phone-number <span class="string">"672-345-456-3212"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">#'user/phone-number  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> matcher (<span class="name">re-matcher</span> #<span class="string">"((\d+)-(\d+))"</span> phone-number))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">#'user/matcher  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">re-find</span></span> matcher)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">["672-345" "672-345" "672" "345"]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">re-groups</span></span> matcher)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">["672-345" "672-345" "672" "345"]</span></pre></td></tr></tbody></table></figure><p>四、参考资料<br><a href="http://blog.csdn.net/sunboy_2050/article/details/17225971" target="_blank" rel="external nofollow noreferrer noopener">Clojure 学习入门（16）—— 正则表达式</a><br><a href="http://dead-knight.iteye.com/blog/1827994" target="_blank" rel="external nofollow noreferrer noopener">clojure-基本语法-正则表达式</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      clojure 中正则表达式简单介绍与常见正则表达式处理相关函数及示例
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Clojure 学习 —— 循环控制</title>
    <link href="http://notes.seirhsiao.com/posts/f1db92fe/"/>
    <id>http://notes.seirhsiao.com/posts/f1db92fe/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:39:07.218Z</updated>
    
    <content type="html"><![CDATA[<p>clojure 循环控制简单介绍及示常见函数(宏)例应用</p><a id="more"></a><h3 id="一、基于函数的流程控制"><a href="#一、基于函数的流程控制" class="headerlink" title="一、基于函数的流程控制"></a>一、基于函数的流程控制</h3><p><strong><code>repeatedly</code>：</strong><br><code>repeatedly</code>字面意思为重复函数。一般的用法如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">repeatedly</span> <span class="number">5</span> #(<span class="name"><span class="builtin-name">rand-int</span></span> <span class="number">11</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(6 8 2 6 6)</span></pre></td></tr></tbody></table></figure><p>重复产生5次随机数。<code>rand-int</code> 11表示0至11的随机数。<br>这里顺便提一下<code>repeat</code>函数：<code>repeat</code>函数接受一/两个常量参数，用法如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">repeat</span></span> <span class="number">5</span> (<span class="name"><span class="builtin-name">int</span></span> (<span class="name"><span class="builtin-name">rand-int</span></span> <span class="number">100</span>)))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(30 30 30 30 30)</span></pre></td></tr></tbody></table></figure><p>当<code>repeat</code>、<code>repeatedly</code>函数只接受一个参数时（即没有重复次数的参数），需要配合<code>take</code>来中止，否则会产生内存溢出的错误。如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">repeatedly</span> #(<span class="name"><span class="builtin-name">rand-int</span></span> <span class="number">11</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">OutOfMemoryError Java heap space  java.util.Arrays.copyOf (Arrays.java:2882)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">take</span></span> <span class="number">5</span> (<span class="name">repeatedly</span> #(<span class="name"><span class="builtin-name">rand-int</span></span> <span class="number">11</span>)))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(10 7 0 2 8)</span></pre></td></tr></tbody></table></figure><p><strong><code>iterate</code>：</strong><br>迭代函数形式如下：<br><code>(iterate f v)</code><br>相当于：<br><code>while(true) { v = f(v) }</code><br>所以一般要配合<code>(take n sequence)</code>来中止：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">take</span></span> <span class="number">10</span> (<span class="name"><span class="builtin-name">iterate</span></span> inc <span class="number">5</span>)) <span class="comment">; (5 6 7 8 9 10 11 12 13 14)  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">take</span></span> <span class="number">10</span> (<span class="name"><span class="builtin-name">iterate</span></span> #(<span class="name"><span class="builtin-name">+</span></span> % <span class="number">5</span>) <span class="number">5</span>)) <span class="comment">; (5 10 15 20 25 30 35 40 45 50)  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">take</span></span> <span class="number">10</span> (<span class="name"><span class="builtin-name">iterate</span></span> #(<span class="name"><span class="builtin-name">*</span></span> % <span class="number">2</span>) <span class="number">2</span>)) <span class="comment">; (2 4 8 16 32 64 128 256 512 1024)</span></span></span></pre></td></tr></tbody></table></figure><p>二、基于序列的流程控制<br><strong><code>dotimes</code>：</strong><br><code>dotimes</code> 会执行给定的表达式一定次数, 一个本地<code>binding</code>会被给定值：从0到一个给定的数值。如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">dotimes</span></span> [num <span class="number">3</span>] (<span class="name">println</span> <span class="string">"number:"</span> (<span class="name"><span class="builtin-name">inc</span></span> num)))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">number: 1  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">number: 2  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">number: 3  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">nil</span></pre></td></tr></tbody></table></figure><p><strong><code>doseq</code>：</strong><br><code>doseq</code>和<code>for</code>的语法是一样的，只不过<code>for</code>返回<code>lazy seq</code>而<code>doseq</code>接受任意数量的表达式, 以有副作用的方式执行它们, 并且返回<code>nil</code></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">doseq</span></span> [i (<span class="name"><span class="builtin-name">range</span></span> <span class="number">10</span>)] (<span class="name">println</span> i))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">0  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">1  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">2  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">3  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">4  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">5  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">6  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">7  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">8  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">9  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">nil  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">doseq</span></span> [i [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>] j [<span class="number">10</span> <span class="number">20</span>]] (<span class="name">println</span> i <span class="string">"-"</span> j))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">1 - 10  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">1 - 20  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">2 - 10  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">2 - 20  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">3 - 10  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">3 - 20  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">nil</span></pre></td></tr></tbody></table></figure><p><strong><code>for</code>：</strong><br><code>for</code>、<code>doseq</code>都支持遍历多个集合(最右边的最快)，同时还可以用<code>:when</code> 和 <code>:while</code>来过滤。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">for</span></span> [x (<span class="name"><span class="builtin-name">range</span></span> <span class="number">3</span> <span class="number">7</span>)] (<span class="name"><span class="builtin-name">*</span></span> x x))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(9 16 25 36)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">for</span></span> [x [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>] <span class="symbol">:let</span> [y (<span class="name"><span class="builtin-name">*</span></span> x <span class="number">3</span>)] <span class="symbol">:when</span> (<span class="name"><span class="builtin-name">even?</span></span> y)] y)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(0 6 12)</span></pre></td></tr></tbody></table></figure><p>上面第二条语句可理解为：先定义x为集合，再使用let将y赋值为x*3，最后判断y是否为偶数，偶数才返回 </p><p>三、参考资料<br><a href="http://blog.csdn.net/sunboy_2050/article/details/17226645" target="_blank" rel="external nofollow noreferrer noopener">Clojure 学习入门（14）—— 循环控制</a><br><a href="http://dead-knight.iteye.com/blog/1829618" target="_blank" rel="external nofollow noreferrer noopener">clojure-基本语法-流程控制（二）</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      clojure 循环控制简单介绍及示常见函数(宏)例应用
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Clojure 学习 —— 集合List</title>
    <link href="http://notes.seirhsiao.com/posts/58a07c8e/"/>
    <id>http://notes.seirhsiao.com/posts/58a07c8e/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:39:02.271Z</updated>
    
    <content type="html"><![CDATA[<p>Clojure提供以下集合类型: <code>list</code>, <code>vector</code>, <code>set</code>, <code>map</code>。<br>并且可以使用<code>Java</code>里面提供的集合类型。所有的<code>clojure</code>集合是不可修改的、异源的以及持久的。不可修改表示集合产生之后，不能从集合里面增加或删除元素。异源表示集合里面可以装任意类型的数据。持久的表示集合有更新时，更新之前的数据还在。<code>CLojure</code>以一种高效的，共享内存的方式来实现集合。</p><p>因为<code>clojure</code>里面的集合是不可修改的，所以也就没有对集合进行修改的函数。相反<code>clojure</code>里面提供了一些函数从一个已有的集合来高效地创建新的集合。同时也有一些函数操作一个已有的集合（比如<code>vector</code>)来产生另外一种类型的集合(比如<code>LazySeq</code>), 这些函数有不同的特性。</p><a id="more"></a><h3 id="一、列表List"><a href="#一、列表List" class="headerlink" title="一、列表List"></a>一、列表List</h3><p>Clojure的List是单向链表，在头部增加新元素。List形式以“(1,2,3)”符号表示<br>创建list的方式：</p><p><strong>1、通过<code>list</code>创建</strong><br>（这里<code>list</code>是<code>clojure</code>定义的指向<code>clojure.lang.PersistentList</code>的<code>creator</code>方法的符号）</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">list</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(1 2 3)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">list</span></span> <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"c"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">("a" "b" "c")  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">list</span></span> <span class="string">"a"</span> <span class="number">1</span> <span class="number">2.3</span> 'a <span class="symbol">:keyname</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">("a" 1 2.3 a :keyname)</span></pre></td></tr></tbody></table></figure><p><strong>2、通过<code>list*</code>创建</strong><br><code>list*</code>要求最后一个参数必须为集合</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">list*</span></span> <span class="number">1</span> [<span class="number">2</span> <span class="number">3</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(1 2 3)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">list*</span></span> <span class="literal">nil</span> [<span class="number">1</span> <span class="number">2</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(nil 1 2)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">list*</span></span> <span class="number">1</span> <span class="literal">nil</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(1)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">list*</span></span> <span class="number">1</span> ())  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">(1)</span></pre></td></tr></tbody></table></figure><p><strong>3、通过其它方式创建：</strong></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)<span class="comment">;'符号阻止对后面的表达式立即求值，与quote意义相同  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(1 2 3)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">quote</span></span> (<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(1 2 3)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> <span class="number">10</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(1 2 3 4 5 6 7 8 9)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">repeat</span></span> <span class="number">5</span> <span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">(1 1 1 1 1)</span></pre></td></tr></tbody></table></figure><h4 id="操作List的函数："><a href="#操作List的函数：" class="headerlink" title="操作List的函数："></a>操作List的函数：</h4><p>这里只介绍常用函数。<br><strong>1、<code>cons</code>：</strong><br><code>cons</code>函数通过一个已有的集合来创建一个新的包含更多元素的集合，其中新加的元素在最前面</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">cons</span></span> <span class="number">1</span> (<span class="name"><span class="builtin-name">list</span></span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(1 2 3 4 5)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">cons</span></span> (<span class="name"><span class="builtin-name">list</span></span> <span class="number">1</span> <span class="number">2</span>) '(<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">((1 2) 3 4 5)</span></pre></td></tr></tbody></table></figure><p><strong>2、<code>conj</code>：</strong><br><code>conj</code>接收一个组合数据类型作为其第一个参数和任意数量的其它参数。并返回一个新的列表，这个列表将所有的其它参数连接到原来那个列表。<code>conj</code>函数也对<code>Vector</code>、<code>Map</code>、<code>Set</code>适用。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">conj</span></span> (<span class="name"><span class="builtin-name">list</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>) <span class="number">4</span>)<span class="comment">;list在头部增加新元素，所以此处添加在起始位置  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(4 1 2 3)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">conj</span></span> <span class="literal">nil</span> <span class="number">2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(2)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">conj</span></span> <span class="literal">nil</span> <span class="number">2</span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(3 2)</span></pre></td></tr></tbody></table></figure><p><strong>3、<code>peek</code>：</strong><br><code>peek</code>函数操纵一个单一的列表作为参数并返回列表中的第一个值</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">peek</span></span> '(<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">2  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">peek</span></span> (<span class="name"><span class="builtin-name">list</span></span> <span class="literal">nil</span> <span class="string">"2"</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">nil</span></pre></td></tr></tbody></table></figure><p><strong>4、<code>pop</code>：</strong><br><code>pop</code>函数操纵一个单一的列表作为参数并且返回一个去掉了首个元素的新列表</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">pop</span></span> '(<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(3 4)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">pop</span></span> (<span class="name"><span class="builtin-name">list</span></span> <span class="literal">nil</span> <span class="string">"2"</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">("2" 3)</span></pre></td></tr></tbody></table></figure><p><strong>5、<code>first</code>：</strong><br><code>first</code>返回列表第一个元素。在<code>list</code>中，<code>first</code>与<code>peek</code>效果相同，因为<code>list</code>是压栈操作元素</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">first</span></span> <span class="literal">nil</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">nil  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">first</span></span> ())  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">nil  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">first</span></span> (<span class="name"><span class="builtin-name">list</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">1</span></pre></td></tr></tbody></table></figure><p><strong>6、<code>rest</code>：</strong><br><code>rest</code>返回去除<code>first</code>之后剩下的集合</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">rest</span></span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(2 3)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">rest</span></span> <span class="literal">nil</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">()  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">rest</span></span> ())  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">()</span></pre></td></tr></tbody></table></figure><p><code>List</code>是以单向链接列表的形式来实现的，在这一点上有利有弊。读取列表的第一个元素或者在列表头添加一个元素的操作都可以在常量时间内完成，然而访问列表的第N个元素却需要N次操作。</p><h3 id="二、向量Vector"><a href="#二、向量Vector" class="headerlink" title="二、向量Vector"></a>二、向量<code>Vector</code></h3><p><code>Vector</code>支持高效地根据索引来访问元素，与数组类似。<code>Vector</code>形式以“<code>[1,2,3]</code>”符号表示<br>创建<code>Vector</code>方式：<br><strong>1、<code>vector</code>：</strong><br><code>vector</code>接收任意数量的参数并将它们的值组成一个<code>Vector</code></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">vector</span></span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">vector</span></span> <span class="literal">nil</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">[nil]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">vector</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">[1 2 3]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">vector</span></span> (<span class="name"><span class="builtin-name">list</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">[(1 2 3)]</span></pre></td></tr></tbody></table></figure><p><strong>2、<code>vec</code>：</strong><br><code>vec</code>接收一个单独的参数，可能是任何<code>Clojure</code>或<code>Java</code>的数据类型，然后将其元素的值作为参数组成一个新的向量</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">vec</span></span> (<span class="name"><span class="builtin-name">list</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">[1 2 3]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">vec</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">[1 2 3]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">vec</span></span> '())  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">[]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">vec</span></span> <span class="literal">nil</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">[]</span></pre></td></tr></tbody></table></figure><p><strong>3、<code>vector-of</code>：</strong><br><code>vector-of</code>函数第一个参数指定<code>Vector</code>元素的类型，后面任意个参数作为元素，如果类型转换正确，则返回一个<code>vector</code>。<code>vector-of</code>第一个参数包括：<code>:int</code> <code>:long</code> <code>:float</code> <code>:double</code> <code>:byte</code> <code>:short</code> <code>:char</code> or <code>boolean</code></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">vector-of</span> <span class="symbol">:int</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">[1 2 3]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">vector-of</span> <span class="symbol">:int</span> <span class="string">"1"</span> <span class="string">"2"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">ClassCastException java.lang.String cannot be cast to java.lang.Character  cloju  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">re.lang.RT.intCast (RT.java:1076)</span></pre></td></tr></tbody></table></figure><h4 id="常用操作函数："><a href="#常用操作函数：" class="headerlink" title="常用操作函数："></a>常用操作函数：</h4><p><strong>1、<code>conj</code>：</strong><br><code>conj</code>函数在<code>List</code>常用函数中已介绍过，在操作<code>Vector</code>时，代码如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">conj</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>] [<span class="number">4</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[1 2 3 [4]]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">conj</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>] <span class="number">4</span>)<span class="comment">;由于vector在尾部增加新元素，所以4添加在末尾  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">[1 2 3 4]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">conj</span></span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>) <span class="number">4</span>)<span class="comment">;这里参数为list，由于list在头部增加新元素，所以4添加在1之前  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(4 1 2 3)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">conj</span></span> [<span class="string">"a"</span> <span class="number">2</span> <span class="number">3.4</span>] <span class="number">-1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">["a" 2 3.4 -1]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">conj</span></span> [<span class="string">"a"</span> <span class="string">"b"</span>] [<span class="string">"c"</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">["a" "b" ["c"]]</span></pre></td></tr></tbody></table></figure><p><strong>2、<code>peek</code>：</strong><br><code>peek</code>返回<code>vector</code>中第一个值，与操作<code>list</code>的区别和<code>conj</code>一样</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">peek</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">3  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">peek</span></span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">1  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">peek</span></span> [])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">nil</span></pre></td></tr></tbody></table></figure><p><strong>3、<code>pop</code>：</strong><br><code>pop</code>返回<code>peek</code>之后剩下的集合</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">peek</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">3  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">pop</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">[1 2]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">peek</span></span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">1  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">pop</span></span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">(2 3)</span></pre></td></tr></tbody></table></figure><p><strong>4、<code>get</code>：</strong><br><code>get</code>函数接收两个参数来操作<code>vector</code>。第一个参数是<code>vector</code>，第二个参数是一个整数索引。它返回给定索引处的值，若在索引处没有值，则返回<code>nil</code></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">get</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>] <span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">2  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">get</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>] <span class="number">4</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">nil</span></pre></td></tr></tbody></table></figure><p><strong>5、<code>assoc</code>：</strong><br><code>assoc</code>接收三个参数：第一个是向量，第二个是整数索引，第三个是一个值。它返回一个新的向量，这个向量是原来那个向量在给定的索引处插入那个值的结果。如果索引超过了向量的长度，那么会引发一个错误。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">assoc</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>] <span class="number">0</span> <span class="number">10</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[10 2 3]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">assoc</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>] <span class="number">3</span> <span class="number">10</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">[1 2 3 10]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">assoc</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>] <span class="number">4</span> <span class="number">10</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">IndexOutOfBoundsException   clojure.lang.PersistentVector.assocN (PersistentVect  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">or.java:136)</span></pre></td></tr></tbody></table></figure><p><strong>6、<code>subvec</code>：</strong><br><code>subvec</code>接收两个或三个参数。第一个是向量，第二个和第三个（如果有的话）是索引。它返回一个新向量，这个向量由原来那个向量的介于两个索引之间或者第一个索引到向量末尾（如果没有第二个索引）的部分组成</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">subvec</span></span> [<span class="number">12</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>] <span class="number">2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[4 5 6 7]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">subvec</span></span> [<span class="number">12</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>] <span class="number">2</span> <span class="number">4</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">[4 5]</span></pre></td></tr></tbody></table></figure><p><strong>7、<code>rseq</code>：</strong><br><code>rseq</code>接受一个向量参数，如果向量为空，则返回<code>nil</code>，如果不为空，则在常量时间内返回顺序逆转的新向量：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">rseq</span></span> [])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">nil  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">rseq</span></span> [<span class="number">3</span> <span class="number">5</span> <span class="number">9</span> <span class="number">1</span> <span class="number">3</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(3 1 9 5 3)</span></pre></td></tr></tbody></table></figure><h3 id="二、参考资料"><a href="#二、参考资料" class="headerlink" title="二、参考资料"></a>二、参考资料</h3><p><a href="http://dead-knight.iteye.com/blog/1830583" target="_blank" rel="external nofollow noreferrer noopener">clojure-基本语法-集合（一）</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Clojure提供以下集合类型: &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;vector&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;。&lt;br&gt;并且可以使用&lt;code&gt;Java&lt;/code&gt;里面提供的集合类型。所有的&lt;code&gt;clojure&lt;/code&gt;集合是不可修改的、异源的以及持久的。不可修改表示集合产生之后，不能从集合里面增加或删除元素。异源表示集合里面可以装任意类型的数据。持久的表示集合有更新时，更新之前的数据还在。&lt;code&gt;CLojure&lt;/code&gt;以一种高效的，共享内存的方式来实现集合。&lt;/p&gt;
&lt;p&gt;因为&lt;code&gt;clojure&lt;/code&gt;里面的集合是不可修改的，所以也就没有对集合进行修改的函数。相反&lt;code&gt;clojure&lt;/code&gt;里面提供了一些函数从一个已有的集合来高效地创建新的集合。同时也有一些函数操作一个已有的集合（比如&lt;code&gt;vector&lt;/code&gt;)来产生另外一种类型的集合(比如&lt;code&gt;LazySeq&lt;/code&gt;), 这些函数有不同的特性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="集合" scheme="http://notes.seirhsiao.com/tags/%E9%9B%86%E5%90%88/"/>
    
      <category term="list" scheme="http://notes.seirhsiao.com/tags/list/"/>
    
  </entry>
  
  <entry>
    <title>Clojure 学习 —— 集合Map</title>
    <link href="http://notes.seirhsiao.com/posts/97485eea/"/>
    <id>http://notes.seirhsiao.com/posts/97485eea/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:44:28.390Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、映射Map"><a href="#一、映射Map" class="headerlink" title="一、映射Map"></a>一、映射Map</h3><p>Map存储一个键-值对的集合。键和值都可以是任何数据类型的对象，无论是基本数据类型还是其它映射。然而，使用关键字来作为映射的键非常合适，因此它们经常在应用映射的场合被使用。clojure的Map有三种实现方式：数组映射、哈希映射和有序映射。它们分别使用数组、哈希表和二叉树来作为底层实现。数组映射适用于较小的映射，而对哈希映射和有序映射的比较则要基于特定应用场合的情况。</p><a id="more"></a><p><code>Map</code>形式以“<code>{:a 1 :b 2}</code>“符号表示。<br>创建Map的方式：<br><strong>1、简单定义</strong><br>直接通过<code>def</code>绑定某个符号为映射形式，如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> my-map {<span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span> <span class="symbol">:c</span> <span class="number">3</span>})  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#'user/my-map  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">type</span></span> my-map)<span class="comment">;type查看符号的类型，这里默认采用哈希映射  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">clojure.lang.PersistentHashMap</span></pre></td></tr></tbody></table></figure><p><strong>2、<code>hash-map</code>：</strong><br>创建哈希映射</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">hash-map</span></span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">hash-map</span></span> <span class="symbol">:key1</span> <span class="number">1</span>, <span class="symbol">:key2</span> <span class="number">2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">{:key2 2, :key1 1}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> user {<span class="symbol">:name</span> <span class="string">"steve"</span> <span class="symbol">:age</span> <span class="number">24</span> <span class="symbol">:salary</span> <span class="number">8000</span> <span class="symbol">:company</span> <span class="string">"ibm"</span>})  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">#'user/user</span></pre></td></tr></tbody></table></figure><p><strong>3、<code>array-map</code>：</strong><br><code>array-map</code>创建数组映射，也有资料说是有序映射（不是根据<code>key</code>排序的意思，而是根据元素的初始顺序，相对于<code>hash-map</code>中<code>key</code>的位置不确定而言）</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">array-map</span> <span class="symbol">:b</span> <span class="number">1</span> <span class="symbol">:a</span> <span class="number">2</span> <span class="symbol">:c</span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{:b 1, :a 2, :c 3}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> am (<span class="name">array-map</span>  <span class="symbol">:b</span> <span class="number">1</span> <span class="symbol">:a</span> <span class="number">2</span> <span class="symbol">:c</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">#'user/am  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">type</span></span> am)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">clojure.lang.PersistentArrayMap</span></pre></td></tr></tbody></table></figure><p><strong>4、<code>sorted-map</code>：</strong><br><code>sorted-map</code>对键进行比较：根据数字或者字母表进行排序。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">type</span></span> (<span class="name"><span class="builtin-name">sorted-map</span></span>))<span class="comment">;底层实现方式为PersistentTreeMap  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">clojure.lang.PersistentTreeMap  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">sorted-map</span></span> <span class="symbol">:b</span> <span class="number">2</span> <span class="symbol">:a</span> <span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">{:a 1, :b 2}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">sorted-map</span></span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">{0 0, 1 1, 2 2}</span></pre></td></tr></tbody></table></figure><p><strong>5、<code>zipmap</code>：</strong><br><code>zipmap</code>使用给定的<code>keys</code>映射到匹配的<code>vals</code>，返回一个数组映射，如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> zm (<span class="name"><span class="builtin-name">zipmap</span></span> [<span class="symbol">:a</span> <span class="symbol">:b</span> <span class="symbol">:c</span> <span class="symbol">:d</span> <span class="symbol">:e</span>] [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#'user/zm  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">type</span></span> zm)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">clojure.lang.PersistentArrayMap  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> zm  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">{:e 5, :d 4, :c 3, :b 2, :a 1}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">zipmap</span></span> [<span class="symbol">:a</span> <span class="symbol">:b</span> <span class="symbol">:c</span>] [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">{:c 3, :b 2, :a 1}</span></pre></td></tr></tbody></table></figure><p><strong>6、<code>sorted-map-by</code>：</strong><br>使用提供的比较器，返回一个新建的有序映射。如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">sorted-map-by</span></span> &gt; <span class="number">1</span> <span class="string">"a"</span>, <span class="number">2</span> <span class="string">"b"</span>, <span class="number">3</span> <span class="string">"c"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{3 "c", 2 "b", 1 "a"}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">sorted-map-by</span></span> &lt; <span class="number">1</span> <span class="string">"a"</span>, <span class="number">2</span> <span class="string">"b"</span>, <span class="number">3</span> <span class="string">"c"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">{1 "a", 2 "b", 3 "c"}</span></pre></td></tr></tbody></table></figure><p><strong>7、<code>bean</code>：</strong><br>根据<code>java</code>对象，返回该对象的属性构成的<code>map</code>，这里待分析与<code>java</code>互操作时再说明。</p><p><strong>8、<code>frequencies</code>：</strong><br>根据集合中元素出现的次数，构成一个数组映射。如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">frequencies</span> [<span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"a"</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{1 3, 2 1, "a" 2, "b" 1}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">type</span></span> (<span class="name">frequencies</span> [<span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"a"</span>]))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">clojure.lang.PersistentArrayMap</span></pre></td></tr></tbody></table></figure><h4 id="操作Map的函数："><a href="#操作Map的函数：" class="headerlink" title="操作Map的函数："></a>操作<code>Map</code>的函数：</h4><p><strong>1、<code>assoc</code>（更新）：</strong><br>在<code>vector</code>部分已经提到<code>assoc</code>，不过<code>assoc</code>函数作用在map上，相当于把参数中的<code>key value</code>对添加到已有<code>map</code>中，如果<code>key</code>相同，则更新成参数中的<code>value</code>。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">assoc</span></span> {} <span class="symbol">:key1</span> <span class="string">"value1"</span> <span class="symbol">:key2</span> <span class="number">2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{:key2 2, :key1 "value1"}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">assoc</span></span> {<span class="symbol">:key1</span> <span class="string">"old value"</span>} <span class="symbol">:key1</span> <span class="string">"new value"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">{:key1 "new value"}</span></pre></td></tr></tbody></table></figure><p><strong>2、<code>dissoc</code>（删除）：</strong><br><code>dissoc</code>函数是将<code>map</code>中指定的<code>key</code>丢弃掉，并返回新的<code>map</code></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">dissoc</span></span> {<span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span> <span class="symbol">:c</span> <span class="number">3</span>} <span class="symbol">:b</span>)<span class="comment">;丢弃key为:b的元素  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{:a 1, :c 3}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">dissoc</span></span> {<span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span> <span class="symbol">:c</span> <span class="number">3</span>})<span class="comment">;没有key的参数时，直接返回  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">{:a 1, :c 3, :b 2}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">dissoc</span></span> {<span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span> <span class="symbol">:c</span> <span class="number">3</span>} <span class="symbol">:d</span>)<span class="comment">;  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">{:a 1, :c 3, :b 2}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">dissoc</span></span> {<span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span> <span class="symbol">:c</span> <span class="number">3</span>} <span class="symbol">:a</span> <span class="symbol">:b</span> <span class="symbol">:c</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">{}</span></pre></td></tr></tbody></table></figure><p><strong>3、<code>find</code>：</strong><br><code>find</code>函数接收两个参数，第一个参数为<code>map</code>，第二个参数为<code>key</code>，在<code>map</code>中查找<code>key</code>对应的元素，找不到返回<code>nil</code>，找到返回该元素（即键值对），如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">find</span></span> {<span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span>} <span class="symbol">:c</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">nil  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">find</span></span> {<span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span>} <span class="symbol">:a</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">[:a 1]</span></pre></td></tr></tbody></table></figure><p>实际上，<code>find</code>也可作用在<code>vector</code>上，从<code>vector</code>中查找索引对应的元素，找到后，返回索引位置与值组成的新的<code>vector</code>，找不到，直接返回<code>nil</code>。代码如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">find</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>] <span class="number">2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[2 3]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">find</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>] <span class="number">4</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">nil</span></pre></td></tr></tbody></table></figure><p><strong>4、<code>key</code>：</strong><br><code>key</code>的参数为<code>map</code>中的元素（<code>entry</code>），所以不能直接把<code>key</code>作用在<code>map</code>上。<code>key</code>用于返回元素的<code>key</code>名称</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">map</span></span> key {<span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span>})<span class="comment">;map的作用在后续详细介绍  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(:a :b)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">key</span></span> (<span class="name"><span class="builtin-name">first</span></span> {<span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span>}))<span class="comment">;first函数返回map的第一个元素作为key的参数  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">:a</span></pre></td></tr></tbody></table></figure><p><strong>5、<code>keys</code>：</strong><br><code>keys</code>的参数为<code>map</code>，返回<code>map</code>中的<code>key</code>组成列表</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">keys</span></span> {<span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span>})  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(:a :b)</span></pre></td></tr></tbody></table></figure><p><strong>6、<code>val</code>：</strong><br>与<code>key</code>类似，参数为<code>map</code>元素（<code>entry</code>），返回元素的<code>value</code>值</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">val</span></span> (<span class="name"><span class="builtin-name">first</span></span> {<span class="symbol">:one</span> <span class="symbol">:two</span>}))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">:two</span></pre></td></tr></tbody></table></figure><p><strong>7、<code>vals</code>：</strong><br>与<code>keys</code>类似，参数为<code>map</code>，返回<code>map</code>中的<code>value</code>组成的列表</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">vals</span></span> {<span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span>})  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(1 2)</span></pre></td></tr></tbody></table></figure><p><strong>8、<code>get</code>：</strong><br>在<code>vector</code>时也用到<code>get</code>，用于返回指定位置的元素。<code>get</code>作用在<code>map</code>上，是返回指定<code>key</code>的对应的<code>value</code>，如果找不到，也可返回指定的提示信息，如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">get</span></span> {<span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span>} <span class="symbol">:b</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">2  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">get</span></span> {<span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span>} <span class="symbol">:z</span> <span class="string">"missing"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">"missing"</span></pre></td></tr></tbody></table></figure><p><strong>9、<code>get-in</code>：</strong><br><code>get-in</code>适用于多层嵌套的情况，如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (((({<span class="symbol">:n</span> <span class="string">"qh"</span>, <span class="symbol">:addr</span> {<span class="symbol">:cn</span> {<span class="symbol">:bj</span> {<span class="symbol">:hd</span> <span class="string">"tsinghua"</span>}}}} <span class="symbol">:addr</span>) <span class="symbol">:cn</span>) <span class="symbol">:bj</span>) <span class="symbol">:hd</span>)<span class="comment">;不用get-in时  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">"tsinghua"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">get-in</span></span> {<span class="symbol">:n</span> <span class="string">"qh"</span>, <span class="symbol">:addr</span> {<span class="symbol">:cn</span> {<span class="symbol">:bj</span> {<span class="symbol">:hd</span> <span class="string">"tsinghua"</span>}}}} [<span class="symbol">:addr</span> <span class="symbol">:cn</span> <span class="symbol">:bj</span> <span class="symbol">:hd</span>])<span class="comment">;使用get-in方式  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">"tsinghua"</span></pre></td></tr></tbody></table></figure><p><strong>10、<code>select-keys</code>：</strong><br>用于选择<code>key</code>，返回包含指定<code>key</code>的<code>map</code></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">select-keys</span></span> {<span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span>} [<span class="symbol">:a</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{:a 1}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">select-keys</span></span> {<span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span>} [<span class="symbol">:a</span> <span class="symbol">:c</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">{:a 1}</span></pre></td></tr></tbody></table></figure><p><strong>11、<code>assoc-in</code>（更新）：</strong><br><code>assoc-in</code>函数用于更新<code>map</code>中指定<code>key</code>对应的值：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">assoc-in</span> {<span class="symbol">:name</span> <span class="string">"tom"</span> <span class="symbol">:age</span> <span class="number">26</span>} [<span class="symbol">:age</span>] <span class="number">36</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{:age 36, :name "tom"}</span></pre></td></tr></tbody></table></figure><p><strong>12、<code>update-in</code>（更新）：</strong><br><code>update-in</code>函数用于更新<code>map</code>中指定<code>key</code>对应的值，不过更新方式使用第三个参数（函数）</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">update-in</span></span> {<span class="symbol">:name</span> <span class="string">"qh"</span> <span class="symbol">:age</span> <span class="number">30</span>} [<span class="symbol">:age</span>] #(<span class="name"><span class="builtin-name">inc</span></span> %))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{:age 31, :name "qh"}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">update-in</span></span> {<span class="symbol">:a</span> <span class="number">3</span>} [<span class="symbol">:a</span>] / <span class="number">4</span> <span class="number">5</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">{:a 3/20}</span></pre></td></tr></tbody></table></figure><p><strong>13、<code>merge</code>（更新）：</strong><br><code>merge</code>函数用于合并多个<code>map</code>为一个新的<code>map</code>，如果<code>key</code>相同，则保留后一个参数<code>map</code>的<code>key</code>对应值</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">merge</span></span> {<span class="symbol">:name</span> <span class="string">"qh"</span> <span class="symbol">:age</span> <span class="number">30</span>} {<span class="symbol">:gender</span> 'm <span class="symbol">:mail</span> <span class="string">"qh@mail"</span>})  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{:mail "qh@mail", :gender m, :age 30, :name "qh"}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">;这里也可以用conj  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">conj</span></span> {<span class="symbol">:name</span> <span class="string">"qh"</span> <span class="symbol">:age</span> <span class="number">30</span>} {<span class="symbol">:gender</span> 'm <span class="symbol">:mail</span> <span class="string">"qh@mail"</span>})  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">{:mail "qh@mail", :gender m, :age 30, :name "qh"}</span></pre></td></tr></tbody></table></figure><p><strong>14、<code>merge-with</code>（更新）：</strong><br><code>merge-with</code>可以作为<code>merge</code>的升级版，不仅合并<code>map</code>，还能以第一个参数（函数）对<code>key</code>相同的<code>value</code>做处理。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">merge-with</span> + {<span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span>} {<span class="symbol">:a</span> <span class="number">2</span> <span class="symbol">:b</span> <span class="number">98</span> <span class="symbol">:c</span> <span class="number">0</span>})  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{:c 0, :a 3, :b 100}</span></pre></td></tr></tbody></table></figure><h4 id="操作SortedMap的函数："><a href="#操作SortedMap的函数：" class="headerlink" title="操作SortedMap的函数："></a>操作<code>SortedMap</code>的函数：</h4><p><strong>1、<code>rseq</code>：</strong><br>对有序映射的逆转函数，如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">rseq</span></span> (<span class="name"><span class="builtin-name">sorted-map</span></span> <span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:c</span> <span class="number">2</span> <span class="symbol">:b</span> <span class="number">4</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">([:c 2] [:b 4] [:a 1])</span></pre></td></tr></tbody></table></figure><p><strong>2、<code>subseq</code>：</strong><br>对有序映射执行比较（支持<code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code>），比较结果为<code>true</code>，添加到列表中，并返回</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">subseq</span> (<span class="name"><span class="builtin-name">sorted-map</span></span> <span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:c</span> <span class="number">2</span> <span class="symbol">:b</span> <span class="number">4</span>) &lt; <span class="symbol">:b</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">([:a 1])  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">subseq</span> (<span class="name"><span class="builtin-name">sorted-map</span></span> <span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:c</span> <span class="number">2</span> <span class="symbol">:b</span> <span class="number">4</span>) &gt;= <span class="symbol">:b</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">([:b 4] [:c 2])</span></pre></td></tr></tbody></table></figure><p><strong>3、<code>rsubseq</code>：</strong><br>对有序映射执行比较（支持<code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code>），比较结果为<code>true</code>，添加到列表中，并对列表结果逆转后返回，如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">rsubseq</span> (<span class="name"><span class="builtin-name">sorted-map</span></span> <span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:c</span> <span class="number">2</span> <span class="symbol">:b</span> <span class="number">4</span>) &gt;= <span class="symbol">:b</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">([:c 2] [:b 4])</span></pre></td></tr></tbody></table></figure><h3 id="二、map-各种排序"><a href="#二、map-各种排序" class="headerlink" title="二、map 各种排序"></a>二、<code>map</code> 各种排序</h3><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">sorted-map-by</span></span> &gt; <span class="number">1</span> <span class="string">"a"</span>, <span class="number">2</span> <span class="string">"b"</span>, <span class="number">3</span> <span class="string">"c"</span>))     <span class="comment">;; {3 c, 2 b, 1 a}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 相等 value 取一个</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [results {<span class="symbol">:A</span> <span class="number">1</span> <span class="symbol">:B</span> <span class="number">2</span> <span class="symbol">:C</span> <span class="number">2</span> <span class="symbol">:D</span> <span class="number">5</span> <span class="symbol">:E</span> <span class="number">1</span> <span class="symbol">:F</span> <span class="number">1</span>}]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">println</span> (<span class="name"><span class="builtin-name">into</span></span> (<span class="name"><span class="builtin-name">sorted-map-by</span></span> (<span class="name"><span class="builtin-name">fn</span></span> [key1 key2]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">                                  (<span class="name"><span class="builtin-name">compare</span></span> (<span class="name"><span class="builtin-name">get</span></span> results key2)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                                           (<span class="name"><span class="builtin-name">get</span></span> results key1))))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                 results)))              <span class="comment">;;    {:D 5, :C 2, :A 1}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 全不等 value </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [results {<span class="symbol">:A</span> <span class="number">1</span> <span class="symbol">:B</span> <span class="number">2</span> <span class="symbol">:F</span> <span class="number">4</span> <span class="symbol">:E</span> <span class="number">3</span> <span class="symbol">:D</span> <span class="number">6</span> <span class="symbol">:C</span> <span class="number">5</span>}]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">println</span> (<span class="name"><span class="builtin-name">into</span></span> (<span class="name"><span class="builtin-name">sorted-map-by</span></span> (<span class="name"><span class="builtin-name">fn</span></span> [key1 key2]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                                  (<span class="name"><span class="builtin-name">compare</span></span> (<span class="name"><span class="builtin-name">get</span></span> results key2)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                                           (<span class="name"><span class="builtin-name">get</span></span> results key1))))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                 results)))              <span class="comment">;;    {:D 6, :C 5, :F 4, :E 3, :B 2, :A 1}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; value 升序</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [results {<span class="symbol">:A</span> <span class="number">1</span> <span class="symbol">:B</span> <span class="number">2</span> <span class="symbol">:F</span> <span class="number">4</span> <span class="symbol">:E</span> <span class="number">3</span> <span class="symbol">:D</span> <span class="number">6</span> <span class="symbol">:C</span> <span class="number">5</span>}]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">println</span> (<span class="name"><span class="builtin-name">into</span></span> (<span class="name"><span class="builtin-name">sorted-map-by</span></span> (<span class="name"><span class="builtin-name">fn</span></span> [key1 key2]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                                  (<span class="name"><span class="builtin-name">compare</span></span> [(<span class="name"><span class="builtin-name">get</span></span> results key1) key1]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                                           [(<span class="name"><span class="builtin-name">get</span></span> results key2) key2])))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                 results)))    <span class="comment">;;   {:A 1, :B 2, :E 3, :F 4, :C 5, :D 6}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; value 降序</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [results {<span class="symbol">:A</span> <span class="number">1</span> <span class="symbol">:B</span> <span class="number">2</span> <span class="symbol">:F</span> <span class="number">4</span> <span class="symbol">:E</span> <span class="number">3</span> <span class="symbol">:D</span> <span class="number">6</span> <span class="symbol">:C</span> <span class="number">5</span>}]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">println</span> (<span class="name"><span class="builtin-name">into</span></span> (<span class="name"><span class="builtin-name">sorted-map-by</span></span> (<span class="name"><span class="builtin-name">fn</span></span> [key1 key2]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">                                  (<span class="name"><span class="builtin-name">compare</span></span> [(<span class="name"><span class="builtin-name">get</span></span> results key2) key2]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">                                           [(<span class="name"><span class="builtin-name">get</span></span> results key1) key1])))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">                 results)))    <span class="comment">;;   {:D 6, :C 5, :F 4, :E 3, :B 2, :A 1}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; value 升序</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [results {<span class="symbol">:A</span> <span class="number">1</span> <span class="symbol">:B</span> <span class="number">2</span> <span class="symbol">:F</span> <span class="number">4</span> <span class="symbol">:E</span> <span class="number">3</span> <span class="symbol">:D</span> <span class="number">6</span> <span class="symbol">:C</span> <span class="number">5</span>}]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">println</span> (<span class="name"><span class="builtin-name">into</span></span> (<span class="name"><span class="builtin-name">sorted-map-by</span></span> (<span class="name"><span class="builtin-name">fn</span></span> [key1 key2]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">                                  (<span class="name"><span class="builtin-name">compare</span></span> [(<span class="name"><span class="builtin-name">get</span></span> results <span class="symbol">:key1</span>) key1]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">                                           [(<span class="name"><span class="builtin-name">get</span></span> results <span class="symbol">:key2</span>) key2])))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">                 results)))    <span class="comment">;;   {:A 1, :B 2, :C 5, :D 6, :E 3, :F 4}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; value 降序</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [results {<span class="symbol">:A</span> <span class="number">1</span> <span class="symbol">:B</span> <span class="number">2</span> <span class="symbol">:F</span> <span class="number">4</span> <span class="symbol">:E</span> <span class="number">3</span> <span class="symbol">:D</span> <span class="number">6</span> <span class="symbol">:C</span> <span class="number">5</span>}]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">println</span> (<span class="name"><span class="builtin-name">into</span></span> (<span class="name"><span class="builtin-name">sorted-map-by</span></span> (<span class="name"><span class="builtin-name">fn</span></span> [key1 key2]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">                                  (<span class="name"><span class="builtin-name">compare</span></span> [(<span class="name"><span class="builtin-name">get</span></span> results <span class="symbol">:key2</span>) key2]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">                                           [(<span class="name"><span class="builtin-name">get</span></span> results <span class="symbol">:key1</span>) key1])))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">                 results)))    <span class="comment">;;   {:F 4, :E 3, :D 6, :C 5, :B 2, :A 1}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 默认升序排列</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">into</span></span> (<span class="name"><span class="builtin-name">sorted-map</span></span>) {:<span class="number">2013</span><span class="number">-12</span><span class="number">-23</span> <span class="number">0</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-22</span> <span class="number">0</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-21</span> <span class="number">0</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-20</span> <span class="number">3600</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-24</span> <span class="number">0</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-18</span> <span class="number">0</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-19</span> <span class="number">3600</span>}))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; {:2013-12-18 0, :2013-12-19 3600, :2013-12-20 3600, :2013-12-21 0, :2013-12-22 0, :2013-12-23 0, :2013-12-24 0}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 取排序后最末一个</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">last</span></span> (<span class="name"><span class="builtin-name">into</span></span> (<span class="name"><span class="builtin-name">sorted-map</span></span>) {:<span class="number">2013</span><span class="number">-12</span><span class="number">-23</span> <span class="number">0</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-22</span> <span class="number">0</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-21</span> <span class="number">0</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-20</span> <span class="number">3600</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-24</span> <span class="number">0</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-18</span> <span class="number">0</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-19</span> <span class="number">3600</span>})))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; [:2013-12-24 0]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 自定义key降序排序</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [results {:<span class="number">2013</span><span class="number">-12</span><span class="number">-23</span> <span class="number">0</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-22</span> <span class="number">0</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-21</span> <span class="number">0</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-20</span> <span class="number">3600</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-24</span> <span class="number">0</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-18</span> <span class="number">0</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-19</span> <span class="number">3600</span>}]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">println</span> (<span class="name"><span class="builtin-name">into</span></span> (<span class="name"><span class="builtin-name">sorted-map-by</span></span> (<span class="name"><span class="builtin-name">fn</span></span> [key1 key2]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">                                  (<span class="name"><span class="builtin-name">compare</span></span> [(<span class="name"><span class="builtin-name">get</span></span> results <span class="symbol">:key2</span>) key2]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">                                           [(<span class="name"><span class="builtin-name">get</span></span> results <span class="symbol">:key1</span>) key1])))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">                 results)))    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; {:2013-12-24 0, :2013-12-23 0, :2013-12-22 0, :2013-12-21 0, :2013-12-20 3600, :2013-12-19 3600, :2013-12-18 0}</span></span></pre></td></tr></tbody></table></figure><p><strong>先排序后取值*</strong></p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 先对日期排序，然后取前num天</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> take-sort-data [data num]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    (<span class="name"><span class="builtin-name">let</span></span> [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">          result-sorted  (<span class="name"><span class="builtin-name">into</span></span> (<span class="name"><span class="builtin-name">sorted-map-by</span></span> (<span class="name"><span class="builtin-name">fn</span></span> [key1 key2]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">                                                (<span class="name"><span class="builtin-name">compare</span></span> [(<span class="name"><span class="builtin-name">get</span></span> data <span class="symbol">:key2</span>) key2]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">                                                         [(<span class="name"><span class="builtin-name">get</span></span> data <span class="symbol">:key1</span>) key1]))) data)    <span class="comment">;; 对日期排序</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">          result (<span class="name"><span class="builtin-name">select-keys</span></span> result-sorted (<span class="name"><span class="builtin-name">take</span></span> num (<span class="name"><span class="builtin-name">keys</span></span> result-sorted)))]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      (<span class="name">println</span> <span class="string">"data = "</span> data)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      (<span class="name">println</span> <span class="string">"result-sorted = "</span> result-sorted)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      (<span class="name">println</span> <span class="string">"result = "</span> result)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      (<span class="name">println</span> <span class="string">"json/write-str result = "</span> (<span class="name">json/write-str</span> result)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [data {:<span class="number">2013</span><span class="number">-12</span><span class="number">-23</span> <span class="number">0</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-22</span> <span class="number">0</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-21</span> <span class="number">0</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-20</span> <span class="number">3600</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-24</span> <span class="number">0</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-18</span> <span class="number">0</span>, :<span class="number">2013</span><span class="number">-12</span><span class="number">-19</span> <span class="number">3600</span>}]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">take-sort-data</span>  data <span class="number">6</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">take-sort-data</span>  data <span class="number">4</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; (take-sort-data  data 6) 's result</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;data =  {:2013-12-24 0, :2013-12-23 0, :2013-12-20 3600, :2013-12-21 0, :2013-12-22 0, :2013-12-18 0, :2013-12-19 3600}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;result-sorted =  {:2013-12-24 0, :2013-12-23 0, :2013-12-22 0, :2013-12-21 0, :2013-12-20 3600, :2013-12-19 3600, :2013-12-18 0}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;result =  {:2013-12-19 3600, :2013-12-20 3600, :2013-12-21 0, :2013-12-22 0, :2013-12-23 0, :2013-12-24 0}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;json/write-str result =  {"2013-12-19":3600,"2013-12-20":3600,"2013-12-21":0,"2013-12-22":0,"2013-12-23":0,"2013-12-24":0}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; (take-sort-data  data 4) 's result</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;data =  {:2013-12-24 0, :2013-12-23 0, :2013-12-20 3600, :2013-12-21 0, :2013-12-22 0, :2013-12-18 0, :2013-12-19 3600}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;result-sorted =  {:2013-12-24 0, :2013-12-23 0, :2013-12-22 0, :2013-12-21 0, :2013-12-20 3600, :2013-12-19 3600, :2013-12-18 0}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;result =  {:2013-12-21 0, :2013-12-22 0, :2013-12-23 0, :2013-12-24 0}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;json/write-str result =  {"2013-12-21":0,"2013-12-22":0,"2013-12-23":0,"2013-12-24":0}</span></span></pre></td></tr></tbody></table></figure><p>三、参考资料<br><a href="http://dead-knight.iteye.com/blog/1830683" target="_blank" rel="external nofollow noreferrer noopener">clojure-基本语法-集合（二）</a><br><a href="http://blog.csdn.net/sunboy_2050/article/details/17591499" target="_blank" rel="external nofollow noreferrer noopener">Clojure 学习入门（12）—— map/pmap</a><br><a href="http://clojuredocs.org/clojure_core/clojure.core/compare" target="_blank" rel="external nofollow noreferrer noopener">compare</a><br><a href="http://clojuredocs.org/clojure_core/clojure.core/sorted-map" target="_blank" rel="external nofollow noreferrer noopener">sorted-map</a><br><a href="http://clojuredocs.org/clojure_core/clojure.core/sorted-map-by" target="_blank" rel="external nofollow noreferrer noopener">sorted-map-by</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、映射Map&quot;&gt;&lt;a href=&quot;#一、映射Map&quot; class=&quot;headerlink&quot; title=&quot;一、映射Map&quot;&gt;&lt;/a&gt;一、映射Map&lt;/h3&gt;&lt;p&gt;Map存储一个键-值对的集合。键和值都可以是任何数据类型的对象，无论是基本数据类型还是其它映射。然而，使用关键字来作为映射的键非常合适，因此它们经常在应用映射的场合被使用。clojure的Map有三种实现方式：数组映射、哈希映射和有序映射。它们分别使用数组、哈希表和二叉树来作为底层实现。数组映射适用于较小的映射，而对哈希映射和有序映射的比较则要基于特定应用场合的情况。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="集合" scheme="http://notes.seirhsiao.com/tags/%E9%9B%86%E5%90%88/"/>
    
      <category term="map" scheme="http://notes.seirhsiao.com/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>Clojure 学习 —— 集合Set</title>
    <link href="http://notes.seirhsiao.com/posts/e2f1d18d/"/>
    <id>http://notes.seirhsiao.com/posts/e2f1d18d/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:44:27.019Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、集合Set"><a href="#一、集合Set" class="headerlink" title="一、集合Set"></a>一、集合Set</h3><p><code>Set</code>是一个包含不重复元素的集合。当我们要求集合里面的元素不可以重复，并且我们不要求集合里面的元素保持它们添加时候的顺序，那么使用<code>set</code>比较合适。<code>Set</code>形式以“<code>#{1,2,3}</code>”符号表示。<code>Set</code>可以使用哈希表或二叉树来实现，使用 <code>hash-set</code> 或者 <code>sorted-set</code> 函数。</p><a id="more"></a><p>创建集合<code>Set</code>的方式：<br><strong>1、简单定义：</strong></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> languages #{<span class="symbol">:java</span> <span class="symbol">:list</span> <span class="symbol">:c++</span>})  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#'user/languages  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> languages  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">#{:c++ :list :java}</span></pre></td></tr></tbody></table></figure><p><strong>2、<code>set</code>：</strong><br>使用<code>set</code>函数转换其他集合类型为<code>set</code>类型，并且去除重复元素，如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">set</span> '(<span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">5</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">#{1 2 3 4 5}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">set</span> [<span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">5</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">#{1 2 3 4 5}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">set</span> <span class="string">"abcd"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">#{\a \b \c \d}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">set</span> <span class="string">"abccdd"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">#{\a \b \c \d}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">set</span> {<span class="symbol">:one</span> <span class="number">1</span> <span class="symbol">:two</span> <span class="number">2</span> <span class="symbol">:three</span> <span class="number">3</span>})  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">#{[:two 2] [:three 3] [:one 1]}</span></pre></td></tr></tbody></table></figure><p><strong>3、<code>hash-set</code>：</strong><br>使用<code>hash-set</code>创建基于哈希表的集合，如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">hash-set</span></span> <span class="symbol">:a</span> <span class="symbol">:b</span> <span class="symbol">:c</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#{:a :c :b}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">hash-set</span></span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span>)<span class="comment">;通过hash-set创建set时，需要检查给定的key是否重复  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">IllegalArgumentException Duplicate key: 2  clojure.lang.PersistentHashSet.create  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">WithCheck (PersistentHashSet.java:80)</span></pre></td></tr></tbody></table></figure><p><strong>4、<code>sorted-set</code>：</strong><br>使用<code>sorted-set</code>创建基于二叉树的集合，如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">sorted-set</span></span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#{1 2 3}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">sorted-set</span></span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span>)<span class="comment">;通过sorted-set创建set时，不检查key是否重复  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">#{1 2 3}</span></pre></td></tr></tbody></table></figure><p>为何这里不检查<code>key</code>重复，而<code>hash-set</code>检查出现重复时抛出异常？<br>原因如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">;使用source查看函数的源码  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">source</span> hash-set)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(defn hash-set  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  "Returns a new hash set with supplied keys."  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  {:added "1.0"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   :static true}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  ([] #{})  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  ([&amp; keys]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">   (clojure.lang.PersistentHashSet/[color=red]createWithCheck[/color] keys)))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">nil  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">source</span> sorted-set)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">(defn sorted-set  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  "Returns a new sorted set with supplied keys."  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  {:added "1.0"  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">   :static true}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  ([&amp; keys]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">   (clojure.lang.PersistentTreeSet/[color=red]create[/color] keys)))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">nil</span></pre></td></tr></tbody></table></figure><p><code>hash-set</code>函数调用<code>clojure.lang.PersistentHashSet</code>类的<code>createWithCheck</code>方法（一般<code>clojure</code>里集合创建时，方法名称为<code>createWithCheck</code>的就表示创建时需要检查参数的合法性），而<code>sorted-set</code>函数调用<code>clojure.lang.PersistentTreeSet</code>的<code>create</code>方法（一般方法名称为<code>create</code>表示对参数不做检查）</p><p><strong>5、<code>sorted-set-by</code>:</strong><br><code>sorted-set-by</code>方法根据比较函数，确定<code>set</code>的排序规则，如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">sorted-set-by</span></span> &gt; <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">2</span> <span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#{8 5 3 2 1}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">sorted-set-by</span></span> &lt;  <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">2</span> <span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">#{1 2 3 5 8}</span></pre></td></tr></tbody></table></figure><h4 id="操作Set的常用函数："><a href="#操作Set的常用函数：" class="headerlink" title="操作Set的常用函数："></a>操作<code>Set</code>的常用函数：</h4><p><strong>1、<code>conj</code>：</strong><br>根据给定的元素增加到第一个参数指向的<code>set</code>集合中，如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">conj</span></span> #{<span class="number">1</span> <span class="number">3</span>} <span class="number">1</span> <span class="number">5</span> <span class="number">7</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#{1 3 5 7}</span></pre></td></tr></tbody></table></figure><p><strong>2、<code>disj</code>：</strong><br>根据给定的元素，从第一个参数指向的<code>set</code>集合中删除匹配的元素，如下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">disj</span></span> #{<span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span>} <span class="number">3</span> <span class="number">7</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#{1 5}</span></pre></td></tr></tbody></table></figure><p><strong>3、其它方式：</strong></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">clojure.set/union</span> #{<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>} #{<span class="number">1</span> <span class="number">2</span> <span class="number">4</span>})<span class="comment">;合并子集  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#{1 2 3 4}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">clojure.set/select</span> even? #{<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>})<span class="comment">;根据条件选择  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">#{2 4}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">clojure.set/difference</span> #{<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>} #{<span class="number">1</span> <span class="number">2</span> <span class="number">4</span>})<span class="comment">;取差集  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">#{3}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">clojure.set/intersection</span> #{<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>} #{<span class="number">1</span> <span class="number">2</span> <span class="number">4</span>})<span class="comment">;取交集  </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">#{1 2}</span></pre></td></tr></tbody></table></figure><p>二、参考资料<br><a href="http://dead-knight.iteye.com/blog/1830683" target="_blank" rel="external nofollow noreferrer noopener">clojure-基本语法-集合（二）</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、集合Set&quot;&gt;&lt;a href=&quot;#一、集合Set&quot; class=&quot;headerlink&quot; title=&quot;一、集合Set&quot;&gt;&lt;/a&gt;一、集合Set&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Set&lt;/code&gt;是一个包含不重复元素的集合。当我们要求集合里面的元素不可以重复，并且我们不要求集合里面的元素保持它们添加时候的顺序，那么使用&lt;code&gt;set&lt;/code&gt;比较合适。&lt;code&gt;Set&lt;/code&gt;形式以“&lt;code&gt;#{1,2,3}&lt;/code&gt;”符号表示。&lt;code&gt;Set&lt;/code&gt;可以使用哈希表或二叉树来实现，使用 &lt;code&gt;hash-set&lt;/code&gt; 或者 &lt;code&gt;sorted-set&lt;/code&gt; 函数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="集合" scheme="http://notes.seirhsiao.com/tags/%E9%9B%86%E5%90%88/"/>
    
      <category term="set" scheme="http://notes.seirhsiao.com/tags/set/"/>
    
  </entry>
  
  <entry>
    <title>Clojure 学习 —— binding</title>
    <link href="http://notes.seirhsiao.com/posts/abb22136/"/>
    <id>http://notes.seirhsiao.com/posts/abb22136/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:44:25.823Z</updated>
    
    <content type="html"><![CDATA[<p>clojure Binding简单介绍及示常见示例</p><a id="more"></a><p><code>Clojure</code>里面是不支持变量的。<code>Binding</code>跟变量有点像，但是在被赋值之前是不允许改的，包括：全局<code>binding</code>, 线程本地(thread local)<code>binding</code>， 以及函数内的本地<code>binding</code>， 以及一个表达式内部的<code>binding</code>。</p><p><code>def</code> 这个<code>special form</code> 定义一个全局的 <code>binding</code>，并且你还可以给它一个”<code>root value</code>” ，这个<code>root value</code>在所有的线程里面都是可见的，除非你给它赋了一个线程本地的值.<code>def</code>。也可以用来改变一个已经存在的<code>binding</code>的<code>root value</code> —— 但是这是不被鼓励的，因为这会牺牲不可变数据所带来的好处。</p><p>函数的参数是只在这个函数内可见的本地<code>binding</code>。</p><p><code>let</code> 这个<code>special form</code> 创建局限于一个 当前<code>form</code>的<code>bindings</code>. 它的第一个参数是一个<code>vector</code>, 里面包含名字-表达式的对子。表达式的值会被解析然后赋给左边的名字。这些<code>binding</code>可以在这个<code>vector</code>后面的表达式里面使用。这些<code>binding</code>还可以被多次赋值以改变它们的值，<code>let</code>命令剩下的参数是一些利用这个<code>binding</code>来进行计算的一些表达式。</p><p><strong>注意：</strong> 如果这些表达式里面有调用别的函数，那么这个函数是无法利用<code>let</code>创建的这个<code>binding</code>的。</p><p>宏 <code>binding</code> 跟<code>let</code> 类似, 但是它创建的本地<code>binding</code>会暂时地覆盖已经存在的全局<code>binding</code>. 这个<code>binding</code>可以在创建这个<code>binding</code>的<code>form</code>以及这个<code>form</code>里面调用的函数里面都能看到。但是一旦跳出了这个<code>binding</code>那么被覆盖的全局<code>binding</code>的值会回复到之前的状态。</p><p>从 <code>Clojure 1.3</code>开始, <code>binding</code>只能用在 动态变量(<code>dynamic var</code>)上面了. 下面的例子演示了怎么定一个<code>dynamic var</code>。另一个区别是<code>let</code> 是串行的赋值的, 所以后面的<code>binding</code>可以用前面<code>binding</code>的值, 而<code>binding</code> 是不行的.</p><p>要被用来定义成新的、本地线程的、用<code>binding</code>来定义的<code>binding</code>有它们自己的命名方式：她们以星号开始，以星号结束。在这篇文章里面你会看到：<code>*command-line-args*</code>,<code>*agent*</code>,<code>*err*</code>,<code>*flush-on-newline*</code>,<code>*in*</code>,<code>*load-tests*</code>,<code>*ns*</code>,<code>*out*</code>,<code>*print-length*</code>,<code>*print-level*</code> and <code>*stack-trace-depth*</code>.要使用这些<code>binding</code>的函数会被这些<code>binding</code>的值影响的。比如给<code>*out*</code>一个新的<code>binding</code>会改变<code>println</code>函数的输出终端。</p><p>下面的例子介绍了<code>def</code>,<code>let</code> 和<code>binding</code>的用法：</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; clojure connect to mysql  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; ithomer.net  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 2013.12.10  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">ns</span></span> myClojure.syntax.binding)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> ^<span class="symbol">:dynamic</span> v <span class="number">1</span>)         <span class="comment">; v is a global binding  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> f1 []  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">println</span> <span class="string">"f1: v ="</span> v))    <span class="comment">; global binding of 1  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> f2 []  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">println</span> <span class="string">"f2: before let v ="</span> v)       <span class="comment">; global binding  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">let</span></span> [v <span class="number">2</span>]                             <span class="comment">; creates local binding v that shadows global one  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">println</span> <span class="string">"f2: in let, v ="</span> v)        <span class="comment">; local binding of 2  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">f1</span>))                                <span class="comment">; of 1  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">println</span> <span class="string">"f2: after let v ="</span> v))       <span class="comment">; global binding of 1  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> f3 []  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">println</span> <span class="string">"f3: before binding v ="</span> v)   <span class="comment">; global binding of 1  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">binding</span> [v <span class="number">3</span>]                         <span class="comment">; same global binding with new, temporary value  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">println</span> <span class="string">"f3: in binding, v ="</span> v)    <span class="comment">; global binding of 3  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">f1</span>))                                <span class="comment">; of 3  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">println</span> <span class="string">"f3: after binding v ="</span> v))   <span class="comment">; global binding of 1  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> f4 []  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"> (<span class="name"><span class="builtin-name">def</span></span> v <span class="number">4</span>)                               <span class="comment">; changes the value of the global binding  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"> (<span class="name">println</span> <span class="string">"f4: after binding v ="</span> v)     <span class="comment">; of 4  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"> (<span class="name">f1</span>))                                   <span class="comment">; of 4  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">(<span class="name">f2</span>)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">(<span class="name">f3</span>)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">(<span class="name">f4</span>)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> <span class="string">"after calling f4, v ="</span> v)      <span class="comment">; of 4</span></span></pre></td></tr></tbody></table></figure><p><strong>运行结果：</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">f2:</span> <span class="string">before</span> <span class="string">let</span> <span class="string">v</span> <span class="string">=</span> <span class="number">1</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="attr">f2:</span> <span class="string">in</span> <span class="string">let,</span> <span class="string">v</span> <span class="string">=</span> <span class="number">2</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="attr">f1:</span> <span class="string">v</span> <span class="string">=</span> <span class="number">1</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="attr">f2:</span> <span class="string">after</span> <span class="string">let</span> <span class="string">v</span> <span class="string">=</span> <span class="number">1</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="attr">f3:</span> <span class="string">before</span> <span class="string">binding</span> <span class="string">v</span> <span class="string">=</span> <span class="number">1</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="attr">f3:</span> <span class="string">in</span> <span class="string">binding,</span> <span class="string">v</span> <span class="string">=</span> <span class="number">3</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="attr">f1:</span> <span class="string">v</span> <span class="string">=</span> <span class="number">3</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="attr">f3:</span> <span class="string">after</span> <span class="string">binding</span> <span class="string">v</span> <span class="string">=</span> <span class="number">1</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="attr">f4:</span> <span class="string">after</span> <span class="string">binding</span> <span class="string">v</span> <span class="string">=</span> <span class="number">4</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="attr">f1:</span> <span class="string">v</span> <span class="string">=</span> <span class="number">4</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="string">after</span> <span class="string">calling</span> <span class="string">f4,</span> <span class="string">v</span> <span class="string">=</span> <span class="number">4</span></span></pre></td></tr></tbody></table></figure><p><strong>参考推荐：</strong></p><p><a href="http://xumingming.sinaapp.com/302/clojure-functional-programming-for-the-jvm-clojure-tutorial/" target="_blank" rel="external nofollow noreferrer noopener">Clojure入门教程</a><br><a href="http://www.cnblogs.com/fxjwind/archive/2013/01/22/2871860.html" target="_blank" rel="external nofollow noreferrer noopener">Clojure 基本语法</a><br><a href="http://blog.csdn.net/sunboy_2050/article/details/17244587" target="_blank" rel="external nofollow noreferrer noopener">Clojure 学习入门（13）—— binding</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      clojure Binding简单介绍及示常见示例
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="binding" scheme="http://notes.seirhsiao.com/tags/binding/"/>
    
  </entry>
  
  <entry>
    <title>Clojure 学习 —— 异常处理</title>
    <link href="http://notes.seirhsiao.com/posts/22348167/"/>
    <id>http://notes.seirhsiao.com/posts/22348167/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:44:24.784Z</updated>
    
    <content type="html"><![CDATA[<p>clojure 异常处理简单介绍及示常见函数(宏)示例</p><a id="more"></a><h3 id="一、异常处理"><a href="#一、异常处理" class="headerlink" title="一、异常处理"></a>一、异常处理</h3><p>Clojure代码里面抛出来的异常都是运行时异常。当然从Clojure代码里面调用的java代码还是可能抛出那种需要检查的异常的。</p><p><code>try - catch - finally</code> 以及<code>throw</code> 提供了和<code>java</code>里面类似的功能。</p><p><strong><code>try</code>、<code>catch</code>、<code>throw</code>、<code>finally</code>：</strong> </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">try</span></span> (<span class="name"><span class="builtin-name">throw</span></span> (<span class="name">Exception.</span> <span class="string">"error"</span>)) (<span class="name">finally</span> (<span class="name">println</span> <span class="string">"final"</span>)))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">final  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Exception error  user/eval310 (NO_SOURCE_FILE:1)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">try</span></span> (/ <span class="number">3</span> <span class="number">0</span>) (<span class="name">catch</span> Exception e (<span class="name">println</span> e)))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">#&lt;ArithmeticException java.lang.ArithmeticException: Divide by zero&gt;  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">nil</span></pre></td></tr></tbody></table></figure><p><strong><code>assert</code>：</strong><br>它测试一个表达式， 如果这个表达式的值为false的话，它会抛出异常。 </p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">assert</span></span> <span class="literal">true</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">nil  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">assert</span></span> <span class="literal">false</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">AssertionError Assert failed: false  user/eval317 (NO_SOURCE_FILE:1)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">assert</span></span> <span class="literal">nil</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">AssertionError Assert failed: nil  user/eval319 (NO_SOURCE_FILE:1)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">assert</span></span> <span class="number">0</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">nil  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">assert</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">nil  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">assert</span></span> <span class="string">"foo"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">nil</span></pre></td></tr></tbody></table></figure><p><strong><code>clojure</code> 完整示例：</strong></p><pre><code class="clojure">(<span class="name"><span class="builtin-name">ns</span></span> helloclojure.myexception)  (<span class="name"><span class="builtin-name">defn</span></span> exception_test1 []    (<span class="name"><span class="builtin-name">try</span></span> (<span class="name"><span class="builtin-name">throw</span></span> (<span class="name">Exception.</span> <span class="string">"--error--"</span>))      (<span class="name">finally</span> (<span class="name">println</span> <span class="string">"final"</span>))      ))  (<span class="name"><span class="builtin-name">defn</span></span> exception_test2 []    (<span class="name"><span class="builtin-name">try</span></span> (/ <span class="number">3</span> <span class="number">0</span>)       (<span class="name">catch</span> Exception e (<span class="name">println</span> <span class="string">"error: "</span> e))      ))  (<span class="name"><span class="builtin-name">defn</span></span> exception_test3 [cls]    (<span class="name"><span class="builtin-name">try</span></span> (<span class="name">Class/forName</span> cls) <span class="literal">true</span>      (<span class="name">catch</span> ClassNotFoundException e <span class="literal">false</span>))    )  <span class="comment">;(exception_test1)  </span>(<span class="name">exception_test2</span>)   <span class="comment">; error:  #&lt;ArithmeticException java.lang.ArithmeticException: Divide by zero&gt;  </span><span class="comment">;(exception_test3 helloclojure.myexception)  </span>(<span class="name"><span class="builtin-name">assert</span></span> <span class="literal">true</span>)          <span class="comment">;(assert false)  </span><span class="comment">;(try (assert false)  </span><span class="comment">;  (catch Exception e (println "error" e))  </span><span class="comment">;  (finally (println 'finally)))  </span><span class="comment">;(assert nil)  </span>(<span class="name"><span class="builtin-name">assert</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>])  (<span class="name"><span class="builtin-name">assert</span></span> <span class="string">"foo"</span>)  (<span class="name"><span class="builtin-name">assert</span></span> <span class="number">0</span>)  (<span class="name">print</span> 'end) </code></pre><p>二、参考资料<br><a href="http://blog.csdn.net/sunboy_2050/article/details/17226585" target="_blank" rel="external nofollow noreferrer noopener">Clojure 学习入门（17）—— 异常处理</a><br><a href="http://dead-knight.iteye.com/blog/1829618" target="_blank" rel="external nofollow noreferrer noopener">clojure-基本语法-流程控制（二）</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      clojure 异常处理简单介绍及示常见函数(宏)示例
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Clojure简介与应用</title>
    <link href="http://notes.seirhsiao.com/posts/fa0e0cf8/"/>
    <id>http://notes.seirhsiao.com/posts/fa0e0cf8/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:44:26.419Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-OOP的本质？"><a href="#1-OOP的本质？" class="headerlink" title="1. OOP的本质？"></a>1. OOP的本质？</h3><p>面向对象编程（OOP）中最终要的是什么？抽象、封装、集成、多态？实现模式？设计模式？还有更重要的么？</p><p>下面引用两段业内名言：</p><blockquote><p>“如果我们现在回头看一下面向对象这个思想是从哪来的，如果以基于消息传递机制的Smalltalk-80的特性来衡量现在的状态继承和面向对象的使用方式，我们不禁要问，我们是不是已经走错路了？” ——2010伦敦QCon大会采访</p></blockquote><blockquote><p>只关注状态，在类和基于映像的语言里缺乏良好的并发模型和消息机制。 ——Dave Thomas博士</p></blockquote><a id="more"></a><p>到底什么被忽视了？从这两段话中我们可以看出：是OOP的并发模型和消息机制被现代OO编程语言忽视了，尤其是Java。</p><p>在当代OO语言中，可变状态让并发编程变得非常复杂，只能依靠悲观锁来进行并发的控制。</p><p>至于消息传递机制，大都OO语言本身并没有提供有效的机制，而是运用设计模式来达到目的的，但这又会使编程的过程复杂化，也会在一定程度上影响代码的可读性。</p><p>至今，业界已经承认OOP并不是万能的。而OOP的真正优势在于对现实世界的建模，而不是数据处理。我们应该辩证的看待不同范式的编程语言，死磕一个必然会使思想禁锢，甚至编程灵感尽失。</p><h2 id="2-FP是什么？"><a href="#2-FP是什么？" class="headerlink" title="2. FP是什么？"></a>2. FP是什么？</h2><p>现在我们来看看在函数式编程（FP）中是怎样解决这些问题的。</p><h3 id="2-1-函数式编程概览"><a href="#2-1-函数式编程概览" class="headerlink" title="2.1 函数式编程概览"></a>2.1 函数式编程概览</h3><ul><li>一种编程范式</li><li>程序运算即为数学上的函数计算</li><li>以λ演算（lambda calculus）为基础</li><li>函数为first-class，可以很方便的运用闭包创造出高阶函数</li><li>避免状态、变量和副作用</li><li>支持懒惰计算（lazy evaluation）和引用透明性</li></ul><h2 id="2-2-函数式编程详解"><a href="#2-2-函数式编程详解" class="headerlink" title="2.2 函数式编程详解"></a>2.2 函数式编程详解</h2><h3 id="2-2-1-不可变数据"><a href="#2-2-1-不可变数据" class="headerlink" title="2.2.1 不可变数据"></a>2.2.1 不可变数据</h3><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; Immutable data</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> a '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> b (<span class="name"><span class="builtin-name">cons</span></span> <span class="number">0</span> a))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; b -&gt; '(1 2 3)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> <span class="string">"The 'a' is "</span> a)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; b -&gt; 0 append a</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> <span class="string">"The 'b' is "</span> b)</span></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><code>The 'a' is (1 2 3)</code></p><p><code>The 'b' is (0 1 2 3)</code></p><p>引用a和b在定义时被赋值，并且在之后的任何时刻都不可能被改变。并且，在底层，a和b的值会重用一部分数据存储的。如下图：</p><p>从图中可以看出，a和b引用的其实是同一个序列，只是起点不同而已。</p><p>Clojure使用的这种技术叫做PDS（Persistent Data Structures）。Clojure的数据结构是不可变的，也是持久的。持久数据结构的好处包括：</p><p>1) 可以大幅提高程序效率。</p><p>2) 为并发编程提供有力支持。</p><p>3) 更容易进行数据版本控制。</p><p>另外，与不可变数据相关的另一个函数式编程概念是——引用透明。引用透明意味着相同的输入一定会返回相同的输出，即：一个函数的计算过程不会因任何外部环境的改变而发生变化。相信我们真正理解不可变数据之后，引用透明这个概念也会非常好理解的。</p><h3 id="2-2-2-一级类型——函数"><a href="#2-2-2-一级类型——函数" class="headerlink" title="2.2.2 一级类型——函数"></a>2.2.2 一级类型——函数</h3><p>“把函数作为语言的一级类型”的意思是说，语言本身支持把一个函数作为另一个函数的输入和输出。</p><p>首先，我们来看一个把函数作为另一个函数的输入的例子：</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; the function as a 'first-class' 1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> my-func1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"A demo of first-class"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  [d f]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">f</span> d))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">(<span class="name">my-func1</span> <span class="string">"It's first-class!"</span> println)</span></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><code>It's first-class!</code></p><p>上面的代码做了这些事：</p><ol><li>定义了一个名字叫“my-func1”的函数。</li><li>为这个函数写了一段内容为“A demo of first-class”的注释。</li><li>声明了这个函数的两个形参：d和f。</li><li>调用f，而d作为参数传给f。因此形参f必须代表一个需要传入一个参数的函数，这样才能被正确调用。</li><li>我们调用了函数“my-func1”，并将内容为“It’s first-class”的字符串绑定到了形参d上、将println这个函数绑定到了形参f上。</li><li>根据“my-func1”函数中的定义，它本质上执行了这段代码：<br><code>(println "It's first-class!")`` ;; 还记得“my-func1”函数体中的</code>(f d)`么？</li></ol><p>初读Clojure的代码需要注意几点：</p><ol><li>Clojure是基于JVM的Lisp方言，所以会有很多的括号（但是与Lisp相比已经简化了很多），这一点需要习惯。</li><li>读Lisp家族的代码需要从最里面的括号开始读，一直读到最外面的括号。这是一种嵌套结构。</li><li>Clojure中的一对括号（即，“(”和“)”）叫一个form，每一个from中可以有一个或多个元素。并且，form中的第一个元素应该是一个函数的标识名（Symbol），后面的元素应该是传给这个函数的参数。所有的Clojure代码都会遵守form的这种格式。</li><li>每一个form都是一个表达式，每一个表达式的返回值都是对这个表达式的求值结果。</li><li>函数体的返回值不需要显示标明，而是在函数定义中最后一个form的求值结果。</li></ol><p>现在，我们来看看怎样把函数作为另一个函数的输出：</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; the function as a 'first-class' 2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> func-a [s] (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"Func A: "</span> s))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> func-b [s] (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"Func B: "</span> s))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> my-func2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"Another demo of first-class"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  [n]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">cond</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    (<span class="name"><span class="builtin-name">&gt;</span></span> n <span class="number">0</span>) func-a</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="symbol">:else</span> func-b))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> ((<span class="name">my-func2</span> <span class="number">0</span>) <span class="string">"my-first-class"</span>))</span></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><code>Func B: my-first-class</code></p><p>上面的代码做了这些事：</p><ol><li>定义了一个名字叫“func-a”的函数,这个函数有一个形参s，执行该函数之后会获得一个返回值，返回值的内容是‘“Func A: “ s’。</li><li>定义了一个名字叫“func-b”的函数,这个函数有一个形参s，执行该函数之后会获得一个返回值，返回值的内容是‘“Func B: “ s’。</li><li>定义了一个名字叫“my-func2”的函数。这个函数有一个形参n。函数体是一个cond的函数调用（cond函数相当于Java中的switch语句）。这个函数调用表示：当n大于0时，返回函数“func-a”，否则返回“func-b”。</li><li>之前已经提到过，一个函数的返回值即是其函数体中最后一个form的求值结果。在函数“my-func2”中，这最后一个form就是那个cond调用。也就是说，函数“my-func2”会根据n的值来返回函数“func-a”或“func-b”。</li><li>在上面代码的最后一行，我们首先调用了函数“my-func2”，并传入了实参0。根据上面的代码说明我们可以知道这次函数调用的返回值——函数“func-b”。接着我们调用了这个被返回的函数，并得到了结果。</li></ol><p>上面这两段代码可以充分展现出了函数式编程的强大威力。函数可以当做代码块或算法单元传入其他函数或者被其他函数返回。这一特性极大的增强了代码的灵活性和扩展性。</p><h3 id="2-2-3-懒惰计算"><a href="#2-2-3-懒惰计算" class="headerlink" title="2.2.3 懒惰计算"></a>2.2.3 懒惰计算</h3><p>懒惰计算意味着对表达式的求值是按需进行的。当真正需要表达式的值（或值中的某部分）时，求值（或部分求值）的操作才会被执行。这种计算方式的意义在于最小化某一个时刻的计算量，从而达到最大化节省空间和时间的目的。</p><p>下面我们来看一个例子：</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; lazy and infinite sequences</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; (iterate inc 1) ;; Don't do that!!</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">take</span></span> <span class="number">10</span> (<span class="name"><span class="builtin-name">iterate</span></span> inc <span class="number">1</span>)))</span></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><code>(1 2 3 4 5 6 7 8 9 10)</code></p><p>上面的代码做了这些事：</p><ol><li>首先看一下第二行代码，这是一行注释。iterate函数会返回一个无限迭代的序列。我们调用这个函数，并传入了两个实参：inc和1。inc也是一个函数，在这里传入inc意味着返回的序列的每一个元素（整数）都是前一个元素加1的结果。第二个参数1表示返回序列的第一个元素为1。注意！iterate函数返回的序列是无限迭代的。直接调用iterate会使程序一直计算这个无穷序列的下一个元素，直到内存溢出。</li><li>最后一行代码我们将调用iterate函数的form作为第二个参数传入了take函数中。这个take函数调用的第一个实参为10。这意味着我们只想获取这个无穷序列的前10个元素。对这个调用take函数的form求值并不会造成内存溢出，因为我们只需要前10个元素。程序会很快计算完成并返回结果。这个无穷序列的其余元素并不会被计算出来，直到真正有程序需要它们的时候。</li></ol><p>上面的例子虽然很简单，但是却展示出了懒惰计算的强大威力。懒惰计算可以大大提高程序的性能，并且使我们能够非常方便的按需取用数据。</p><h3 id="2-2-4-闭包"><a href="#2-2-4-闭包" class="headerlink" title="2.2.4 闭包"></a>2.2.4 闭包</h3><p>闭包其实是建立在将函数作为一级类型的这个特性之上的。闭包使我们根据需要可以动态的生成函数。我们可以先定义一个不完整的函数，也就是说函数体中的算法是有缺失的。而后，在其他代码中将缺失的部分算法传入，生成这个函数的一个完整版本并返回。这其中用到了前文提到的将函数作为另一个函数的输入和输出的特性。</p><p>下面我们来看一个例子：</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; closure</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> double-op</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  [f]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">fn</span></span> [&amp; args]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    (<span class="name"><span class="builtin-name">*</span></span> <span class="number">2</span> (<span class="name"><span class="builtin-name">apply</span></span> f args))))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> double-add (<span class="name">double-op</span> +))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name">double-add</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))</span></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><code>12</code></p><p>上面的代码做了这些事：</p><ol><li>我们定义了一个名为“double-op”的函数。这个函数用一个形参f。这个形参f应该是一个函数，因为我们的函数体是一个用fn（fn是一个宏，可以理解为宏也是一种能够动态生成函数的方式，且功能上强大很多）定义的匿名函数。这个匿名函数可以接受一或者多个参数（形参名字args前的“&amp;”表明了这一点）。这个匿名函数会通过传入的实参（也就是f的值）而完整化，并作为函数“double-op”的返回值。</li><li>函数apply会将第一个实参（一般为一个函数）作用于其余的实参之上，也就是说调用第一个实参代表的函数，并将其余的实参作为其参数传入。使用apply的好处在于不必立刻在代码中填入传入“其余的实参”，而可以用引用名代替。这时，这些“其余的实参”可以被叫做预参数。</li><li>倒数第二行代码定义了一个名为“double-add”的引用，这个引用返回一个函数。这个返回的函数是通过向函数“double-op”传入函数“+”而完整化后得出的。换句话说，我们在这里定义了一个名为“double-add”的函数。</li><li>之后我们调用了函数“double-add”，并得到了预期的结果（把所有“其余的参数”相加并乘以2）。</li></ol><p>闭包是函数式编程中非常重要的特性，并且在一些非函数式语言中也有闭包的身影。另外，还有两个与闭包有关联的两个函数式编程概念：偏函数和柯里化。大家有兴趣的话可以去google一下。</p><h2 id="2-3-函数式编程（Clojure）的优势"><a href="#2-3-函数式编程（Clojure）的优势" class="headerlink" title="2.3 函数式编程（Clojure）的优势"></a>2.3 函数式编程（Clojure）的优势</h2><h3 id="2-3-1-处理数据？用管道的方式会更加简洁"><a href="#2-3-1-处理数据？用管道的方式会更加简洁" class="headerlink" title="2.3.1 处理数据？用管道的方式会更加简洁"></a>2.3.1 处理数据？用管道的方式会更加简洁</h3><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; Focus on results, not steps.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">reduce</span></span> + (<span class="name"><span class="builtin-name">map</span></span> #(<span class="name"><span class="builtin-name">*</span></span> <span class="number">2</span> %) (<span class="name"><span class="builtin-name">filter</span></span> odd? (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> <span class="number">20</span>)))))</span></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><code>200</code></p><p>我们从内向外读代码（从嵌套在最里面的括号开始读），可以清除的明白这段代码做了这些事：</p><ol><li>获取一个1到19的整数序列。（调用range函数后结果是“(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)”）</li><li>将这个序列的中的奇数提取出来形成另外一个序列。（调用filter函数后结果是“(1 3 5 7 9 11 13 15 17 19)”）</li><li>将这个奇数序列中的每个元素乘以2。（调用map函数后结果是“(2 6 10 14 18 22 26 30 34 38)”）（其中，“#(* 2 %)”是用简化方式定义的一个匿名函数，也可以用fn来定义）</li><li>将序列中的所有元素相加。（调用reduce函数后结果是“200”）</li></ol><p>这种管道流的代码变现方式使得我们读起来非常顺畅。我们几乎在读代码的同时就能明确代码的含义。这种管道流代码也非常只管，数据从内层开始经过中间函数的逐一处理，到了最外层时就生成了我们最终想要的结果。</p><p>想象一下，如果用Java写的话需要多少行代码？需要多少次循环？需要声明多少个中间变量？</p><h3 id="2-3-2-请描述一下我们要做的事情"><a href="#2-3-2-请描述一下我们要做的事情" class="headerlink" title="2.3.2 请描述一下我们要做的事情"></a>2.3.2 请描述一下我们要做的事情</h3><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; Focus more on what the code does rather than how it does it.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">for</span></span> [n (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> <span class="number">101</span>) <span class="symbol">:when</span> (<span class="name"><span class="builtin-name">=</span></span> <span class="number">0</span> (<span class="name"><span class="builtin-name">rem</span></span> n <span class="number">3</span>))] n))</span></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><code>(3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99)</code></p><p>现在我们想找出1到100中能被3整除的数，组成序列并打印，看看上面这段代码是怎么做的：</p><ol><li>用一个for宏就能搞定！for宏在Clojure里并不是用来做循环和迭代，而是用来对序列进行过滤等复杂操作的。</li><li>调用range函数返回一个1到100的序列。</li><li>通过“:when”这个关键字和后跟的函数来对上述序列进行过滤。</li><li>在Clojure中，用方括号包裹的代码块一般定时来声明形参的，并且如果形参名称的下一个形参位置上是一个函数或引用名的话，那么就把它的值赋给这个形参。在这段代码中我们将过滤后的序列赋给了形参n。</li><li>我们调用for宏的最后一个表达式为n，这就意味这调用后的返回值为n所代表的那个序列。</li><li>for宏很强大，详情请看Clojure的文档。</li></ol><p>Clojure里有很多的内建宏和函数。它们为语言使用者提供了很大的便利。它们使得我们在编程时可以更多的关注我们要做什么，而不是怎么去做。换句话说，这我们可以更多的去关注我们想要实现的功能和业务，而不是纠缠在那些不重要的处理细节上。</p><h3 id="2-3-3-要亲自管理可变状态？敬而远之吧"><a href="#2-3-3-要亲自管理可变状态？敬而远之吧" class="headerlink" title="2.3.3 要亲自管理可变状态？敬而远之吧"></a>2.3.3 要亲自管理可变状态？敬而远之吧</h3><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; Allow the runtime to manage state.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> counter</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">let</span></span> [tick (<span class="name"><span class="builtin-name">atom</span></span> <span class="number">0</span>)]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    #(<span class="name"><span class="builtin-name">swap!</span></span> tick inc)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">take</span></span> <span class="number">10</span> (<span class="name">repeatedly</span> counter)))</span></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><code>(1 2 3 4 5 6 7 8 9 10)</code></p><p>这段代码做了这些事：</p><ol><li>定义了函数“counter”。</li><li>在函数体中调用了let函数。</li><li>声明了一个支持原子操作的变量0，并将这个变量赋给了引用tick。tick作为这let函数的内部绑定。</li><li>在let函数调用的主体中声明了一个匿名函数，这个匿名函数利用swap函数来改变tick多代表的值。</li><li>无限调用函数“counter”并生成一个无穷序列（通过repeatedly函数），然后只取序列的前10个元素（注意，这里用到了懒惰计算）并返回。</li></ol><p>在Clojure中，用方括号包裹的代码块一般是来声明形参的。我们可以把用方括号包裹的语句块看成一个vector（实际上，在Clojure中数据结构vector的表示法就是用方括号包裹一到多个元素）。如果形参名称的下一个元素时一个form或者引用名或者字面量值，那么这下一个元素就是给这个形参的赋值。比如：</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; sum of x and y</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [x <span class="number">1</span> y <span class="number">2</span>] (<span class="name"><span class="builtin-name">+</span></span> x y))</span></pre></td></tr></tbody></table></figure><p>在上面这段代码中，我们调用了let函数，将1赋值给形参x、将2赋值给了形参2，并以x和y的和作为这次let函数调用的返回值。</p><p>从本节开始的代码可知，在Clojure中是可以有可变状态的。但是，对可变状态的管理和状态是完全的由语言来控制的。</p><p>Clojure使用STM（Software Transactional Memory）技术来对可变状态及其并发操作进行控制。</p><p>Clojure的STM使用了一种叫做多版本并发控制（MVCC）的技术。这一技术也在被一些主流数据库使用。</p><p>STM的事务与数据库的事务类似，保证三点：更新是原子的（A）、更新是一致的（C）和更新是隔离的（I）。 数据库的事务还可以保证更新是牢固的。因为Clojure的事务是内存事务，所以并不能保证更新的牢固性（D）。</p><p>下面我们用一张状态图来描绘STM的并发控制行为：</p><p>图中左上角的代码做了这些事：</p><ol><li>用ref定义了一个支持并发的引用（这个引用指向了一个不可变的值“A”）。这个ref引用是可变的。然后，我们将这个ref引用赋给引用my-data。</li><li>用dosync宏定义了一个事务。在这个事务中，我们使用ref-set函数将my-data所代表的ref引用的值由“A”改为了“B”。</li><li>这个事务的执行过程是协作和并发的。“可协作的”意味着我们可以在dosync宏中执行一到多个并发操作。dosync宏保证这些操作永远是按顺序执行的。至于并发控制方面已在图中说明了。</li></ol><p>Clojure的STM有四种操作模式，如下表：</p><table><thead><tr><th>名称</th><th align="center">协作的/独立的</th><th align="right">同步/异步</th><th align="right">说明</th></tr></thead><tbody><tr><td>Ref</td><td align="center">协作的</td><td align="right">同步</td><td align="right">Ref会为一个不可变的对象创建一个可变的引用。</td></tr><tr><td>Atomic</td><td align="center">独立的</td><td align="right">同步</td><td align="right">Atom是一种比ref更轻量级的机制。多个ref更新操作能够在事务被协调的执行，而atom允许非协调的单一值的更新操作。</td></tr><tr><td>Agent</td><td align="center">独立的</td><td align="right">异步</td><td align="right">send函数被调用后会立即返回，更新操作会稍后在另一个线程被执行。</td></tr><tr><td>Vars</td><td align="center">线程本地的</td><td align="right">同步</td><td align="right">Var是用defn或def定义，并用^:dynamic修饰的。它可以用binding在本地线程将某个引用重新绑定为其他值。</td></tr></tbody></table><p>注：</p><p>1) 协作/独立：状态是否与其他状态共同作用。</p><p>2) 同步/异步：状态的更新是同步还是异步。</p><p>下面是Ref、Atom和Agent的更新模型：</p><p>这个更新模型中描绘出了Clojure对并发更新的操作方式。更新机制包含了普通应用的、可交换的、非阻塞的和简易的。</p><p>关于Clojure的STM方面的知识已经超出了本文的主题范围，故在此就不再赘述了。对此感兴趣的读者可以参看Clojure的官方文档和书籍。</p><h3 id="2-3-4-更自然的使用“组合”来解耦代码"><a href="#2-3-4-更自然的使用“组合”来解耦代码" class="headerlink" title="2.3.4 更自然的使用“组合”来解耦代码"></a>2.3.4 更自然的使用“组合”来解耦代码</h3><p>下面的这段代码来自于O’Relley出版的《Clojure Programming》一书的第2章的一个例子。这个例子很好的展示了函数式编程在组合/累加功能方面的独特优势。</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> print-logger</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  [writer]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  #(<span class="name">binding</span> [*out* writer]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">println</span> %)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">((<span class="name">print-logger</span> *out*) <span class="string">"hello"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">(<span class="name">require</span> 'clojure.java.io)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> file-logger</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  [file]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  #(<span class="name"><span class="builtin-name">with-open</span></span> [f (<span class="name">clojure.java.io/writer</span> file <span class="symbol">:append</span> <span class="literal">true</span>)]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    ((<span class="name">print-logger</span> f) %)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">((<span class="name">file-logger</span> <span class="string">"messages.log"</span>) <span class="string">"hello, log file."</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> multi-logger</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  [&amp; logger-fns]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  #(<span class="name"><span class="builtin-name">doseq</span></span> [f logger-fns]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">f</span> %)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">((<span class="name">multi-logger</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">print-logger</span> *out*)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">file-logger</span> <span class="string">"messages.log"</span>)) <span class="string">"hello again"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> timestamped-logger</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">  [logger]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">  #(<span class="name">logger</span> (<span class="name"><span class="builtin-name">format</span></span> <span class="string">"[%1$tY-%1$tm-%1$te %1$tH:%1$tM:%1$tS] %2$s"</span> (<span class="name">java.util.Date.</span>) %)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">((<span class="name">timestamped-logger</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">multi-logger</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">print-logger</span> *out*)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">file-logger</span> <span class="string">"messages.log"</span>))) <span class="string">"Hello, timestamped logger~"</span>)</span></pre></td></tr></tbody></table></figure><p>这段代码做了这些事：</p><ol><li>首先，例子定义了print-logger函数。这个函数的函数体是一个匿名函数。这个匿名函数通过调用binding宏将标准输出（用“<em>out</em>”表示）重新绑定为形参writer所代表的值（也就是说重新定义了用println函数打印内容的输出目的地），而后打印出调用这个匿名函数时所传入的实参。最后，我们将这个匿名函数作为print-logger函数的返回值。这个注意，这里用到了 闭包，通过形参writer所代表的值的传入，我们完整化了这个匿名函数，使它真正可以工作。</li><li>例子中定义的第二个函数是file-logger函数。这个函数有一个形参file，它的值应该是一个文件的路径。这个函数的函数体也是一个匿名函数。在这个匿名函数中，通过调用with-open宏打开了这个文件路径多代表的文件，并创建了一个相应的Writer实例并赋值给了内部绑定f。:append关键字是用来指定写入方式是否为追加的。在最后，通过调用之前写好的print-logger函数并传入f。这就意味着我们把标准输出与一个指定文件的Writer绑定了。这就意味着，我们调用file-logger函数并传入文件的路径，就会得到一个可以把内容打印到指定文件的log记录函数了。这里同样是一个闭包应用。我们通过将“messages.log”作为参数传给函数file-logger，完整化了file-logger函数体中多定义的匿名函数。待file-logger函数将这个匿名函数作为返回值返回之后我们就可以直接使用了。</li><li><code>multi-logger</code>函数可以把<code>print-logger</code>函数和<code>file-logger</code>函数的功能合并起来。参数<code>vector</code>中的“<code>&amp; logger-fns</code>”表明我们可以传入多个函数。函数中的匿名函数会作为返回值返回。这个匿名函数会依次调用之前传入多个函数，并将调用这个匿名函数时传入的参数传递给这几个函数。我们调用multi-logger函数并将前面定义好的两个log记录函数传入，就可以得到一个可以同时将内容打印到屏幕和文件的多向日志记录函数了。我们得到的这个函数同样是通过闭包方式生成的。</li><li>在理解了前面几个函数后，timestamped-logger函数就很好解释了。我们首先将时间戳字符串和要打印的内容拼接（通过调用format函数）并作为参数传给了形参logger代表的函数。</li></ol><p>这个例子稍显复杂一些，但是它是像搭积木一样一步步将功能堆叠起来的，读起来是非常直观的。当然这要在你理解了相关函数式编程概念之后。</p><h3 id="2-4-一起来FP吧"><a href="#2-4-一起来FP吧" class="headerlink" title="2.4 一起来FP吧"></a>2.4 一起来FP吧</h3><p>上面说了这么多，只希望能够激发起你对FP的兴趣。如果你已经对FP有了一丝兴趣，那就说明我的文章没白写。如果你会Java，那我强烈建议你看看Clojure这个函数式语言。怎么？你对Clojure一无所知？好吧，我在后面补上一些Clojure编程语言的基本信息。</p><h2 id="3-这就是Clojure"><a href="#3-这就是Clojure" class="headerlink" title="3. 这就是Clojure"></a>3. 这就是Clojure</h2><h3 id="3-1-Clojure是什么？"><a href="#3-1-Clojure是什么？" class="headerlink" title="3.1 Clojure是什么？"></a>3.1 Clojure是什么？</h3><blockquote></blockquote><ul><li>一种Lisp方言（最初只基于JVM构建，现在也有CLR和JS的版本）</li><li>开源语言（使用Eclipse Public License v 1.0协议）</li><li>动态类型语言（标识类型是可选操作）</li><li>函数式语言（但提供了安全的可变状态操作方法）</li></ul><blockquote><p>作者： Rich Hickey<br>2007年10月第一次发布<br>官方网站： <a href="http://www.clojure.org/" target="_blank" rel="external nofollow noreferrer noopener">http://www.clojure.org/</a></p></blockquote><h3 id="3-2-Clojure的亮点"><a href="#3-2-Clojure的亮点" class="headerlink" title="3.2 Clojure的亮点"></a>3.2 Clojure的亮点</h3><blockquote></blockquote><ul><li>Clojure里的每个操作都被实现成以下三种形式中的一种：<code>special form</code>, <code>function</code>, <code>macro</code>.</li><li>Clojure仅提供了很少的数据结构（但操作它们的方法众多）：<code>regular expressions</code>, <code>list</code>, <code>maps</code>, <code>sets</code>, <code>vectors</code>, <code>metadata</code>.</li><li>序列（<code>sequence</code>）——集合的统一逻辑视图</li><li>数据默认不可修改，但提供了保证并发安全的修改方式</li><li>大量使用了懒惰计算，大大提高程序效率</li><li>核心数据结构可以扩展（Common Lisp和Scheme的核心数据结构可修改，但不可扩展）</li><li>所有数据结构是不可修改的、持久的并且支持递归的（在传统Lisp里，只有list是结构可递归的）</li><li>使用<code>PDS</code>（Persistent Data Structures）技术解决了不可变数据造成的内存空间浪费和数据创建低效率问题</li><li><code>STM</code>（Software Transactional Memory）机制使得她内置的支持了并发编程</li></ul><h3 id="3-3-Clojure的开发环境"><a href="#3-3-Clojure的开发环境" class="headerlink" title="3.3 Clojure的开发环境"></a>3.3 Clojure的开发环境</h3><blockquote></blockquote><ul><li>构建工具——<code>Leiningen</code>，兼容<code>Maven</code>仓库。</li><li>轻量级<code>IDE</code>——<code>Clooj</code>，集成了项目浏览器、支持语法高亮Clojure源码文件查看器、输出查看器和REPL。</li><li>更高级的IDE——推荐 IDEA + La Clojure插件。</li><li>手边的Clojure书籍。</li><li>Clojure文档站点。</li></ul><h3 id="3-4-Clojure相关网站"><a href="#3-4-Clojure相关网站" class="headerlink" title="3.4 Clojure相关网站"></a>3.4 Clojure相关网站</h3><blockquote></blockquote><ul><li>官网：<a href="http://clojure.org" target="_blank" rel="external nofollow noreferrer noopener">http://clojure.org</a></li><li>文档站点：<a href="http://clojuredocs.org" target="_blank" rel="external nofollow noreferrer noopener">http://clojuredocs.org</a></li><li>题库站点：<a href="http://www.4clojure.com" target="_blank" rel="external nofollow noreferrer noopener">http://www.4clojure.com</a></li><li>Clojure构件仓库： <a href="https://clojars.org" target="_blank" rel="external nofollow noreferrer noopener">https://clojars.org</a></li><li>中文用户组：<a href="http://cnlojure.org" target="_blank" rel="external nofollow noreferrer noopener">http://cnlojure.org</a></li></ul><h3 id="3-5-Clojure相关书籍"><a href="#3-5-Clojure相关书籍" class="headerlink" title="3.5 Clojure相关书籍"></a>3.5 Clojure相关书籍</h3><blockquote></blockquote><ul><li>Programming Clojure, Second Edition （易入门，基于Clojure 1.3）</li><li>Clojure Programming（O’Reilly出品，基于Clojure 1.3）</li><li>Clojure in Action（实践手册）</li><li>The Joy of Clojure（比较深入）</li><li>Clojure – Functional Programming for the JVM（易入门，有中文版）</li></ul><h3 id="3-6-Clojure的一些应用场景"><a href="#3-6-Clojure的一些应用场景" class="headerlink" title="3.6 Clojure的一些应用场景"></a>3.6 Clojure的一些应用场景</h3><blockquote></blockquote><ul><li>Text Search：Clucy，Snowball Stemmer</li><li>Asynchronous HTTP：Aleph</li><li>HTTP Clients：clj-http，http.async.client</li><li>GUI：Clarity，Seesaw</li><li>Web Server：Ring</li><li>Web Frameworks：Compojure，Conjure</li><li>Databases：FleetDB，Jiraph，clj-record</li><li>Redis Clients：clj-redis，redis-clojure</li><li>Twitter Storm——开源实时Hadoop</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-OOP的本质？&quot;&gt;&lt;a href=&quot;#1-OOP的本质？&quot; class=&quot;headerlink&quot; title=&quot;1. OOP的本质？&quot;&gt;&lt;/a&gt;1. OOP的本质？&lt;/h3&gt;&lt;p&gt;面向对象编程（OOP）中最终要的是什么？抽象、封装、集成、多态？实现模式？设计模式？还有更重要的么？&lt;/p&gt;
&lt;p&gt;下面引用两段业内名言：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“如果我们现在回头看一下面向对象这个思想是从哪来的，如果以基于消息传递机制的Smalltalk-80的特性来衡量现在的状态继承和面向对象的使用方式，我们不禁要问，我们是不是已经走错路了？” ——2010伦敦QCon大会采访&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;只关注状态，在类和基于映像的语言里缺乏良好的并发模型和消息机制。 ——Dave Thomas博士&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Clojure 学习 —— 连接mysql</title>
    <link href="http://notes.seirhsiao.com/posts/dfed0350/"/>
    <id>http://notes.seirhsiao.com/posts/dfed0350/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:44:24.046Z</updated>
    
    <content type="html"><![CDATA[<p><code>Clojure</code>的<code>contrib</code>包中实现了对现有<code>JDBC</code>的封装，在<code>wiki</code>上有连接，该页面上包含了对不同的数据库的连接方法和基本的操作，但是这个页面上没有提供足够的信息，足够一个初学者能够使用<code>Clojure</code>来完成一个SQL操作。本文中我们将利用<code>Clojure</code>和<code>Lein</code>工具，简介一下做开发的基础。当然网上也有非常多对<code>Clojure</code>的<code>SQL</code>操作进行封装的库，我们这里没有使用。</p><a id="more"></a><p>首先，配置你的MySQL数据库，创建数据库、表、数据。</p><p>其次，在和MySQL的操作中，我们需要两个库，一个是<code>clojure.contrib</code>，另外一个是<code>mysql-connector-java-xxx.jar</code>。为了管理和配置这两个库，我们需要配置一下<code>project.clj</code>文件，在<code>depedencies</code>中加上两条：<code>org.clojure/clojure-contrib</code> “<code>1.2.0</code>” 和 <code>mysql/mysql-connector-java</code> “<code>5.1.6</code>”。这样运行 <code>lein deps</code>，就会自动下载并且安装到<code>Leiningen dependencies lib</code>目录下。</p><p>接着，在需要使用<code>sql</code>库的地方要导入这些库</p><p>在<code>ns</code>宏中加载如下内容：<code>(:use [clojure.contrib.sql :as sql :only ()])</code>，这样在本文件中就可以直接使用sql作为前缀。需要主意的是，虽然我们并没有直接使用到<code>mysql-connector-java</code>，但是如果在<code>lib</code>目录下没有该文件，就会报错没有<code>mysql</code>的d<code>river</code>。</p><p>配置上两条之后，就可以进行sql连接了。</p><p>首先要定义一个<code>database specification</code>，这是一个<code>map</code>，几个必须配置的<code>key</code>包括了：<code>classname</code>, <code>subprotocol</code>, <code>subname</code>, <code>user</code>, <code>password</code>。</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> db {<span class="symbol">:classname</span> <span class="string">"com.mysql.jdbc.Driver"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">             <span class="symbol">:subprotocol</span> <span class="string">"mysql"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">             <span class="symbol">:subname</span> <span class="string">"//127.0.0.1:3306/test"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">             <span class="symbol">:user</span> <span class="string">"root"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">             <span class="symbol">:password</span> <span class="string">"pass"</span>})</span></pre></td></tr></tbody></table></figure><p>这个<code>db-spec</code>在后面几乎所有的sql操作都是需要的。</p><p>接下来我们主要描述几个常用API的格式，具体的内容可以参考手册。</p><p><strong>1. 新建表</strong></p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sql/create-table :table-name [:key :type “”] [:key :type “”])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> create-users []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">sql/create-table</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     <span class="symbol">:user</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">     [<span class="symbol">:id</span> <span class="symbol">:integer</span> <span class="string">"PRIMARY KEY"</span> <span class="string">"AUTO_INCREMENT"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">     [<span class="symbol">:fname</span> <span class="string">"varchar(25)"</span>]))</span></pre></td></tr></tbody></table></figure><p><strong>2. 插入数据</strong></p><p>两个<code>api</code>，一个是<code>insert-rows</code>，一个是<code>insert-values</code>。<code>insert-rows</code>需要形成一个完整的行数据插入到表中，<code>insert-values</code>可以按照<code>key</code>来插入值。</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> insert-user [fname]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">sql/insert-values</span> <span class="symbol">:users</span> [<span class="symbol">:fname</span>] [fname]))</span></pre></td></tr></tbody></table></figure><p>使用<code>insert-values</code>可以利用<code>primary-key</code>的<code>auto_increment</code>的属性</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> insert-rows</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   (<span class="name">sql/insert-rows</span> <span class="symbol">:user</span> [<span class="number">1</span> <span class="string">"Tim"</span>] [<span class="number">2</span> <span class="string">"Tom"</span>]))</span></pre></td></tr></tbody></table></figure><p><strong>3. 丢弃表</strong></p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> drop-user</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">try</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">sql/drop-table</span> <span class="symbol">:fruit</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">catch</span> Exception _)))</span></pre></td></tr></tbody></table></figure><ol start="4"><li><code>with-query-results</code> 选择查询的数据</li></ol><p><code>with-query-results</code> 类似于 <code>let</code> 语句，会将查询结果绑定到<code>rs</code>上，<code>rs</code>是一个<code>map</code>构成的<code>sequence</code>。</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name">sql/with-query-results</span> rs [<span class="string">"select * from user"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   (<span class="name"><span class="builtin-name">dorun</span></span> (<span class="name"><span class="builtin-name">map</span></span> #(<span class="name">println</span> %) rs)))</span></pre></td></tr></tbody></table></figure><p><strong>5. 更新表</strong></p><p><code>update-values</code> 用来更新表的内容，使用该函数需要指定查询条件，如下图所示</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> update-user [id attribute-map]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">sql/update-values</span> <span class="symbol">:user</span> [<span class="string">"id=?"</span> id] attribute-map))</span></pre></td></tr></tbody></table></figure><p><strong>6. 删除行</strong></p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name">sql/delete-rows</span> <span class="symbol">:user</span> [<span class="string">"id=?"</span> id])</span></pre></td></tr></tbody></table></figure><p><strong>7. <code>SQL</code>准备</strong></p><p><code>clojure</code>支持由用户输入构造<code>sql</code>语句，利用的是<code>sql prepared</code>语句，略</p><p><strong>8. 示例</strong></p><p>创建表 <code>fruit</code>，并插入两条记录，然后条件查询和全部查询 </p><p>1） 在<code>project.clj</code> 中，添加<code>sql</code>依赖：</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name">defproject</span> myClojure <span class="string">"0.1.0-SNAPSHOT"</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:description</span> <span class="string">"FIXME: write description"</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:url</span> <span class="string">"http://example.com/FIXME"</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:license</span> {<span class="symbol">:name</span> <span class="string">"Eclipse Public License"</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="symbol">:url</span> <span class="string">"http://www.eclipse.org/legal/epl-v10.html"</span>}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:dependencies</span> [  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                 [org.clojure/clojure <span class="string">"1.5.1"</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                 [org.clojure/java.jdbc <span class="string">"0.0.6"</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                 [org.clojure/clojure-contrib <span class="string">"1.2.0"</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                 [mysql/mysql-connector-java <span class="string">"5.1.26"</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                 ])</span></pre></td></tr></tbody></table></figure><p>2） <code>mysql.cli</code> 代码</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; clojure connect to mysql  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; ithomer.net  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 2013.12.10  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">ns</span></span> myClojure.mysql2  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  (<span class="symbol">:require</span> [clojure.java.jdbc <span class="symbol">:as</span> sql]))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 配置参数  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> mysql-db{  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">               <span class="symbol">:classname</span> <span class="string">"com.mysql.jdbc.Driver"</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">               <span class="symbol">:subprotocol</span> <span class="string">"mysql"</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">               <span class="symbol">:subname</span> <span class="string">"//172.27.9.104:3306/tmptest"</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">               <span class="symbol">:user</span> <span class="string">"root"</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">               <span class="symbol">:password</span> <span class="string">"server2011"</span>})  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 创建表  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> create-fruit  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"Create a table"</span>   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  []  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">   (<span class="name">sql/create-table</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">     <span class="symbol">:fruit</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">     [<span class="symbol">:name</span> <span class="string">"varchar(32)"</span> <span class="string">"PRIMARY KEY"</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">     [<span class="symbol">:appearance</span> <span class="string">"varchar(32)"</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">     [<span class="symbol">:cost</span> <span class="symbol">:int</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">     [<span class="symbol">:grade</span> <span class="symbol">:real</span>]))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 删除表  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> drop-fruit  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"Drop a table"</span>   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  []  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">try</span></span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">sql/drop-table</span> <span class="symbol">:fruit</span>)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">catch</span> Exception _)))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 连接数据库  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">(<span class="name">sql/with-connection</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">  mysql-db  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">drop-fruit</span>)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">create-fruit</span>))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 插入数据  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">(<span class="name">sql/with-connection</span> mysql-db  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">sql/insert-records</span> <span class="symbol">:fruit</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">                      {<span class="symbol">:name</span> <span class="string">"Apple"</span> <span class="symbol">:appearance</span> <span class="string">"rosy"</span> <span class="symbol">:cost</span> <span class="number">24</span> <span class="symbol">:grade</span> <span class="number">1.2</span>}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">                      {<span class="symbol">:name</span> <span class="string">"Orange"</span> <span class="symbol">:appearance</span> <span class="string">"round"</span> <span class="symbol">:cost</span> <span class="number">49</span>}))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 条件查询  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name">sql/with-connection</span> mysql-db  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">           (<span class="name">sql/with-query-results</span> rows  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">             [<span class="string">"SELECT * FROM fruit WHERE appearance = ?"</span> <span class="string">"rosy"</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">             (<span class="symbol">:cost</span> (<span class="name"><span class="builtin-name">first</span></span> rows)))))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 全量查询  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name">sql/with-connection</span> mysql-db  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">           (<span class="name">sql/with-query-results</span> rows  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">             [<span class="string">"SELECT * FROM fruit"</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">             (<span class="name"><span class="builtin-name">dorun</span></span> (<span class="name"><span class="builtin-name">map</span></span> #(<span class="name">println</span> %) rows)))))</span></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><code>24</code><br><code>{:name Apple, :appearance rosy, :cost 24, :grade 1.2}</code><br><code>{:name Orange, :appearance round, :cost 49, :grade nil}</code><br><code>nil</code></p><p>创建的数据库表内容：<br><img alt="clojure_sql_table.png" data-src="/static/images/clojure/clojure_sql_table.png" class="lazyload"></p><p><strong>注：</strong> 所有的sql操作都需要在<code>with-connection</code>宏下包裹着</p><p><strong>参考资料：</strong><br><a href="http://www.cnblogs.com/mmjx/archive/2011/10/28/2228253.html" target="_blank" rel="external nofollow noreferrer noopener">Clojure SQL 基础</a><br><a href="http://blog.csdn.net/baiyangfu_love/article/details/8478026" target="_blank" rel="external nofollow noreferrer noopener">Clojure 连接mysql</a><br><a href="http://corfield.org/blog/post.cfm/connecting-clojure-and-mysql" target="_blank" rel="external nofollow noreferrer noopener">Connecting Clojure and MySQL</a><br><a href="http://blog.csdn.net/sunboy_2050/article/details/17226665" target="_blank" rel="external nofollow noreferrer noopener">Clojure 学习入门（7）—— 连接mysql</a> </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Clojure&lt;/code&gt;的&lt;code&gt;contrib&lt;/code&gt;包中实现了对现有&lt;code&gt;JDBC&lt;/code&gt;的封装，在&lt;code&gt;wiki&lt;/code&gt;上有连接，该页面上包含了对不同的数据库的连接方法和基本的操作，但是这个页面上没有提供足够的信息，足够一个初学者能够使用&lt;code&gt;Clojure&lt;/code&gt;来完成一个SQL操作。本文中我们将利用&lt;code&gt;Clojure&lt;/code&gt;和&lt;code&gt;Lein&lt;/code&gt;工具，简介一下做开发的基础。当然网上也有非常多对&lt;code&gt;Clojure&lt;/code&gt;的&lt;code&gt;SQL&lt;/code&gt;操作进行封装的库，我们这里没有使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="mysql" scheme="http://notes.seirhsiao.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Clojure 学习 —— 连接mongodb</title>
    <link href="http://notes.seirhsiao.com/posts/fa8d6b84/"/>
    <id>http://notes.seirhsiao.com/posts/fa8d6b84/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:44:31.833Z</updated>
    
    <content type="html"><![CDATA[<p>clojure 连接mongodb简单介绍及示例</p><a id="more"></a><h3 id="clojure-连接-mongodb示例"><a href="#clojure-连接-mongodb示例" class="headerlink" title="clojure 连接 mongodb示例"></a><code>clojure</code> 连接 <code>mongodb</code>示例</h3><!-- more --><p><code>project.clj</code> 文件添加<code>monger</code>依赖： <code>[com.novemberain/monger "1.5.0"]</code></p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name">defproject</span> myClojure <span class="string">"0.1.0-SNAPSHOT"</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:description</span> <span class="string">"FIXME: write description"</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:url</span> <span class="string">"http://example.com/FIXME"</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:license</span> {<span class="symbol">:name</span> <span class="string">"Eclipse Public License"</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="symbol">:url</span> <span class="string">"http://www.eclipse.org/legal/epl-v10.html"</span>}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:dependencies</span> [  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                 [org.clojure/clojure <span class="string">"1.5.1"</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                 [org.clojure/java.jdbc <span class="string">"0.0.6"</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                 [org.clojure/clojure-contrib <span class="string">"1.2.0"</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                 [mysql/mysql-connector-java <span class="string">"5.1.26"</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                 [com.novemberain/monger <span class="string">"1.5.0"</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                 ])</span></pre></td></tr></tbody></table></figure><p><strong>示例代码：</strong></p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; clojure connect to mysql  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; ithomer.net  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 2013.12.10  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">ns</span></span> myClojure.mongo3  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  (<span class="symbol">:use</span> [monger.core <span class="symbol">:only</span> [connect! connect set-db! get-db]])  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  (<span class="symbol">:require</span> [monger.core <span class="symbol">:as</span> mg]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            [monger.collection <span class="symbol">:as</span> mc]))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 函数  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> -main[&amp; m]   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;  (connect!) ;; 默认连接库 { :host "localhost" :port 27017 }  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">connect!</span> { <span class="symbol">:host</span> <span class="string">"172.27.22.21"</span> <span class="symbol">:port</span> <span class="number">27017</span>})    <span class="comment">; 指定 host 和 port  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">set-db!</span> (<span class="name">mg/get-db</span> <span class="string">"homer-db"</span>))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">;; 清空collection  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">mc/remove</span> <span class="string">"workflow"</span>)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">;; 单条插入  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">mc/insert</span> <span class="string">"workflow"</span> {<span class="symbol">:name</span> <span class="string">"blog"</span>  <span class="symbol">:url</span> <span class="string">"http://blog.ithomer.net"</span> <span class="symbol">:copyright</span>  <span class="string">"ithomer"</span> <span class="symbol">:dtime</span> <span class="string">"2009-07-31"</span>})   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">mc/insert</span> <span class="string">"workflow"</span> {<span class="symbol">:name</span> <span class="string">"forum"</span> <span class="symbol">:url</span> <span class="string">"http://blog.ithomer.net"</span> <span class="symbol">:copyright</span>  <span class="string">"ithomer"</span> <span class="symbol">:dtime</span> <span class="string">"2013-12-01"</span> })  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">;; 批量插入  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">mc/insert-batch</span> <span class="string">"workflow"</span> [{<span class="symbol">:name</span> <span class="string">"csdn"</span>   <span class="symbol">:url</span> <span class="string">"http://blog.csdn.net/ithomer"</span>     <span class="symbol">:copyright</span>  <span class="string">"ithomer"</span> <span class="symbol">:dtime</span> <span class="string">"2010-01-01"</span> }  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">                               {<span class="symbol">:name</span> <span class="string">"csdn2"</span>  <span class="symbol">:url</span> <span class="string">"http://blog.csdn.net/sunboy_2050"</span> <span class="symbol">:copyright</span>  <span class="string">"ithomer"</span> <span class="symbol">:dtime</span> <span class="string">"2012-06-30"</span> }])  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">;; 全量查询  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">   (<span class="name"><span class="builtin-name">doseq</span></span> [item (<span class="name"><span class="builtin-name">map</span></span> list (<span class="name">mc/find-maps</span> <span class="string">"workflow"</span>))]   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        (<span class="name">println</span> item))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">;; 条件查询  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">   (<span class="name">println</span>)   <span class="comment">;; 空一行  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">   (<span class="name"><span class="builtin-name">doseq</span></span> [item (<span class="name">mc/find-one</span> <span class="string">"workflow"</span> { <span class="symbol">:name</span> <span class="string">"blog"</span> })]   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">         (<span class="name">println</span> item))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">   (<span class="name">println</span> (<span class="name">mc/find-one</span> <span class="string">"workflow"</span> { <span class="symbol">:name</span> <span class="string">"blog"</span> }))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">;; 更新   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">   (<span class="name">mc/update</span> <span class="string">"workflow"</span> {<span class="symbol">:name</span> <span class="string">"csdn"</span>} {<span class="symbol">:copyright</span> <span class="string">"yanggang"</span>} <span class="symbol">:upsert</span> <span class="literal">true</span>)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">;; 删除  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">   (<span class="name">mc/remove</span> <span class="string">"workflow"</span> { <span class="symbol">:name</span> <span class="string">"csdn2"</span> })  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">;; 全量查询删除后的结果  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">   (<span class="name">println</span>)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">   (<span class="name"><span class="builtin-name">doseq</span></span> [item (<span class="name"><span class="builtin-name">map</span></span> list (<span class="name">mc/find-maps</span> <span class="string">"workflow"</span>))]   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">        (<span class="name">println</span> item))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">   <span class="comment">;; 关闭连接  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">monger.core/disconnect!</span>)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 执行函数  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">(<span class="name">-main</span>)</span></pre></td></tr></tbody></table></figure><p><strong>运行结果：</strong></p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">({<span class="symbol">:_id</span> #&lt;ObjectId <span class="number">52</span>a6a9e1e4b0e53f523a9ddb&gt;, <span class="symbol">:copyright</span> ithomer, <span class="symbol">:name</span> blog, <span class="symbol">:dtime</span> <span class="number">2009</span><span class="number">-07</span><span class="number">-31</span>, <span class="symbol">:url</span> http://blog.ithomer.net})  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">({<span class="symbol">:_id</span> #&lt;ObjectId <span class="number">52</span>a6a9e1e4b0e53f523a9ddc&gt;, <span class="symbol">:copyright</span> ithomer, <span class="symbol">:name</span> forum, <span class="symbol">:dtime</span> <span class="number">2013</span><span class="number">-12</span><span class="number">-01</span>, <span class="symbol">:url</span> http://blog.ithomer.net})  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">({<span class="symbol">:_id</span> #&lt;ObjectId <span class="number">52</span>a6a9e1e4b0e53f523a9ddd&gt;, <span class="symbol">:copyright</span> ithomer, <span class="symbol">:name</span> csdn, <span class="symbol">:dtime</span> <span class="number">2010</span><span class="number">-01</span><span class="number">-01</span>, <span class="symbol">:url</span> http://blog.csdn.net/ithomer})  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">({<span class="symbol">:_id</span> #&lt;ObjectId <span class="number">52</span>a6a9e1e4b0e53f523a9dde&gt;, <span class="symbol">:copyright</span> ithomer, <span class="symbol">:name</span> csdn2, <span class="symbol">:dtime</span> <span class="number">2012</span><span class="number">-06</span><span class="number">-30</span>, <span class="symbol">:url</span> http://blog.csdn.net/sunboy_2050})  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">#&lt;Entry _id=52a6a9e1e4b0e53f523a9ddb&gt;  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">#&lt;Entry copyright=ithomer&gt;  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">#&lt;Entry name=blog&gt;  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">#&lt;Entry dtime=2009-07-31&gt;  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">#&lt;Entry url=http://blog.ithomer.net&gt;  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">#&lt;BasicDBObject { "_id" : { "$oid" : "52a6a9e1e4b0e53f523a9ddb"} , "copyright" : "ithomer" , "name" : "blog" , "dtime" : "2009-07-31" , "url" : "http://blog.ithomer.net"}&gt;  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">({<span class="symbol">:_id</span> #&lt;ObjectId <span class="number">52</span>a6a9e1e4b0e53f523a9ddb&gt;, <span class="symbol">:copyright</span> ithomer, <span class="symbol">:name</span> blog, <span class="symbol">:dtime</span> <span class="number">2009</span><span class="number">-07</span><span class="number">-31</span>, <span class="symbol">:url</span> http://blog.ithomer.net})  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">({<span class="symbol">:_id</span> #&lt;ObjectId <span class="number">52</span>a6a9e1e4b0e53f523a9ddc&gt;, <span class="symbol">:copyright</span> ithomer, <span class="symbol">:name</span> forum, <span class="symbol">:dtime</span> <span class="number">2013</span><span class="number">-12</span><span class="number">-01</span>, <span class="symbol">:url</span> http://blog.ithomer.net})  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">({<span class="symbol">:_id</span> #&lt;ObjectId <span class="number">52</span>a6a9e1e4b0e53f523a9ddd&gt;, <span class="symbol">:copyright</span> yanggang})</span></pre></td></tr></tbody></table></figure><p><strong>mongo数据库内容：</strong><br><img alt="clojure_sql_mongo.png" data-src="/static/images/clojure/clojure_sql_mongo.png" class="lazyload"></p><p><strong>参考推荐：</strong><br><a href="http://clojuremongodb.info/articles/getting_started.html" target="_blank" rel="external nofollow noreferrer noopener">Monger, a Clojure client for MongoDB</a><br><a href="http://f.dataguru.cn/thread-92356-1-1.html" target="_blank" rel="external nofollow noreferrer noopener">clojure简单操作mongo</a><br><a href="http://blog.csdn.net/sunboy_2050/article/details/17240703" target="_blank" rel="external nofollow noreferrer noopener">Clojure 学习入门（8）—— 连接mongodb</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      clojure 连接mongodb简单介绍及示例
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="mongodb" scheme="http://notes.seirhsiao.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Clojure 学习 —— 连接redis</title>
    <link href="http://notes.seirhsiao.com/posts/31e8cb7d/"/>
    <id>http://notes.seirhsiao.com/posts/31e8cb7d/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:50:38.433Z</updated>
    
    <content type="html"><![CDATA[<p>clojure 连接redis简单介绍及示例</p><a id="more"></a><h3 id="clojure-连接-redis-示例"><a href="#clojure-连接-redis-示例" class="headerlink" title="clojure 连接 redis 示例"></a>clojure 连接 redis 示例</h3><p><code>project.cli</code> 添加<code>redis</code>依赖： <code>[clj-redis "0.0.12"]</code></p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name">defproject</span> myClojure <span class="string">"0.1.0-SNAPSHOT"</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:description</span> <span class="string">"FIXME: write description"</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:url</span> <span class="string">"http://example.com/FIXME"</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:license</span> {<span class="symbol">:name</span> <span class="string">"Eclipse Public License"</span> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="symbol">:url</span> <span class="string">"http://www.eclipse.org/legal/epl-v10.html"</span>}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:dependencies</span> [  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                 [org.clojure/clojure <span class="string">"1.5.1"</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                 [org.clojure/java.jdbc <span class="string">"0.0.6"</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                 [org.clojure/clojure-contrib <span class="string">"1.2.0"</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                 [mysql/mysql-connector-java <span class="string">"5.1.26"</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                 [com.novemberain/monger <span class="string">"1.5.0"</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                 [com.taoensso/carmine <span class="string">"1.2.1"</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                 [clj-redis <span class="string">"0.0.12"</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                 ])</span></pre></td></tr></tbody></table></figure><p><strong>示例代码：</strong></p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">ns</span></span> myClojure.redis2  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">require</span> [clj-redis.client <span class="symbol">:as</span> redis]))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 连接redis  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> db (<span class="name">redis/init</span>))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name">redis/ping</span> db))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name">redis/set</span> db <span class="string">"foo"</span> <span class="string">"BAR"</span>))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name">redis/get</span> db <span class="string">"foo"</span>))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span>)  <span class="comment">;; 空一行  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name">redis/set</span> db <span class="string">"blog"</span> <span class="string">"http://blog.ithomer.net"</span>))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name">redis/get</span> db <span class="string">"blog"</span>))</span></pre></td></tr></tbody></table></figure><p><strong>运行结果：</strong></p><figure class="highlight dts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">PONG</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">OK</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">BAR</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">OK</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//blog.ithomer.net</span></span></pre></td></tr></tbody></table></figure><p><strong>redis 数据内容：</strong></p><p><img alt="clojure_redis.png" data-src="/static/images/clojure/clojure_redis.png" class="lazyload"></p><p><strong>Carmine 示例</strong></p><h3 id="Carmine-a-Clojure-Redis-client"><a href="#Carmine-a-Clojure-Redis-client" class="headerlink" title="Carmine, a Clojure Redis client"></a>Carmine, a Clojure Redis client</h3><p><code>project.clj</code> 添加依赖： <code>[com.taoensso/carmine "2.4.0"]</code></p><p><strong>示例代码：</strong></p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">ns</span></span> myClojure.redis  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="symbol">:require</span> [taoensso.carmine <span class="symbol">:as</span> car]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            [taoensso.carmine.message-queue <span class="symbol">:as</span> carmine-mq])  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  (<span class="symbol">:gen-class</span> <span class="symbol">:main</span> <span class="literal">true</span>))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> pool         (<span class="name">car/make-conn-pool</span>)) <span class="comment">; See docstring for additional options  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> spec-server1 (<span class="name">car/make-conn-spec</span>)) <span class="comment">; ''  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defmacro</span></span> wcar [&amp; body] `(<span class="name">car/with-conn</span> pool spec-server1 ~@body))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> -main [&amp; args]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">println</span> <span class="string">"rd01 run!"</span>)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">;;   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">   (<span class="name">wcar</span> (<span class="name">car/ping</span>)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">      (<span class="name">car/set</span> <span class="string">"foo"</span> <span class="string">"hello ithomer"</span>)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">      (<span class="name">car/get</span> <span class="string">"foo"</span>))   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  )  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">(<span class="name">-main</span>)</span></pre></td></tr></tbody></table></figure><p><strong>运行结果：</strong></p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">rd01 <span class="keyword">run</span><span class="bash">!</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">[<span class="string">"PONG"</span> <span class="string">"OK"</span> <span class="string">"hello ithomer"</span>]</span></pre></td></tr></tbody></table></figure><p><strong>参考推荐：</strong><br><a href="https://github.com/ptaoussanis/carmine" target="_blank" rel="external nofollow noreferrer noopener">Carmine, a Clojure Redis client（github）</a><br><a href="https://github.com/mmcgrana/clj-redis" target="_blank" rel="external nofollow noreferrer noopener">clj-redis（github）</a><br><a href="http://f.dataguru.cn/thread-48035-1-1.html" target="_blank" rel="external nofollow noreferrer noopener">clojure操作redis</a><br><a href="http://blog.csdn.net/sunboy_2050/article/details/17243149" target="_blank" rel="external nofollow noreferrer noopener">Clojure 学习入门（9）—— 连接redis</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      clojure 连接redis简单介绍及示例
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="redis" scheme="http://notes.seirhsiao.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Clojure 学习 —— httpkit</title>
    <link href="http://notes.seirhsiao.com/posts/8dda23a1/"/>
    <id>http://notes.seirhsiao.com/posts/8dda23a1/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:50:37.610Z</updated>
    
    <content type="html"><![CDATA[<p><code>Http-kit</code> 是主要由<code>Java</code> 和 <code>Clojure</code>开发，为<code>Clojure</code>定制的零依赖的<code>HTTP lib</code>，仅用3000多行代码，实现了高性能 <code>Server</code>，<code>Client，Timer</code>。代码量少，实现简单，对<code>Hacker</code>友好。</p><p>在普通的PC上进行性能测试时，<code>http-kit</code> server每秒能处理数万个请求，并能轻松保持数十万并发，每个连接消耗几k内存，并发数仅与内存大小有关，高并发不影响 <code>latency</code>。</p><a id="more"></a><p><code>http-kit</code> 下载：<a href="https://clojars.org/http-kit" target="_blank" rel="external nofollow noreferrer noopener">http-kit</a></p><p><code>http-kit</code> 官网：<a href="http://http-kit.org/" target="_blank" rel="external nofollow noreferrer noopener">http-kit.org</a></p><p><strong>1）HTTP Server：</strong></p><blockquote><p>高性能， 在普通机器上，每秒处理数万个请求<br>高并发支持。采用异步IO + 线程池的方式，在普通机器上，数十万并发<br>支持HTTP长连和WebSocket</p></blockquote><p><strong>2）HTTP Client：</strong></p><blockquote><p>keep-alive：极端情况下，keep-alive可提高一倍性能<br>异步IO + 线程池<br>API 友好</p></blockquote><p><strong>2.0.0 版本修改纪录：</strong></p><blockquote><p>增加了高性能Timer<br>重新设计了client的API，支持同步／异步调用，两者API几乎一样，方便切换<br>Client实现了TCP链路复用（keep-alive)，对服务端应用来说，可提高不少性能<br>重新设计，统一了WebSocket和HTTP长连/Streaming 的API，可使对不支持WebSocket的客户端，轻松降级到HTTP长连。<br>WebSocket支持收发二进制帧</p></blockquote><p><code>http-kit</code> 力争做到<code>API</code>友好，性能强悍，实现简单，文档完善。</p><p><strong>示例1：</strong></p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">ns</span></span> myClojure.syntax.httpkit2  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="symbol">:use</span> org.httpkit.server))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> app [req]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  {<span class="symbol">:status</span>  <span class="number">200</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">   <span class="symbol">:headers</span> {<span class="string">"Content-Type"</span> <span class="string">"text/html"</span>}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">   <span class="symbol">:body</span>    <span class="string">"hello ithomer.net"</span>})  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">(<span class="name">run-server</span> app {<span class="symbol">:ip</span> <span class="string">"172.27.22.21"</span> <span class="symbol">:port</span> <span class="number">8888</span> <span class="symbol">:thread</span> <span class="number">10</span>})  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> <span class="string">"look at: http://172.27.22.21:8888"</span>)</span></pre></td></tr></tbody></table></figure><p><strong>控制台输出：</strong></p><p>look at: <a href="http://172.27.22.21:8888" target="_blank" rel="external nofollow noreferrer noopener">http://172.27.22.21:8888</a>        # 指定了IP地址后，访问 <a href="http://localhost:8888" target="_blank" rel="external nofollow noreferrer noopener">http://localhost:8888</a> 将访问不到</p><p>访问地址：<a href="http://172.27.22.21:8888" target="_blank" rel="external nofollow noreferrer noopener">http://172.27.22.21:8888</a></p><p><img alt="clojure_http_kit_01.png" data-src="/static/images/clojure/clojure_http_kit_01.png" class="lazyload"></p><p><strong>示例 2：</strong></p><p><strong>代码：</strong></p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; clojure connect to mysql  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; ithomer.net  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 2013.12.10  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">ns</span></span> myClojure.syntax.httpkit3  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  (<span class="symbol">:use</span> [compojure.route <span class="symbol">:only</span> [files not-found]]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        [compojure.handler <span class="symbol">:only</span> [site]]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        [compojure.core <span class="symbol">:only</span> [defroutes GET POST DELETE ANY context]]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        [org.httpkit.server])  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  (<span class="symbol">:require</span> [compojure.route <span class="symbol">:as</span> route]))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> show-landing-page [req] <span class="comment">;; ordinary clojure function, accepts a request map, returns a response map  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">;; return landing page's html string. possible template library:  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">;; mustache (https://github.com/shenfeng/mustache.clj, https://github.com/fhd/clostache...)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">;; enlive (https://github.com/cgrand/enlive)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">;; hiccup(https://github.com/weavejester/hiccup)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">println</span> <span class="string">"&lt;h1&gt;Hello World&lt;/h1&gt;"</span>)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  )  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> update-userinfo [req]          <span class="comment">;; ordinary clojure function  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">let</span></span> [user-id (<span class="name"><span class="builtin-name">-&gt;</span></span> req <span class="symbol">:params</span> <span class="symbol">:id</span>)    <span class="comment">; param from uri  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        password (<span class="name"><span class="builtin-name">-&gt;</span></span> req <span class="symbol">:params</span> <span class="symbol">:password</span>)] <span class="comment">; form param  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">       (<span class="name">println</span> user-id password)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    ))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> get-user-by-id [req]          <span class="comment">;; ordinary clojure function  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">let</span></span> [user-id (<span class="name"><span class="builtin-name">-&gt;</span></span> req <span class="symbol">:params</span> <span class="symbol">:id</span>)    <span class="comment">; param from uri  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        password (<span class="name"><span class="builtin-name">-&gt;</span></span> req <span class="symbol">:params</span> <span class="symbol">:password</span>)] <span class="comment">; form param  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">       (<span class="name">println</span> user-id password)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    )  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  )  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">(<span class="name">defroutes</span> all-routes  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"> (<span class="name">GET</span> <span class="string">"/"</span> [] show-landing-page)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">context</span> <span class="string">"/user/:id"</span> []  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">           (<span class="name">GET</span> / [] get-user-by-id)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">           (<span class="name">POST</span> / [] update-userinfo))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">route/not-found</span> <span class="string">"&lt;p&gt;Page not found.&lt;/p&gt;"</span>))    <span class="comment">;; all other, return 404  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">(<span class="name">run-server</span> (<span class="name">site</span> #'all-routes) {<span class="symbol">:port</span> <span class="number">8888</span>})</span></pre></td></tr></tbody></table></figure><p>运行后，访问网址： <a href="http://172.27.22.21:8888" target="_blank" rel="external nofollow noreferrer noopener">http://172.27.22.21:8888</a></p><p><img alt="clojure_http_kit_02.png" data-src="/static/images/clojure/clojure_http_kit_02.png" class="lazyload"></p><p>控制台打印输出：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></pre></td></tr></tbody></table></figure><p>参考推荐：<br><a href="http://http-kit.org/server.html" target="_blank" rel="external nofollow noreferrer noopener">http-kit server（官方）</a><br><a href="https://github.com/weavejester/compojure" target="_blank" rel="external nofollow noreferrer noopener">compojure（github）</a><br><a href="http://www.oschina.net/code/snippet_583336_17931" target="_blank" rel="external nofollow noreferrer noopener">http-kit做高性能 HTTP 反向代理</a><br><a href="http://blog.csdn.net/sunboy_2050/article/details/17249073" target="_blank" rel="external nofollow noreferrer noopener">Clojure 学习入门（10）—— httpkit</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Http-kit&lt;/code&gt; 是主要由&lt;code&gt;Java&lt;/code&gt; 和 &lt;code&gt;Clojure&lt;/code&gt;开发，为&lt;code&gt;Clojure&lt;/code&gt;定制的零依赖的&lt;code&gt;HTTP lib&lt;/code&gt;，仅用3000多行代码，实现了高性能 &lt;code&gt;Server&lt;/code&gt;，&lt;code&gt;Client，Timer&lt;/code&gt;。代码量少，实现简单，对&lt;code&gt;Hacker&lt;/code&gt;友好。&lt;/p&gt;
&lt;p&gt;在普通的PC上进行性能测试时，&lt;code&gt;http-kit&lt;/code&gt; server每秒能处理数万个请求，并能轻松保持数十万并发，每个连接消耗几k内存，并发数仅与内存大小有关，高并发不影响 &lt;code&gt;latency&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="httpkit" scheme="http://notes.seirhsiao.com/tags/httpkit/"/>
    
  </entry>
  
  <entry>
    <title>几分钟内学习clojure宏</title>
    <link href="http://notes.seirhsiao.com/posts/8b27109d/"/>
    <id>http://notes.seirhsiao.com/posts/8b27109d/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:50:36.819Z</updated>
    
    <content type="html"><![CDATA[<p>和所有Lisp一样，Clojure内在的同构性使得你可以穷尽语言的特性，编写生成代码的子过程——“宏”。宏是一种按需调制语言的强大方式。</p><a id="more"></a><p>小心！可以用函数完成的事用宏去实现可不是什么好事。你应该仅在需要控制参数是否或者何时<code>eval</code>的时候使用宏。</p><p>你应该熟悉<code>Clojure</code>.确保你了解几分钟学C<code>lojure</code>中的所有内容。</p><p>使用defmacro定义宏。宏应该输出一个可以作为clojure代码演算的列表。</p><p>以下宏的效果和直接写(reverse “Hello World”)一致。</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defmacro</span></span> my-first-macro []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">list</span></span> reverse <span class="string">"Hello World"</span>))</span></pre></td></tr></tbody></table></figure><p>使用<code>macroexpand</code>或<code>macroexpand-1</code>查看宏的结果。</p><p><strong>注意：</strong> – 调用需要引用。</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">macroexpand</span></span> '(<span class="name">my-first-macro</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; -&gt; (#&lt;core$reverse clojure.core$reverse@xxxxxxxx&gt; "Hello World")</span></span></pre></td></tr></tbody></table></figure><p>你可以直接<code>eval macroexpand</code>的结果</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">eval</span></span> (<span class="name"><span class="builtin-name">macroexpand</span></span> '(<span class="name">my-first-macro</span>)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; -&gt; (\d \l \o \r \W \space \o \l \l \e \H)</span></span></pre></td></tr></tbody></table></figure><p>不过一般使用以下形式，更简短，更像函数：</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name">my-first-macro</span>)  <span class="comment">; -&gt; (\d \l \o \r \W \space \o \l \l \e \H)</span></span></pre></td></tr></tbody></table></figure><p>创建宏的时候可以使用更简短的引用形式来创建列表</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defmacro</span></span> my-first-quoted-macro []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  '(<span class="name"><span class="builtin-name">reverse</span></span> <span class="string">"Hello World"</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">macroexpand</span></span> '(<span class="name">my-first-quoted-macro</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; -&gt; (reverse "Hello World")</span></span></pre></td></tr></tbody></table></figure><p><strong>注意：</strong> – <code>reverse</code>不再是一个函数对象，而是一个符号。</p><p>宏可以传入参数。</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defmacro</span></span> inc2 [arg]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">list</span></span> + <span class="number">2</span> arg))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(<span class="name">inc2</span> <span class="number">2</span>) <span class="comment">; -&gt; 4</span></span></pre></td></tr></tbody></table></figure><p>不过，如果你尝试配合使用引用列表，会导致错误，因为参数也会被引用。</p><p>为了避免这个问题，<code>clojure</code>提供了引用宏的另一种方式：<code>`</code></p><p>在<code>`</code>之内，你可以使用<code>~</code>获得外圈作用域的变量。</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defmacro</span></span> inc2-quoted [arg]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  `(<span class="name"><span class="builtin-name">+</span></span> <span class="number">2</span> ~arg))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(<span class="name">inc2-quoted</span> <span class="number">2</span>)</span></pre></td></tr></tbody></table></figure><p>你可以使用通常的析构参数。用~@展开列表中的变量。</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defmacro</span></span> unless [arg &amp; body]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  `(<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">not</span></span> ~arg)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     (<span class="name"><span class="builtin-name">do</span></span> ~@body))) <span class="comment">; 别忘了 do!</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">macroexpand</span></span> '(<span class="name">unless</span> <span class="literal">true</span> (<span class="name"><span class="builtin-name">reverse</span></span> <span class="string">"Hello World"</span>)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; -&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; (if (clojure.core/not true) (do (reverse "Hello World")))</span></span></pre></td></tr></tbody></table></figure><p>当第一个参数为假时，(<code>unless</code>)会演算、返回主体。<br>否则返回<code>nil</code>。</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name">unless</span> <span class="literal">true</span> <span class="string">"Hello"</span>) <span class="comment">; -&gt; nil</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name">unless</span> <span class="literal">false</span> <span class="string">"Hello"</span>) <span class="comment">; -&gt; "Hello"</span></span></pre></td></tr></tbody></table></figure><p>需要小心，宏会搞乱你的变量</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defmacro</span></span> define-x []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  '(<span class="name"><span class="builtin-name">do</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     (<span class="name"><span class="builtin-name">def</span></span> x <span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     (<span class="name"><span class="builtin-name">list</span></span> x)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> x <span class="number">4</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name">define-x</span>) <span class="comment">; -&gt; (2)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">list</span></span> x) <span class="comment">; -&gt; (2)</span></span></pre></td></tr></tbody></table></figure><p>使用<code>gensym</code>来获得独有的标识符</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">gensym</span></span> 'x) <span class="comment">; -&gt; x1281 (or some such thing)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defmacro</span></span> define-x-safely []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">let</span></span> [sym (<span class="name"><span class="builtin-name">gensym</span></span> 'x)]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    `(<span class="name"><span class="builtin-name">do</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">       (<span class="name"><span class="builtin-name">def</span></span> ~sym <span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">       (<span class="name"><span class="builtin-name">list</span></span> ~sym))))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> x <span class="number">4</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">(<span class="name">define-x-safely</span>) <span class="comment">; -&gt; (2)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">list</span></span> x) <span class="comment">; -&gt; (4)</span></span></pre></td></tr></tbody></table></figure><p>你可以在<code>`</code>中使用 <code>#</code> 为每个符号自动生成<code>gensym</code></p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defmacro</span></span> define-x-hygenically []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  `(<span class="name"><span class="builtin-name">do</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     (<span class="name"><span class="builtin-name">def</span></span> x# <span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     (<span class="name"><span class="builtin-name">list</span></span> x#)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> x <span class="number">4</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name">define-x-hygenically</span>) <span class="comment">; -&gt; (2)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">list</span></span> x) <span class="comment">; -&gt; (4)</span></span></pre></td></tr></tbody></table></figure><p>通常会配合宏使用帮助函数。<br>让我们创建一些帮助函数来支持（无聊的）算术语法：</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">declare</span></span> inline-2-helper)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> clean-arg [arg]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">seq?</span></span> arg)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">inline-2-helper</span> arg)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    arg))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> apply-arg</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"Given args [x (+ y)], return (+ x y)"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  [val [op arg]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">list</span></span> op val (<span class="name">clean-arg</span> arg)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> inline-2-helper</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  [[arg1 &amp; ops-and-args]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">let</span></span> [ops (<span class="name"><span class="builtin-name">partition</span></span> <span class="number">2</span> ops-and-args)]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    (<span class="name"><span class="builtin-name">reduce</span></span> apply-arg (<span class="name">clean-arg</span> arg1) ops)))</span></pre></td></tr></tbody></table></figure><p>在创建宏前，我们可以先测试</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name">inline-2-helper</span> '(<span class="name">a</span> + (<span class="name">b</span> - <span class="number">2</span>) - (<span class="name">c</span> * <span class="number">5</span>))) <span class="comment">; -&gt; (- (+ a (- b 2)) (* c 5))</span></span></pre></td></tr></tbody></table></figure><p>然而，如果我们希望它在编译期执行，就需要创建宏</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defmacro</span></span> inline-2 [form]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">inline-2-helper</span> form))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">macroexpand</span></span> '(<span class="name">inline-2</span> (<span class="number">1</span> + (<span class="number">3</span> / <span class="number">2</span>) - (<span class="number">1</span> / <span class="number">2</span>) + <span class="number">1</span>)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; -&gt; (+ (- (+ 1 (/ 3 2)) (/ 1 2)) 1)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name">inline-2</span> (<span class="number">1</span> + (<span class="number">3</span> / <span class="number">2</span>) - (<span class="number">1</span> / <span class="number">2</span>) + <span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; -&gt; 3 (事实上，结果是3N, 因为数字被转化为带/的有理分数）</span></span></pre></td></tr></tbody></table></figure><p><strong>扩展阅读</strong><br><a href="http://www.braveclojure.com/writing-macros/" target="_blank" rel="external nofollow noreferrer noopener">Clojure for the Brave and True系列的编写宏</a><br><a href="http://clojure.org/macros" target="_blank" rel="external nofollow noreferrer noopener">官方文档：</a><br><a href="http://dunsmor.com/lisp/onlisp/onlisp_12.html" target="_blank" rel="external nofollow noreferrer noopener">何时使用宏？</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;和所有Lisp一样，Clojure内在的同构性使得你可以穷尽语言的特性，编写生成代码的子过程——“宏”。宏是一种按需调制语言的强大方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Clojure 学习 —— macro</title>
    <link href="http://notes.seirhsiao.com/posts/c527cf93/"/>
    <id>http://notes.seirhsiao.com/posts/c527cf93/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:47:58.362Z</updated>
    
    <content type="html"><![CDATA[<p>clojure macro宏在运行之前机械展开，定义宏相当于给语言增加新特性，写宏的<strong>原则</strong>： </p><blockquote><p>能写成函数就不要用宏（因为写宏没有写函数简单直观，容易写错，需要先在 REPL 中测试一番）<br>只有不得不用时才用宏（性能要求高时比函数调用快，或者需要“代码&lt;-&gt;数据”相互转换）<br>精心设计的宏调用比函数调用更 DSL（如实现控制结构、传递 Java方法） </p></blockquote><a id="more"></a><p>在clojure的宏里我们主要会用到这么几个符号，<br><code>`</code>表示syntax quote（语法引述）– 防止宏内部的形式求值。形式：Literals，Composite Forms，Symbols，Special Forms。<br><code>'</code>表示quote（引述）– 防止形式求值。<br><code>~</code>表示unquote（反引述）– 用于语法引述内部，关闭引述，对所指处的形式求值。<br><code>~@</code>表示splicing unquote（拼接反引述）– 与反引述类似，将多个形式（列表）最外面的括号去掉拼接到语法引述当中求值。</p><p>Clojure <code>'</code> <code>`</code>区别在于<strong>Syntax-quote</strong> (<code>`</code>)会进行symbol的解析。<br>详细说明下。如果某段代码前面加了’就表示这段代码被quote而不会去求值了，而<code>`</code>的syntax quote则表示会把相应的变量变成有namespace的形式。</p><p><strong>示例1：</strong></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> '(<span class="name">foo</span> bar)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(foo bar)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> `(<span class="name">foo</span> bar)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(user/foo user/bar)</span></pre></td></tr></tbody></table></figure><p><code>~</code>必须在<code>`</code>的后面，并且<code>~</code>的数量不能超过<code>`</code>的数量，<code>~</code>是用来将变量的值替换到相应位置<br><strong>示例2：</strong></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> a <span class="number">123</span>)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#'user/a</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> `(<span class="name"><span class="builtin-name">def</span></span> b ~a)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(def user/b 123)</span></pre></td></tr></tbody></table></figure><p>可以看到<del>a被替换为a的值123了，而`</del>@<code>的作用和</code><del><code>类似，不过</code></del>@`不但会替换掉值并且会把括号去掉<br><strong>示例3：</strong></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> c [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>])</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#'user/c</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> `(<span class="name"><span class="builtin-name">def</span></span> d [~@c])</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(def user/d [1 2 3])</span></pre></td></tr></tbody></table></figure><h3 id="宏与函数"><a href="#宏与函数" class="headerlink" title="宏与函数"></a>宏与函数</h3><p>那么几个符号我们都说清楚了，再说defmacro的作用就是在代码编译的时候，会把defmacro当作是函数运行一次，并且把这个的返回结果替换到原有的位置上去，就像这样<br><strong>示例4：</strong></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defmacro</span></span> t1 [] (<span class="name"><span class="builtin-name">let</span></span> [a1 (<span class="name"><span class="builtin-name">+</span></span> <span class="number">1</span> <span class="number">1</span>)] `(<span class="name"><span class="builtin-name">defn</span></span> cc [] println ~a1)))</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#'user/t1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">t1</span>)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">#'user/cc</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">cc</span>)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">2</span></pre></td></tr></tbody></table></figure><p><strong>参数不求值</strong></p><p>看上去宏和函数还是很相似的，为什么需要有宏这么个东西呢，首先我们需要注意的是，传给宏的代码是不会求值的，这点和函数非常不同，函数传的参数都是先求值再去做函数运算，看下面的例子<br><strong>示例5：</strong></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defn</span></span> aa [] (<span class="name">println</span> <span class="string">"aa"</span>) <span class="number">1</span>)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#'user/aa</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defn</span></span> bb [] (<span class="name">println</span> <span class="string">"bb"</span>) <span class="number">2</span>)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">#'user/bb</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defn</span></span> cc [c a b] (<span class="name"><span class="builtin-name">if</span></span> c a b))</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">#'user/cc</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defmacro</span></span> dd [c a b] (<span class="name"><span class="builtin-name">if</span></span> c a b))</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">#'user/dd</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">cc</span> <span class="literal">true</span> (<span class="name">aa</span>) (<span class="name">bb</span>))</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">aa</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">bb</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">dd</span> <span class="literal">true</span> (<span class="name">aa</span>) (<span class="name">bb</span>))</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">aa</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">1</span></pre></td></tr></tbody></table></figure><p>因为函数的参数是先求值的，所以调用cc的时候bb也被运行，这不是我们所希望的，我们所希望的是像dd那样只去执行aa，而不去执行bb，所以这里就需要用宏了。</p><p>还有一个宏和函数的重要的不同是宏是在编译代码的时候运行的，运行一次之后就会把宏的返回值替换到代码的相应位置了。所以宏的话其实更像是元编程一类的东西，用代码去生成代码。</p><p><strong>示例6：</strong></p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 宏正确写法  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defmacro</span></span> op [x f1 y f2 z]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">list</span></span> f2 z (<span class="name"><span class="builtin-name">list</span></span> f1 x y)))        </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name">op</span> <span class="number">5</span> + <span class="number">2</span> * <span class="number">10</span>))                   <span class="comment">;; 70  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">macroexpand</span></span> '(<span class="name">op</span> <span class="number">5</span> + <span class="number">2</span> * <span class="number">10</span>)))                     <span class="comment">;; (* 10 (+ 5 2))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">macroexpand-1</span></span> '(<span class="name">op</span> <span class="number">5</span> + <span class="number">2</span> * <span class="number">10</span>)))                   <span class="comment">;; (* 10 (+ 5 2))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name">clojure.walk/macroexpand-all</span> '(<span class="name">op</span> <span class="number">5</span> + <span class="number">2</span> * <span class="number">10</span>)))    <span class="comment">;; (* 10 (+ 5 2))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 宏错误写法  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defmacro</span></span> op2 [x f1 y f2 z]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  ( f2 z (<span class="name">f1</span> x y)))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name">op2</span> <span class="number">5</span> + <span class="number">2</span> * <span class="number">10</span>))                  <span class="comment">;; 2  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">macroexpand</span></span> '(<span class="name">op2</span> <span class="number">5</span> + <span class="number">2</span> * <span class="number">10</span>)))                    <span class="comment">;; 2  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">macroexpand-1</span></span> '(<span class="name">op2</span> <span class="number">5</span> + <span class="number">2</span> * <span class="number">10</span>)))                  <span class="comment">;; 2  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name">clojure.walk/macroexpand-all</span> '(<span class="name">op2</span> <span class="number">5</span> + <span class="number">2</span> * <span class="number">10</span>)))   <span class="comment">;; 2  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 不使用宏  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> op3 [x f1 y f2 z]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  ( f2 z (<span class="name">f1</span> x y)))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name">op3</span> <span class="number">5</span> + <span class="number">2</span> * <span class="number">10</span>))                  <span class="comment">;; 70  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">macroexpand</span></span> '(<span class="name">op3</span> <span class="number">5</span> + <span class="number">2</span> * <span class="number">10</span>)))                    <span class="comment">;; (op3 5 + 2 * 10)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">macroexpand-1</span></span> '(<span class="name">op3</span> <span class="number">5</span> + <span class="number">2</span> * <span class="number">10</span>)))                  <span class="comment">;; (op3 5 + 2 * 10)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name">clojure.walk/macroexpand-all</span> '(<span class="name">op3</span> <span class="number">5</span> + <span class="number">2</span> * <span class="number">10</span>)))   <span class="comment">;; (op3 5 + 2 * 10)</span></span></pre></td></tr></tbody></table></figure><p>*<em>说明： *</em></p><p>正确的宏写法，需要添加 <code>lis</code>t，宏用<code>defmacro</code>定义，不用宏写法的函数用<code>defn</code>定义<br>调试宏，用<code>macroexpand</code>展开</p><h3 id="宏符号"><a href="#宏符号" class="headerlink" title="宏符号"></a>宏符号</h3><table><thead><tr><th>符号</th><th align="center">描述</th></tr></thead><tbody><tr><td>`</td><td align="center">原原本本地直译过去，不用`，let语句不被翻译，例如: (let [datastr ‘{:a 1 :b 2}])</td></tr><tr><td>~’</td><td align="center">后面的变量被直接翻译过去，例如：<code>(let [~'conn "meta"] (with-mongo ~'conn))</code></td></tr><tr><td>‘~</td><td align="center">变量名本身而非值，例如：<code>(defn f1 [x] (println '~x ":" ~x))  (let [a 10] (f1 a)) ;; a:10</code></td></tr><tr><td>~@</td><td align="center">表示多条语句</td></tr></tbody></table><p><strong>示例7：</strong></p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defmacro</span></span> debug [x] `(<span class="name">println</span> <span class="string">"---"</span> '~x <span class="string">":"</span> ~x))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [a <span class="number">10</span>] (<span class="name">debug</span> a))             <span class="comment">;; --- a : 10</span></span></pre></td></tr></tbody></table></figure><p><strong>说明：</strong></p><p><code>'~x  显示变量名，即a</code></p><p><code>~x 解析为变量值，即a的值 10</code></p><p><strong>示例8：</strong></p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> make-connection [x] (<span class="name">println</span> <span class="string">"in make-connection = "</span> x) x)    <span class="comment">;; meta  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> with-mongo [x] (<span class="name">println</span> <span class="string">"in with-mongo = "</span> x))   <span class="comment">;; meta  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defmacro</span></span> with-dict  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"连接到 meta库的 dict表进行操作"</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  [&amp; body]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  `(<span class="name"><span class="builtin-name">let</span></span> [~'dbname <span class="string">"meta"</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">         ~'tbname <span class="symbol">:dict</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">         ~'conn (<span class="name">make-connection</span> ~'dbname)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">         ]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">     (<span class="name">with-mongo</span> ~'conn)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">     (<span class="name">println</span> <span class="string">"~'conn = "</span> ~'conn)   <span class="comment">;; meta  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">     (<span class="name">println</span> <span class="string">"~'tbname = "</span> ~'tbname)   <span class="comment">;; :dict  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">     (<span class="name">println</span> <span class="string">"~@body = "</span> ~@body)       <span class="comment">;; meta :dict db-test2' tbl-test2'  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">     ~@body))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [dbname 'db-test'   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      tbname 'tbl-test'  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      dbname2 'db-test2'   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">      tbname2 'tbl-test2'  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">      conn 'conn-sql'  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">      make-connection 'make-conn'  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">      body 'body1']  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">with-dict</span> dbname tbname dbname2 tbname2))</span></pre></td></tr></tbody></table></figure><p><strong>运行结果：</strong></p><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span> make-connection =  meta</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span> <span class="keyword">with</span>-mongo =  meta</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">~<span class="string">'conn =  meta</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="string">~'</span>tbname =  <span class="symbol">:dict</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">~<span class="variable">@body</span> =  meta <span class="symbol">:dict</span> db-test2<span class="string">' tbl-test2'</span></span></pre></td></tr></tbody></table></figure><p><strong>说明：</strong></p><p><code>make-connection</code> 和 <code>with-mongo</code> 是定义的函数，后面传递的是参数，使用 <code>~'</code>修饰直接翻译过去，即字符串传字符串，<code>:dict</code> 键值也传键值</p><p><code>with-dict</code> 传递多个参数给<code>body</code>，其中 <code>dbname tbname</code> 在<code>with-dict</code>中被重新赋值，因此打印出的结果也为赋值后的最新结果</p><h3 id="macro的核心作用"><a href="#macro的核心作用" class="headerlink" title="macro的核心作用"></a>macro的核心作用</h3><p>由于<code>macro</code>接收的参数可以很复杂，而且不求值，因此可以接收<code>list</code>，在内部转换，加工后执执行，也可以接收完全不是<code>lisp</code>的语法，在内部转换成<code>clojure</code>能执行的<code>list</code>。<br>这样可以创建自己的<code>DSL</code>，而把clojure宏实现为<code>DSL</code>解析器。</p><p>特点是允许在Clojure <code>evaluate</code>你的<code>list</code>之前，你能够像处理函数一样的处理它, 但是不<code>evaluate</code>。</p><p>如果你想把一个表达式作为参数传递给函数，并要求这个参数不求值，这是做不到的。比如下面的函数定义会报错：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> ignore-last-operand</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  [function-call]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (butlast function-call))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">  #_=&gt;</span><span class="clojure">   #_=&gt; </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> CompilerException java.lang.RuntimeException: Too many arguments to def, compiling:(/tmp/form-init3734404425586418360.clj:1:1)</span></span></pre></td></tr></tbody></table></figure><p>本意是<code>ignore-last-operand</code>接收一个list参数，但是不求值，在<code>body</code>运行的时候才进行求值，而且要忽略list的最后一个<code>symbol</code>.</p><p>这种情况需要使用宏了。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">defmacro</span></span> ignore-last-operand</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  [function-call]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (butlast function-call))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">  #_=&gt;</span><span class="clojure">   #_=&gt; #'user/ignore-last-operand</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">ignore-last-operand</span> (<span class="name"><span class="builtin-name">+</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">10</span>))</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">3</span></pre></td></tr></tbody></table></figure><p>和C的宏有点像，不过C的宏是在预编译阶段做文本替换，还是弱了点。不像lisp可以在运行时随意使用宏。</p><h3 id="用macroexpand检查返回的list"><a href="#用macroexpand检查返回的list" class="headerlink" title="用macroexpand检查返回的list"></a>用macroexpand检查返回的list</h3><p>上面的例子中，其实经过了去除最后一个symbol，然后再对余下的list求值的过程。</p><p><code>(+ 1 2 10) -&gt; (+ 1 2) -&gt; 3</code></p><p>要想知道最后求值结果出来前的<code>list</code>，可以使用<code>macroexpand</code>. 注意要配合使用’ 表示不要求值。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">macroexpand</span></span> '(<span class="name">ignore-last-operand</span> (<span class="name"><span class="builtin-name">+</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">10</span>)))</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(+ 1 2)</span></pre></td></tr></tbody></table></figure><p>这样就可以显示宏返回的<code>list</code>，而不是求值。</p><h3 id="宏的语法"><a href="#宏的语法" class="headerlink" title="宏的语法"></a>宏的语法</h3><p><code>(defmacro 宏名 描述字符串 {版本说明} [参数列表] (body1) (body2) (bodyN))</code></p><p>一个宏可以与多个<code>body</code>，这些<code>body</code>有点像C++里面的重载函数，根据参数数目的不同而决定运行哪一个<code>body</code></p><p>比如0参数<code>body</code>可以写成这样</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">([] <span class="literal">true</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;1个参数写成这样</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">([x] x)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;多个参数这样</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">([x &amp; next]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">   `(<span class="name"><span class="builtin-name">let</span></span> [and# ~x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      (if and# (and ~@next) and#))))</span></pre></td></tr></tbody></table></figure><p><strong>注意</strong> <code>&amp; next</code> 是获取余下的的参数, 因为<code>&amp;</code>左边出现了一个<code>x</code>, 所以<code>next</code>被绑定为余下的参数。</p><h3 id="常用宏"><a href="#常用宏" class="headerlink" title="常用宏"></a>常用宏</h3><p>** <code>-&gt;</code> ** 宏改变从右到左的阅读方式</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> read-resource</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"Read a resource into a string"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  [path]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">read-string</span> (<span class="name"><span class="builtin-name">slurp</span></span> (<span class="name">clojure.java.io/resource</span> path))))</span></pre></td></tr></tbody></table></figure><p>这个函数运算的时候会先从最右边的（因为也是最里面）的<code>list</code>开始求值，<code>path</code> -&gt; <code>(clojure...)</code> -&gt; <code>(slurp...)</code> -&gt; <code>(read-string ...)</code>, 然后往外层层求值。通过-&gt;宏可以将最先求值的放在最上面，写成这样。</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> read-resource</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  [path]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">-&gt;</span></span> path</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      clojure.java.io/resource</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      slurp</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      read-string))</span></pre></td></tr></tbody></table></figure><p>每个人有不同的偏好，有些人还是会这样用，为了减少括号的数目和符合自己从左到右或者从上到下的阅读习惯。</p><p><strong><code>binding</code>宏</strong><br>binding宏用来创建线程专属的变量，在多线程中很常用。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> ^<span class="symbol">:dynamic</span> x <span class="number">1</span>)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> ^<span class="symbol">:dynamic</span> y <span class="number">1</span>)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">+</span></span> x y)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">binding</span> [x <span class="number">2</span> y <span class="number">3</span>]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">         (+ x y))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">5</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">+</span></span> x y)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">2</span></pre></td></tr></tbody></table></figure><p><strong><code>when</code>宏</strong><br>可以接受一堆参数，如果条件为真，这些参数都依次被求值，返回最后一个求值的结果。<code>when</code>的实现是用<code>if</code> 和 <code>do</code>。</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">macroexpand</span></span> '(<span class="name"><span class="builtin-name">when</span></span> boolean-expression</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">                expression-1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">                expression-2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">                expression-3))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; =&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">if</span></span> boolean-expression</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">do</span></span> expression-1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      expression-2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      expression-3))</span></pre></td></tr></tbody></table></figure><p>参考资料：<br><a href="http://blog.csdn.net/moyan_min/article/details/11530751" target="_blank" rel="external nofollow noreferrer noopener">Clojure 学习入门（11）—— 宏 macro</a><br><a href="http://www.cnblogs.com/me-sa/archive/2013/03/18/clojure-macro.html" target="_blank" rel="external nofollow noreferrer noopener">Clojure 宏 上篇</a><br><a href="http://www.isnowfy.com/clojure-macro/" target="_blank" rel="external nofollow noreferrer noopener">Clojure的宏</a><br><a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html" target="_blank" rel="external nofollow noreferrer noopener">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html</a><br><a href="http://orbbyrp.com/2012/06/lisp_first_step_macro.html" target="_blank" rel="external nofollow noreferrer noopener">http://orbbyrp.com/2012/06/lisp_first_step_macro.html</a><br><a href="http://www.cnblogs.com/me-sa/archive/2013/03/18/clojure-macro.html" target="_blank" rel="external nofollow noreferrer noopener">http://www.cnblogs.com/me-sa/archive/2013/03/18/clojure-macro.html</a><br><a href="http://clojure.org/cheatsheet" target="_blank" rel="external nofollow noreferrer noopener">http://clojure.org/cheatsheet</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;clojure macro宏在运行之前机械展开，定义宏相当于给语言增加新特性，写宏的&lt;strong&gt;原则&lt;/strong&gt;： &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;能写成函数就不要用宏（因为写宏没有写函数简单直观，容易写错，需要先在 REPL 中测试一番）&lt;br&gt;只有不得不用时才用宏（性能要求高时比函数调用快，或者需要“代码&amp;lt;-&amp;gt;数据”相互转换）&lt;br&gt;精心设计的宏调用比函数调用更 DSL（如实现控制结构、传递 Java方法） &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="macro" scheme="http://notes.seirhsiao.com/tags/macro/"/>
    
  </entry>
  
  <entry>
    <title>clojure 相关的一些小贴士</title>
    <link href="http://notes.seirhsiao.com/posts/678ce1cb/"/>
    <id>http://notes.seirhsiao.com/posts/678ce1cb/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:48:52.200Z</updated>
    
    <content type="html"><![CDATA[<h2 id="clojure-相关的一些小贴士"><a href="#clojure-相关的一些小贴士" class="headerlink" title="clojure 相关的一些小贴士"></a>clojure 相关的一些小贴士</h2><h3 id="中文化问题"><a href="#中文化问题" class="headerlink" title="中文化问题"></a>中文化问题</h3><p>在终端中启动<code>clojure</code>后,输入中文字符串 例如 “你好”  是无法正常显示的.这是因为<code>clojure</code>是建立在<code>java</code>下的<br>所以需要对<code>java</code>运行环境进行设置.</p><a id="more"></a><p>具体做法:</p><ol><li><p>终端启动时添加 <code>-Dfile.encoding=UTF-8</code>  选项</p></li><li><p>在<code>shell</code>中添加环境变量   <code>export JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF-8</code></p></li></ol><p>任选起一就可以了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;clojure-相关的一些小贴士&quot;&gt;&lt;a href=&quot;#clojure-相关的一些小贴士&quot; class=&quot;headerlink&quot; title=&quot;clojure 相关的一些小贴士&quot;&gt;&lt;/a&gt;clojure 相关的一些小贴士&lt;/h2&gt;&lt;h3 id=&quot;中文化问题&quot;&gt;&lt;a href=&quot;#中文化问题&quot; class=&quot;headerlink&quot; title=&quot;中文化问题&quot;&gt;&lt;/a&gt;中文化问题&lt;/h3&gt;&lt;p&gt;在终端中启动&lt;code&gt;clojure&lt;/code&gt;后,输入中文字符串 例如 “你好”  是无法正常显示的.这是因为&lt;code&gt;clojure&lt;/code&gt;是建立在&lt;code&gt;java&lt;/code&gt;下的&lt;br&gt;所以需要对&lt;code&gt;java&lt;/code&gt;运行环境进行设置.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="tips" scheme="http://notes.seirhsiao.com/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>第二章 -- Clojure环境</title>
    <link href="http://notes.seirhsiao.com/posts/67729cfa/"/>
    <id>http://notes.seirhsiao.com/posts/67729cfa/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-07T00:54:57.451Z</updated>
    
    <content type="html"><![CDATA[<p>本文翻译自《practical clojure》版权归原作者所有,谢绝转载，禁止用于商业用途,违反者一切后果自负。</p><a id="more"></a><h1 id="Clojure的环境"><a href="#Clojure的环境" class="headerlink" title="Clojure的环境"></a>Clojure的环境</h1><p><a href="https://code.google.com/p/clojure-doc-en2ch/wiki/Chapter2" target="_blank" rel="external nofollow noreferrer noopener">翻译原文</a></p><h2 id="“Hello-World”-in-Clojure"><a href="#“Hello-World”-in-Clojure" class="headerlink" title="“Hello World” in Clojure"></a>“Hello World” in <code>Clojure</code></h2><p> 要立即开始在Clojure编程，只需打开一个<code>Clojure</code>的<code>REPL</code>，这代表阅读、赋值、打印、循环。<code>REPL</code>是一个简单而强大的的方式作为创建程序交互方式以及与运行中程序进行互动。<br> 开始REPL，最简单的方法是直接从系统的命令行进入。要这样做，找到你系统目录中的<code>Clojure</code>位置，一个包含”<code>Clojure-1.0.0.jar</code>”的文件，然后键入之后就可以开始<code>Clojure</code>：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">java –jar Clojure-1.0.0.jar</span></pre></td></tr></tbody></table></figure><p>这将启动Java虚拟机加载<code>Clojure</code>的环境,就在REPL开始时,你应该看到以下字样:</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span></span></pre></td></tr></tbody></table></figure><p>这表明，<code>REPL</code>准备接受输入。为了写你的第一个程序，只需在提示符下键入以下内容：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure">(<span class="name">println</span> “Hello World”)</span></span></pre></td></tr></tbody></table></figure><p>按回车键，REPL应该显示以下：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Hello World </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">nil </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span></span></pre></td></tr></tbody></table></figure><p>究竟在这儿发生了什么？首字母缩写的<code>REPL</code>本身提供了一个线索。</p><hr><p>  1.这是最简单的方式使用<code>Clojure</code>的，但它绝不是最好的。由于你的程序扩大规模和复杂性，你几乎肯定会需要移动到一个更完整的<code>Clojure</code>的开发环境，将提供帮助文件和类路径管理，语法高亮，调试，和其他的基本特征, 和其他插件存在于 <code>Emacs</code>，<code>VI</code>，<code>NetBeans</code>，<code>Eclipse</code>，<code>IntelliJ IDEA</code>和其他编辑器，它们提供这些和其他的功能。</p><hr><p> <em>Read</em>: Clojure的读取键入的内容，<code>（println “Hello World”）</code>，并解析它作为<code>Clojure</code>的形式，确保它是有效的<code>Clojure</code>的语法。</p><p> <em>Evaluate</em>:<code>Clojure</code>的编译器所提供的形式和赋值、求值。在这种情况下，它调用了一个<code>println</code>函数，一个文本参数，”<code>Hello World</code>”。<code>Clojure</code>执行函数,并按规范体系打印”<code>Hello World</code>”。</p><p> <em>Print</em>:<code>Clojure</code>打印的<code>println</code>函数是没有返回值的。在这种情况下，它是<code>nil</code>，(与<code>Java</code>的<code>null</code>是相同的，这意味这没有任何值，或者是”没有”[原文为”nothing”])，因为println不是一个有返回值的函数。</p><p> <em>Loop</em>: <code>Clojure</code>返回到输入提示，随时为您键入另一个形式。</p><p>这不同于大部分其他编程语言工作。在大多数语言的书写时,编译时和运行时的程序是非常不同的步骤。<code>Clojure</code>不允许你分开这些步骤，你应该想的，但大多数<code>Clojure</code>的程序员更愿意使用在REPL集成开发，书写，并在同一时间运行他们的代码。这样可以大大缩短开发时间。它允许开发者看到自己的代码做什么，立即在一个已经运行的程序的情况下，没有任何时间上的开销需要去停止程序，编辑代码，重新编译，并再次启动它，这种基本的，自上而下的编码风格很快就开始感觉极为自然，并且很快会感觉一个静态的开发环境缓慢和繁琐。</p><p>相比其他“脚本”语言也提供实时的赋值，然而，<code>Clojure</code>的联机(原文为on-the-fly)能力更加健壮。当在<code>REPL</code>赋值时，它不仅只是赋值，实际上是编译，添加到正在运行的程序上与之前的代码的程序状态相当。也不是REPL只有一个特殊的调试功能：动态代码始终是语言所固有的。这是完全可能的，而且并不少见，连接到一个远端Clojure的生产实例，打开REPL,检查应用程序的状态，诊断问题，并调试代码，修正错误，而且程序运行，停机代码修复。</p><p>从理论上来讲，它是可以打开一个REPL，从头开始写一个完整的，复杂程序，从观点根据讲，因为它没有停止或重新启动。</p><h2 id="Clojure的形式-Clojure-Froms"><a href="#Clojure的形式-Clojure-Froms" class="headerlink" title="Clojure的形式(Clojure Froms)"></a><code>Clojure</code>的形式(<code>Clojure Froms</code>)</h2><p>一个<code>Clojure</code>的程序的基本单位是不是行,关键字，或类，而是形式。在<code>Clojure</code>中，形式可以是任何单位代码可以被赋值并返回一个值。当您在REPL中键入什么东西时，它必须是一个有效的形式和<code>Clojure</code>的源文件包含了一连串形式。有四种形式的基本的品种。</p><h3 id="文字-Literals"><a href="#文字-Literals" class="headerlink" title="文字(Literals)"></a>文字(<code>Literals</code>)</h3><p>文字的形式解析自己。文字的例子是，你直接输入到代码的字符串，数字和字符。您可以验证，文字解析自己企图在REPL：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure">”I'm a string!” </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">I’m a string!</span></pre></td></tr></tbody></table></figure><p>当您键入一个简单的，双引号的字符串进行赋值，返回值是字符串本身。同样的事情，数字也是一样的。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> <span class="number">3</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">3</span></pre></td></tr></tbody></table></figure><h3 id="符号-Symbols"><a href="#符号-Symbols" class="headerlink" title="符号(Symbols)"></a>符号(<code>Symbols</code>)</h3><p>符号值的形式解析。它们可以被认为是大致类似变量，虽然这在技术上并不准确，因为他们实际上并没有同样的方式在大多数语言变量的变量。在<code>Clojure</code>，符号是用来识别函数的参数，和全局或局部定义的值。符号和他们的分析是在下面的章节详细讨论。</p><h3 id="复合形式-Composite-Forms"><a href="#复合形式-Composite-Forms" class="headerlink" title="复合形式(Composite Forms)"></a>复合形式(<code>Composite Forms</code>)</h3><p>复合形式使用对称的括号，括号或大括号，其他形式的群体。赋值时，其价值取决于什么类型的形式，括号内赋值一个<code>vector</code>和大括号到<code>map</code>。第4章详细讨论了这些类型。</p><p>在<code>Clojure</code>（和所有的<code>Lisp</code>）中，列出了赋值函数调用。当一个<code>list</code>赋值，它调用一个相同的函数，赋值操作以值的形式是从该函数的返回值。<code>list</code>中的第一项是要调用的函数，其余项目都作为传递给函数的参数。例如，Clojure的形式<strong>(A B C)</strong>，当赋值时，意思是调用A并且B和C作为它的参数。在其他编程语言可能写作<strong>A(B C)</strong>。</p><p>这似乎可能对一个没有Lisp背景的程序员很陌生。然而，在Clojure的能力范围内，优势是相当可观的。？整个程序都是集合构成的，集合中包含集合,以此类推,代码是数据，数据可以被看作代码。在第12章中，你会看到如何可以利用，很容易地创建和编写代码。</p><h3 id="特殊形式-Special-Forms"><a href="#特殊形式-Special-Forms" class="headerlink" title="特殊形式(Special Forms)"></a>特殊形式(<code>Special Forms</code>)</h3><p>特殊形式，是一个特定类型的复合形式。对于大多数用途，使用它们的函数调用非常相似。不同的是，第一种形式的一种特殊形式的，是不是某处定义一个函数，而是一种特殊形式的<code>Clojure</code>的内置。</p><p>特殊形式，是一个<code>Clojure</code>的程序最基本的构建模块，是用来控制程序流程，绑定<code>VAR</code>(变量)的，定义除其它外的函数。重要的是要记住的是，如函数调用，<code>list</code>中的第一种形式确定正在使用的一种特殊形式，在<code>list</code>中的其他形式的特殊形式的参数一样。为了能看到的例子中每个这些类型的形式，让我们做一个比较复杂的Hello World程序，你会使用两种形式，而不只是一个。在<code>REPL</code>中，键入以下命令，并按下<code>ENTER</code>：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> message <span class="string">"Hello, World!"</span>) </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">在下一个提示符下，键入以下内容：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">println</span> message) </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">您应该看到的第一个Hello World程序相同的输出：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Hello, World </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">nil</span></pre></td></tr></tbody></table></figure><p>这个简单的程序，只有两种形式，包含前面讨论的每种类型的形式。</p><p>分析第一种形式,<strong><code>(def message “Hello World!”)</code></strong>,您最先看到它是括号里。因此它是一个<code>list</code> 将作为一个函数的应用程序或一种特殊的形式进行赋值。List中的项目有3个: <strong><code>def</code></strong>,<strong>message</strong>,<strong><code>”Hello World!”</code></strong>。def是第一项，也就是所谓的函数或者是特殊形式，在这种情况下它是特殊形式，但是，它像一个函数，它需要2个参数var来定义，和值来绑定它，赋值，这种形式并创建一个变量，建立一个值绑定”Hello world!”符号message。</p><p>第二种形式<code>（println message）</code>也是一个<code>list</code>，这个时候它的正常函数的应用。它有两个组成部分形式，他们中的每一个符号。符号<code>println</code>解析为println函数，符号<code>message</code>解析为字符串“Hello World!”，因为在前面的形式确立了<code>VAR</code>绑定约束。</p><p>那么，最终的结果是与第一个Hello World程序相同的<code>println</code>函数的参数称为“Hello World!”</p><h2 id="编写和运行源文件-Writing-and-Running-Source-Files"><a href="#编写和运行源文件-Writing-and-Running-Source-Files" class="headerlink" title="编写和运行源文件(Writing and Running Source Files)"></a>编写和运行源文件(Writing and Running Source Files)</h2><p>由于REPL非常方便，在真实开发过程中，也会有保存源代码并使其能够重用并不需要重写代码的需要。CLOJURE当然也有这个功能。</p><p>按照惯例，<code>Clojure</code>的源代码文件的扩展名为<code>*.clj</code>。在一个正常的<code>Clojure</code>的程序，没有必要显式编译源文件，它们会被自动加载，因为它们是编译的，就像个体形式进入在<code>REPL</code>。如果您需要预编译<code>Clojure</code>的标准<code>Java</code>的<code>*. class</code>文件，（例如，运行在一个非标准的Java环境，如移动电话），它是完全可能的，并<code>Clojures AOT</code>（提前[Ahead Of Time]）编译处理功能。这些都是在第10章讨论。</p><p>要运行这个例子从一个<code>*.clj</code>文件的Hello World程序，创建一个新文件，名为“HELLO - world.clj”在任何纯文本编辑器，包含下面的代码清单2-1。</p><p> 清单2-1。 HELLO- world.clj</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> message1 <span class="string">"Hello, World!"</span>) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> message2 <span class="string">"I'm running Clojure code from a file."</span>) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> message1) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> message2)</span></pre></td></tr></tbody></table></figure><p>有两种方法运行此文件。最简单，最经常用于发展，打开一个<code>REPL</code>和键入以下（代<code>*.clj</code>文件的实际路径，并在按照与Java公约中使用正斜杠）：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">load-file</span> <span class="string">"c:/hello-world.clj"</span>)</span></span></pre></td></tr></tbody></table></figure><p> 你应该看到下面的输出：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Hello, World! </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">I'm running Clojure code from a file. </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">nil</span></pre></td></tr></tbody></table></figure><p><strong>load-file</strong>函数接受一个参数：一个文件系统路径的字符串表示。然后加载在路径中找到的文件，并执行该文件中的每个l<code>ist</code>顺序，就好像它已在<code>REPL</code>输入，并返回在文件的最后形式的返回值。你可以看到<code>nil</code>，<code>println</code>的返回值作为输出的最后一行。在文件中定义的所有符号都仍然可用。尝试输入在REPL文件中定义的一个符号，它能够解析绑定到它的的值：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> message<span class="number">1</span> </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">"Hello, World!"</span></pre></td></tr></tbody></table></figure><p>另一种方式来执行<code>Clojure</code>的文件是直接从系统的命令行。这种方法产生一个新的<code>Clojure</code>的运行时在一个新的<code>Java</code>虚拟机实例，然后立即载入选定的文件。这是正常运行<code>Clojure</code>的开发程序（除非你打包成<code>*. class</code>文件<code>Clojure</code>的一个jar包）的方法。要运行这样一个<code>Clojure</code>的文件，只需在命令行中输入以下内容：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">java –jar c:/clojure-1.0.0.jar c:/hello-world.clj</span></pre></td></tr></tbody></table></figure><p><code>Java</code>将其识别为一个Java标准调用。<strong>c:/clojure-1.0.0.jar</strong>，确保<code>Clojure</code>的运行时库是在当前的<code>CLASSPATH</code>。修改路径以反映您的<code>Clojure</code>的jar文件的实际位置与<code>Clojure</code>的安装。最后一个参数是你要运行的脚本的路径。</p><p>此命令启动<code>Clojure</code>的运行时，加载HELLO - world.clj的文件，并按顺序赋值给它们的形式。在这种情况下，您在系统控制台中看到的结果仅是那些打印到标准系统输出：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Hello, World! </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">I'm running Clojure code from a file.</span></pre></td></tr></tbody></table></figure><h2 id="变量、命名空间和环境-Vars-Namespaces-and-the-Environment"><a href="#变量、命名空间和环境-Vars-Namespaces-and-the-Environment" class="headerlink" title="变量、命名空间和环境(Vars, Namespaces, and the Environment)"></a>变量、命名空间和环境(<code>Vars</code>, <code>Namespaces</code>, and the Environment)</h2><p>正如在第一章提到，<code>Clojure</code>的程序是灵活的，基本的实体，它可以进化，而无需关闭和重新运行。这主要是由于<code>REPL</code>的存在，提供的能力，以赋值在现有程序的情况下的形式。但这个工作到底是如何呢？</p><p>当您启动<code>Clojure</code>的程序，通过开一个新的<code>REPL</code>或直接运行一个源文件，你正在创建一个新的全局环境。这种环境持续，一直到程序终止，并包含所有需要运行的程序，包括全局变量，（绑定的值的名称）的信息。参见图2-1，它被添加（或保留）的全局环境。之后被保留，它是从任何地方引用可用的，在相同的环境中。在Hello World示例，您创建了一个变量符号message绑定到一个字符串值，你可以看到这一点，并在以后使用。</p><p>变量可以使用def的一种特殊形式的符号定义和约束。它的语法如下：</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> var-name var-value)</span></pre></td></tr></tbody></table></figure><blockquote></blockquote><p> <code>var-name</code>是变量创建的名称，和<code>var-value</code>就是它的值。<code>var-value</code>可以是任何Clojure的形式，将赋值和由此产生的值绑定到了<code>var</code>。然后，每当<code>var-name</code>的符号在全局范围内的Clojure的环境中使用，它能够解析的<code>var-value</code>。</p><hr><p><strong>注意</strong>: 一定要以正确的顺序定义你的依赖。由于<code>Clojure</code>引用<code>var</code>方式，必须定义一个在var的引用符号，可以进行赋值。通常情况下，这不是一个问题，但它可以导致一些“陷阱”，如果你在REPL做了很多工作。由于我们经常会在代码中用不同的顺序来进行REPL的定义，又由于这些代码一旦被输入<code>REPL</code>后，这些代码在整个程序中都是一直有效的。在我们的工作中，你或许只会在停止了整个程序之后才会发现你定义过的依赖性（dependency ）失效了。这是一个很容易解决的问题，一旦我们注意了这一点，也是很容避免类似的错误的。但是这个问题确实给Clojure初学者们造成了很多的困惑。 </p><hr><p>图2-1  Clojure的环境<br><img alt="clojure_02_01.png" data-src="/static/images/clojure/clojure_02_01.png" class="lazyload"></p><h3 id="Are-Vars-Variables"><a href="#Are-Vars-Variables" class="headerlink" title="Are Vars Variables?"></a>Are Vars Variables?</h3><p>虽然他们有许多相似之处，<code>vars</code>并不像其他编程语言中的变量，最重要的是，一旦定义，他们不打算改变，起码，不作为一部分普通运行的程序。这是真的，如果你使用一个已经绑定的<code>var</code> <code>def</code>，其value将发生变化，后续赋值解析会以新的<code>value</code>为准。而这不是线程安全的，只能用DEF定义的全局符号了。可变的全局符号，将使您程序工作的一部分破坏，即使你可能可以得到它的运行。如果您需要使用多变的值作为你的程序的一部分，全局或以其他方式，你应该总是使用<code>Clojure</code>的线程安全的引用类型和重新定义符号。</p><p>这就是说，有一个很好的适当使用，重新定义现有的值：手动更新或改变一个程序运行时。这是<code>Clojure</code>的一种能力，重新绑定一个符号，它允许你建立或更改，而无需重新启动一个程序。当你做探索性编程时，重新绑定值是<code>Clojure</code>的优点。另一个例子可能是您的基于服务器的程序使用一个符号来存储一个特定的常量，就是说，<strong><code>max-users</code></strong>，并且您以后决定，该系统可以处理更多的用户，你应该碰到。在这种情况下，这是完全可以的重新定义符号的值，而无需重新启动程序。关键的一点是不依赖于方案的符号重新定义他们使用可变状态。在任何情况下多线程，这是极不安全的，它可能是很糟糕的表现，是在任何情况下破坏Clojure的做法。</p><hr><h2 id="符号和符号的解析-Symbols-and-Symbol-Resolution"><a href="#符号和符号的解析-Symbols-and-Symbol-Resolution" class="headerlink" title="符号和符号的解析(Symbols and Symbol Resolution)"></a>符号和符号的解析(Symbols and Symbol Resolution)</h2><p>在Clojure中符号是无处不在的(<code>Symbols</code>)，它值得让你花费一些时间来了解他们真正和它们是如何工作的。概括地说，一个符号，是一个标识符解析值。它们可以被定义在地方一级（例如，函数的参数或本地绑定），或全局（使用<code>vars</code>）。您看到任何关于<code>Clojure</code>代码，是没有文字或一个基本的语法字符（引号，括号，大括号，方括号，等）中看到的任何东西都可能是一个符号。这涵盖什么通常是认为在其他语言中的变量，但还一个很好的协议更多：</p><blockquote><ul><li>Clojure的所有函数名的符号。当一个函数被称为作为一个复合形式的一部分，它首先解析符号的功能，然后将其应用于。</li></ul></blockquote><blockquote><ul><li>大多数运算符（相比较而言，数学等）的符号，从而解决一个特别的、内置的、优化的函数。他们解决的和应用在一起作为额外的性能优化的函数的方式。</li></ul></blockquote><blockquote><ul><li>宏（<code>Macro</code>）名称是一种符号。在这不做详细，宏像函数，只有在编译时而不是运行时应用，请参阅第12章宏在深入讨论。</li></ul></blockquote><h3 id="符号名称（Symbol-Names）"><a href="#符号名称（Symbol-Names）" class="headerlink" title="符号名称（Symbol Names）"></a>符号名称（Symbol Names）</h3><p>符号名是区分大小写的，和用户定义的符号有以下限制：</p><blockquote><p>可以包含任何字母数字字符，字符<code>*</code>, <code>+</code>, <code>!</code>, <code>-</code>, <code>_</code>, and <code>?</code>.<br>不得以数字开头。<br>可能包含冒号字符：，不是在开始或结束的符号名，并可能不会重复。</p></blockquote><p>根据这些规则，合法符号名的例子包括符号名，symbol_name，symbol123，<em>symbol</em>, symbol! , symbol? , 和name+symbol. 非法符号名的例子123symbol, :symbol: , symbol//name, 等。</p><p>按照惯例，通常在Clojure符号名小写，划线字符（ <code>-</code> ）分隔的单词。如果一个符号是一个常量或全局程序设置，它往往开始和结束的星符号（<code>*</code>）。例如，一个程序可能定义 <code>（def *PI* 3.14159）</code>。</p><h3 id="符号的解析和范围（Symbol-Resolution-and-Scope）"><a href="#符号的解析和范围（Symbol-Resolution-and-Scope）" class="headerlink" title="符号的解析和范围（Symbol Resolution and Scope） ==="></a>符号的解析和范围（Symbol Resolution and Scope） ===</h3><p>当您在您的代码中使用一个符号名称，<code>Clojure</code>赋值给符号，并返回绑定到它的值。这样的解析是如何产生的，视符号范围而定，无论是用户定义的，或者是特殊形式和内置形式。<br><code>Clojure</code>的使用以下步骤解析符号：</p><blockquote><ul><li><code>Clojure</code>判断，如果该符号指向一种特殊的形式。如果是这样，并相应地使用。</li></ul></blockquote><blockquote><ul><li>其次，如果Clojure的检查符号是本地的绑定。通常情况下，本地绑定这意味着它是一个函数的参数，或<strong>let</strong>（第3章中讨论）定义。如果它找到一个本地的值，它将使用它。请注意，这意味着，如果有一个本地定义的符号和VAR具有相同的名称，赋值的符号名，将返回本地符号的值。局部符号覆盖相同的Vars。</li></ul></blockquote><blockquote><ul><li><code>Clojure</code>的搜索在全局环境中对一个var的名称的符号对应，并返回该值。</li></ul></blockquote><blockquote><ul><li>如果<code>Clojure</code>在前面的步骤中并未发现一个value的符号名称，就返回一个错误：<code>java.lang.Exception: unable to resolve symbol &lt;symbol&gt; in this context (NO_SOURCE_FILE:0)</code>. (未能解析符号在上下文中，<code>NO_SOURCE_FILE</code>部分将被替换为实际的文件名，除非你是在<code>REPL</code>运行。)</li></ul></blockquote><h3 id="命名空间Namespaces"><a href="#命名空间Namespaces" class="headerlink" title="命名空间Namespaces"></a>命名空间Namespaces</h3><p>当你使用<code>def</code>定义一个<code>var</code>时，你正在对该<code>value</code>定义一个全局绑定的符号名。然而，真正的全局变量和符号早就被称为是一个坏主意，在一个大程序，它是太容易在一个程序的一部分中定义，在不经意间与另一个发生碰撞，导致困难和极难发现错误。</p><p>出于这个原因，在<code>Clojure</code>中所有<code>vars</code>都在命名空间范围内的。每个var的一部分作为命名空间（有时是隐式显示的）当使用一个符号来指向一个<code>var</code>时，您可以用正斜杠符号（/）在符号前制定命名空间。</p><p>看到这，仔细看下，一个符号定义在REPL。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> first-name <span class="string">"Luke"</span>) </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#'user/first-name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> user/first-name </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">"Luke"</span></pre></td></tr></tbody></table></figure><p>请注意提示本身：<code>user=&gt;</code>。提示中的字符串user实际上指的是当前的命名空间。如果你工作在不同的命名空间，它会显示不同的东西。没用关于user的特殊命名空间，它不是一个特殊的，它只是个默认的。你实际上还没有定义，当你定义<code>user/first-name</code>然后就可以使用赋值的符号了。既然你已经在user空间了，使用first-name也可以工作。</p><h3 id="声明命名空间（Declaring-Namespaces）"><a href="#声明命名空间（Declaring-Namespaces）" class="headerlink" title="声明命名空间（Declaring Namespaces）"></a>声明命名空间（Declaring Namespaces）</h3><p>声明命名空间，使用ns的形式。<code>ns</code>需要大量的参数，其中一些比较高级的。最简单的形式，您可以传入一个参数，作为命名空间的名称。如果命名空间不存在，它会创建，并设置成当前命名空间，如果已经存在，它会切换到命名空间。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">ns</span></span> new-namespace) </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">nil </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">new-namespace=&gt;</span></span></pre></td></tr></tbody></table></figure><p>现在，当你定义一个变量时，将传入new-namespace的命名空间，而不是user。</p><h3 id="引用命名空间（Referencing-Namespaces）"><a href="#引用命名空间（Referencing-Namespaces）" class="headerlink" title="引用命名空间（Referencing Namespaces）"></a>引用命名空间（Referencing Namespaces）</h3><p>为了引用一个不同的命名空间中的<code>var</code>，只需使用其完整的名称。请遵守以下REPL会话:</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">def</span></span> my-number <span class="number">5</span>) </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#'user/my-number </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">ns</span></span> other-namespace) </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">nil </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">other-namespace=&gt;</span><span class="clojure"> my-number </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">java.lang.Exception: Unable to resolve symbol: my-number in this context... </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">other-namespace=&gt;</span><span class="clojure"> user/my-number </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">5</span></pre></td></tr></tbody></table></figure><p>在这里，你首先在默认的用户命名空间中定义一个<code>var</code>。然后，创建一个新的命名空间，并切换到它。当您尝试赋值my-nameber，它会导致一个错误：无法在当前命名空间中找到my-namber。然而，当您使用完全合格的名称，它解析了var，并传回你原来绑定到它的值。您只能使用完全合格的名称来赋值var。要定义一个命名空间内的一个符号，你必须确实你在命名空间中。</p><p>有时，如果你是严重依赖于另一个命名空间，它的完全限定每个引用您需要该命名空间中的一个<code>var</code>太麻烦了。对于这种情况，<code>Clojure</code>的提供这种功能。使一个命名空间“包括”（include），使用<strong>:use</strong> , *<em>ns *</em>参数。例如，申报进口Clojure的内置XML库，你可以做到这一点的所有符号的命名空间：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">ns</span></span> my-namespace </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   (:use clojure.xml)) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">my-namespace=&gt;</span></span></pre></td></tr></tbody></table></figure><p>现在，所有的XML相关的符号，已经在我的命名空间中了。<code>（:use clojure.xml）</code>的形式指定<code>clojure.xml</code>命名空间将被加载，还导入到我的命名空间中定义的符号。这也是非常有用的依赖管理，而不是要求您手动加载<code>clojure.xml</code>使用它之前，你可以使用<strong>:use</strong> 指定它作为一个命名空间声明的依赖。<code>Clojure</code>的命名空间声明的一部分，然后加载它，如果它不是已经加载，确保它始终是您的新的命名空间内。</p><p>除了<strong><code>:use</code></strong> ，<code>Clojure</code>的提供了另一种可以使用<strong><code>ns</code></strong>，<strong><code>:require</code>* *。用法与<code>:use</code>相同，区别在于，它不仅确保必要的命名空间加载，并导入没有应用的符号。您还可以使用</strong><code>:require</code>** 指定命名空间列表包括进来。在这里你包括<code>Clojure.xml</code>库及<code>clojure.set</code>：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">ns</span></span> my-namespace </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   (:require clojure.xml </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        clojure.set)) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">my-namespace=&gt;</span></span></pre></td></tr></tbody></table></figure><p>此外，您可以括在方括号的命名空间和使用<code>:as</code>关键字来指定一个较短的别名命名空间：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">ns</span></span> my-namespace </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   (:require [clojure.xml :as xml])) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">my-namespace=&gt;</span><span class="clojure"> xml/parse </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">my-namespace=&gt;</span><span class="clojure"> #&lt;xml$parse_<span class="number">7630</span> clojure.xml$parse_<span class="number">7630</span>@<span class="number">1484105</span>&gt;</span></span></pre></td></tr></tbody></table></figure><p>不用担心那些凌乱的值，它是作为clojure的一个函数的字符串表示形式，表明Clojure是能够解析<strong><code>xml/parse</code></strong> 符号的。</p><h3 id="构建源文件-Structuring-Source-Files"><a href="#构建源文件-Structuring-Source-Files" class="headerlink" title="构建源文件(Structuring Source Files) ==="></a>构建源文件(Structuring Source Files) ===</h3><p>如何使用命名空间来组织你的源代码，并保持组织样式？这不难。照惯例，每个Clojure的源文件有其自己的命名空间的一个ns应该是在任何<code>Clojure</code>的文件第一种形式的声明，这使得它易于管理的命名空间和文件。它也是类似于每一个Java公约类。事实上，它可能会帮助Java程序员想到，类的命名空间。它也可以像类一样将相互有关的代码分组到一起。</p><p>为了帮助<code>Clojure</code>的发现命名空间，引用<strong>:use</strong>或<strong>:require</strong>，是遵循一个特定的命名约定。在一个文件中声明的命名空间，必须在类路径的文件名称和位置相匹配。如果你有一个“<code>x/y/z.clj</code>”<code>Clojure</code>的源文件，它应该包含命名空间<code>x.y.z</code>的声明当你参考<code>x.y.z</code>，它会知道在哪个路径和文件搜索该命名空间。再次，这是非常相似的<code>Java</code>包结构。</p><h2 id="总结-Summary"><a href="#总结-Summary" class="headerlink" title="总结(Summary)"></a>总结(Summary)</h2><p>这是所有真正需要的知识运行<code>Clojure</code>的方案。当然，你将要学习用工具，以帮助使源文件更容易地管理和运行。特别是，类路径可能是痛苦的管理，<code>Eclipse</code>或<code>NetBeans</code>等工具可以减轻这一负担。大多数<code>Clojure</code>环境都提供了另一个有用的特性，那就是可以打开一个文件并选择性的执行一些单个的形式，而不是加载整个文件。这对敏捷开发、测试、和现有的应用程序调试是非常宝贵的。</p><p>要记住，无论你使用哪一种工具，重要的是，<code>Clojure</code>的方案包括完全的形式，其本身无论是文字，特殊形式，符号，或其他形式的复合。牢记这是朝着理解<code>Clojure</code>的程序结构的一个大步。</p><p>此外，重要的是理解的符号。符号是源代码中的标识符与实际值的手段，它是有助于清晰的把握，它们如何分配和得到解析。</p><p>常用的<code>var</code>与符号的结合。<code>var</code>代表了一个名字，一个在<code>Clojure</code>的环境<code>value</code>的约束与绑定，并通过命名空间范围内。</p><p>最后，较高水平，当一个程序一个源文件变得太大便分解成多个文件，并给每个文件一个单独的命名空间。然后，您可以使用的命名空间的依赖功能，以确保符号总是定义需要它们的地方。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      本文翻译自《practical clojure》版权归原作者所有,谢绝转载，禁止用于商业用途,违反者一切后果自负。
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="tips" scheme="http://notes.seirhsiao.com/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>如何同一台电脑配置多个git或github账号</title>
    <link href="http://notes.seirhsiao.com/posts/8bb3b77d/"/>
    <id>http://notes.seirhsiao.com/posts/8bb3b77d/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-07T00:54:29.129Z</updated>
    
    <content type="html"><![CDATA[<p>问题描述：<br>遇到了这样的需求，需要在一台电脑上同时使用多个git账户或两个github账号，负责不同的用途，所以搜索了一些文章，进行了一下实践。</p><a id="more"></a><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>所谓多个git账号，可能有两种情况:<br>① 我有多个github的账号，不同的账号对应不同的repo，需要push的时候自动区分账号。<br>② 我有多个git的账号，有的是github的，有的是gitcafe的，有的是gitlab的，不同账号对应不同的repo url，需要push的时候自动区分账号。</p><p>这两种情况的处理方法是一样的，分下面几步走:<br>先假设我有两个账号，一个是github上的，一个是gitcafe上面的。<br>先为不同的账号生成不同的ssh-key。</p><h3 id="一、生成并添加-GitHub-ssh-key"><a href="#一、生成并添加-GitHub-ssh-key" class="headerlink" title="一、生成并添加 GitHub ssh key"></a>一、生成并添加 GitHub ssh key</h3><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh-keygen -t rsa  -f ~<span class="regexp">/.ssh/id</span>_rsa_github -C <span class="string">"youremail@xxx.com"</span></span></pre></td></tr></tbody></table></figure><p>在Git Bash中执行命令根据提示一路回车，会在~/.ssh/目录下生成id_rsa_github和id_rsa_github.pub两个文件<br>用文本编辑器打开id_rsa_github.pub里的内容，在Github中添加SSH Keys</p><h3 id="二、生成并添加-GitCafe-ssh-key"><a href="#二、生成并添加-GitCafe-ssh-key" class="headerlink" title="二、生成并添加  GitCafe ssh key"></a>二、生成并添加  GitCafe ssh key</h3><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh-keygen -t rsa  -f ~<span class="regexp">/.ssh/id</span>_rsa_gitcafe -C <span class="string">"youremail@xxx.com"</span></span></pre></td></tr></tbody></table></figure><p>然后根据提示连续回车即可在~/.ssh目录下得到id_rsa_gitcafe和id_rsa_gitcafe.pub两个文件，id_rsa_gitcafe.pub文件里存放的就是我们要使用的key,在Gitcafe中添加SSH Keys</p><p>新密钥添加到SSH agent中<br>因为默认只读取id_rsa，为了让SSH识别新的私钥，需将其添加到SSH agent中：</p><p>如果出现<code>Could not open a connection to your authentication agent</code>的错误，就试着用以下命令：</p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ssh-agent bash</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">ssh-<span class="keyword">add</span><span class="bash"> ~/.ssh/id_rsa_github</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">ssh-<span class="keyword">add</span><span class="bash"> ~/.ssh/id_rsa_gitcafe</span></span></pre></td></tr></tbody></table></figure><p>可以在添加前使用下面命令删除所有的key</p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ssh-<span class="keyword">add</span><span class="bash"> -D</span></span></pre></td></tr></tbody></table></figure><p>最后可以通过下面命令，查看key的设置</p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ssh-<span class="keyword">add</span><span class="bash"> -l</span></span></pre></td></tr></tbody></table></figure><h3 id="三、在-ssh-下创建config文件-内容如下："><a href="#三、在-ssh-下创建config文件-内容如下：" class="headerlink" title="三、在.ssh/下创建config文件 内容如下："></a>三、在.ssh/下创建config文件 内容如下：</h3><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Default github user(github@mail.com),注意User项直接填git，不用填在github的用户名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Host github.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"> HostName github.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="built_in"> User </span>git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"> IdentityFile ~/.ssh/id_rsa_github</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Default gitcafe user(gitcafe@mail.com)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建一个gitcafe别名，新建的帐号使用这个别名做克隆和更新</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">Host gitcafe.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"> HostName gitcafe.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="built_in"> User </span>work</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"> IdentityFile ~/.ssh/id_rsa_gitcafe</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#---------------------华丽的分割线----------------------#</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 以下为多个github 账户设置参考 ####</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># first github user(first@mail.com),注意User项直接填git，不用填在github的用户名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">Host first.github.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"> HostName github.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="built_in"> User </span>git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"> IdentityFile ~/.ssh/id_rsa_first</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># second github user(second@mail.com)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建一个gitcafe别名，新建的帐号使用这个别名做克隆和更新</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">Host second.github.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"> HostName github.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="built_in"> User </span>work</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"> IdentityFile ~/.ssh/id_rsa_second</span></pre></td></tr></tbody></table></figure><p>Host名字随意，接下来会用到。</p><p>其规则就是：从上至下读取config的内容，在每个Host下寻找对应的私钥。<br>这里将<code>GitHub SSH仓库地址中的git@github.com</code>替换成新建的Host别名如：first.github.com,second.github.com。</p><p>那么原地址是：<code>git@github.com:username/reponame.git。</code><br>替换后应该是：<code>git@second.github.com:username/reponame.git。</code></p><h3 id="四、测试配置是否正确"><a href="#四、测试配置是否正确" class="headerlink" title="四、测试配置是否正确"></a>四、测试配置是否正确</h3><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssh</span> -T git<span class="variable">@github</span>.com        <span class="comment"># 测试github ssh连接</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#Hi ***! You've successfully authenticated, but GitHub does not provide shell access.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">ssh -T git<span class="variable">@gitcafe</span>.com       <span class="comment"># 测试gitcafe ssh连接</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#Hi ***! You've successfully authenticated, but GitCafe does not provide shell access.</span></span></pre></td></tr></tbody></table></figure><p>如果出现Hi xxx!You’ve successfully authenticated 就说明连接成功了</p><h3 id="五、原理分析"><a href="#五、原理分析" class="headerlink" title="五、原理分析"></a>五、原理分析</h3><p>简单分析下原因，我们可以发现 ssh 客户端是通过类似:<br><a href="mailto:git@github.com" target="_blank" rel="external nofollow noreferrer noopener">git@github.com</a>:username/reponame.git<br>User: @前的<code>git</code><br>Host: @后的<code>github.com</code><br>这样的 git 地址中的 User 和 Host 来识别使用哪个本地私钥的。<br>很明显，如果 User 和 Host 始终为 git 和 github.com，那么就只能使用一个私钥。<br>所以需要上面的方式配置，每个账号使用了自己的 Host，每个 Host 的域名做 CNAME 解析到 github.com，这样 ssh 在连接时就可以区别不同的账号了。</p><h3 id="六、解决现有的仓库配置"><a href="#六、解决现有的仓库配置" class="headerlink" title="六、解决现有的仓库配置"></a>六、解决现有的仓库配置</h3><p>1.一个repo，想要同时push到不同的仓库该如何设置?</p><p>很简单， 直接更改 repo/.git/config 里面的url即可，把里面对应tag下的url增加一个就可以了。例:</p><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[remote <span class="string">"github"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    url = git<span class="variable">@github</span>.<span class="symbol">com:</span>seirhsiao/blog.git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    fetch = +refs/heads/*<span class="symbol">:refs/remotes/github/*</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">[branch <span class="string">"master"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    remote = github</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    merge = refs/heads/master</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">[remote <span class="string">"gitcafe"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    url = git<span class="variable">@gitcafe</span>.<span class="symbol">com:</span>hsiao/blog.git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    fetch = +refs/heads/*<span class="symbol">:refs/remotes/gitcafe/*</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">[remote <span class="string">"all"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    url = git<span class="variable">@github</span>.<span class="symbol">com:</span>seirhsiao/blog.git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    url = git<span class="variable">@gitcafe</span>.<span class="symbol">com:</span>hsiao/blog.git</span></pre></td></tr></tbody></table></figure><p>上面这个立即就是有3个远端仓库，不同的tag表示不同的远端仓库，最后的all标签写法表示默认push到github和gitcafe这两个远端仓库去。<br>当然，你可以自己随意定制tag和url。</p><p>2.多个github账户，如何在某个仓库中指定具体使用某个账户</p><p>现在就以下种情况给出不同的做法：</p><ul><li><p>1、本地已经创建或已经clone到本地：<br>  如下两种解决方法：<br>  打开.git/config文件</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">#更改[remote <span class="string">"origin"</span>]项中的url中的</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#first</span><span class="selector-class">.github</span><span class="selector-class">.com</span> 对应上面配置的host</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">[remote <span class="string">"origin"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">url = git@first<span class="selector-class">.github</span><span class="selector-class">.com</span>:hsiao/blog.git</span></pre></td></tr></tbody></table></figure></li><li><p>2、或者在Git Bash中提交的时候修改remote </p><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git remote rm origin</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git remote add origin git<span class="variable">@first</span>.<span class="symbol">github.com:</span>hsiao/blog.git</span></pre></td></tr></tbody></table></figure></li><li><p>3、新建git项目或者clone已有的项目：</p><ul><li>可以用 git init 或者 git clone 创建本地项目</li><li>分别在first和second的git项目目录下，使用下面的命令设置账号关联<figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入first项目中</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>user.name  <span class="string">"__name__ "</span>            # __name__  例如 first</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>user.email <span class="string">"__email__"</span>            # __email__ 例如 first@gmail.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入second项目中</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>user.name  <span class="string">"__name__ "</span>            # __name__  例如 second</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>user.email <span class="string">"__email__"</span>            # __email__ 例如 second@163.com</span></pre></td></tr></tbody></table></figure>查看git项目的配置</li></ul></li></ul><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--list</span></pre></td></tr></tbody></table></figure><p>查看first的 <code>remote.origin.url=git@github.com:first/first.github.com.git</code><br>查看second的<code>remote.origin.url=git@github.com:second/second.github.com.git</code><br>修改相应的git url</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入first项目中</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git remote rm origin</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">add</span> origin git@<span class="keyword">first</span>.github.com:<span class="keyword">first</span>/<span class="keyword">first</span>.github.com.git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入second项目中</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">git remote rm origin</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">add</span> origin git@<span class="keyword">second</span>.github.com:<span class="keyword">second</span>/<span class="keyword">second</span>.github.com.git</span></pre></td></tr></tbody></table></figure><p>上传更改</p><p>上面所有的设置无误后，可以修改代码，然后上传了。</p><figure class="highlight avrasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> -A</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"your comments"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">git <span class="keyword">push</span></span></pre></td></tr></tbody></table></figure><p>如果遇到warning</p><blockquote></blockquote><p>warning: push.default is unset; its implicit value is changing in Git 2.0 from ‘matching’ to ‘simple’. To squelch this messageand maintain the current behavior after the default changes, use…</p><p>推荐使用下面命令设置。</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global push.default simple</span></pre></td></tr></tbody></table></figure><h3 id="七、推荐"><a href="#七、推荐" class="headerlink" title="七、推荐"></a>七、推荐</h3><p>为每个账号对应的项目配置email/name</p><p>1.取消global<br>    git config –global –unset user.name<br>    git config –global –unset user.email</p><p>2.设置每个项目repo的自己的user.email<br>    git config  user.email “<a href="mailto:xxxx@xx.com" target="_blank" rel="external nofollow noreferrer noopener">xxxx@xx.com</a>“<br>    git config  user.name “xxxx”<br>这样，以后每次在相应的repo下提交更改，都会自动匹配相应的ssh-key了。</p><h3 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h3><p><a href="http://tmyam.github.io/blog/2014/05/07/duo-githubzhang-hu-she-zhi/" target="_blank" rel="external nofollow noreferrer noopener">一个客户端设置多个github账号</a><br><a href="http://blog.csdn.net/itmyhome1990/article/details/42643233" target="_blank" rel="external nofollow noreferrer noopener">多个github帐号的SSH key切换</a><br><a href="http://memoryboxes.github.io/blog/2014/12/07/duo-ge-gitzhang-hao-zhi-jian-de-qie-huan/" target="_blank" rel="external nofollow noreferrer noopener">多个git账号之间的切换</a><br><a href="http://www.cnblogs.com/BeginMan/p/3548139.html" target="_blank" rel="external nofollow noreferrer noopener">git初体验（七）多账户的使用</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题描述：&lt;br&gt;遇到了这样的需求，需要在一台电脑上同时使用多个git账户或两个github账号，负责不同的用途，所以搜索了一些文章，进行了一下实践。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://notes.seirhsiao.com/categories/Git/"/>
    
    
      <category term="git" scheme="http://notes.seirhsiao.com/tags/git/"/>
    
      <category term="github" scheme="http://notes.seirhsiao.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>同时部署博客到github 与 gitcafe</title>
    <link href="http://notes.seirhsiao.com/posts/18a27be/"/>
    <id>http://notes.seirhsiao.com/posts/18a27be/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-07T00:55:40.051Z</updated>
    
    <content type="html"><![CDATA[<p>问题描述：<br><a href="https://github.com/" target="_blank" rel="external nofollow noreferrer noopener">Github</a>受到长城墙持续的DDoS攻击,主页访问很不稳定,考虑转移到国内的Gitcafe上,国外访客解析到GitHub，国内访客解析到<a href="https://gitcafe.com/" target="_blank" rel="external nofollow noreferrer noopener">GitCafe</a>。禁不住GitCafe速度的诱惑，于是也动手在GitCafe 上创建了一个博客镜像，并通过修改 git 设置实现了同步提交。</p><a id="more"></a><p>同时在Github和GitCafe部署Hexo的主要优势如下：</p><ol><li>负载均衡，速度大增——由于两大Pages服务均可自定义域名，国内用户可选择走GitCafe，国外用户则走GitHub。</li><li>自定义路由——配合DNSPod的『线路类型』可完美支持1中方案。</li><li>国内用户访问不再需要CDN，因为GitCafe确实挺快！单个Repo的300MB空间对于技术博客是完全够用的。</li><li>多机备份——两大Pages服务同时挂掉的可能微乎其微。</li><li>你懂的… 不方便说太细。</li></ol><p>Github 和 Gitcafe 网页服务的不同之处：<br>1）前者的项目文件夹必须名为 username.github.io，后者则名为 username；<br>2）前者使用 master branch，后者使用 gitcafe-pages branch。</p><p>PS：Github 除了支持 username.github.io 作为用户主页，也允许另外建立projectname 的网页项目，可通过用户主域名的子域名访问：<code>username.github.io/projectname</code>。注意，与用户主域名项目使用 master branch 不同，子域名项目必须把网页文件放在 gh-pages branch 下。类似的， Gitcafe 也支持 <code>username.gitcafe.io/projectname</code>，一律使用 gitcafe-pages branch。</p><h3 id="一、将仓库拷贝到-GitCafe"><a href="#一、将仓库拷贝到-GitCafe" class="headerlink" title="一、将仓库拷贝到 GitCafe"></a>一、将仓库拷贝到 GitCafe</h3><p>在 GitCafe 上创建一个和用户名相同的仓库，如我的是 hsiao。</p><p>在账户设置中添加公钥，</p><ol><li>可以使用之前 GitHub 的公钥，只需要复制 ~/.ssh/id_rsa.pub 的内容。</li><li>配置新的git账号，参考 另一篇博文：<a href="/2014-09-30-github-multiple-account-and-multiple-repository.html">如何同一台电脑配置多个git或github账号</a>。</li></ol><p>打开 .git/config，修改远程仓库，将 origin 改为 github，并添加 gitcafe：</p><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[remote <span class="string">"github"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    fetch = +refs/heads/*<span class="symbol">:refs/remotes/github/*</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    url = git<span class="variable">@github</span>.<span class="symbol">com:</span>seirhsiao/seirhsiao.github.io.git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">[remote <span class="string">"gitcafe"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    fetch = +refs/heads/*<span class="symbol">:refs/remotes/gitcafe/*</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    url = git<span class="variable">@gitcafe</span>.<span class="symbol">com:</span>hsiao/hsiao.git</span></pre></td></tr></tbody></table></figure><p>之后将仓库 push 到 GitCafe 上（必须使用 gitcafe-pages 分支）：</p><figure class="highlight armasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">push </span>-u gitcafe master:gitcafe-pages</span></pre></td></tr></tbody></table></figure><p>GitCafe 上在“项目管理”中找到“自定义域名”，添加要绑定的域名，比如我是 seirhsiao.com。</p><p>注：GitCafe 提供直接导入github上的项目。<a href="https://gitcafe.com/projects/import" target="_blank" rel="external nofollow noreferrer noopener">import入口</a></p><h3 id="二、实现同步提交"><a href="#二、实现同步提交" class="headerlink" title="二、实现同步提交"></a>二、实现同步提交</h3><p>因为 GitHub 和 GitCafe 的 Pages 使用不同的分支，所以无法在 remote 里添加两个 url：</p><p>[remote “all”]<br>    url = <a href="mailto:git@github.com" target="_blank" rel="external nofollow noreferrer noopener">git@github.com</a>:seirhsiao/seirhsiao.github.io.git<br>    url = <a href="mailto:git@gitcafe.com" target="_blank" rel="external nofollow noreferrer noopener">git@gitcafe.com</a>:hsiao/hsiao.git<br>然后执行 <code>git push all master</code> 同时 push。</p><p>可以在 .git/config 中添加一个 alias 来实现：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[<span class="built_in">alias</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  publish = !sh -c \"git push github master &amp;&amp; git push gitcafe master:gitcafe-pages\"</span></pre></td></tr></tbody></table></figure><p>当需要 push 的时候，只需执行 git publish 就可以了。</p><p>如果使用<a href="https://hexo.io/" target="_blank" rel="external nofollow noreferrer noopener">Hexo</a>生成和部署博客。</p><p>所以现在如果你需要同时部署blog到Github和Gitcafe的话，只需要在博客根目录的_config.yml文件deploy处写上:</p><figure class="highlight dts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">  type:</span> git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">  message:</span> [message]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">  repo:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">    github:</span> <span class="params">&lt;repository url&gt;</span>,[branch]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">    gitcafe:</span> <span class="params">&lt;repository url&gt;</span>,[branch]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta"># 以下是我的博客配置，仅供参考</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">  type:</span> git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">  message:</span> <span class="string">""</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">  repo:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">    github:</span> git@github.com:seirhsiao/blog.git,gh-pages</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">    gitcafe:</span> git@gitcafe.com:hsiao/blog.git,gitcafe-pages</span></pre></td></tr></tbody></table></figure><h3 id="三、配置域名解析"><a href="#三、配置域名解析" class="headerlink" title="三、配置域名解析"></a>三、配置域名解析</h3><p>如果你还注册了个人域名，则要使用域名解析服务，将你的域名指向 Github 和 Gitcafe。这里推荐使用 dnspod 的域名解析服务，免费，同时支持根据访问 IP<br>来源设定指向不同的 IP 地址。可设定如果访问来自国外则指向Github，来自国内则指向 Gitcafe，优化访问速度。比如我的设定：<br><img alt="dnspod" data-src="/static/images/dnspod.png" class="lazyload"></p><p>第一条指向 Github，第二条指向 Gitcafe。</p><p>最后在 Github 的项目目录下添加名为 CNAME 的文件，里面写上你的个人域名。这样当访问 <code>username.github.io</code> 的时候，Github 会自动跳转你的个人域名。Gitcafe 则直接在项目设置的 Pages 服务里添加个人域名即可。</p><p>PS: 根据 Github 官方文档，在 DNS 解析设置时，要添加一个 A 记录，指向 Githgub 的 IP 地址<code>192.30.252.153</code>。实际上这种方法并不理想。因为大型网站的IP地址常常更换，虽然旧的 IP 可能也能用，但访问速度会非常慢。比如我在香港，现在ping上面的192.30.252.153，需要约200ms。所以更好的方法是像Gitcafe一样，设置一个CNAME记录，指向 <code>github.io</code>，如上面截图所示。这样访问的IP地址会根据Github服务的默认IP地址实时更新。目前 ping 一下 <code>github.io</code> 和 <code>gitcafe.io</code>，用时都在 5ms 左右。</p><h3 id="四、参考文档"><a href="#四、参考文档" class="headerlink" title="四、参考文档"></a>四、参考文档</h3><p><a href="http://www.jianshu.com/p/a96f60d20936" target="_blank" rel="external nofollow noreferrer noopener">Jekyll自建博客同时托管至 Github 与 Gitcafe</a><br><a href="http://liberize.me/tech/host-your-blog-on-both-github-and-gitcafe.html" target="_blank" rel="external nofollow noreferrer noopener">同时使用 GitHub 和 GitCafe 托管博客</a><br><a href="https://ruby-china.org/topics/18084" target="_blank" rel="external nofollow noreferrer noopener">Ruby China | 同时使用 GitHub 与 GitCafe 托管博客 » 社区</a><br><a href="http://2dxgujun.com/post/2015/01/12/Host-Blog-Github-and-GitCafe.html" target="_blank" rel="external nofollow noreferrer noopener">同时使用Github和GitCafe托管博客</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题描述：&lt;br&gt;&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;Github&lt;/a&gt;受到长城墙持续的DDoS攻击,主页访问很不稳定,考虑转移到国内的Gitcafe上,国外访客解析到GitHub，国内访客解析到&lt;a href=&quot;https://gitcafe.com/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;GitCafe&lt;/a&gt;。禁不住GitCafe速度的诱惑，于是也动手在GitCafe 上创建了一个博客镜像，并通过修改 git 设置实现了同步提交。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="http://notes.seirhsiao.com/categories/Blog/"/>
    
    
      <category term="github" scheme="http://notes.seirhsiao.com/tags/github/"/>
    
      <category term="gitcafe" scheme="http://notes.seirhsiao.com/tags/gitcafe/"/>
    
  </entry>
  
  <entry>
    <title>Clojure 代码规范（中文）</title>
    <link href="http://notes.seirhsiao.com/posts/9285c344/"/>
    <id>http://notes.seirhsiao.com/posts/9285c344/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:36:31.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Clojure-代码规范"><a href="#Clojure-代码规范" class="headerlink" title="Clojure 代码规范"></a>Clojure 代码规范</h1><blockquote><p>Role models are important. <br><br>– Officer Alex J. Murphy / RoboCop</p></blockquote><p>原文地址：<a href="https://github.com/bbatsov/clojure-style-guide" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/bbatsov/clojure-style-guide</a></p><p>这份Clojure代码规范旨在提供一系列的最佳实践，让现实工作中的Clojure程序员能够写出易于维护的代码，并能与他人协作和共享。一份反应真实需求的代码规范才能被人接收，而那些理想化的、甚至部分观点遭到程序员拒绝的代码规范注定不会长久——无论它有多出色。</p><p>这份规范由多个章节组成，每个章节包含一组相关的规则。我会尝试去描述每条规则背后的理念（过于明显的理念我就省略了）。</p><p>这些规则并不是我凭空想象的，它们出自于我作为一个专业软件开发工程师长久以来的工作积累，以及Clojure社区成员们的反馈和建议，还有各种广为流传的Clojure编程学习资源，如《Clojure Programming》、《The Joy of Clojure》等。</p><p>这份规范还处于编写阶段，部分章节有所缺失，内容并不完整；部分规则没有示例，或者示例还不能完全将其描述清楚。未来这些问题都会得到改进，只是请你了解这一情况。</p><p>你可以使用<a href="https://github.com/TechnoGate/transmuter" target="_blank" rel="external nofollow noreferrer noopener">Transmuter</a>生成一份本规范的PDF或HTML格式的文档。</p><p>本指南的翻译可在以下几种语言中：</p><ul><li><a href="https://github.com/totakke/clojure-style-guide/blob/ja/README.md" target="_blank" rel="external nofollow noreferrer noopener">Japanese</a></li><li><a href="https://github.com/kwakbab/clojure-style-guide/blob/master/README-koKO.md" target="_blank" rel="external nofollow noreferrer noopener">Korean</a></li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#source-code-layout--organization">源代码的布局和组织结构</a>　</li><li><a href="#syntax">语法</a></li><li><a href="#naming">命名</a></li><li><a href="#collections">集合</a></li><li><a href="#mutation">可变</a></li><li><a href="#strings">字符串</a></li><li><a href="#exceptions">异常</a></li><li><a href="#macros">宏</a></li><li><a href="#comments">注释</a><ul><li><a href="#comment-annotations">注释中的标识</a></li></ul></li><li><a href="#existential">惯用法</a></li><li><a href="#tooling">工具</a><a id="more"></a><h2 id="源代码的布局和组织结构"><a href="#源代码的布局和组织结构" class="headerlink" title="源代码的布局和组织结构"></a><a name="source-code-layout--organization"></a>源代码的布局和组织结构</h2></li></ul><blockquote><p>几乎所有人都认为任何代码风格都是丑陋且难以阅读的，除了自己的之外。<br>把这句话中的“除了自己之外”去掉，那差不多就能成立了。 <br><br>—— Jerry Coffin 关于代码缩进的评论</p></blockquote><ul><li><p><a name="spaces"></a> 使用两个<strong>空格</strong>进行缩进，不使用制表符。<br><sup>[<a href="#spaces">链接</a>]</sup></p></li><li><p><a name="body-indentation"></a>使用2个空格来缩进含参数部分的形式，<br>。这些形式包括所有的 <code>def</code> 形式 ，特实形式和宏，<br>以及本地绑定形式 (例如： <code>loop</code>, <code>let</code>,<br><code>when-let</code>) 和许多像 <code>when</code>, <code>cond</code>, <code>as-&gt;</code>, <code>cond-&gt;</code>, <code>case</code>,<br><code>with-*</code>等的宏。<br><sup>[<a href="#body-indentation">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">when</span></span> something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">something-else</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name">with-out-str</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">println</span> <span class="string">"Hello, "</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">println</span> <span class="string">"world!"</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕 - 四个空格</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">when</span></span> something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">something-else</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕 - 一个空格</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">(<span class="name">with-out-str</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"> (<span class="name">println</span> <span class="string">"Hello, "</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"> (<span class="name">println</span> <span class="string">"world!"</span>))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="vertically-align-fn-args"></a><br>垂直排列函数参数。<br><sup>[<a href="#vertically-align-fn-args">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">filter</span></span> even?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> <span class="number">10</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">filter</span></span> even?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> <span class="number">10</span>))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="one-space-indent"></a><br>使用一个空格缩进函数（宏）参数<br>当函数没有参数独占一行。<br><sup>[<a href="#one-space-indent">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">filter</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> even?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"> (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> <span class="number">10</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">or</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"> ala</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"> bala</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"> portokala)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕 - 两个空格缩进</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">filter</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  even?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> <span class="number">10</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">or</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  ala</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  bala</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  portokala)</span></pre></td></tr></tbody></table></figure></li><li><p><a name="vertically-align-let-and-map"></a><br>对齐let绑定，以及map类型中的关键字。<br><sup>[<a href="#vertically-align-let-and-map">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [thing1 <span class="string">"some stuff"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">      thing2 <span class="string">"other stuff"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  {<span class="symbol">:thing1</span> thing1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   <span class="symbol">:thing2</span> thing2})</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [thing1 <span class="string">"some stuff"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  thing2 <span class="string">"other stuff"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  {<span class="symbol">:thing1</span> thing1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:thing2</span> thing2})</span></pre></td></tr></tbody></table></figure></li><li><p><a name="optional-new-line-after-fn-name"></a><br>针对没有文档字串的 defn，选择性忽略函数名与参数向量之间的新行。<br><sup>[<a href="#optional-new-line-after-fn-name">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  [x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">bar</span> x))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo [x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">bar</span> x))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  [x] (<span class="name">bar</span> x))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="multimethod-dispatch-val-placement"></a><br>将一个多重方法的<code>dispatch-val</code> 与函数名放置在同一行。<br><sup>[<a href="#multimethod-dispatch-val-placement">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defmethod</span></span> foo <span class="symbol">:bar</span> [x] (<span class="name">baz</span> x))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defmethod</span></span> foo <span class="symbol">:bar</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  [x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">baz</span> x))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defmethod</span></span> foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:bar</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  [x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">baz</span> x))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defmethod</span></span> foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:bar</span> [x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">baz</span> x))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="docstring-after-fn-name"></a><br>当为采用上述形式的函数添加字符串文档 -<br>注意正确应放置到函数名后面，而不是参数列表<br>后面。后者虽然不是无效语法，不会造成错误，<br>但是这仅仅只是将字符串作为函数体的一种形式，而不将其链接为<br>该变量的文档。<br><sup>[<a href="#docstring-after-fn-name">链接</a>]</sup></p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"docstring"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  [x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">bar</span> x))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo [x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"docstring"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">bar</span> x))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="oneline-short-fn"></a><br>选择性忽略短的参数向量与函数体之间的新行。<br><sup>[<a href="#oneline-short-fn">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo [x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">bar</span> x))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 适合简单的函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo [x] (<span class="name">bar</span> x))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;适合包含多元参数列表的函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  ([x] (<span class="name">bar</span> x))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  ([x y]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">   (<span class="name"><span class="builtin-name">if</span></span> (<span class="name">predicate?</span> x)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">     (<span class="name">bar</span> x)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">     (<span class="name">baz</span> x))))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  [x] (<span class="name"><span class="builtin-name">if</span></span> (<span class="name">predicate?</span> x)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        (<span class="name">bar</span> x)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        (<span class="name">baz</span> x)))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="multiple-arity-indentation"></a><br>多元函数定义，各元数形式垂直对齐参数。<br><sup>[<a href="#multiple-arity-indentation">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"I have two arities."</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  ([x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   (<span class="name">foo</span> x <span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  ([x y]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">   (<span class="name"><span class="builtin-name">+</span></span> x y)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕 - 多出的缩进</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"I have two arities."</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  ([x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">foo</span> x <span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  ([x y]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    (<span class="name"><span class="builtin-name">+</span></span> x y)))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="multiple-arity-order"></a><br>按照从少到多的参数，排序函数的多元数形式。多元素的情况下，共同<br>功能是某个k参数完全指定函数的<br>行为，并且元素个数 Ñ &lt; K 部分地应用在K元数，和<br>元素 N&gt; K提供在K元数超过可变参数的实现。<br><sup>[<a href="#multiple-arity-order">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好 - 很容易扫描第n个参数形式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"I have two arities."</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  ([x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   (<span class="name">foo</span> x <span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  ([x y]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">   (<span class="name"><span class="builtin-name">+</span></span> x y)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 还好 - 其他元素应用两倍元数形式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"I have two arities."</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  ([x y]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">   (<span class="name"><span class="builtin-name">+</span></span> x y))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  ([x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">   (<span class="name">foo</span> x <span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  ([x y z &amp; more]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">   (<span class="name"><span class="builtin-name">reduce</span></span> foo (<span class="name">foo</span> x (<span class="name">foo</span> y z)) more)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕 - 无序的，毫无理由这样</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  ([x] <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  ([x y z] (<span class="name">foo</span> x (<span class="name">foo</span> y z)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  ([x y] (<span class="name"><span class="builtin-name">+</span></span> x y))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  ([w x y z &amp; more] (<span class="name"><span class="builtin-name">reduce</span></span> foo (<span class="name">foo</span> w (<span class="name">foo</span> x (<span class="name">foo</span> y z))) more)))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="align-docstring-lines"></a><br>缩进多行的文档字串。<br><sup>[<a href="#align-docstring-lines">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"Hello there. This is</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="string">  a multi-line docstring."</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">bar</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"Hello there. This is</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="string">a multi-line docstring."</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">bar</span>))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="crlf"></a><br> 使用Unix风格的换行符（*BSD、Solaris、Linux、OSX用户无需设置，Windows用户则需要格外注意了）<br><sup>[<a href="#crlf">链接</a>]</sup></p><ul><li>如果你使用 Git ，你也许会想加入下面这个配置，来保护你的项目被 Windows 的行编码侵入：<figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">bash$ git<span class="built_in"> config </span>--global core.autocrlf <span class="literal">true</span></span></pre></td></tr></tbody></table></figure></li></ul></li></ul><ul><li><p><a name="bracket-spacing"></a><br>若有任何文字在左括号、中括号、大括号前（<code>(</code>, <code>[</code>, <code>{</code>），或是在右括号、中括号、大括号之后（<code>)</code>, <code>]</code>, <code>}</code>），将文字与括号用一个空格分开。反过来说，在左括号后、右括号前不要有空格。<br><sup>[<a href="#bracket-spacing">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name">foo</span> (<span class="name">bar</span> baz) quux)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name">foo</span>(<span class="name">bar</span> baz)quux)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(<span class="name">foo</span> ( bar baz ) quux)</span></pre></td></tr></tbody></table></figure></li></ul><blockquote><p>Syntactic sugar causes semicolon cancer. <br><br>– Alan Perlis</p></blockquote><ul><li><p><a name="no-commas-for-seq-literals"></a><br>不要在序列化的集合类型的字面常量语法里使用逗号。<br><sup>[<a href="#no-commas-for-seq-literals">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></pre></td></tr></tbody></table></figure></li><li><p><a name="opt-commas-in-map-literals"></a><br>明智的使用逗号与换行来加强 map 的可读性。<br><sup>[<a href="#opt-commas-in-map-literals">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{<span class="symbol">:name</span> <span class="string">"Bruce Wayne"</span> <span class="symbol">:alter-ego</span> <span class="string">"Batman"</span>}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好， 且会增强可读性</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">{<span class="symbol">:name</span> <span class="string">"Bruce Wayne"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"> <span class="symbol">:alter-ego</span> <span class="string">"Batman"</span>}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好， 且较为紧凑</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">{<span class="symbol">:name</span> <span class="string">"Bruce Wayne"</span>, <span class="symbol">:alter-ego</span> <span class="string">"Batman"</span>}</span></pre></td></tr></tbody></table></figure></li><li><p><a name="gather-trailing-parens"></a><br>将所有尾括号放在同一行。<br><sup>[<a href="#gather-trailing-parens">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好; 同一行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">when</span></span> something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">something-else</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕; 不同行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">when</span></span> something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">something-else</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr></tbody></table></figure></li></ul><ul><li><p><a name="empty-lines-between-top-level-forms"></a><br>顶层形式用空行间隔开来。<br><sup>[<a href="#empty-lines-between-top-level-forms">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> x ...)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo ...)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> x ...)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo ...)</span></pre></td></tr></tbody></table></figure><p>  一个例外是相关<code>def</code>分组在一起。</p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> min-rows <span class="number">10</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> max-rows <span class="number">20</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> min-cols <span class="number">15</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> max-cols <span class="number">30</span>)</span></pre></td></tr></tbody></table></figure></li><li><p><a name="no-blank-lines-within-def-forms"></a><br>函数或宏定义中间不要放空行。一个例外，可制成以指示分组<br>比如发现成对结构<code>let</code>和<code>cond</code>。<br><sup>[<a href="#no-blank-lines-within-def-forms">链接</a>]</sup></p><ul><li><a name="no-blank-lines-within-def-forms"></a></li></ul></li><li><p><a name="80-character-limits"></a><br>可行的场合下，避免每行超过 80 字符。<br><sup>[<a href="#80-character-limits">链接</a>]</sup></p></li><li><p><a name="no-trailing-whitespace"></a><br>避免尾随的空白。<br><sup>[<a href="#no-trailing-whitespace">链接</a>]</sup></p></li><li><p><a name="one-file-per-namespace"></a><br>一个文件、一个命名空间。<br><sup>[<a href="#one-file-per-namespace">链接</a>]</sup></p></li></ul><ul><li><p><a name="comprehensive-ns-declaration"></a><br>每个命名空间用 <code>ns</code> 形式开始，加上 <code>refer</code>、<code>require</code>、<code>use</code> 以及 <code>import</code>。<br><sup>[<a href="#comprehensive-ns-declaration">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">ns</span></span> examples.ns</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  (<span class="symbol">:refer-clojure</span> <span class="symbol">:exclude</span> [next replace remove])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="symbol">:require</span> [clojure.string <span class="symbol">:as</span> s <span class="symbol">:refer</span> [blank?]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            [clojure.set <span class="symbol">:as</span> set]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            [clojure.java.shell <span class="symbol">:as</span> sh])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  (<span class="symbol">:import</span> java.util.Date</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">           java.text.SimpleDateFormat</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">           [java.util.concurrent Executors</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                                 链接edBlockingQueue]))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="prefer-require-over-use"></a><br>在 <code>ns</code> 宏中优先使用 <code>:require :as</code> 胜于 <code>:require :refer</code> 胜于 <code>:require:refer :all</code>. 优先使用 <code>:require</code> 胜于 <code>:use</code>; 后者的形式应该是<br>考虑使用新的代码。<br><sup>[<a href="#prefer-require-over-use">链接</a>]</sup></p></li></ul><pre><code><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">ns</span></span> examples.ns</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="symbol">:require</span> [clojure.zip <span class="symbol">:as</span> zip]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">ns</span></span> examples.ns</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  (<span class="symbol">:require</span> [clojure.zip <span class="symbol">:refer</span> [lefts rights]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 可以接受的</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">ns</span></span> examples.ns</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  (<span class="symbol">:require</span> [clojure.zip <span class="symbol">:refer</span> <span class="symbol">:all</span>]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">ns</span></span> examples.ns</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  (<span class="symbol">:use</span> clojure.zip))</span></pre></td></tr></tbody></table></figure></code></pre><ul><li><p><a name="no-single-segment-namespaces"></a><br>避免单段的命名空间。<br><sup>[<a href="#no-single-segment-namespaces">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">ns</span></span> example.ns)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">ns</span></span> example)</span></pre></td></tr></tbody></table></figure></li></ul><ul><li><p><a name="namespaces-with-5-segments-max"></a><br>避免使用过长的命名空间（不超过五段）。<br><sup>[<a href="#namespaces-with-5-segments-max">链接</a>]</sup></p></li><li><p><a name="10-loc-per-fn-limit"></a><br>函数避免超过 10 行代码。事实上，大多数函数应保持在5行代码以内。<br><sup>[<a href="#10-loc-per-fn-limit">链接</a>]</sup></p></li><li><p><a name="4-positional-fn-params-limit"></a><br>参数列表避免超过 3 个或 4 个位置参数。<br><sup>[<a href="#4-positional-fn-params-limit">链接</a>]</sup></p></li><li><p><a name="forward-references"></a><br>避免向前引用。它们偶尔必要的，但这样的场合<br>实际上很罕见。<br><sup>[<a href="#forward-references">链接</a>]</sup></p></li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a><a name="syntax"></a>语法</h2><ul><li><p><a name="ns-fns-only-in-repl"></a><br>避免使用操作命名空间的函数，像是：<code>require</code> 与 <code>refer</code>。他们在 REPL 之外完全用不到。<br><sup>[<a href="#ns-fns-only-in-repl">链接</a>]</sup></p></li><li><p><a name="declare"></a><br>使用declare实现向前引用。<br><sup>[<a href="#declare">链接</a>]</sup></p></li><li><p><a name="higher-order-fns"></a><br>优先使用<code>map</code>这类高阶函数，而非<code>loop/recur</code>。<br><sup>[<a href="#higher-order-fns">链接</a>]</sup></p></li><li><p><a name="pre-post-conditions"></a><br>优先使用前置、后置条件来检测函数参数和返回值。<br><sup>[<a href="#pre-post-conditions">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo [x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  {<span class="symbol">:pre</span> [(<span class="name"><span class="builtin-name">pos?</span></span> x)]}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">bar</span> x))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo [x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">pos?</span></span> x)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">bar</span> x)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    (<span class="name"><span class="builtin-name">throw</span></span> (<span class="name">IllegalArgumentException.</span> <span class="string">"x must be a positive number!"</span>)))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="dont-def-vars-inside-fns"></a><br>不要在函数中定义变量。<br><sup>[<a href="#dont-def-vars-inside-fns">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 非常糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">def</span></span> x <span class="number">5</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  ...)</span></pre></td></tr></tbody></table></figure></li><li><p><a name="dont-shadow-clojure-core"></a><br>本地变量名不应覆盖clojure.core中定义的函数。<br><sup>[<a href="#dont-shadow-clojure-core">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕 - 这样一来函数中调用`clojure.core/map`时就需要指定完整的命名空间了。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo [map]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  ...)</span></pre></td></tr></tbody></table></figure></li><li><p><a name="alter-var"></a><br>使用 <code>alter-var-root</code> 替代 <code>def</code> 去改变变量的值。</p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; good</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> thing <span class="number">1</span>) <span class="comment">; value of thing is now 1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; do some stuff with thing</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(<span class="name">alter-var-root</span> #'thing (<span class="name"><span class="builtin-name">constantly</span></span> <span class="literal">nil</span>)) <span class="comment">; value of thing is now nil</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; bad</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> thing <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; do some stuff with thing</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> thing <span class="literal">nil</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; value of thing is now nil</span></span></pre></td></tr></tbody></table></figure></li><li><p><a name="nil-punning"></a><br>使用 <code>seq</code> 来判断一个序列是否为空（这个技巧有时候称为 *nil punning）。<br><sup>[<a href="#nil-punning">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> print-seq [s]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">when</span></span> (<span class="name"><span class="builtin-name">seq</span></span> s)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    (<span class="name"><span class="builtin-name">prn</span></span> (<span class="name"><span class="builtin-name">first</span></span> s))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    (<span class="name"><span class="builtin-name">recur</span></span> (<span class="name"><span class="builtin-name">rest</span></span> s))))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> print-seq [s]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">when-not</span></span> (<span class="name"><span class="builtin-name">empty?</span></span> s)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    (<span class="name"><span class="builtin-name">prn</span></span> (<span class="name"><span class="builtin-name">first</span></span> s))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    (<span class="name"><span class="builtin-name">recur</span></span> (<span class="name"><span class="builtin-name">rest</span></span> s))))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="to-vector"></a><br>需要将序列转换向量，优先使用 <code>vec</code> 而不是 <code>into</code> 。<br><sup>[<a href="#to-vector">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">vec</span></span> some-seq)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">into</span></span> [] some-seq)</span></pre></td></tr></tbody></table></figure></li><li><p><a name="when-instead-of-single-branch-if"></a><br>使用 <code>when</code> 替代 <code>(if ... (do ...)</code>。<br><sup>[<a href="#when-instead-of-single-branch-if">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">when</span></span> pred</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">foo</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">bar</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">if</span></span> pred</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">do</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">foo</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">bar</span>)))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="if-let"></a><br>使用 <code>if-let</code> 替代 <code>let</code> + <code>if</code>。<br><sup>[<a href="#if-let">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">if-let</span></span> [result (<span class="name">foo</span> x)]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">something-with</span> result)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">something-else</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [result (<span class="name">foo</span> x)]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">if</span></span> result</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">something-with</span> result)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">something-else</span>)))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="when-let"></a><br>使用 <code>when-let</code> 替代 <code>let</code> + <code>when</code>。<br><sup>[<a href="#when-let">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">when-let</span></span> [result (<span class="name">foo</span> x)]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">do-something-with</span> result)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">do-something-more-with</span> result))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [result (<span class="name">foo</span> x)]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">when</span></span> result</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">do-something-with</span> result)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">do-something-more-with</span> result)))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="if-not"></a><br>使用 <code>if-not</code> 替代 <code>(if (not ...) ...)</code>。<br><sup>[<a href="#if-not">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">if-not</span></span> pred</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">foo</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">not</span></span> pred)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">foo</span>))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="when-not"></a><br>使用 <code>when-not</code> 替代 <code>(when (not ...) ...)</code>。<br><sup>[<a href="#when-not">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">when-not</span></span> pred</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">foo</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">bar</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">when</span></span> (<span class="name"><span class="builtin-name">not</span></span> pred)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">foo</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">bar</span>))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="when-not-instead-of-single-branch-if-not"></a><br>使用 <code>when-not</code> 替代 <code>(if-not ... (do ...)</code>。<br><sup>[<a href="#when-not-instead-of-single-branch-if-not">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">when-not</span></span> pred</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">foo</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">bar</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">if-not</span></span> pred</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">do</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">foo</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">bar</span>)))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="not-equal"></a><br>使用 <code>not=</code> 替代 <code>(not (= ...))</code>。<br><sup>[<a href="#not-equal">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">not=</span></span> foo bar)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">not</span></span> (<span class="name"><span class="builtin-name">=</span></span> foo bar))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="printf"></a><br>使用 <code>printf</code> 替代 <code>(print (format ...))</code>。<br><sup>[<a href="#printf">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">printf</span></span> <span class="string">"Hello, %s!\n"</span> name)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">format</span></span> <span class="string">"Hello, %s!"</span> name))</span></pre></td></tr></tbody></table></figure></li></ul><ul><li><p><a name="multiple-arity-of-gt-and-ls-fns"></a><br>在做比较，请考虑， Clojure的函数<code>&lt;</code><br><code>&gt;</code>等，接受可变数量的参数的函数。<br><sup>[<a href="#multiple-arity-of-gt-and-ls-fns">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">&lt;</span></span> <span class="number">5</span> x <span class="number">10</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">and</span></span> (<span class="name"><span class="builtin-name">&gt;</span></span> x <span class="number">5</span>) (<span class="name"><span class="builtin-name">&lt;</span></span> x <span class="number">10</span>))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="single-param-fn-literal"></a><br>当匿名函数只有一个参数时，优先使用 <code>%</code> ，而非 <code>%1</code> 。<br><sup>[<a href="#single-param-fn-literal">链接</a>]</sup></p>  <figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#(Math/round %)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">#(Math/round %1)</span></pre></td></tr></tbody></table></figure></li><li><p><a name="multiple-params-fn-literal"></a><br>当匿名函数有多个参数时，优先使用 <code>%1</code>，而非 <code>%</code> 。<br><sup>[<a href="#multiple-params-fn-literal">链接</a>]</sup></p>  <figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#(Math/pow %1 %2)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">#(Math/pow % %2)</span></pre></td></tr></tbody></table></figure></li><li><p><a name="no-useless-anonymous-fns"></a><br>只有在必要的时候才使用匿名函数。<br><sup>[<a href="#no-useless-anonymous-fns">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">filter</span></span> even? (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> <span class="number">10</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">filter</span></span> #(<span class="name"><span class="builtin-name">even?</span></span> %) (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> <span class="number">10</span>))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="no-multiple-forms-fn-literals"></a><br>若函数体由一个以上形式组成，不要使用匿名函数。<br><sup>[<a href="#no-multiple-forms-fn-literals">链接</a>]</sup></p>  <figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">fn</span></span> [x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">println</span> x)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">*</span></span> x <span class="number">2</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕 (你需要明确得使用到do)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">#(do (println %)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">     (* % 2))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="complement"></a><br>在特定情况下优先使用<code>complement</code>，而非匿名函数。<br><sup>[<a href="#complement">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">filter</span></span> (<span class="name"><span class="builtin-name">complement</span></span> some-pred?) coll)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">filter</span></span> #(<span class="name"><span class="builtin-name">not</span></span> (<span class="name">some-pred?</span> %)) coll)</span></pre></td></tr></tbody></table></figure><p>  这个规则应该在函数有明确的反函数时忽略（如：even? 与 odd?）。 </p></li><li><p><a name="comp"></a><br>某些情况下可以用 <code>comp</code> 使代码更简洁。<br><sup>[<a href="#comp">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; Assuming `(:require [clojure.string :as str])`...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">map</span></span> #(<span class="name">str/capitalize</span> (<span class="name">str/trim</span> %)) [<span class="string">"top "</span> <span class="string">" test "</span>])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 更好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">map</span></span> (<span class="name"><span class="builtin-name">comp</span></span> str/capitalize str/trim) [<span class="string">"top "</span> <span class="string">" test "</span>])</span></pre></td></tr></tbody></table></figure></li><li><p><a name="partial"></a><br>某些情况下可以用 <code>partial</code> 使代码更简洁。<br><sup>[<a href="#partial">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">map</span></span> #(<span class="name"><span class="builtin-name">+</span></span> <span class="number">5</span> %) (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> <span class="number">10</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; (或许) 更好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">map</span></span> (<span class="name"><span class="builtin-name">partial</span></span> + <span class="number">5</span>) (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> <span class="number">10</span>))</span></pre></td></tr></tbody></table></figure></li></ul><ul><li><p><a name="threading-macros"></a><br>当遇到嵌套调用时，建议使用 <code>-&gt;</code> 宏和 <code>-&gt;&gt;</code> 宏。<br><sup>[<a href="#threading-macros">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">-&gt;</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    reverse</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    (<span class="name"><span class="builtin-name">conj</span></span> <span class="number">4</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    prn)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 不够好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">prn</span></span> (<span class="name"><span class="builtin-name">conj</span></span> (<span class="name"><span class="builtin-name">reverse</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">           <span class="number">4</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">-&gt;&gt;</span></span> (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> <span class="number">10</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">     (<span class="name"><span class="builtin-name">filter</span></span> even?)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">     (<span class="name"><span class="builtin-name">map</span></span> (<span class="name"><span class="builtin-name">partial</span></span> * <span class="number">2</span>)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 不够好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">map</span></span> (<span class="name"><span class="builtin-name">partial</span></span> * <span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">     (<span class="name"><span class="builtin-name">filter</span></span> even? (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> <span class="number">10</span>)))</span></pre></td></tr></tbody></table></figure></li></ul><ul><li><p><a name="dot-dot-macro"></a><br>当需要连续调用Java类的方法时，优先使用 <code>..</code> ，而非 <code>-&gt;</code> 。<br><sup>[<a href="#dot-dot-macro">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">-&gt;</span></span> (<span class="name">System/getProperties</span>) (<span class="name">.get</span> <span class="string">"os.name"</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 更好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">..</span></span> System getProperties (<span class="name"><span class="builtin-name">get</span></span> <span class="string">"os.name"</span>))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="else-keyword-in-cond"></a><br>在 <code>cond</code> 和 <code>condp</code> 中，使用 <code>:else</code> 来处理不满足条件的情况。<br><sup>[<a href="#else-keyword-in-cond">链接</a>]</sup></p>  <figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">cond</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">&lt;</span></span> n <span class="number">0</span>) <span class="string">"negative"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">&gt;</span></span> n <span class="number">0</span>) <span class="string">"positive"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  :else "zero"))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">cond</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">&lt;</span></span> n <span class="number">0</span>) <span class="string">"negative"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">&gt;</span></span> n <span class="number">0</span>) <span class="string">"positive"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  true "zero"))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="condp"></a><br>当比较的变量和方式相同时，优先使用 <code>condp</code> ，而非 <code>cond</code> 。<br><sup>[<a href="#condp">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">cond</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">=</span></span> x <span class="number">10</span>) <span class="symbol">:ten</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">=</span></span> x <span class="number">20</span>) <span class="symbol">:twenty</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">=</span></span> x <span class="number">30</span>) <span class="symbol">:forty</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:else</span> <span class="symbol">:dunno</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 更好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">condp</span></span> = x</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="number">10</span> <span class="symbol">:ten</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="number">20</span> <span class="symbol">:twenty</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="number">30</span> <span class="symbol">:forty</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:dunno</span>)</span></pre></td></tr></tbody></table></figure></li><li><p><a name="case"></a><br>当条件是常量时，优先使用 <code>case</code> ，而非 <code>cond</code> 或 <code>condp</code> 。<br><sup>[<a href="#case">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">cond</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">=</span></span> x <span class="number">10</span>) <span class="symbol">:ten</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">=</span></span> x <span class="number">20</span>) <span class="symbol">:twenty</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">=</span></span> x <span class="number">30</span>) <span class="symbol">:forty</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:else</span> <span class="symbol">:dunno</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 更好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">condp</span></span> = x</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="number">10</span> <span class="symbol">:ten</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="number">20</span> <span class="symbol">:twenty</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="number">30</span> <span class="symbol">:forty</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:dunno</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 最佳</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">case</span></span> x</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="number">10</span> <span class="symbol">:ten</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="number">20</span> <span class="symbol">:twenty</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="number">30</span> <span class="symbol">:forty</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:dunno</span>)</span></pre></td></tr></tbody></table></figure></li><li><p><a name="shor-forms-in-cond"></a><br> 如果不能在视觉上使用注释与空行两两分组提示，则在 <code>cond</code> 相关的的形式中，使用短形式。<br><sup>[<a href="#shor-forms-in-cond">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">cond</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">test1</span>) (<span class="name">action1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">test2</span>) (<span class="name">action2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:else</span>   (<span class="name">default-action</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 还行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">cond</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">;; test case 1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">test1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">long-function-name-which-requires-a-new-line</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">complicated-sub-form</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      (<span class="name"><span class="builtin-name">-&gt;</span></span> 'which-spans multiple-lines)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">;; test case 2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">test2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">another-very-long-function-name</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">yet-another-sub-form</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      (<span class="name"><span class="builtin-name">-&gt;</span></span> 'which-spans multiple-lines)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">:else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">the-fall-through-default-case</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    (<span class="name">which-also-spans</span> 'multiple</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                      'lines)))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="set-as-predicate"></a><br>某些情况下，使用 <code>set</code> 作为判断条件。<br><sup>[<a href="#set-as-predicate">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">remove</span></span> #{<span class="number">1</span>} [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">remove</span></span> #(<span class="name"><span class="builtin-name">=</span></span> % <span class="number">1</span>) [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">count</span></span> (<span class="name"><span class="builtin-name">filter</span></span> #{\a \e \i \o \u} <span class="string">"mary had a little lamb"</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">count</span></span> (<span class="name"><span class="builtin-name">filter</span></span> #(<span class="name"><span class="builtin-name">or</span></span> (<span class="name"><span class="builtin-name">=</span></span> % \a)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                    (<span class="name"><span class="builtin-name">=</span></span> % \e)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                    (<span class="name"><span class="builtin-name">=</span></span> % \i)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                    (<span class="name"><span class="builtin-name">=</span></span> % \o)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                    (<span class="name"><span class="builtin-name">=</span></span> % \u))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">               <span class="string">"mary had a little lamb"</span>))</span></pre></td></tr></tbody></table></figure></li></ul><ul><li><p><a name="inc-and-dec"></a><br>使用 <code>(inc x)</code> 和 <code>(dec x)</code> 替代 <code>(+ x 1)</code> 和 <code>(- x 1)</code>。<br><sup>[<a href="#inc-and-dec">链接</a>]</sup></p></li><li><p><a name="pos-and-neg"></a><br>使用 <code>(pos? x)</code>、<code>(neg? x)</code> 、以及<code>(zero? x)</code> 替代 <code>(&gt; x 0)</code> 、<code>(&lt; x 0)</code> 、和<code>(= x 0)</code>。<br><sup>[<a href="#pos-and-neg">链接</a>]</sup></p></li><li><p><a name="list-star-instead-of-nested-cons"></a><br>Useinstead of a series of nestedinvocations.<br>使用 <code>list*</code> 替代内部嵌套多个 <code>cons</code> 。<br><sup>[<a href="#list-star-instead-of-nested-cons">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"># 很好</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">list*</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> [<span class="number">4</span> <span class="number">5</span>])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"># 糟糕</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">cons</span></span> <span class="number">1</span> (<span class="name"><span class="builtin-name">cons</span></span> <span class="number">2</span> (<span class="name"><span class="builtin-name">cons</span></span> <span class="number">3</span> [<span class="number">4</span> <span class="number">5</span>])))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="sugared-java-interop"></a><br>进行Java交互时，优先使用Clojure提供的语法糖。<br><sup>[<a href="#sugared-java-interop">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;; 创建对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(<span class="name">java.util.ArrayList.</span> <span class="number">100</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">new</span></span> java.util.ArrayList <span class="number">100</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;; 调用静态方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">(<span class="name">Math/pow</span> <span class="number">2</span> <span class="number">10</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">.</span></span> Math pow <span class="number">2</span> <span class="number">10</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;; 调用实例方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">(<span class="name">.substring</span> <span class="string">"hello"</span> <span class="number">1</span> <span class="number">3</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">.</span></span> <span class="string">"hello"</span> substring <span class="number">1</span> <span class="number">3</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;; 访问静态属性</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">Integer/MAX_VALUE</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">.</span></span> Integer MAX_VALUE)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;; 访问实例属性</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">(<span class="name">.someField</span> some-object)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">.</span></span> some-object someField)</span></pre></td></tr></tbody></table></figure></li><li><p><a name="compact-metadata-notation-for-true-flags"></a><br>Use the compact metadata notation for metadata that contains only<br>slots whose keys are keywords and whose value is boolean .<br>当元数据的键是关键字和值是 <code>true</code> ，使用紧凑形式标记元数据。<br><sup>[<a href="#compact-metadata-notation-for-true-flags">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> ^<span class="symbol">:private</span> a <span class="number">5</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> <span class="comment">^{:private true}</span> a <span class="number">5</span>)</span></pre></td></tr></tbody></table></figure></li><li><p><a name="private"></a><br>指出代码的私有部分。<br><sup>[<a href="#private">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn-</span></span> private-fun [] ...)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> ^<span class="symbol">:private</span> private-var ...)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> private-fun [] ...) <span class="comment">; not private at all</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> ^<span class="symbol">:private</span> private-fun [] ...) <span class="comment">; overly verbose</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> private-var ...) <span class="comment">; not private at all</span></span></pre></td></tr></tbody></table></figure></li><li><p><a name="access-private-var"></a><br>使用 <code>@#'some.ns/var</code> 形式，访问私有变量（如：为了测试）。<br><sup>[<a href="#access-private-var">链接</a>]</sup></p></li><li><p><a name="attach-metadata-carefully"></a><br>Be careful regarding what exactly do you attach metadata to.<br>小心你添加元数据的对象。<br><sup>[<a href="#attach-metadata-carefully">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 我们添加元数据到变量 `a`中</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> ^<span class="symbol">:private</span> a {})</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">meta</span></span> a) <span class="comment">;=&gt; nil</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">meta</span></span> #'a) <span class="comment">;=&gt; {:private true}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 我们添加元数据到空的hash-map中</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> a ^<span class="symbol">:private</span> {})</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">meta</span></span> a) <span class="comment">;=&gt; {:private true}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">meta</span></span> #'a) <span class="comment">;=&gt; nil</span></span></pre></td></tr></tbody></table></figure></li></ul><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a><a name="naming"></a>命名</h2><blockquote><p>编程中真正的难点只有两个：验证缓存的有效性和命名。<br>– Phil Karlton</p></blockquote><ul><li><p><a name="ns-naming-schemas"></a><br>命名空间建议使用以下两种方式：<br><sup>[<a href="#ns-naming-schemas">链接</a>]</sup></p><ul><li><code>项目名称.模块名称</code></li><li><code>组织名称.项目名称.模块名称</code></li></ul></li><li><p><a name="lisp-case-ns"></a><br>对于命名空间中较长的元素，使用 <code>lisp-case</code> 格式，如（<code>bruce.project-euler</code>）。<br><sup>[<a href="#lisp-case-ns">链接</a>]</sup></p></li><li><p><a name="lisp-case"></a><br>使用 <code>lisp-case</code> 格式来命名函数和变量。<br><sup>[<a href="#lisp-case">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> some-var ...)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> some-fun ...)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> someVar ...)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> somefun ...)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> some_fun ...)</span></pre></td></tr></tbody></table></figure></li><li><p><a name="CamelCase-for-protocols-records-structs-and-types"></a><br>使用 <code>CamelCase</code> 来命名接口（protocol）、记录（record）、结构和类型（struct &amp; type）。对于HTTP、RFC、XML等缩写，仍保留其大写格式。<br><sup>[<a href="#CamelCase-for-protocols-records-structs-and-types">链接</a>]</sup></p></li><li><p><a name="pred-with-question-mark"></a><br>对于返回布尔值的函数名称，使用问号结尾，（如: even?）。<br><sup>[<a href="#pred-with-question-mark">链接</a>]</sup></p> <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> palindrome? ...)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> palindrome-p ...) <span class="comment">; Common Lisp style</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> is-palindrome ...) <span class="comment">; Java style</span></span></pre></td></tr></tbody></table></figure></li><li><p><a name="changing-state-fns-with-exclamation-mark"></a><br>The names of functions/macros that are not safe in STM transactions<br>should end with an exclamation mark (e.g. <code>reset!</code>).<br>当方法或宏不能在STM中安全使用时，须以感叹号结尾，（如：reset!）。<br><sup>[<a href="#changing-state-fns-with-exclamation-mark">链接</a>]</sup></p></li><li><p><a name="arrow-instead-of-to"></a><br>命名类型转换函数时使用 <code>-&gt;</code> ，而非 <code>to</code> 。<br><sup>[<a href="#arrow-instead-of-to">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> f-&gt;c ...)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 不够好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> f-to-c ...)</span></pre></td></tr></tbody></table></figure></li><li><p><a name="earmuffs-for-dynamic-vars"></a><br>对于可供重绑定的变量（即动态变量），使用星号括起，（如：<em>earmuffs</em>）。<br><sup>[<a href="#earmuffs-for-dynamic-vars">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; good</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> ^<span class="symbol">:dynamic</span> *a* <span class="number">10</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; bad</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> ^<span class="symbol">:dynamic</span> a <span class="number">10</span>)</span></pre></td></tr></tbody></table></figure></li><li><p><a name="dont-flag-constants"></a><br>无需对常量名进行特殊的标识，因为所有的变量都应该是常量，除非有特别说明。<br><sup>[<a href="#dont-flag-constants">链接</a>]</sup></p></li><li><p><a name="underscore-for-unused-bindings"></a><br>对于解构过程中或参数列表中忽略的元素，使用 <code>_</code> 来表示。<br><sup>[<a href="#underscore-for-unused-bindings">链接</a>]</sup></p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [[a b _ c] [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">println</span> a b c))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">dotimes</span></span> [_ <span class="number">3</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">println</span> <span class="string">"Hello!"</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [[a b c d] [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">println</span> a b d))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">dotimes</span></span> [i <span class="number">3</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">println</span> <span class="string">"Hello!"</span>))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="idiomatic-names"></a><br>参考 <code>clojure.core</code> 中的命名规范，如 <code>pred</code> 、<code>coll</code> 。<br><sup>[<a href="#idiomatic-names">链接</a>]</sup></p><ul><li>函数：<ul><li><code>f</code>，<code>g</code>，<code>h</code> - 参数内容是一个函数</li><li><code>n</code> - 整数，通常是一个表示大小的值</li><li><code>index</code>, <code>i</code> - 整数索引</li><li><code>x</code>, <code>y</code> - 数值</li><li><code>xs</code> - 序列</li><li><code>m</code> - 映射</li><li><code>s</code> - 字符串</li><li><code>re</code> - 正则表达式</li><li><code>coll</code> - 集合</li><li><code>pred</code> - 谓词闭包</li><li><code>&amp; more</code> - 可变参数</li><li><code>xf</code> - xform, 一个转换器</li></ul></li><li>宏：<ul><li><code>expr</code> - 表达式</li><li><code>body</code> - 宏的主体</li><li><code>binding</code> - 一个向量，包含宏的绑定  </li></ul></li></ul></li></ul><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a><a name="collections">集合</a></h2><blockquote><a name="collections"><p>用100种函数去操作同一种数据结构，要好过用10种函数操作10种数据结构。<br><br>– Alan J. Perlis</p></a></blockquote><a name="collections"></a><ul><a name="collections"></a><li><a name="collections"></a><p><a name="collections"></a><a name="avoid-lists"></a><br>避免使用列表（list）来存储数据（除非它真的就是你想要的）。<br><sup>[<a href="#avoid-lists">链接</a>]</sup></p></li><li><p><a name="keywords-for-hash-keys"></a><br>优先使用关键字（keyword），而非普通的哈希键。<br><sup>[<a href="#keywords-for-hash-keys">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{<span class="symbol">:name</span> <span class="string">"Bruce"</span> <span class="symbol">:age</span> <span class="number">30</span>}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">{<span class="string">"name"</span> <span class="string">"Bruce"</span> <span class="string">"age"</span> <span class="number">30</span>}</span></pre></td></tr></tbody></table></figure></li><li><p><a name="literal-col-syntax"></a><br>编写集合时，优先使用字面的语法形式，而非构造函数。但是，在定义唯一值集合（set）时，只有当元素都是常量时才可使用字面语法，否则应使用构造函数。<br><sup>[<a href="#literal-col-syntax">链接</a>]</sup></p> <figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">#{1 2 3}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">hash-set</span></span> (<span class="name">func1</span>) (<span class="name">func2</span>)) <span class="comment">; 元素在运行时确定</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">vector</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">hash-set</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">#{(func1) (func2)} ; 若(func1)和(func2)的值相等，则会抛出运行时异常。</span></pre></td></tr></tbody></table></figure></li><li><p><a name="avoid-index-based-coll-access"></a><br>避免使用数值索引来访问集合元素。<br><sup>[<a href="#avoid-index-based-coll-access">链接</a>]</sup></p></li><li><p><a name="keywords-as-fn-to-get-map-values"></a><br>优先使用关键字来获取哈希表（map）中的值。<br><sup>[<a href="#keywords-as-fn-to-get-map-values">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> m {<span class="symbol">:name</span> <span class="string">"Bruce"</span> <span class="symbol">:age</span> <span class="number">30</span>})</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(<span class="symbol">:name</span> m)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 太过啰嗦</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">get</span></span> m <span class="symbol">:name</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕 - 可能抛出空指针异常</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">(<span class="name">m</span> <span class="symbol">:name</span>)</span></pre></td></tr></tbody></table></figure></li><li><p><a name="colls-as-fns"></a><br>集合可以被用作函数。<br><sup>[<a href="#colls-as-fns">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">filter</span></span> #{\a \e \o \i \u} <span class="string">"this is a test"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕 - 不够美观</span></span></pre></td></tr></tbody></table></figure></li><li><p><a name="keywords-as-fns"></a><br>关键字可以被用作函数。<br><sup>[<a href="#keywords-as-fns">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">((<span class="name"><span class="builtin-name">juxt</span></span> <span class="symbol">:a</span> <span class="symbol">:b</span>) {<span class="symbol">:a</span> <span class="string">"ala"</span> <span class="symbol">:b</span> <span class="string">"bala"</span>})</span></pre></td></tr></tbody></table></figure></li><li><p><a name="avoid-transient-colls"></a><br>只有在非常强调性能的情况下才可使用瞬时集合（transient collection）。<br><sup>[<a href="#avoid-transient-colls">链接</a>]</sup></p></li><li><p><a name="avoid-java-colls"></a><br>避免使用Java集合。<br><sup>[<a href="#avoid-java-colls">链接</a>]</sup></p></li><li><p><a name="avoid-java-arrays"></a><br>避免使用Java数组，除非遇到需要和Java类进行交互，或需要高性能地处理基本类型时才可使用。<br><sup>[<a href="#avoid-java-arrays">链接</a>]</sup></p></li></ul><h2 id="可变"><a href="#可变" class="headerlink" title="可变"></a><a name="mutation"></a>可变</h2><h3 id="引用（Refs）"><a href="#引用（Refs）" class="headerlink" title="引用（Refs）"></a>引用（Refs）</h3><ul><li><p><a name="refs-io-macro"></a><br>建议所有的IO操作都使用 <code>io!</code> 宏进行包装，以免不小心在事务中调用了这些代码。<br><sup>[<a href="#refs-io-macro">链接</a>]</sup></p></li><li><p><a name="refs-avoid-ref-set"></a><br>避免使用 <code>ref-set</code> 。<br><sup>[<a href="#refs-avoid-ref-set">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> r (<span class="name"><span class="builtin-name">ref</span></span> <span class="number">0</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">dosync</span></span> (<span class="name"><span class="builtin-name">alter</span></span> r + <span class="number">5</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">dosync</span></span> (<span class="name"><span class="builtin-name">ref-set</span></span> r <span class="number">5</span>))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="refs-small-transactions"></a><br>控制事务的大小，(即事务所执行的工作越少越好)。<br>as small as possible.<br><sup>[<a href="#refs-small-transactions">链接</a>]</sup></p></li><li><p><a name="refs-avoid-short-long-transactions-with-same-ref"></a><br>避免出现短期事务和长期事务访问同一个引用（Ref）的情形。<br><sup>[<a href="#refs-avoid-short-long-transactions-with-same-ref">链接</a>]</sup></p></li></ul><h3 id="代理（Agents）"><a href="#代理（Agents）" class="headerlink" title="代理（Agents）"></a>代理（Agents）</h3><ul><li><p><a name="agents-send"></a><br><code>send</code> 仅使用于计算密集型、不会因IO等因素阻塞的线程。<br><sup>[<a href="#agents-send">链接</a>]</sup></p></li><li><p><a name="agents-send-off"></a><br> <code>send-off</code> 则用于会阻塞、休眠的线程。<br><sup>[<a href="#agents-send-off">链接</a>]</sup></p></li></ul><h3 id="原子（Atoms）"><a href="#原子（Atoms）" class="headerlink" title="原子（Atoms）"></a>原子（Atoms）</h3><ul><li><p><a name="atoms-no-update-within-transactions"></a><br>避免在事务中更新原子。<br><sup>[<a href="#atoms-no-update-within-transactions">链接</a>]</sup></p></li><li><p><a name="atoms-prefer-swap-over-reset"></a><br>尽量使用 <code>swap!</code> ，而不是 <code>reset!</code>。<br><sup>[<a href="#atoms-prefer-swap-over-reset">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> a (<span class="name"><span class="builtin-name">atom</span></span> <span class="number">0</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">swap!</span></span> a + <span class="number">5</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 不够好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">reset!</span></span> a <span class="number">5</span>)</span></pre></td></tr></tbody></table></figure></li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><a name="strings"></a>字符串</h2><ul><li><p><a name="prefer-clojure-string-over-interop"></a><br>优先使用 <code>clojure.string</code> 中提供的字符串操作函数，而不是Java中提供的或是自己编写的函数。<br><sup>[<a href="#prefer-clojure-string-over-interop">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name">clojure.string/upper-case</span> <span class="string">"bruce"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name">.toUpperCase</span> <span class="string">"bruce"</span>)</span></pre></td></tr></tbody></table></figure></li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a><a name="exceptions"></a>异常</h2><ul><li><p><a name="reuse-existing-exception-types"></a><br>复用已有的异常类型，符合语言习惯的 Clojure 代码，当真的抛出异常时，会抛出标准类型的异常<br>(如： <code>java.lang.IllegalArgumentException</code>,<br><code>java.lang.UnsupportedOperationException</code>,<br><code>java.lang.IllegalStateException</code>, <code>java.io.IOException</code>).<br><sup>[<a href="#reuse-existing-exception-types">链接</a>]</sup></p></li><li><p><a name="prefer-with-open-over-finally"></a><br>优先使用 <code>with-open</code> ，而非 <code>finally</code>。<br><sup>[<a href="#prefer-with-open-over-finally">链接</a>]</sup></p></li></ul><h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a><a name="macros"></a>宏</h2><ul><li><p><a name="dont-write-macro-if-fn-will-do"></a><br>如果可以用函数实现相同功能，不要编写一个宏。<br><sup>[<a href="#dont-write-macro-if-fn-will-do">链接</a>]</sup></p></li><li><p><a name="write-macro-usage-before-writing-the-macro"></a><br>首先编写一个宏的用例，尔后再编写宏本身。<br><sup>[<a href="#write-macro-usage-before-writing-the-macro">链接</a>]</sup></p></li><li><p><a name="break-complicated-macros"></a><br>尽可能将一个复杂的宏拆解为多个小型的函数。<br><sup>[<a href="#break-complicated-macros">链接</a>]</sup></p></li><li><p><a name="macros-as-syntactic-sugar"></a><br>宏只应用于简化语法，其核心应该是一个普通的函数。<br><sup>[<a href="#macros-as-syntactic-sugar">链接</a>]</sup></p></li><li><p><a name="syntax-quoted-forms"></a><br>使用语法转义（syntax-quote，即反引号），而非手动构造list。<br><sup>[<a href="#syntax-quoted-forms">链接</a>]</sup></p></li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a><a name="comments"></a>注释</h2><blockquote><p>好的代码本身就是文档。因此在添加注释之前，先想想自己该如何改进代码，让它更容易理解。做到这一点后，再通过注释让代码更清晰。<br><br>– Steve McConnell</p></blockquote><ul><li><p><a name="self-documenting-code"></a><br>学会编写容易理解的代码，然后忽略下文的内容。真的！<br><sup>[<a href="#self-documenting-code">链接</a>]</sup></p></li><li><p><a name="four-semicolons-for-heading-comments"></a><br>对于标题型的注释，使用至少四个分号起始。<br><sup>[<a href="#four-semicolons-for-heading-comments">链接</a>]</sup></p></li><li><p><a name="three-semicolons-for-top-level-comments"></a><br>对于顶层注释，使用三个分号起始。<br><sup>[<a href="#three-semicolons-for-top-level-comments">链接</a>]</sup></p></li><li><p><a name="two-semicolons-for-code-fragment"></a><br>为某段代码添加注释时，使用两个分号起始，且应与该段代码对齐。<br><sup>[<a href="#two-semicolons-for-code-fragment">链接</a>]</sup></p></li><li><p><a name="one-semicolon-for-margin-comments"></a><br>对于行尾注释，使用一个分号起始即可。<br><sup>[<a href="#one-semicolon-for-margin-comments">链接</a>]</sup></p></li><li><p><a name="semicolon-space"></a><br>分号后面要有一个空格。<br><sup>[<a href="#semicolon-space">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;;; Frob Grovel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;; 这段代码有以下前提:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;;   1. Foo.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;;   2. Bar.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;;   3. Baz.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> fnord [zarquon]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">;; If zob, then veeblefitz.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">quux</span> zot</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        mumble             <span class="comment">; Zibblefrotz.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        frotz))</span></pre></td></tr></tbody></table></figure><ul><li><a name="english-syntax"></a><br>对于完整的句子的注释，句首字母应该大写，句与句之间用一个空格分隔。<br><a href="http://en.wikipedia.org/wiki/Sentence_spacing" target="_blank" rel="external nofollow noreferrer noopener">one space</a>.<br><sup>[<a href="#english-syntax">链接</a>]</sup></li></ul></li><li><p><a name="no-superfluous-comments"></a><br>避免冗余的注释。<br><sup>[<a href="#no-superfluous-comments">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">inc</span></span> counter) <span class="comment">; increments counter by one</span></span></pre></td></tr></tbody></table></figure></li><li><p><a name="comment-upkeep"></a><br>注释要和代码同步更新。过期的注释还不如没有注释。<br>at all.<br><sup>[<a href="#comment-upkeep">链接</a>]</sup></p></li><li><p><a name="dash-underscore-reader-macro"></a><br>有时，使用 <code>#_</code>  宏要优于普通的注释<br><sup>[<a href="#dash-underscore-reader-macro">链接</a>]</sup></p></li></ul><pre><code><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">+</span></span> foo #_(<span class="name">bar</span> x) delta)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">+</span></span> foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   <span class="comment">;; (bar x)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">   delta)</span></pre></td></tr></tbody></table></figure></code></pre><blockquote><p>好的代码和好的笑话一样，不需要额外的解释。 <br><br>– Russ Olsen</p></blockquote><ul><li><a name="refactor-dont-comment"></a><br>避免使用注释去描述一段写得很糟糕的代码。重构它，让它更为可读。（做或者不做，没有尝试这一说。–Yoda）<br><sup>[<a href="#refactor-dont-comment">链接</a>]</sup></li></ul><h3 id="注释中的标识"><a href="#注释中的标识" class="headerlink" title="注释中的标识"></a><a name="comment-annotations"></a>注释中的标识</h3><ul><li><p><a name="annotate-above"></a><br>标识应该写在对应代码的上一行。<br><sup>[<a href="#annotate-above">链接</a>]</sup></p></li><li><p><a name="annotate-keywords"></a><br>标识后面是一个冒号和一个空格，以及一段描述文字。<br><sup>[<a href="#annotate-keywords">链接</a>]</sup></p></li><li><p><a name="indent-annotations"></a><br>如果标识的描述文字超过一行，则第二行需要进行缩进。<br><sup>[<a href="#indent-annotations">链接</a>]</sup></p></li><li><p><a name="sing-and-date-annotations"></a><br>将自己姓名的首字母以及当前日期附加到标识描述文字中<br><sup>[<a href="#sing-and-date-annotations">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> some-fun</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">;; <span class="doctag">FIXME:</span> 这段代码在v1.2.3之后偶尔会崩溃。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">;;        这可能和升级BarBazUtil有关。（xz 13-1-31）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">baz</span>))</span></pre></td></tr></tbody></table></figure></li><li><p><a name="rare-eol-annotations"></a><br>对于功能非常明显，实在无需添加注释的情况，可以在行尾添加一个标识。<br><sup>[<a href="#rare-eol-annotations">链接</a>]</sup></p>  <figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> bar</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">sleep</span> <span class="number">100</span>)) <span class="comment">; OPTIMIZE</span></span></pre></td></tr></tbody></table></figure></li><li><p><a name="todo"></a><br>使用 <code>TODO</code> 来表示需要后期添加的功能或特性。<br><sup>[<a href="#todo">链接</a>]</sup></p></li><li><p><a name="fixme"></a><br> 使用 <code>FIXME</code> 来表示需要修复的问题。<br><sup>[<a href="#fixme">链接</a>]</sup></p></li><li><p><a name="optimize"></a><br>使用 <code>OPTIMIZE</code> 来表示会引起性能问题的代码，并需要修复。<br><sup>[<a href="#optimize">链接</a>]</sup></p></li><li><p><a name="hack"></a><br>使用 <code>HACK</code> 来表示这段代码并不正规，需要在后期进行重构。<br><sup>[<a href="#hack">链接</a>]</sup></p></li><li><p><a name="review"></a><br>使用 <code>REVIEW</code> 来表示需要进一步审查这段代码，如：<code>REVIEW: 你确定客户会正确地操作X吗？</code><br><sup>[<a href="#review">链接</a>]</sup></p></li><li><p><a name="document-annotations"></a><br>可以使用其它你认为合适的标识关键字，但记得一定要在项目的 <code>README</code> 文件中描述这些自定义的标识。<br><sup>[<a href="#document-annotations">链接</a>]</sup></p></li></ul><h2 id="惯用法"><a href="#惯用法" class="headerlink" title="惯用法"></a><a name="existential"></a>惯用法</h2><ul><li><p><a name="be-functional"></a><br>使用函数式风格进行编程，避免改变变量的值。<br><sup>[<a href="#be-functional">链接</a>]</sup></p></li><li><p><a name="be-consistent"></a><br>保持编码风格。<br><sup>[<a href="#be-consistent">链接</a>]</sup></p></li><li><p><a name="common-sense"></a><br>用正常人的思维来思考。<br><sup>[<a href="#common-sense">链接</a>]</sup> </p></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a><a name="tooling"></a>工具</h2><p>这里有一些由Clojure的社区创建的工具，可能会帮助你<br>在你努力写出地道的Clojure代码。</p><ul><li><a href="https://github.com/technomancy/slamhound" target="_blank" rel="external nofollow noreferrer noopener">Slamhound</a>是一种能自动从你的现有的代码生成合适的 <code>ns</code> 声明。</li><li><a href="https://github.com/jonase/kibit" target="_blank" rel="external nofollow noreferrer noopener">kibit</a> 是一个用于Clojure的静态代码分析器。<br><a href="https://github.com/clojure/core.logic" target="_blank" rel="external nofollow noreferrer noopener">core.logic</a> 为代码搜索可能存在一个更惯用模式函数或宏。   </li></ul><h1 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h1><p>本文中的所有内容都还没有最后定型，我很希望能够和所有对Clojure代码规范感兴趣的同仁一起编写此文，从而形成一份对社区有益的文档。</p><p>你可以随时创建讨论话题，或发送合并申请。我在这里提前表示感谢。</p><p>You can also support the style guide with financial<br>contributions via <a href="https://www.gittip.com/bbatsov" target="_blank" rel="external nofollow noreferrer noopener">gittip</a>.</p><p><a href="https://www.gittip.com/bbatsov" target="_blank" rel="external nofollow noreferrer noopener"><img alt="Support via Gittip" data-src="https://rawgithub.com/twolfson/gittip-badge/0.2.0/dist/gittip.png" class="lazyload"></a></p><h1 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h1><p><img alt="创作共用许可" data-src="http://i.creativecommons.org/l/by/3.0/88x31.png" class="lazyload"><br>这项工作是根据<br><a href="http://creativecommons.org/licenses/by/3.0/deed.en_US" target="_blank" rel="external nofollow noreferrer noopener">知识共享署名3.0 本地化许可协议 </a>许可。</p><h1 id="宣传"><a href="#宣传" class="headerlink" title="宣传"></a>宣传</h1><p>一份由社区驱动的代码规范如果得不到社区本身的支持和认同，那它就毫无意义了。微博转发这份指南，分享给你的朋友或同事。我们得到的每个注解、建议或意见都可以让这份指南变得更好一点。而我们想要拥有的是最好的指南，不是吗？</p><p>Cheers,<br><br><a href="https://twitter.com/bbatsov" target="_blank" rel="external nofollow noreferrer noopener">Bozhidar</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Clojure-代码规范&quot;&gt;&lt;a href=&quot;#Clojure-代码规范&quot; class=&quot;headerlink&quot; title=&quot;Clojure 代码规范&quot;&gt;&lt;/a&gt;Clojure 代码规范&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Role models are important. &lt;br&gt;&lt;br&gt;– Officer Alex J. Murphy / RoboCop&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://github.com/bbatsov/clojure-style-guide&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;https://github.com/bbatsov/clojure-style-guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这份Clojure代码规范旨在提供一系列的最佳实践，让现实工作中的Clojure程序员能够写出易于维护的代码，并能与他人协作和共享。一份反应真实需求的代码规范才能被人接收，而那些理想化的、甚至部分观点遭到程序员拒绝的代码规范注定不会长久——无论它有多出色。&lt;/p&gt;
&lt;p&gt;这份规范由多个章节组成，每个章节包含一组相关的规则。我会尝试去描述每条规则背后的理念（过于明显的理念我就省略了）。&lt;/p&gt;
&lt;p&gt;这些规则并不是我凭空想象的，它们出自于我作为一个专业软件开发工程师长久以来的工作积累，以及Clojure社区成员们的反馈和建议，还有各种广为流传的Clojure编程学习资源，如《Clojure Programming》、《The Joy of Clojure》等。&lt;/p&gt;
&lt;p&gt;这份规范还处于编写阶段，部分章节有所缺失，内容并不完整；部分规则没有示例，或者示例还不能完全将其描述清楚。未来这些问题都会得到改进，只是请你了解这一情况。&lt;/p&gt;
&lt;p&gt;你可以使用&lt;a href=&quot;https://github.com/TechnoGate/transmuter&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;Transmuter&lt;/a&gt;生成一份本规范的PDF或HTML格式的文档。&lt;/p&gt;
&lt;p&gt;本指南的翻译可在以下几种语言中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/totakke/clojure-style-guide/blob/ja/README.md&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;Japanese&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kwakbab/clojure-style-guide/blob/master/README-koKO.md&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;Korean&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#source-code-layout--organization&quot;&gt;源代码的布局和组织结构&lt;/a&gt;　&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#syntax&quot;&gt;语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#naming&quot;&gt;命名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#collections&quot;&gt;集合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#mutation&quot;&gt;可变&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#strings&quot;&gt;字符串&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#exceptions&quot;&gt;异常&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#macros&quot;&gt;宏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#comments&quot;&gt;注释&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#comment-annotations&quot;&gt;注释中的标识&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#existential&quot;&gt;惯用法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tooling&quot;&gt;工具&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Guide" scheme="http://notes.seirhsiao.com/categories/Guide/"/>
    
    
      <category term="指南" scheme="http://notes.seirhsiao.com/tags/%E6%8C%87%E5%8D%97/"/>
    
      <category term="风格" scheme="http://notes.seirhsiao.com/tags/%E9%A3%8E%E6%A0%BC/"/>
    
      <category term="翻译" scheme="http://notes.seirhsiao.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="代码规范" scheme="http://notes.seirhsiao.com/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Clojure 学习 —— 序列函数</title>
    <link href="http://notes.seirhsiao.com/posts/3b0a3388/"/>
    <id>http://notes.seirhsiao.com/posts/3b0a3388/</id>
    <published>2019-02-03T04:23:38.000Z</published>
    <updated>2019-12-05T14:44:27.753Z</updated>
    
    <content type="html"><![CDATA[<p>clojure seq常见函数(宏)示例</p><a id="more"></a><h3 id="操作集合的通用语句"><a href="#操作集合的通用语句" class="headerlink" title="操作集合的通用语句"></a>操作集合的通用语句</h3><p><strong>1、<code>count</code>：</strong><br><code>count</code>函数返回集合中元素的个数，如果<code>count</code>参数为<code>nil</code>，则返回<code>0</code></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">count</span></span> <span class="literal">nil</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">0  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">count</span></span> [])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">0  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">count</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">3  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">count</span></span> '(<span class="number">1</span> <span class="string">"a"</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">2  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">count</span></span> {<span class="symbol">:one</span> <span class="number">1</span> <span class="symbol">:two</span> <span class="number">2</span>})  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">2  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">count</span></span> <span class="string">"string"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">6</span></pre></td></tr></tbody></table></figure><p><strong>2、<code>empty</code>：</strong><br>返回一个空的集合，集合类型不变，如果<code>empty</code>参数为<code>nil</code>，则返回<code>nil</code></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">empty</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">empty</span></span> (<span class="name"><span class="builtin-name">list</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">()  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">empty</span></span> {<span class="symbol">:key1</span> <span class="number">1</span>})  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">{}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">empty</span></span> <span class="literal">nil</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">nil</span></pre></td></tr></tbody></table></figure><p><strong>3、<code>not-empty</code>：</strong><br>如果集合为空，返回<code>nil</code>，其它直接返回参数指向的集合</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">not-empty</span> [])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">nil  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">not-empty</span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(1 2 3)</span></pre></td></tr></tbody></table></figure><p><strong>4、<code>into</code>：</strong><br><code>into</code>接受两个集合参数，并且将第二个集合参数元素全部插入到第一个集合参数中，再返回。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">into</span></span> {} [[<span class="number">1</span> <span class="number">2</span>] [<span class="number">3</span> <span class="number">4</span>]])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{1 2, 3 4}  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">into</span></span> [] {<span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span>})  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">[[:a 1] [:b 2]]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">into</span></span> () '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(3 2 1)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">into</span></span> [<span class="string">"a"</span> <span class="string">"b"</span>] '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">["a" "b" 1 2 3]</span></pre></td></tr></tbody></table></figure><p><strong>5、<code>contains?</code>：</strong><br>如果当前给定的集合（第一个参数）存在<code>key</code>（第二个参数），则返回<code>true</code>，否则返回<code>false</code>。特别指出，对于数组、<code>vector</code>以索引标识的集合，如果<code>key</code>在索引返回内，则返回<code>true</code>，否则返回<code>false</code>，对于列表类型，总是返回<code>false</code>。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">contains?</span></span> {<span class="symbol">:a</span> <span class="number">1</span>} <span class="symbol">:a</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">contains?</span></span> {<span class="symbol">:a</span> <span class="literal">nil</span>} <span class="symbol">:a</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">contains?</span></span> {<span class="symbol">:a</span> <span class="number">1</span>} <span class="symbol">:b</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">contains?</span></span> [<span class="symbol">:a</span> <span class="symbol">:b</span> <span class="symbol">:c</span>] <span class="symbol">:b</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">contains?</span></span> [<span class="symbol">:a</span> <span class="symbol">:b</span> <span class="symbol">:c</span>] <span class="number">2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">contains?</span></span> <span class="string">"f"</span> <span class="number">0</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">contains?</span></span> <span class="string">"f"</span> <span class="number">2</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">contains?</span></span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>) <span class="number">1</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">contains?</span></span> #{<span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"v"</span>} <span class="string">"a"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">contains?</span></span> #{<span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"c"</span>} <span class="string">"z"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">false</span></pre></td></tr></tbody></table></figure><p><strong>6、<code>distinct?</code>：</strong><br>如果传递的参数列表中有值相同的，返回<code>false</code>，否则返回<code>true</code>。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">distinct?</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">distinct?</span></span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">distinct?</span></span> <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"a"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">false</span></pre></td></tr></tbody></table></figure><p><strong>7、<code>empty?</code>：</strong><br>接受一个集合参数，如果该集合没有元素，则返回<code>true</code>，否则返回<code>false</code>。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">empty?</span></span> ())  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">empty?</span></span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">empty?</span></span> [])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">empty?</span></span> {})  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">empty?</span></span> #{})  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">true</span></pre></td></tr></tbody></table></figure><p><strong>8、<code>every?</code>：</strong><br><code>every?</code>接受两个参数，第一个参数为检查函数，第二个参数为集合。如果该检查函数对集合所有元素都通过，则返回<code>true</code>，否则返回<code>false</code>。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">every?</span> even? '(<span class="number">2</span> <span class="number">4</span> <span class="number">6</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">every?</span> odd? '(<span class="number">1</span> <span class="number">3</span> <span class="number">9</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">every?</span> <span class="literal">true</span>? '())  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">every?</span> <span class="literal">false</span>? '())  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">true</span></pre></td></tr></tbody></table></figure><p><strong>9、<code>not-every?</code>：</strong><br><code>not-every?</code>与<code>every</code>作用相反。参照<code>every</code>介绍。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">not-every?</span></span> odd? '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">not-every?</span></span> odd? '(<span class="number">1</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">false</span></pre></td></tr></tbody></table></figure><p><strong>10、<code>some</code>：</strong><br><code>some</code>与<code>every?</code>作用类似，区别是some要求集合中只要有一个元素检查为<code>true</code>，则返回<code>true</code>。所有检查都不通过，则返回<code>nil</code>。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">some</span> even? '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">some</span> even? '(<span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">nil  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">some</span> <span class="literal">true</span>? [<span class="literal">false</span> <span class="literal">false</span> <span class="literal">false</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">nil  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name">some</span> <span class="literal">true</span>? [<span class="literal">false</span> <span class="literal">true</span> <span class="literal">false</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">true</span></pre></td></tr></tbody></table></figure><p><strong>11、<code>not-any?</code>：</strong><br><code>not-any?</code>与<code>some</code>函数作用也相反（定义为<code>comp not some</code>），可参考<code>some</code>描述。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">not-any?</span></span> odd? '(<span class="number">2</span> <span class="number">4</span> <span class="number">6</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">not-any?</span></span> odd? '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">false</span></pre></td></tr></tbody></table></figure><p><strong>12、<code>sequential?</code>：</strong><br><code>sequential?</code>检查集合是否实现<code>Sequential</code>接口（不是排序，而是顺序存储），是则返回<code>true</code>，否则返回<code>false</code>。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">user=&gt; (sequential? '(2 1 3))  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">user=&gt; (sequential? {:a 1 :d 2 :b 3})  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">user=&gt; (sequential? 1)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">false</span></pre></td></tr></tbody></table></figure><p><strong>13、<code>associative?</code>：</strong><br><code>associative?</code>检查集合是否实现<code>Associative</code>接口，是则返回<code>true</code>，否则返回<code>false</code>。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">associative?</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">associative?</span></span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">false</span></pre></td></tr></tbody></table></figure><p><strong>14、<code>sorted?</code>：</strong><br><code>sorted?</code>检查集合是否实现<code>Sorted</code>接口，是则返回<code>true</code>，否则返回<code>false</code>。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">sorted?</span></span> (<span class="name"><span class="builtin-name">sorted-set</span></span> <span class="number">5</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">sorted?</span></span> (<span class="name"><span class="builtin-name">sorted-map</span></span> <span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:c</span> <span class="number">3</span> <span class="symbol">:b</span> <span class="number">2</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">sorted?</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">false</span></pre></td></tr></tbody></table></figure><p><strong>15、<code>counted?</code>：</strong><br>如果集合参数以常量时间内返回元素总和时，返回<code>true</code>，否则返回<code>false</code>。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">sorted?</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">counted?</span></span> [<span class="symbol">:a</span> <span class="symbol">:b</span> <span class="symbol">:c</span>])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">counted?</span></span> '(<span class="symbol">:a</span> <span class="symbol">:b</span> <span class="symbol">:c</span>))  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">counted?</span></span> {<span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span> <span class="symbol">:c</span> <span class="number">3</span>})  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">counted?</span></span> <span class="string">"asdf"</span>)  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">false</span></pre></td></tr></tbody></table></figure><p><strong>16、<code>reversible?</code>：</strong><br><code>reversible?</code>检查集合参数是否实现<code>Reversible</code>接口，是则返回<code>true</code>，否则返回<code>false</code>。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">reversible?</span></span> [])  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">true  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">reversible?</span></span> '())  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">reversible?</span></span> #{})  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">false</span></pre></td></tr></tbody></table></figure><h4 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h4><p><strong>1、<code>coll?</code>：</strong><br>如果给定的参数实现<code>IPersistentCollection</code>接口（集合都会实现该接口），则返回<code>true</code>，否则返回<code>false</code>。</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">coll?</span></span> {})   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">true   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">coll?</span></span> #{})   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">true   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">coll?</span></span> [])   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">true   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">coll?</span></span> ())   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">true   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">coll?</span></span> <span class="number">4</span>)   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">coll?</span></span> <span class="string">"fred"</span>)   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">coll?</span></span> <span class="literal">true</span>)   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">false  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">coll?</span></span> <span class="literal">nil</span>)   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">false</span></pre></td></tr></tbody></table></figure><p><strong>2、<code>seq?</code>：</strong><br>如果给定的参数实现<code>ISeq</code>接口（序列实现该接口，序列内容在下篇讲解），则返回<code>true</code>，否则返回<code>false</code></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">seq?</span></span> <span class="number">1</span>)   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">false   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">seq?</span></span> [<span class="number">1</span>])   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">false   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">seq?</span></span> (<span class="name"><span class="builtin-name">seq</span></span> [<span class="number">1</span>]))   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">true</span></pre></td></tr></tbody></table></figure><p><strong>3、<code>vector?</code>：</strong><br>如果给定的参数实现<code>IPersistentVector</code>接口（向量<code>Vector</code>实现该接口），则返回<code>true</code>，否则返回<code>false</code></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">vector?</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>])   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">true   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">vector?</span></span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">false   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">vector?</span></span> (<span class="name"><span class="builtin-name">vec</span></span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)))   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">true</span></pre></td></tr></tbody></table></figure><p><strong>4、<code>list?</code>：</strong><br>如果给定的参数实现<code>IPersistentList</code>接口（列表<code>List</code>实现该接口），则返回<code>true</code>，否则返回<code>false</code></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">list?</span></span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">true   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">list?</span></span> (<span class="name"><span class="builtin-name">list</span></span> <span class="number">1</span> <span class="number">2</span>))   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">true   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">list?</span></span> <span class="number">0</span>)   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">false   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">list?</span></span> {})   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">false   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">list?</span></span> [])   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">false</span></pre></td></tr></tbody></table></figure><p><strong>5、<code>map?</code>：</strong><br>如果给定的参数实现<code>IPersistentMap</code>接口（映射<code>Map</code>实现该接口），则返回<code>true</code>，否则返回<code>false</code></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">map?</span></span> {<span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span> <span class="symbol">:c</span> <span class="number">3</span>})   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">true   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span><span class="clojure"> (<span class="name"><span class="builtin-name">map?</span></span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">false</span></pre></td></tr></tbody></table></figure><p><strong>6、<code>set?</code>：</strong><br>如果给定的参数实现<code>IPersistentSet</code>接口（<code>set</code>集合实现该接口），则返回<code>true</code>，否则返回<code>false</code></p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">user&gt; (set? #{1 2 3})   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">true   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">user&gt; (set? [1 2 3])   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">false   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">user&gt; (set? {:a 1 :b 2})   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">false</span></pre></td></tr></tbody></table></figure><p>实际上本篇介绍的各种检查语句，都是检查底层实现类所实现的接口（具有对应接口的功能），比如说列表<code>List</code>的实现类定义为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersistentList</span> <span class="keyword">extends</span> <span class="title">ASeq</span>  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class">  <span class="keyword">implements</span> <span class="title">IPersistentList</span>, <span class="title">IReduce</span>, <span class="title">List</span>, <span class="title">Counted</span></span></span></pre></td></tr></tbody></table></figure><p>二、参考资料<br><a href="http://dead-knight.iteye.com/blog/1831446" target="_blank" rel="external nofollow noreferrer noopener">clojure-基本语法-集合（三）</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      clojure seq常见函数(宏)示例
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="集合" scheme="http://notes.seirhsiao.com/tags/%E9%9B%86%E5%90%88/"/>
    
      <category term="seq" scheme="http://notes.seirhsiao.com/tags/seq/"/>
    
  </entry>
  
  <entry>
    <title>Windows 上安装 Jekyll</title>
    <link href="http://notes.seirhsiao.com/posts/a883aa98/"/>
    <id>http://notes.seirhsiao.com/posts/a883aa98/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:18:09.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows-上安装-Jekyll"><a href="#Windows-上安装-Jekyll" class="headerlink" title="Windows 上安装 Jekyll"></a>Windows 上安装 Jekyll</h1><p>Jekyll是一个静态网站生成工具。它允许用户使用HTML、Markdown或Textile来建立静态页面，然后通过模板引擎Liquid（Liquid Templating Engine）来运行.</p><p>原文链接：<a href="http://yizeng.me/2013/05/10/setup-jekyll-on-windows/" target="_blank" rel="external nofollow noreferrer noopener">Setup Jekyll on Windows</a></p><a id="more"></a><p>目前，网上有许多Jekyll的安装方法，大都相似，为了方便更多准备学习Jekyll的人，特翻译如下：</p><p>共分为以下几个重要步骤</p><ul><li>安装 Ruby</li><li>安装 DevKit</li><li>安装 Jekyll</li><li>安装 Pygments<ul><li>安装 Python</li><li>安装 ‘Easy Install’</li><li>安装 Pygments</li></ul></li><li>启动 Jekyll</li><li>故障诊断</li></ul><h2 id="安装-Ruby"><a href="#安装-Ruby" class="headerlink" title="安装 Ruby"></a>安装 Ruby</h2><ol><li><p>前往 <a href="http://rubyinstaller.org/downloads/" target="_blank" rel="external nofollow noreferrer noopener">http://rubyinstaller.org/downloads/</a></p></li><li><p>在 “<code>RubyInstallers</code>” 部分，选择某个版本点击下载。<br> 例如， <code>Ruby 2.0.0-p451 (x64)</code> 是适于64位 Windows 机器上的 Ruby 2.0.0 x64 安装包。</p></li><li><p>通过安装包安装</p><ul><li>最好保持默认的路径 C:\Ruby200-x64， 因为安装包明确提出 “请不要使用带有空格的文件夹 (如： Program Files)”。</li><li>勾选 “Add Ruby executables to your PATH”，这样执行程序会被自动添加至 PATH 而避免不必要的头疼。<br><img alt="2013-05-11-ruby-installer.png" data-src="/static/images/jekyll/2013-05-11-ruby-installer.png" class="lazyload"><br>Windows Ruby 安装包</li></ul></li><li><p>打开一个命令提示行并输入以下命令来检测 Ruby 是否成功安装。</p><blockquote><p>   <code>ruby -v</code></p></blockquote><p> 输出示例：</p><blockquote><p>   <code>ruby 2.0.0p451 (2014-02-24) [x64-mingw32]</code></p></blockquote></li></ol><h2 id="安装DevKit"><a href="#安装DevKit" class="headerlink" title="安装DevKit"></a>安装<code>DevKit</code></h2><p><strong>DevKit</strong>是一个在<code>Windows</code>上帮助简化安装及使用<code>Ruby C/C++</code>扩展如<code>RDiscount</code>和<code>RedCloth</code>的工具箱。 详细的安装指南可以在程序的<a href="https://github.com/oneclick/rubyinstaller/wiki/Development-Kit#installation-instructions" target="_blank" rel="external nofollow noreferrer noopener">wiki页面</a>阅读。</p><ol><li><p>再次前往 <a href="http://rubyinstaller.org/downloads/" target="_blank" rel="external nofollow noreferrer noopener">http://rubyinstaller.org/downloads/</a></p></li><li><p>下载同系统及<code>Ruby</code>版本相对应的<code>DevKit</code>安装包。 例如，<code>DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe</code> 适用于64位<code>Windows</code>系统上的 <code>Ruby 2.0.0 x64</code>。</p><p> 下面列出了如何选择正确的 DevKit 版本：</p><blockquote><p><strong>Ruby 1.8.6 to 1.9.3</strong>: DevKit tdm-32-4.5.2<br><strong>Ruby 2.0.0</strong>: DevKit mingw64-32-4.7.2<br><strong>Ruby 2.0.0 x64</strong>: DevKit mingw64-64-4.7.2</p></blockquote></li><li><p>运行安装包并解压缩至某文件夹，如 <code>C:\DevKit</code></p></li><li><p>通过初始化来创建 <code>config.yml</code> 文件。在命令行窗口内，输入下列命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> “C:\DevKit”</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">ruby dk.rb init</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">notepad config.yml</span></pre></td></tr></tbody></table></figure></li><li><p>在打开的记事本窗口中，于末尾添加新的一行 - C:\Ruby200-x64，保存文件并退出。</p></li><li><p>回到命令行窗口内，审查（非必须）并安装。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ruby dk.rb review</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">ruby dk.rb install</span></pre></td></tr></tbody></table></figure></li></ol><h2 id="安装-Jekyll"><a href="#安装-Jekyll" class="headerlink" title="安装 Jekyll"></a>安装 Jekyll</h2><ol><li>确保 gem 已经正确安装<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">gem -v</span></pre></td></tr></tbody></table></figure> 输出示例：<figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="number">2.0</span><span class="number">.14</span></span></pre></td></tr></tbody></table></figure></li><li>安装 Jekyll gem<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">gem install jekyll</span></pre></td></tr></tbody></table></figure></li></ol><h2 id="安装-Pygments"><a href="#安装-Pygments" class="headerlink" title="安装 Pygments"></a>安装 Pygments</h2><p><strong>Jekyll</strong> 里默认的语法高亮插件是 <a href="http://pygments.org/" target="_blank" rel="external nofollow noreferrer noopener">Pygments</a>。 它需要安装<code>Python</code> 并在网站的配置文件_config.yml 里将<code>highlighter</code>的值设置为pygments。</p><p>不久之前，Jekyll 还添加另一个高亮引擎名为<a href="https://github.com/jayferd/rouge" target="_blank" rel="external nofollow noreferrer noopener">Rouge</a>， 尽管暂时不如 Pygments 支持那么多的语言，但它是原生 Ruby 程序，而不需要使用 Python。 更多信息请<a href="http://jekyllrb.com/docs/templates/#code-snippet-highlighting" target="_blank" rel="external nofollow noreferrer noopener">点此</a>关注。</p><h2 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h2><ol><li>前往 <a href="http://www.python.org/download/" target="_blank" rel="external nofollow noreferrer noopener">http://www.python.org/download/</a></li><li>下载合适的 Python windows 安装包，如 <code>Python 2.7.6 Windows Installer</code>。 <strong>请注意</strong>，Python 2 可能会更合适，因为暂时 Python 3 可能不会正常工作。</li><li>安装</li><li>添加安装路径 (如： <code>C:\Python27</code>) 至 PATH。(如何操作? 请参见<a href="#troubleshooting">故障诊断 #1</a>)</li><li>检验 Python 安装是否成功<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">python –V</span></pre></td></tr></tbody></table></figure> 输出示例：<figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Python <span class="number">2.7</span><span class="number">.6</span></span></pre></td></tr></tbody></table></figure></li></ol><h2 id="安装-‘Easy-Install’"><a href="#安装-‘Easy-Install’" class="headerlink" title="安装 ‘Easy Install’"></a>安装 ‘Easy Install’</h2><ol><li>浏览 <a href="https://pypi.python.org/pypi/setuptools#installation-instructions" target="_blank" rel="external nofollow noreferrer noopener">https://pypi.python.org/pypi/setuptools#installation-instructions</a> 来查看详细的安装指南。</li><li>安装之前，最好先卸掉上一版本(参考<a href="https://pypi.python.org/pypi/setuptools#uninstalling" target="_blank" rel="external nofollow noreferrer noopener">卸载</a>)</li><li>对于安装了<code>PowerShell 3</code>的windows机器，以管理员的身份启动<code>Powershell</code> 并输入如下命令:<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(Invoke-WebRequest https://bootstrap.pypa.io/ez_setup.py).Content \| python -</span></pre></td></tr></tbody></table></figure></li><li>对于没有安装<code>PowerShell 3</code>的windows机器，下载 <a href="https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py" target="_blank" rel="external nofollow noreferrer noopener">ez_setup.py</a> 并保存，例如，至 <code>C:\</code>。 然后从命令行使用 Python 运行此文件：<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">python “C:\ez_setup.py”</span></pre></td></tr></tbody></table></figure></li><li>添加 ‘Python Scripts’ 路径 (如： <code>C:\Python27\Scripts</code>) 至 PATH。</li></ol><h3 id="安装-Pygments-1"><a href="#安装-Pygments-1" class="headerlink" title="安装 Pygments"></a>安装 Pygments</h3><ol><li>确保 easy_install 已经正确安装<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">easy_install --version</span></pre></td></tr></tbody></table></figure> 输出示例：<figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">setuptools <span class="number">3.1</span></span></pre></td></tr></tbody></table></figure></li><li>使用 “easy_install” 来安装 Pygments<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">easy_install Pygments</span></pre></td></tr></tbody></table></figure><h2 id="启动-Jekyll"><a href="#启动-Jekyll" class="headerlink" title="启动 Jekyll"></a>启动 Jekyll</h2></li></ol><p>按照官方的 <a href="http://jekyll.bootcss.com/" target="_blank" rel="external nofollow noreferrer noopener">Jekyll 快速开始手册</a> 的步骤， 一个新的 Jekyll 博客可以被建立并在<a href="http://localhost:4000" target="_blank" rel="external nofollow noreferrer noopener">localhost:4000</a>浏览。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">jekyll new myblog</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> myblog</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">jekyll serve</span></pre></td></tr></tbody></table></figure><h2 id="故障诊断"><a href="#故障诊断" class="headerlink" title="故障诊断"></a>故障诊断</h2><ol><li><p>错误信息：</p><figure class="highlight delphi"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">“python” <span class="keyword">is</span> <span class="keyword">not</span> recognized <span class="keyword">as</span> an internal <span class="keyword">or</span> <span class="keyword">external</span> command, operable <span class="keyword">program</span> <span class="keyword">or</span> batch <span class="keyword">file</span>.</span></pre></td></tr></tbody></table></figure><p> <strong>其他情况</strong>： 这里的 “python” 也可能是 “ruby”， “gem” 或是 “easy_install” 等。</p><p> <strong>可能原因</strong>： 该程序可能未被正确地安装或未在 PATH 里设置成功。</p><p> <strong>尝试解法</strong>： 确保程序已被正确安装。然后手动将其添加至 PATH，请参考如下步骤[1]。</p></li></ol><blockquote><ol><li>按住 Win 键再按下 Pause</li><li>点击 Advanced System Settings</li><li>点击 Environment Variables</li><li>将 <code>;C:\python27</code> 添加至 Path 变量的末尾</li><li>重启命令行</li></ol></blockquote><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span> 错误信息：</span></pre></td></tr></tbody></table></figure><pre><code>ERROR:  Error installing jekyll:ERROR: Failed to build gem native extension."C:/Program Files/Ruby/Ruby200-x64/bin/ruby.exe" extconf.rbcreating Makefilemake generating stemmer-x64-mingw32.defcompiling porter.c...make install/usr/bin/install -c -m 0755 stemmer.so C:/Program Files/Ruby/Ruby200-x64/lib/ruby/gems/2.0.0/gems/fast-stemmer-1.0.2/li/usr/bin/install: target `Files/Ruby/Ruby200-x64/lib/ruby/gems/2.0.0/gems/fast-stemmer-1.0.2/lib' is not a directorymake: *** [install-so] Error 1</code></pre><figure class="highlight stata"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">    **可能原因**： Ruby 被安装在含有空格的路径里。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">    **尝试解法**： 重新安装 Ruby，这次请不要使用带有空格的路径，或者请直接选择使用默认路径。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">3. 错误信息：</span></pre></td></tr></tbody></table></figure><pre><code>Generating... Liquid Exception: No such file or directory - python c:/Ruby200-x64/lib/ruby/gems/2.0.0/gems/pygments.rb-0.4.2/lib/pygments/mentos.py in 2013-04-22-yizeng-hello-world.md</code></pre><figure class="highlight dos"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    **可能原因**： Pygments 未能被正确安装或是 <span class="built_in">PATH</span> 设置尚未生效。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    **尝试解法**： 首先请确保 Pygments 已成功安装且 Python 的 <span class="built_in">PATH</span> 设置正确未包含空格和最后多余的斜杠。 然后重启命令行。如果依旧失败，请尝试注销并重新登录 Windows。 甚至使用终极解法，重启电脑。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>. 错误信息：</span></pre></td></tr></tbody></table></figure><pre><code>Generating... Liquid Exception: No such file or directory - /bin/sh in _posts/2013-04-22-yizeng-hello-world.md</code></pre><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    **可能原因**： 与 pygments.rb <span class="number">0.5</span><span class="number">.1</span>/<span class="number">0.5</span><span class="number">.2</span> 版本的兼容性问题。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    **尝试解法**： 将 pygments.rb gem 的版本从 <span class="number">0.5</span><span class="number">.1</span>/<span class="number">0.5</span><span class="number">.2</span> 降至 <span class="number">0.5</span><span class="number">.0</span>。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">```bash</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        gem uninstall pygments.rb –version ‘=<span class="number">0.5</span><span class="number">.2</span>’</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        gem install pygments.rb –version <span class="number">0.5</span><span class="number">.0</span></span></pre></td></tr></tbody></table></figure><ol start="5"><li><p>错误信息：</p><figure class="highlight crystal"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">c:</span>/Ruby200-x64/<span class="class"><span class="keyword">lib</span>/<span class="title">ruby</span>/2.0.0/<span class="title">rubygems</span>/<span class="title">dependency</span>.<span class="title">rb</span>:296:<span class="title">in</span> `<span class="title">to_specs</span>': <span class="title">Could</span> <span class="title">not</span> <span class="title">find</span> '<span class="title">pygments</span>.<span class="title">rb</span>' (~&gt; 0.4.2) - <span class="title">did</span> <span class="title">find</span>: [<span class="title">pygments</span>.<span class="title">rb</span>-0.5.0] (<span class="title">Gem::LoadError</span>)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">from <span class="symbol">c:</span>/Ruby200-x64/<span class="class"><span class="keyword">lib</span>/<span class="title">ruby</span>/2.0.0/<span class="title">rubygems</span>/<span class="title">specification</span>.<span class="title">rb</span>:1196:<span class="title">in</span> `<span class="title">block</span> <span class="title">in</span> <span class="title">activate_dependencies</span>'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">from <span class="symbol">c:</span>/Ruby200-x64/<span class="class"><span class="keyword">lib</span>/<span class="title">ruby</span>/2.0.0/<span class="title">rubygems</span>/<span class="title">specification</span>.<span class="title">rb</span>:1185:<span class="title">in</span> `<span class="title">each</span>'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">from <span class="symbol">c:</span>/Ruby200-x64/<span class="class"><span class="keyword">lib</span>/<span class="title">ruby</span>/2.0.0/<span class="title">rubygems</span>/<span class="title">specification</span>.<span class="title">rb</span>:1185:<span class="title">in</span> `<span class="title">activate_dependencies</span>'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">from <span class="symbol">c:</span>/Ruby200-x64/<span class="class"><span class="keyword">lib</span>/<span class="title">ruby</span>/2.0.0/<span class="title">rubygems</span>/<span class="title">specification</span>.<span class="title">rb</span>:1167:<span class="title">in</span> `<span class="title">activate</span>'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">from <span class="symbol">c:</span>/Ruby200-x64/<span class="class"><span class="keyword">lib</span>/<span class="title">ruby</span>/2.0.0/<span class="title">rubygems</span>/<span class="title">core_ext</span>/<span class="title">kernel_gem</span>.<span class="title">rb</span>:48:<span class="title">in</span>`<span class="title">gem</span>'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">from <span class="symbol">c:</span>/Ruby200-x64/bin/<span class="symbol">jekyll:</span><span class="number">22</span>:in <span class="string">`&lt;main&gt;'`</span></span></pre></td></tr></tbody></table></figure><p> <strong>可能原因</strong>：如错误信息所述，找不到 pygments.rb 0.4.2，仅找到 pygments.rb 0.5.0。 （此问题出现于此文初稿时的 Jekyll 版本，现版本应已修复）</p><p> <strong>尝试解法</strong>： 将 pygments.rb gem 的版本降级至 0.4.2</p></li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">gem uninstall pygments.rb –version “=0.5.0”</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">gem install pygments.rb –version “=0.4.2”</span></pre></td></tr></tbody></table></figure><ol start="6"><li><p>错误信息：</p><figure class="highlight subunit"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Generating... You are missing a library required for Markdown. Please run:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">`$ [sudo] gem install rdiscount`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Conversion error: There was an error converting '_posts/2013<span class="string">-04</span><span class="string">-22</span>-yizeng-hello-world.md/#excerpt'.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">ERROR: </span>YOUR SITE COULD NOT BE BUILT:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   ------------------------------------</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">   Missing dependency: rdiscount</span></pre></td></tr></tbody></table></figure><p> <strong>可能原因</strong>： 依赖包 rdiscount 未找到。 此问题最有可能的原因是，网站使用的是 rdiscount 作为 Markdown 引擎，而不是 Jekyll 默认的引擎，故需要手动自行安装。</p><p> <strong>尝试解法</strong>：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">gem install rdiscount</span></pre></td></tr></tbody></table></figure></li><li><p>错误信息：</p><figure class="highlight crystal"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">c:</span>/Ruby200-x64/<span class="class"><span class="keyword">lib</span>/<span class="title">ruby</span>/<span class="title">site_ruby</span>/2.0.0/<span class="title">rubygems</span>/<span class="title">core_ext</span>/<span class="title">kernel_require</span>.<span class="title">rb</span>:55:<span class="title">in</span> `<span class="title">require</span>': <span class="title">cannot</span> <span class="title">load</span> <span class="title">such</span> <span class="title">file</span> -- <span class="title">wdm</span> (<span class="title">LoadError</span>)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">from <span class="symbol">c:</span>/Ruby200-x64/<span class="class"><span class="keyword">lib</span>/<span class="title">ruby</span>/<span class="title">site_ruby</span>/2.0.0/<span class="title">rubygems</span>/<span class="title">core_ext</span>/<span class="title">kernel_require</span>.<span class="title">rb</span>:55:<span class="title">in</span> `<span class="title">require</span>'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">from <span class="symbol">c:</span>/Ruby200-x64/<span class="class"><span class="keyword">lib</span>/<span class="title">ruby</span>/<span class="title">gems</span>/2.0.0/<span class="title">gems</span>/<span class="title">listen</span>-1.3.1/<span class="title">lib</span>/<span class="title">listen</span>/<span class="title">adapter</span>.<span class="title">rb</span>:207:<span class="title">in</span> `<span class="title">load_dependent_adapter</span>'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">from <span class="symbol">c:</span>/Ruby200-x64/<span class="class"><span class="keyword">lib</span>/<span class="title">ruby</span>/<span class="title">gems</span>/2.0.0/<span class="title">gems</span>/<span class="title">listen</span>-1.3.1/<span class="title">lib</span>/<span class="title">listen</span>/<span class="title">adapters</span>/<span class="title">windows</span>.<span class="title">rb</span>:33:<span class="title">in</span> `<span class="title">load_dependent_a</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">dapter<span class="string">'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span></pre></td></tr></tbody></table></figure><p> <strong>可能原因</strong>： wdm gem 未被安装。因为 Jekyll 只官方地支持 *nix 系统，所以 Windows Directory Monitor 并没有作为依赖包而被自动安装。</p><p> <strong>尝试解法</strong>：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">gem install wdm</span></pre></td></tr></tbody></table></figure></li></ol><p>8.为了能够让这里网站正常运行，这里需要删除_post文件夹里的文件（应该有一个xxxx-xx-xx-welcome-to- jekyll.markdown字样的文件），因为这个文件内部使用了语法高亮插件（另外不删，则可以修改配置文件禁用该语法高亮插件，即修改根目录下 _config.yml中的pygments: true为false便可。），这个需要另外安装，不再本文范围内，不删会导致生成的静态页面有问题，因时间有限本文暂不提此问题。</p><h2 id="参考推荐"><a href="#参考推荐" class="headerlink" title="参考推荐"></a>参考推荐</h2><p>[1]: <a href="http://stackoverflow.com/a/6318188/1177636" target="_blank" rel="external nofollow noreferrer noopener">Adding Python Path on Windows 7</a> by melhosseiny.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Windows-上安装-Jekyll&quot;&gt;&lt;a href=&quot;#Windows-上安装-Jekyll&quot; class=&quot;headerlink&quot; title=&quot;Windows 上安装 Jekyll&quot;&gt;&lt;/a&gt;Windows 上安装 Jekyll&lt;/h1&gt;&lt;p&gt;Jekyll是一个静态网站生成工具。它允许用户使用HTML、Markdown或Textile来建立静态页面，然后通过模板引擎Liquid（Liquid Templating Engine）来运行.&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;http://yizeng.me/2013/05/10/setup-jekyll-on-windows/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;Setup Jekyll on Windows&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jekyll" scheme="http://notes.seirhsiao.com/categories/Jekyll/"/>
    
    
      <category term="jekyll" scheme="http://notes.seirhsiao.com/tags/jekyll/"/>
    
      <category term="blog" scheme="http://notes.seirhsiao.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>UML类图几种关系的总结</title>
    <link href="http://notes.seirhsiao.com/posts/fdd35213/"/>
    <id>http://notes.seirhsiao.com/posts/fdd35213/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:27:20.867Z</updated>
    
    <content type="html"><![CDATA[<p>在UML类图中，常见的有以下几种关系:泛化（Generalization）,  实现（Realization）,关联（Association）,聚合（Aggregation）,组合(Composition)，依赖(Dependency)</p><a id="more"></a><h3 id="1-泛化-Generalization"><a href="#1-泛化-Generalization" class="headerlink" title="1.泛化(Generalization)"></a>1.泛化(Generalization)</h3><p>【泛化关系】：是一种继承关系,它指定了子类如何特化父类的所有特征和行为例如：老虎是动物的一种.</p><p>【箭头指向】：带三角箭头的实线，箭头指向父类<br> <img alt="uml_01_01.png" data-src="/static/images/uml/uml_01_01.png" class="lazyload"></p><h3 id="2-实现（Realization"><a href="#2-实现（Realization" class="headerlink" title="2.实现（Realization)"></a>2.实现（Realization)</h3><p>【实现关系】：是一种类与接口的关系，表示类是接口所有特征和行为的实现</p><p>【箭头指向】：带三角箭头的虚线，箭头指向接口<br> <img alt="uml_01_02.png" data-src="/static/images/uml/uml_01_02.png" class="lazyload"></p><h4 id="3-关联（Association）"><a href="#3-关联（Association）" class="headerlink" title="3.关联（Association）"></a>3.关联（Association）</h4><p>【关联关系】：是一种拥有的关系,它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子</p><p>关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。</p><p>【代码体现】：成员变量</p><p>【箭头及指向】：带普通箭头的实心线，指向被拥有者<br> <img alt="uml_01_03.png" data-src="/static/images/uml/uml_01_03.png" class="lazyload"></p><p>上图中，老师与学生是双向关联，老师有多名学生，学生也可能有多名老师。但学生与某课程间的关系为单向关联，一名学生可能要上多门课程，课程是个抽象的东西他不拥有学生。</p><p>上图为自身关联：<br> <img alt="uml_01_04.png" data-src="/static/images/uml/uml_01_04.png" class="lazyload"></p><h3 id="4-聚合（Aggregation）"><a href="#4-聚合（Aggregation）" class="headerlink" title="4. 聚合（Aggregation）"></a>4. 聚合（Aggregation）</h3><p>【聚合关系】：是整体与部分的关系.如车和轮胎是整体和部分的关系.</p><p>聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。</p><p>【代码体现】：成员变量</p><p>【箭头及指向】：带空心菱形的实心线，菱形指向整体</p><p> <img alt="uml_01_05.png" data-src="/static/images/uml/uml_01_05.png" class="lazyload"></p><h3 id="5-组合-Composition"><a href="#5-组合-Composition" class="headerlink" title="5. 组合(Composition)"></a>5. 组合(Composition)</h3><p>【组合关系】：是整体与部分的关系.,没有公司就不存在部门      组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期</p><p>【代码体现】：成员变量</p><p>【箭头及指向】：带实心菱形的实线，菱形指向整体</p><p><img alt="uml_01_06.png" data-src="/static/images/uml/uml_01_06.png" class="lazyload"></p><h3 id="6-依赖-Dependency"><a href="#6-依赖-Dependency" class="headerlink" title="6. 依赖(Dependency)"></a>6. 依赖(Dependency)</h3><p>【依赖关系】：是一种使用的关系,所以要尽量不使用双向的互相依赖。</p><p>【代码表现】：局部变量、方法的参数或者对静态方法的调用</p><p>【箭头及指向】：带箭头的虚线，指向被使用者</p><p><img alt="uml_01_07.png" data-src="/static/images/uml/uml_01_07.png" class="lazyload"></p><p>各种关系的强弱顺序：</p><p><strong>泛化 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖</strong></p><p>下面这张UML图，比较形象地展示了各种类图关系：</p><p> <img alt="uml_01_08.png" data-src="/static/images/uml/uml_01_08.png" class="lazyload"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在UML类图中，常见的有以下几种关系:泛化（Generalization）,  实现（Realization）,关联（Association）,聚合（Aggregation）,组合(Composition)，依赖(Dependency)&lt;/p&gt;
    
    </summary>
    
    
      <category term="UML" scheme="http://notes.seirhsiao.com/categories/UML/"/>
    
    
      <category term="UML" scheme="http://notes.seirhsiao.com/tags/UML/"/>
    
      <category term="类图" scheme="http://notes.seirhsiao.com/tags/%E7%B1%BB%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>UML类图实例</title>
    <link href="http://notes.seirhsiao.com/posts/67600903/"/>
    <id>http://notes.seirhsiao.com/posts/67600903/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:27:19.868Z</updated>
    
    <content type="html"><![CDATA[<h3 id="UML-类图简单介绍与及示例"><a href="#UML-类图简单介绍与及示例" class="headerlink" title="UML 类图简单介绍与及示例"></a>UML 类图简单介绍与及示例</h3> <a id="more"></a><p>首先是复习一下UML中九种图的理解：</p><p><strong>用例图</strong>：用例图是用来描述用户需求的，从用户的角度来描述系统的功能，并指出各个执行者。强调谁在使用，系统的执行者是谁。</p><p><strong>类图</strong>：用来定义系统中的类，包括描述类的结构和类之间的关系。类图的主要作用于描述系统的静态结构。</p><p><strong>对象图</strong>：对象图是类图的一个实例，描述了系统在具体时间点上所包含的对象以及各个对象之间的关系。</p><p><strong>状态图</strong>：状态图说明对象在它的生命周期中响应事件所经历的状态序列，以及它们对那些事件的响应。<br><strong>构件图</strong>：构件图用来描述代码构件的物理结构以及构件之间的依赖关系。一个构件可以是一个资源文件、一个二进制文件或者已给可执行文件。</p><p><strong>实施图（部署图）</strong>：用来定义了系统中硬件的物理体系结构，用来描述实际的物理设备以及它们之间的连接关系。</p><p><strong>顺序图（序列图）</strong>：描述对象之间的交互顺序，着重体现对象之间消息传递的时间顺序，强调了对象之间消息的发送顺序，同时也显示了对象之间的交互过程。</p><p><strong>协作图</strong>：</p><ul><li>协作图是一种交互图，强调的是发送和接受消息的对象之间的组织结构。</li><li>协作图主要描述协作对象的交互和链接。</li><li>显示对象间的连接以及对象之间如何发送消息。</li><li>协作图可以表示类操作的实现。</li></ul><p><strong>活动图</strong>：概述系统的动态行为，包括活动状态，活动状态是指业务用例的一个执行步骤或一个操作，不是普通对象的状态。活  动  图适合描述在没有外部事件触发的情况下，系统内部的逻辑执行过程，否则状态图更容易描述类似与传统意义上的流程图。业务建模时，用于详述业务用例，描述一项业务的执行过程设计时，描述操作的流程。<br> <img alt="uml_02_01.png" data-src="/static/images/uml/uml_02_01.png" class="lazyload"></p><p>下面是类图的实例（好像大话设计中有）：</p><h3 id="UML中类图实例"><a href="#UML中类图实例" class="headerlink" title="UML中类图实例"></a>UML中类图实例</h3><p> <img alt="uml_02_02.png" data-src="/static/images/uml/uml_02_02.png" class="lazyload"></p><ul><li><strong>接口</strong>：空心圆+直线（唐老鸭类实现了‘讲人话’）；</li><li><strong>依赖</strong>：虚线+箭头（动物和空气的关系）；</li><li><strong>关联</strong>：实线+箭头（企鹅需要知道气候才迁移）；</li><li><strong>聚合</strong>：空心四边形+实线+箭头（雁群和大雁的关系）；</li><li><strong>合成/组合</strong>：实心四边形+实线+箭头（鸟和翅膀的关系）；</li><li><strong>泛化/继承</strong>：空心三角形+实线（动物和鸟的继承关系）；</li><li><strong>实现</strong>：空心三角形+虚线（实现大雁飞翔的接口）；</li></ul><h3 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h3><h4 id="解释UML类图："><a href="#解释UML类图：" class="headerlink" title="解释UML类图："></a>解释UML类图：</h4><ol><li>首先看“动物”矩形框，它代表一个类。该类图分为三层，第一层显示类的名称，如果是抽象类就要用斜体显示。第二层是类的特性，通常就是字段和属性。第三层是类的操作，通常是方法和行为。</li></ol><p><strong>注意</strong>：前面的符号，‘+’表示<code>public</code>, ‘—’ 表示<code>private</code>, ‘#’表示<code>protected</code>.<br> <img alt="uml_02_03.png" data-src="/static/images/uml/uml_02_03.png" class="lazyload"></p><ol start="2"><li>“飞翔”矩形框表示一个接口图，它与类图的区别主要是顶端有《interface》显示，第一行是接口名称，第二行是接口方法。接口还有另一种表示方法，俗称棒棒糖表示法，就是唐老鸭类实现了“讲人话”的接口。<br><img alt="uml_02_04.png" data-src="/static/images/uml/uml_02_04.png" class="lazyload"></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IFly</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"></span>{                                            </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   voidFly();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">}                                            </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Ilanguage</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="class"></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Speak</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><ol start="3"><li>动物，鸟，鸭，唐老鸭他们之间都是继承的关系，继承关系用空心三角形+实现来表示。<br><img alt="uml_02_05.png" data-src="/static/images/uml/uml_02_05.png" class="lazyload"></li></ol><ol start="4"><li>“大雁”实现了“飞翔”接口。实现接口用空心三角形+虚线来表示。（注：下面的图中应为空心三角形）<br><img alt="uml_02_06.png" data-src="/static/images/uml/uml_02_06.png" class="lazyload"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">classBird:Animal</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{                                       </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   <span class="comment">//继承动物类                                 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">}                                       </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">class WideGoose:IFly{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现飞翔接口</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure></li><li>企鹅与气候有很大的关系，企鹅需要“知道”气候的变化，需要“了解”气候规律。当一个类“知道”另一个类时，可以用关联(association)关系。关联关系用实线箭头来表示。<br><img alt="uml_02_07.png" data-src="/static/images/uml/uml_02_07.png" class="lazyload"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">class Penguin :Bird</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">private</span> Climateclimate;<span class="comment">//在企鹅Penguin中，引用到气候Climate对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure></li><li>“大雁”和“雁群”这两个类。大雁是群居动物，每只大雁都属于一个雁群，一个雁群可以有多只大雁。所以它们之间就满足聚合(Aggregation)关系。</li></ol><p>聚合表示一种弱的“拥有”关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分。聚合关系用空心的菱形+ 实线箭头表示。</p><p> <img alt="uml_02_08.png" data-src="/static/images/uml/uml_02_08.png" class="lazyload">  </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">classWideGooseAggregate</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">private</span> WideGoose[]arrayWideGoose;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   <span class="comment">//在雁群WideGooseAggregate类中，有大雁数组对象arrayWideGoose</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><ol start="7"><li>鸟”和“翅膀”这两个类。鸟和翅膀似整体和部分的关系，并且翅膀和鸟的生命周期是相同的，在这里鸟和其翅膀就是合成关系。</li></ol><p>合成(composition)是一种强的“拥有”关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样。合成关系用实心的的菱形+实线箭头来表示。另外，合成关系的连线两端还有一个数字“1”和数字“2”，，这被称为基数。表明这一端的类可以有几个实例，很显然，一个鸟应该有两支翅膀。如果一个类可能有无数个实例，则就用“n”来表示。关联关系，聚合关系也可以有基数的。<br> <img alt="uml_02_09.png" data-src="/static/images/uml/uml_02_09.png" class="lazyload"><br> </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> Wing wing;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Bird</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function">   </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      wing=<span class="keyword">new</span> Wing();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//在鸟Bird类中，初始化时，实例化翅膀Wing,它们之间同时生成</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">   }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><br>8. “动物”、“氧气”与“水”之间。动物有几大特征，比如有新陈代谢，能繁殖。而动物要有生命，需要氧气，水以及食物等。也就是说动物依赖于氧气和水。它们之间是依赖关系(Dependency),用虚线箭头来表示。<br> <img alt="uml_02_10.png" data-src="/static/images/uml/uml_02_10.png" class="lazyload"><p></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">bolism</span><span class="params">(Oxygenoxygen,Water water)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="function">    </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      UML 类图简单介绍与及示例
    
    </summary>
    
    
      <category term="UML" scheme="http://notes.seirhsiao.com/categories/UML/"/>
    
    
      <category term="UML" scheme="http://notes.seirhsiao.com/tags/UML/"/>
    
      <category term="类图" scheme="http://notes.seirhsiao.com/tags/%E7%B1%BB%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse设置、调优、使用</title>
    <link href="http://notes.seirhsiao.com/posts/39e61ab3/"/>
    <id>http://notes.seirhsiao.com/posts/39e61ab3/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:20:23.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="eclipse调优使用"><a href="#eclipse调优使用" class="headerlink" title="eclipse调优使用"></a>eclipse调优使用</h2><p>eclipse调优</p><p>一般在不对eclipse进行相关设置的时候，使用eclipse总是会觉得启动好慢，用起来好卡，其实只要对eclipse的相关参数进行一些配置，就会有很大的改善。</p><a id="more"></a><h3 id="加快启动速度"><a href="#加快启动速度" class="headerlink" title="加快启动速度"></a>加快启动速度</h3><ol><li>在eclipse启动的时候，它总是会搜索让其运行的jre，往往就是这个搜索过程让eclipse启动变慢了。（没设置时，等2-3s出现进度条，设置后直接出现进度条）</li></ol><p>只要在eclipse.ini中加入-vm的参数就可以了<br><img alt="eclipse_02_01.png" data-src="/static/images/eclipse/eclipse_02_01.png" class="lazyload"></p><ol start="2"><li><p>取消所有启动时要激活的插件（在用时激活也一样）和其它的相关的在启动时执行的操作。<br><img alt="eclipse_02_02.png" data-src="/static/images/eclipse/eclipse_02_02.png" class="lazyload"></p></li><li><p>关闭自动更新</p></li></ol><p><img alt="eclipse_02_03.png" data-src="/static/images/eclipse/eclipse_02_03.png" class="lazyload"><br><img alt="eclipse_02_04.png" data-src="/static/images/eclipse/eclipse_02_04.png" class="lazyload"><br><img alt="eclipse_02_05.png" data-src="/static/images/eclipse/eclipse_02_05.png" class="lazyload"></p><p>减少jvm内存回收引起的eclipse卡的问题<br>这个主要是jvm在client模式，进行内存回收时，会停下所有的其它工作，带回收完毕才去执行其它任务，在这期间eclipse就卡住了。所以适当的增加jvm申请的内存大小来减少其回收的次数甚至不回收，就会是卡的现象有明显改善。</p><p>主要通过以下的几个jvm参数来设置堆内存的：<br>表格是我觉得 Markdown 比较累人的地方，例子如下：<br>|   参数              |                                              描述                                                 |<br>| ——————- |:————————————————————————————————-:|<br>| -Xmx512m            | 最大总堆内存，一般设置为物理内存的1/4                                                             |<br>| -Xms512m            | 初始总堆内存，一般将它设置的和最大堆内存一样大，这样就不需要根据当前堆使用情况而调整堆的大小了    |<br>| -Xmn192m            | 年轻带堆内存，sun官方推荐为整个堆的3/8                                                            |<br>| 堆内存的组成        | 总堆内存 = 年轻带堆内存 + 年老带堆内存 + 持久带堆内存                                             |<br>| 年轻带堆内存        | 对象刚创建出来时放在这里                                                                          |<br>| 老带堆内存          | 对象在被真正会回收之前会先放在这里                                                                |<br>| 持久带堆内存        | class文件，元数据等放在这里                                                                       |<br>| -XX:PermSize=128m   | 持久带堆的初始大小                                                                                |<br>| -XX:MaxPermSize=128m| 持久带堆的最大大小，eclipse默认为256m。如果要编译jdk这种，一定要把这个设的很大，因为它的类太多了。|  </p><p>持久带堆的最大大小，eclipse默认为256m。如果要编译jdk这种，一定要把这个设的很大，因为它的类太多了。</p><p>我的配置（2g内存的笔记本）：<br><img alt="eclipse_02_06.png" data-src="/static/images/eclipse/eclipse_02_06.png" class="lazyload"></p><p>还有其它的相关参数可以看看下面的参考材料，很有启发的：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-XX</span><span class="selector-pseudo">:+UseParallelGC</span> 使用并发内存回收</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-XX</span><span class="selector-pseudo">:+DisableExplicitGC</span> 禁用<span class="selector-tag">System</span><span class="selector-class">.gc</span>()的显示内存回收</span></pre></td></tr></tbody></table></figure><h3 id="eclipse相关设置来来减少卡的现象"><a href="#eclipse相关设置来来减少卡的现象" class="headerlink" title="eclipse相关设置来来减少卡的现象"></a>eclipse相关设置来来减少卡的现象</h3><ol><li><p>关闭自动构建。在启用时，每保存一下，eclipse就会自动为我们构建整个项目，这样对于大的项目来说，每次保存时都会造成很卡。其实自动构建完全没有必要，只要保证在运行前构建一次就ok了，eclipse也会在运行前自动为我们构建，所以关闭是最明智的选择。<br><img alt="eclipse_02_07.png" data-src="/static/images/eclipse/eclipse_02_07.png" class="lazyload"></p></li><li><p>关闭拼写检查设置<br><img alt="eclipse_02_08.png" data-src="/static/images/eclipse/eclipse_02_08.png" class="lazyload"></p></li><li><p>关闭SaveAction。在每次保存时都会执行的操作，这个会严重的拖慢保存，特别是文件大时。这个其实只要自己养成良好的编程习惯，就完全不需要这个了。<br><img alt="eclipse_02_09.png" data-src="/static/images/eclipse/eclipse_02_09.png" class="lazyload"></p></li><li><p>优化代码提示。<br><img alt="eclipse_02_10.png" data-src="/static/images/eclipse/eclipse_02_10.png" class="lazyload"></p></li><li><p>eclipse按Ctrl键卡死的问题解决方法</p></li></ol><p>在eclipse中编辑3万行左右的代码时，在用ctrl+c/v复制时eclipse经常会卡住较长的时间。<br>后来发现只要按下ctrl键就会卡，我猜测应该是因为eclipse中按住ctrl后可以用鼠标单击跳转到变量定义的地方，所以当按下ctrl键时eclipse会去生成这个映射，当文件比较大时，这个行为会花费比较多的时间，非常不爽，经过一番查找才知道，可以通过以下方法设置快捷键。</p><p><code>Eclipse</code>: <code>Windows</code>-&gt; <code>Preferences</code> -&gt; <code>General</code> -&gt; <code>Editors</code> -&gt; <code>Text Editors</code> -&gt; <code>Hyperlinking</code>:<br>去掉这个选项：<code>Enable on demand hyperlinks style navigation</code><br>或者将你不想做Ctrl跳转的文件不选即可！</p><h2 id="eclipse设置"><a href="#eclipse设置" class="headerlink" title="eclipse设置"></a>eclipse设置</h2><p>eclipse的使用，在其help文件中都有详细的介绍如何使用的，一般可以去那边找。</p><h3 id="代码折叠设置"><a href="#代码折叠设置" class="headerlink" title="代码折叠设置"></a>代码折叠设置</h3><p><img alt="eclipse_02_11.png" data-src="/static/images/eclipse/eclipse_02_11.png" class="lazyload"></p><h3 id="快捷键设置"><a href="#快捷键设置" class="headerlink" title="快捷键设置"></a>快捷键设置</h3><p><img alt="eclipse_02_12.png" data-src="/static/images/eclipse/eclipse_02_12.png" class="lazyload"></p><h3 id="编译器错误、警告设置"><a href="#编译器错误、警告设置" class="headerlink" title="编译器错误、警告设置"></a>编译器错误、警告设置</h3><p><img alt="eclipse_02_13.png" data-src="/static/images/eclipse/eclipse_02_13.png" class="lazyload"></p><h3 id="本地历史设置"><a href="#本地历史设置" class="headerlink" title="本地历史设置"></a>本地历史设置</h3><p><img alt="eclipse_02_14.png" data-src="/static/images/eclipse/eclipse_02_14.png" class="lazyload"></p><h3 id="代码格式化设置"><a href="#代码格式化设置" class="headerlink" title="代码格式化设置"></a>代码格式化设置</h3><p><img alt="eclipse_02_14.png" data-src="/static/images/eclipse/eclipse_02_14.png" class="lazyload"></p><h3 id="库设置"><a href="#库设置" class="headerlink" title="库设置"></a>库设置</h3><p><img alt="eclipse_02_15.png" data-src="/static/images/eclipse/eclipse_02_15.png" class="lazyload"></p><p><img alt="eclipse_02_16.png" data-src="/static/images/eclipse/eclipse_02_16.png" class="lazyload"></p><h3 id="文本编辑器设置"><a href="#文本编辑器设置" class="headerlink" title="文本编辑器设置"></a>文本编辑器设置</h3><p><img alt="eclipse_02_17.png" data-src="/static/images/eclipse/eclipse_02_17.png" class="lazyload"></p><h3 id="让eclipse能启动多个实例"><a href="#让eclipse能启动多个实例" class="headerlink" title="让eclipse能启动多个实例"></a>让eclipse能启动多个实例</h3><p><img alt="eclipse_02_18.png" data-src="/static/images/eclipse/eclipse_02_18.png" class="lazyload"></p><h3 id="工作空间设置"><a href="#工作空间设置" class="headerlink" title="工作空间设置"></a>工作空间设置</h3><p><img alt="eclipse_02_19.png" data-src="/static/images/eclipse/eclipse_02_19.png" class="lazyload"></p><h3 id="xml编辑器设置"><a href="#xml编辑器设置" class="headerlink" title="xml编辑器设置"></a>xml编辑器设置</h3><p><img alt="eclipse_02_20.png" data-src="/static/images/eclipse/eclipse_02_20.png" class="lazyload"><br><img alt="eclipse_02_21.png" data-src="/static/images/eclipse/eclipse_02_21.png" class="lazyload"><br><img alt="eclipse_02_22.png" data-src="/static/images/eclipse/eclipse_02_22.png" class="lazyload"></p><h3 id="外观设置"><a href="#外观设置" class="headerlink" title="外观设置"></a>外观设置</h3><p><img alt="eclipse_02_23.png" data-src="/static/images/eclipse/eclipse_02_23.png" class="lazyload"></p><h3 id="代码格式化风格设置"><a href="#代码格式化风格设置" class="headerlink" title="代码格式化风格设置"></a>代码格式化风格设置</h3><p><img alt="eclipse_02_24.png" data-src="/static/images/eclipse/eclipse_02_24.png" class="lazyload"></p><h3 id="鼠标over代码等时的提示设置"><a href="#鼠标over代码等时的提示设置" class="headerlink" title="鼠标over代码等时的提示设置"></a>鼠标over代码等时的提示设置</h3><p><img alt="eclipse_02_25.png" data-src="/static/images/eclipse/eclipse_02_25.png" class="lazyload"></p><h3 id="创建新文件时生成文件的模版设置"><a href="#创建新文件时生成文件的模版设置" class="headerlink" title="创建新文件时生成文件的模版设置"></a>创建新文件时生成文件的模版设置</h3><p><img alt="eclipse_02_26.png" data-src="/static/images/eclipse/eclipse_02_26.png" class="lazyload"></p><h3 id="junit-launcher设置。在开发android时，如果用eclipse内置的launcher是不行的，必须用android提供的。"><a href="#junit-launcher设置。在开发android时，如果用eclipse内置的launcher是不行的，必须用android提供的。" class="headerlink" title="junit launcher设置。在开发android时，如果用eclipse内置的launcher是不行的，必须用android提供的。"></a>junit launcher设置。在开发android时，如果用eclipse内置的launcher是不行的，必须用android提供的。</h3><p><img alt="eclipse_02_27.png" data-src="/static/images/eclipse/eclipse_02_27.png" class="lazyload"></p><h2 id="eclipse使用"><a href="#eclipse使用" class="headerlink" title="eclipse使用"></a>eclipse使用</h2><h3 id="文件比较"><a href="#文件比较" class="headerlink" title="文件比较"></a>文件比较</h3><p><img alt="eclipse_02_28.png" data-src="/static/images/eclipse/eclipse_02_28.png" class="lazyload"><br><img alt="eclipse_02_29.png" data-src="/static/images/eclipse/eclipse_02_29.png" class="lazyload"></p><h3 id="Eclipse列编辑模式"><a href="#Eclipse列编辑模式" class="headerlink" title="Eclipse列编辑模式"></a>Eclipse列编辑模式</h3><p><img alt="eclipse_02_30.png" data-src="/static/images/eclipse/eclipse_02_30.png" class="lazyload"></p><h3 id="earch功能（还有一个是Find-Replace）"><a href="#earch功能（还有一个是Find-Replace）" class="headerlink" title="earch功能（还有一个是Find/Replace）"></a>earch功能（还有一个是Find/Replace）</h3><p><img alt="eclipse_02_31.png" data-src="/static/images/eclipse/eclipse_02_31.png" class="lazyload"></p><p>一个文件打开多次，这样在你写代码时，需要参考文件的不同部分时，就不需要滚上滚下了<br><img alt="eclipse_02_32.png" data-src="/static/images/eclipse/eclipse_02_32.png" class="lazyload"></p><h3 id="提取公共代码到私有的公共方法"><a href="#提取公共代码到私有的公共方法" class="headerlink" title="提取公共代码到私有的公共方法"></a>提取公共代码到私有的公共方法</h3><p><img alt="eclipse_02_33.png" data-src="/static/images/eclipse/eclipse_02_33.png" class="lazyload"><br><img alt="eclipse_02_34.png" data-src="/static/images/eclipse/eclipse_02_34.png" class="lazyload"></p><h3 id="eclipse显示启动时间的插件："><a href="#eclipse显示启动时间的插件：" class="headerlink" title="eclipse显示启动时间的插件："></a>eclipse显示启动时间的插件：</h3><p>看这里<a href="http://www.blogjava.net/shenh062326/archive/2011/10/16/361360.html" target="_blank" rel="external nofollow noreferrer noopener">http://www.blogjava.net/shenh062326/archive/2011/10/16/361360.html</a></p><p>////////////////////////////////////////////////////////////</p><h3 id="eclipse-debug使用部分"><a href="#eclipse-debug使用部分" class="headerlink" title="eclipse debug使用部分"></a>eclipse debug使用部分</h3><p>////////////////////////////////////////////////////////////<br>debug的variable界面显示初等变量的十六进制、ascii等形式<br><img alt="eclipse_02_35.png" data-src="/static/images/eclipse/eclipse_02_35.png" class="lazyload"></p><p>////////////////////////////////////////////////////////////</p><h3 id="eclipse常见问题及解决"><a href="#eclipse常见问题及解决" class="headerlink" title="eclipse常见问题及解决"></a>eclipse常见问题及解决</h3><p>////////////////////////////////////////////////////////////<br>Eclipse 3.7 Indigo在Win7和Vista下面，文本编辑器字体不能改成CourierNew！！！</p><p>直接编辑</p><p><code>org.eclipse.jface_3.7.0.I20110522-1430.jar\org\eclipse\jface\resource\jfacefonts_windows7.properties</code></p><p>用XP里面的字体替换一下，重启Eclipse搞定。</p><p><img alt="eclipse_02_36.png" data-src="/static/images/eclipse/eclipse_02_36.png" class="lazyload"></p><p>修改完后，进入解压目录</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&gt;e:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">cd</span> org.eclipse.jface_3.7.0.I20110522-1430</span></pre></td></tr></tbody></table></figure><p>然后打包所有的文件</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">jar -cfm org<span class="selector-class">.eclipse</span><span class="selector-class">.jface_3</span>.<span class="number">7.0</span><span class="selector-class">.I20110522-1430</span><span class="selector-class">.jar</span> <span class="string">"META-INF/MANIFEST.MF"</span> <span class="string">"org/"</span> <span class="string">"META-INF/"</span> <span class="selector-class">.api_description</span> about<span class="selector-class">.html</span> plugin.properties</span></pre></td></tr></tbody></table></figure><p><img alt="eclipse_02_37.png" data-src="/static/images/eclipse/eclipse_02_37.png" class="lazyload"></p><p>最后将该jar文件覆盖原来的，重启eclipse就ok了。（在最后有做好的jar文件下载）</p><p><strong>Exception in checkAndLoadTargetData.PermGen space解决</strong><br><a href="http://hi.baidu.com/marsjin/blog/item/60756189fa65e4b00f244494.html" target="_blank" rel="external nofollow noreferrer noopener">http://hi.baidu.com/marsjin/blog/item/60756189fa65e4b00f244494.html</a></p><p><strong>Error notifying a preference change listener</strong><br>遇到该错误，说明eclipse的cdt插件太旧了，只要把plugin下的cdt相关的插件删除就可以解决这个问题。</p><p>英文网址：<a href="http://www.velocityreviews.com/forums/t361244-eclipse-error-notifying-a-preference-change-listener.html" target="_blank" rel="external nofollow noreferrer noopener">http://www.velocityreviews.com/forums/t361244-eclipse-error-notifying-a-preference-change-listener.html</a></p><p><strong>启动Eclipse，提示“ Failed to create the Java Virtual Machine”</strong><br>可能是eclipse的配置文件eclipse/eclipse.ini</p><figure class="highlight diff"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-Xms512m</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-Xmx512m</span></span></pre></td></tr></tbody></table></figure><p>中这两个参数设的过大了，设置一个小一点的值，比如256</p><p>eclipse的所有设置的配置文件位置(window-&gt;preferences中的设置的存放位置):<br>workspace.metadata.plugins\org.eclipse.core.runtime.settings</p><h3 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h3><p>jvm启动参数大全：<a href="http://www.blogjava.net/midstr/archive/2008/09/21/230265.html" target="_blank" rel="external nofollow noreferrer noopener">http://www.blogjava.net/midstr/archive/2008/09/21/230265.html</a><br>jvm结构的一些知识(其中的堆的构成)：<a href="http://hllvm.group.iteye.com/group/wiki/2905-JVM" target="_blank" rel="external nofollow noreferrer noopener">http://hllvm.group.iteye.com/group/wiki/2905-JVM</a><br>jvm堆知识：<a href="http://ruijf.iteye.com/blog/1028455" target="_blank" rel="external nofollow noreferrer noopener">http://ruijf.iteye.com/blog/1028455</a><br>eclipse启动调优：<a href="http://www.iteye.com/topic/756538" target="_blank" rel="external nofollow noreferrer noopener">http://www.iteye.com/topic/756538</a><br>eclipse自带的help contents(搜索”Running Eclipse”可以找到启动相关的配置)<br>其它的优化链接<br><a href="http://wcgdonot.iteye.com/blog/1380429" target="_blank" rel="external nofollow noreferrer noopener">http://wcgdonot.iteye.com/blog/1380429</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;eclipse调优使用&quot;&gt;&lt;a href=&quot;#eclipse调优使用&quot; class=&quot;headerlink&quot; title=&quot;eclipse调优使用&quot;&gt;&lt;/a&gt;eclipse调优使用&lt;/h2&gt;&lt;p&gt;eclipse调优&lt;/p&gt;
&lt;p&gt;一般在不对eclipse进行相关设置的时候，使用eclipse总是会觉得启动好慢，用起来好卡，其实只要对eclipse的相关参数进行一些配置，就会有很大的改善。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Eclipse" scheme="http://notes.seirhsiao.com/categories/Eclipse/"/>
    
    
      <category term="eclipse" scheme="http://notes.seirhsiao.com/tags/eclipse/"/>
    
      <category term="优化" scheme="http://notes.seirhsiao.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Maven+Nexus配置手册</title>
    <link href="http://notes.seirhsiao.com/posts/674ab227/"/>
    <id>http://notes.seirhsiao.com/posts/674ab227/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-07T08:45:50.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="maven–私服的搭建（Nexus的使用）"><a href="#maven–私服的搭建（Nexus的使用）" class="headerlink" title="maven–私服的搭建（Nexus的使用）"></a>maven–私服的搭建（Nexus的使用）</h1><h2 id="私服是什么"><a href="#私服是什么" class="headerlink" title="私服是什么"></a>私服是什么</h2><p>私服，私有服务器，是公司内部Maven项目经常需要的部件。私服是架设在局域网的一种特殊的远程仓库，目的是代理远程仓库及部署第三方构件。我们可以从Maven中央仓库下载所需要的构件(artifact)，但实际开发中由于种种原因我们需要在架设一个Maven本地代理仓库，如：不方便访问公网、节省带宽和时间、管理自家的共用artifact等等。有了私服之后，当 Maven 需要下载构件时，直接请求私服，私服上存在则下载到本地仓库；否则，私服请求外部的远程仓库，将构件下载到私服，再提供给本地仓库下载。</p><p>Nexus是常用的私用Maven服务器，一般是公司内部使用。下载地址是<a href="http://www.sonatype.org/nexus/go。默认端口8081,这里我选择最新版nexus-2.11.1-01。" target="_blank" rel="external nofollow noreferrer noopener">http://www.sonatype.org/nexus/go。默认端口8081,这里我选择最新版nexus-2.11.1-01。</a></p><p>搭建私服前后Maven工作流程:</p><p><img alt="nexus_01_01.png" data-src="/static/images/nexus/01.png" class="lazyload"><br><img alt="nexus_01_02.png" data-src="/static/images/nexus/02.png" class="lazyload"></p><a id="more"></a><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><p>Nexus常用功能就是：指定私服的中央地址、将自己的Maven项目指定到私服地址、从私服下载中央库的项目索引、从私服仓库下载依赖组件、将第三方项目jar上传到私服供其他项目组使用。</p><p>开启Nexus服务后访问url地址<a href="http://localhost:8081/nexus/(推荐使用自己的ip地址)，之后登录系统，用户名密码分别是：`admin/admin123`" target="_blank" rel="external nofollow noreferrer noopener">http://localhost:8081/nexus/(推荐使用自己的ip地址)，之后登录系统，用户名密码分别是：`admin/admin123`</a>.</p><p>最频繁的就是点击左侧菜单栏的Repositories按钮</p><p><img alt="nexus_01_01.jpg" data-src="/static/images/nexus/nexus_01_01.jpg" class="lazyload"></p><h2 id="获取构建的流程如下："><a href="#获取构建的流程如下：" class="headerlink" title="获取构建的流程如下："></a>获取构建的流程如下：</h2><p>用户使用Maven构建项目时，</p><ol><li>首先是要直接从本地仓库获取的，如果本地仓库没有，它会根据<code>setting.xml</code>的设置去首先尝试从远程仓库下载构件至本地仓库。</li><li>然后再使用本地仓库的构件。</li><li>如果<code>setting.xml</code>设置的远程仓库是本地代理仓库，则本地代理仓库先尝试从自己的库中获取，如果没有再从远程仓库(比如中央仓库)下载构件至本地仓库。</li></ol><p>Nexus 是一个优秀的Maven仓库管理器，还提供了强大的仓库管理功能，构件搜索功能，它基于REST，友好的UI是一个extjs的REST客户端，它占用较少的内存，基于简单文件系统而非数据库。这些优点使其日趋成为最流行的Maven仓库管理器。本文就使用Nexus搭建一个本地代理仓库。</p><h2 id="一、Nexus-下载和安装"><a href="#一、Nexus-下载和安装" class="headerlink" title="一、Nexus 下载和安装"></a>一、Nexus 下载和安装</h2><p>Nexus官方下载地址：<a href="http://www.sonatype.org/nexus/go，目前最新的版本是`2.7.2`。" target="_blank" rel="external nofollow noreferrer noopener">http://www.sonatype.org/nexus/go，目前最新的版本是`2.7.2`。</a></p><p><strong>启动Nexus</strong>，就是启动一个web服务器，它的默认地址是<code>localhost:8081</code>。Nexus在一个名为<a href="http://www.eclipse.org/jetty/" target="_blank" rel="external nofollow noreferrer noopener">Jetty</a>的<code>servlet容器</code>中运行，它使用一个名为Tanuki Java Service Wrapper的本地服务包裹器启动。这个服务包裹器可以被配置成以Windows服务或Unix守护线程的形式运行Nexus。要启动Nexus，你需要为你的平台找到合适的启动脚本。要查看可用平台的列表，查看<code>${NEXUS_HOME}/bin/jsw</code>目录的内容。</p><p>解压Nexu包会得到两个目录<code>nexus-2.7.2-03</code>和<code>sonatype-work</code>，<code>sonatype-work</code>是默认仓库目录。运行、安装都是使用<code>nexus-2.7.2-03/bin/nexus.bat</code>文件。</p><p>它的使用方式：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Usage:nexus.bat {<span class="built_in"> console </span>: start : stop : restart : install : uninstall }</span></pre></td></tr></tbody></table></figure><p>其中</p><blockquote><p><code>console</code>  – 是控制台方式运行。<br><code>install</code>  – 是以windows service寄存。<br><code>uninstall</code>– 是下载windows service。<br><code>start</code>  – 是运行windows service。<br><code>stop</code> – 是停止windows service。<br><code>restart</code> – 是重启windows service。</p></blockquote><p>Nexus默认端口是8081，可以在<code>nexus-2.11.1-01/conf/nexus.properties</code>中修改，启动后就可以通过地址：<a href="http://localhost/:8081/nexus" target="_blank" rel="external nofollow noreferrer noopener">http://localhost/:8081/nexus</a> 来访问了。界面如下：</p><p><img alt="nexus_01_02.gif" data-src="/static/images/nexus/nexus_01_02.gif" class="lazyload"></p><h3 id="1-配置nexus"><a href="#1-配置nexus" class="headerlink" title="1.配置nexus"></a>1.配置nexus</h3><p>首先登录，默认地址<a href="http://localhost:8081/nexus/，默认用户名密码为`admin/admin123`。" target="_blank" rel="external nofollow noreferrer noopener">http://localhost:8081/nexus/，默认用户名密码为`admin/admin123`。</a></p><ol><li><p>设置Nexus代理上公网<br>如果您的本地代理仓库服务器没有公网权限，Nexus为你留了使用代理的路子，点击右边菜单的“Server”，在右边找到：<br>如下图所示：<br><img alt="nexus_01_04.gif" data-src="/static/images/nexus/nexus_01_04.gif" class="lazyload"><br>添加你的代理服务器即可。</p></li><li><p>开启maven项目索引<br>nexus默认是关闭远程索引下载功能的。</p></li></ol><p><strong>开启的方式：</strong><br>点击<code>Administration</code>菜单下面的<code>Repositories，</code><br>将这三个仓库<code>Apache Snapshots</code>，<code>Codehaus Snapshots</code>，<code>Maven Central</code>的<br><code>Download Remote Indexes</code>修改为<code>true</code>。</p><p>如下图所示：</p><p><img alt="nexus_01_02.jpg" data-src="/static/images/nexus/nexus_01_02.jpg" class="lazyload"></p><p>保存后后台会运行一个任务，点击菜单栏的Scheduled Tasks选项即可看到有个任务在RUNNING。 </p><p>如未找到可见的任务，在这三个仓库上分别右键，选择<code>Re-index</code>，这样Nexus就会去下载远程的索引文件。 下载完成后，Maven索引就可以使用了，在搜索栏输入要搜索的项，就可以查到相关的信息。例如spring-core</p><p><img alt="nexus_01_03.jpg" data-src="/static/images/nexus/nexus_01_03.jpg" class="lazyload"></p><h3 id="2-管理仓库"><a href="#2-管理仓库" class="headerlink" title="2.管理仓库"></a>2.管理仓库</h3><p>管理仓库需要先登录，默认登录用户名/密码是<code>admin/admin123</code>。以管理员用户登陆然后点击左边导航菜单Administration下面的Repositories。</p><p>这里，可以管理仓库，配置Nexus系统，管理任务，管理用户，角色，权限，查看系统的RSS源，管理及查看系统日志，等等。</p><p>点击左边导航栏的Repositories，界面的主面板会显示所有一个所有仓库及仓库组的列表，你会看到它们的Type字段的值有<code>group</code>，<code>hosted</code>，<code>proxy</code>，<code>virtual</code>。</p><p>如下图所示：<br><img alt="nexus_01_03.gif" data-src="/static/images/nexus/nexus_01_03.gif" class="lazyload"><br><img alt="nexus_01_01.jpg" data-src="/static/images/nexus/nexus_01_01.jpg" class="lazyload"></p><p>Nexus提供了三种不同的仓库。 </p><ul><li>(1)代理仓库<br>一个代理仓库是对远程仓库的一个代理。默认情况下，Nexus自带了如下配置的代理仓库： </li><li><em>Apache Snapshots*</em> 这个仓库包含了来自于<a href="http://www.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache</a>软件基金会的快照版本。<br><a href="http://people.apache.org/repo/m2-snapshot-repository" target="_blank" rel="external nofollow noreferrer noopener">http://people.apache.org/repo/m2-snapshot-repository</a> </li></ul><p><strong>Codehaus Snapshots</strong> 这个仓库包含了来自于<a href="http://www.codehaus.org/" target="_blank" rel="external nofollow noreferrer noopener">Codehaus</a>的快照版本。<br><a href="http://snapshots.repository.codehaus.org/" target="_blank" rel="external nofollow noreferrer noopener">http://snapshots.repository.codehaus.org/</a> </p><p><strong>Central Maven Repository</strong>   这是中央<a href="http://maven.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Maven</a>仓库（发布版本）。<br><a href="http://repo1.maven.org/maven2/" target="_blank" rel="external nofollow noreferrer noopener">http://repo1.maven.org/maven2/</a> </p><ul><li>(2)宿主仓库<br>一个宿主仓库是由Nexus托管的仓库。Maven自带了如下配置的宿主仓库。</li></ul><p><strong>3rd Party</strong><br>这个宿主仓库应该用来存储在公共Maven仓库中找不到的第三方依赖。这种依赖的样例有：你组织使用的，商业的，私有的类库如<code>Oracle JDBC</code>驱动。</p><p><strong>Releases</strong><br>这个宿主仓库是你组织公布内部发布版本的地方。</p><p><strong>Snapshots</strong><br>这个宿主仓库是你组织发布内部快照版本的地方。</p><ul><li>(3)虚拟仓库<br>一个虚拟仓库作为Maven 1的适配器存在。Nexus自带了一个central-m1虚拟仓库 </li></ul><p>一般用到的仓库种类是hosted、proxy。Hosted代表宿主仓库，用来发布一些第三方不允许的组件，比如oracle驱动、比如商业软件jar包。Proxy代表代理远程的仓库，最典型的就是Maven官方中央仓库、JBoss仓库等等。如果构建的Maven项目本地仓库没有依赖包，那么就会去这个代理站点去下载，那么如果代理站点也没有此依赖包，就回去远程中央仓库下载依赖，这些中央仓库就是proxy。代理站点下载成功后再下载至本机。笔者认为，其实Maven这个自带的默认仓库一般情况下已经够大多数项目使用了。特殊情况时在配置新的仓库，指定url即可，一般熟悉ExtJS的人操作这个Nexus都没什么问题，单词不是很难，不明白的查查单词基本差不多。就是如果Sonatype公司对其做了国际化的处理就更好了。</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hosted   类型的仓库，内部项目的发布仓库</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">releases 内部的模块中release模块的发布仓库</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">snapshots 发布内部的SNAPSHOT模块的仓库</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">3rd party 第三方依赖的仓库，这个数据通常是由内部人员自行下载之后发布上去</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">proxy   类型的仓库，从远程中央仓库中寻找数据的仓库</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">group   类型的仓库，组仓库用来方便我们开发人员进行设置的仓库</span></pre></td></tr></tbody></table></figure><ol><li>设置Nexus代理上公网</li></ol><p>如果您的本地代理仓库服务器没有公网权限，Nexus为你留了使用代理的路子，点击右边菜单的“Server”，在右边找到：<br>添加你的代理服务器即可。</p><ol start="2"><li>仓库管理<br>点击左边导航栏的Repositories，界面的主面板会显示所有一个所有仓库及仓库组的列表，你会看到它们的Type字段的值有<code>group</code>，<code>hosted</code>，<code>proxy</code>，<code>virtual</code>。这里我们不关心<code>virtual</code>，</li></ol><p>只介绍下另外三种类型：</p><blockquote><p><code>hosted</code> – 本地代理仓库，通常我们会部署自己的构件到这一类型的仓库。<br><code>proxy</code> – 代理的远程仓库，它们被用来代理远程的公共仓库，如maven中央仓库JBoss仓库等等。。<br><code>group</code> – 仓库组，用来合并多个hosted/proxy仓库，通常我们配置maven依赖仓库组。</p></blockquote><h3 id="3-管理组"><a href="#3-管理组" class="headerlink" title="3.管理组"></a>3.管理组</h3><p><strong>组</strong>是Nexus一个强大的特性，它允许你在一个单独的URL中组合多个仓库。Nexus自带了两个组：<code>public</code>和<code>public-snapshots</code>。</p><p><code>public组</code>中组合了三个宿主仓库：<code>3rd Party</code>, <code>Releases</code>, 和<code>Snapshots</code>，还有中央Maven仓库。</p><p>而<code>public-snapshots</code>组中组合了<code>Apache Snapshots</code>和<code>Codehaus Snapshots</code>仓库。 </p><h3 id="4-配置maven"><a href="#4-配置maven" class="headerlink" title="4.配置maven"></a>4.配置maven</h3><p>Maven安装后默认的是使用中央仓库，这是为了能让Maven开箱即用。而Maven缺省的本地仓库地址为<code>${user.home}/.m2/repository</code>。也就是说，一个用户会对应的拥有一个本地仓库。你也可以自定义本地仓库的位置，修改<code>${user.home}/.m2/settings.xml</code>。</p><h4 id="maven项目索引"><a href="#maven项目索引" class="headerlink" title="maven项目索引"></a>maven项目索引</h4><p>下载Maven项目索引，项目索引是为了使用者能够在私服站点查找依赖使用的功能</p><p><img alt="nexus_01_02.jpg" data-src="/static/images/nexus/nexus_01_02.jpg" class="lazyload"></p><p>保存后后台会运行一个任务，点击菜单栏的Scheduled Tasks选项即可看到有个任务在RUNNING。 下载完成后，Maven索引就可以使用了，在搜索栏输入要搜索的项，就可以查到相关的信息。例如spring-core</p><p><img alt="nexus_01_03.jpg" data-src="/static/images/nexus/nexus_01_03.jpg" class="lazyload"></p><p>就可以检索出它的相关信息，包括怎么配置依赖信息。我们要想使用这个私服仓库，先在项目pom中配置相关私服信息</p><h4 id="首先需要添加Mirrors"><a href="#首先需要添加Mirrors" class="headerlink" title="首先需要添加Mirrors"></a>首先需要添加<code>Mirrors</code></h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- mirror | Specifies a repository mirror site to use instead of a given </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">        repository. The repository that | this mirror serves has an ID that matches </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">        the mirrorOf element of this mirror. IDs are used | for inheritance and direct </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">        lookup purposes, and must be unique across the set of mirrors. | --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexusc<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span></pre></td></tr></tbody></table></figure><h4 id="指定仓库"><a href="#指定仓库" class="headerlink" title="指定仓库"></a>指定仓库</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span></pre></td></tr></tbody></table></figure><h4 id="指定插件仓库"><a href="#指定插件仓库" class="headerlink" title="指定插件仓库"></a>指定插件仓库</h4><p>在执行 Maven 命令的时候， Maven<br>还需要安装一些插件包，这些插件包的下载地址也让其指向本地代理仓库的地址，修改如下:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span></pre></td></tr></tbody></table></figure><p>这样只有本项目才在私服下载组件<br>这样这个Maven项目构建的时候会从私服下载相关依赖。当然这个配置仅仅是在此项目中生效，对于其他项目还是不起作用。如果相对Maven的其他项目也生效的话。需要修改全局的<code>settings.xml</code>文件。</p><h4 id="修改settings-xml为"><a href="#修改settings-xml为" class="headerlink" title="修改settings.xml为"></a>修改settings.xml为</h4><p><img alt="nexus_01_04.jpg" data-src="/static/images/nexus/nexus_01_04.jpg" class="lazyload"></p><h4 id="追加激活profile"><a href="#追加激活profile" class="headerlink" title="追加激活profile"></a>追加激活profile</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>central<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span></pre></td></tr></tbody></table></figure><p>之后所有本机的Maven项目就在私服下载组件。（这样比较好）</p><p>完整的项目配置如下：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">profile</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">repositories</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">repository</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">name</span>&gt;</span>local&nbsp;private&nbsp;nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">repository</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">repositories</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">profile</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">profile</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">repositories</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">repository</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">name</span>&gt;</span>local&nbsp;private&nbsp;nexus&nbsp;snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public-snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">repository</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">repositories</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.4<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>local private nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>local private nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">&nbsp;<span class="tag">&lt;/<span class="name">profiles</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">&nbsp;<span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">&nbsp;<span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span></pre></td></tr></tbody></table></figure><p>关于更多<code>setting.xml</code>字段解释请看<a href="http://www.oseye.net/user/kevin/blog/233" target="_blank" rel="external nofollow noreferrer noopener">这里</a>。</p><p>现在你就可以使用本地仓库构建Maven项目了，踏上愉快的构建之旅！！</p><h3 id="5-部署构件至Nexus"><a href="#5-部署构件至Nexus" class="headerlink" title="5.部署构件至Nexus"></a>5.部署构件至Nexus</h3><ol><li>通过Nexus UI部署</li></ol><p>有时候有个jar文件你无法从公共Maven仓库找到，但是你能从其它得到这个jar文件（甚至是POM），那么你完全可以将这个文件部署到Nexus中，使其成为标准流程的一部分。步骤如下：</p><p>点击左边导航栏的”Repository”，在右边的仓库列表中选择一个仓库，如“3rd Party”，然后在页面下方的tab选择“Artifact Upload Artifact(s)”，你会看到构件上传界面。选择你要上传的构件，并指定POM，（或者手工编写GAV等信息），最后点击Upload，该构件就直接被部署到了Nexus的”3rd Party”仓库中。</p><p>如下图所示：<br><img alt="nexus_01_05.gif" data-src="/static/images/nexus/nexus_01_05.gif" class="lazyload"></p><ol start="2"><li>通过Maven部署<br>更常见的用例是：<br>团队在开发一个项目的各个模块，为了让自己开发的模块能够快速让其他人使用，你会想要将snapshot版本的构件部署到Maven仓库中，其他人只需要在POM添加一个对于你开发模块的依赖，就能随时拿到最新的snapshot。</li></ol><p>以下的pom.xml配置和settings.xml能让你通过Maven自动化部署构件：<br>要部署构件至Nexus，在<code>distributionManagement</code>中提供仓库URL，然后运行<code>mvn deploy</code>。Maven会通过一个简单的HTTP PUT将项目POM和构件推入至你Nexus安装。需要配置你项目POM中distributionManagement部分的repository。 </p><p><code>pom.xml</code></p><h4 id="项目的发布"><a href="#项目的发布" class="headerlink" title="项目的发布"></a>项目的发布</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Release Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span></pre></td></tr></tbody></table></figure><p>注意配置了还是发布项目到私服失败，原因为没有权限，会出现401错误码，原因就是权限不够。</p><h4 id="配置权限"><a href="#配置权限" class="headerlink" title="配置权限"></a>配置权限</h4><p>这时如果部署会报错，还要在<code>～/.m2/settings.xml</code>中添加如下的服务器登录信息：</p><p><img alt="nexus_01_05.jpg" data-src="/static/images/nexus/nexus_01_05.jpg" class="lazyload"></p><p><img alt="nexus_01_06.jpg" data-src="/static/images/nexus/nexus_01_06.jpg" class="lazyload"></p><p>注意Respository中的id一定要和server下的id一致，切记！！否则出现权限问题。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;          <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-thirdparty<span class="tag">&lt;/<span class="name">id</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;          <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;          <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span></pre></td></tr></tbody></table></figure><p>这里我们配置所有的snapshot版本构件部署到Nexus的Snapshots仓库中， 所有的release构件部署到Nexus的Releases仓库中。由于部署需要登陆，因为我们在<code>settings.xml</code>中配置对应Repository id的用户名和密码。</p><h4 id="运行发布"><a href="#运行发布" class="headerlink" title="运行发布"></a>运行发布</h4><p>在项目目录中执行mvn deploy ，你会看到maven将项目构件部署到Nexus中，浏览Nexus对应的仓库，就可以看到刚才部署的构件。当其他人构建其项目时，Maven就会从Nexus寻找依赖并下载。</p><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attribute">clean deploy</span></span></pre></td></tr></tbody></table></figure><h4 id="查看发布"><a href="#查看发布" class="headerlink" title="查看发布"></a>查看发布</h4><p>然后进入到私服上的仓库中，看一下确实存在刚刚发布的项目</p><p><img alt="nexus_01_07.jpg" data-src="/static/images/nexus/nexus_01_07.jpg" class="lazyload"></p><h4 id="部署第三方构件"><a href="#部署第三方构件" class="headerlink" title="部署第三方构件"></a>部署第三方构件</h4><p><strong>构件</strong>可能是私有数据库的JDBC驱动如Oracle，或者你依赖于另一个JAR，它既不开源也无法免费获得。在这样的情况下，你就需要手动拿来这些构件然后发布到你自己的仓库中。<br>Nexus提供宿主的”<code>third-party</code>“仓库，就是为了这个目的。</p><p>假如我们下载了Oracle的驱动程序jar包想给其他项目组使用，就需要上传该jar包。</p><p>使用以下命令发布该文件至Nexus： </p><p><strong>使用命令行方式*：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mvn&nbsp;deploy:deploy-file&nbsp;-DgroupId=com.oracle&nbsp;-DartifactId=ojdbc14&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">-Dversion=10.2.0.3.0&nbsp;-Dpackaging=jar&nbsp;-Dfile=ojdbc.jar&nbsp;&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">-Durl=http://localhost:8081/nexus/content/repositories/thirdparty&nbsp;&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">-DrepositoryId=thirdparty</span></pre></td></tr></tbody></table></figure><p><strong>使用Nexus UI方式：</strong><br>选中宿主库——3rd party，之后选择Artifact Upload上传至宿主空间。</p><p><img alt="nexus_01_08.jpg" data-src="/static/images/nexus/nexus_01_08.jpg" class="lazyload"></p><p><img alt="nexus_01_09.jpg" data-src="/static/images/nexus/nexus_01_09.jpg" class="lazyload"></p><p>最后点击上传<br><img alt="nexus_01_10.jpg" data-src="/static/images/nexus/nexus_01_10.jpg" class="lazyload"></p><h3 id="6-Nexus监听端口"><a href="#6-Nexus监听端口" class="headerlink" title="6.Nexus监听端口"></a>6.Nexus监听端口</h3><p>默认情况下，Nexus监听端口<code>8081</code>。你可以更改这个端口，通过更改<code>${NEXUS_HOME}/conf/plexus.properties</code>的值，为此，<code>停止Nexus</code>，更改文件中<code>applicationPort</code>的值，然后<code>重启Nexus</code>。</p><h3 id="7-Maven-Profiles"><a href="#7-Maven-Profiles" class="headerlink" title="7.Maven Profiles"></a>7.Maven Profiles</h3><p>Maven中的<code>profile</code>是一组可选的配置，可以用来设置或者覆盖配置默认值。有了<code>profile</code>，你就可以为不同的环境定制构建。profile可以在<code>pom.xml</code>中配置，并给定一个id。然后你就可以在运行Maven的时候使用的命令行标记告诉Maven运行特定profile中的目标。以下pom.xml使用production profile覆盖了默认的Compiler插件设置。 </p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">profile</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">id</span>&gt;</span>production<span class="tag">&lt;/<span class="name">id</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">build</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">plugins</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">plugin</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">configuration</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">debug</span>&gt;</span>false<span class="tag">&lt;/<span class="name">debug</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">optimize</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optimize</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">build</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">profile</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&nbsp;<span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span></pre></td></tr></tbody></table></figure><p>要使用production profile来运行<code>mvn install</code>，你需要在命令行传入-Pproduction参数。要验证production profile覆盖了默认的Compiler插件配置，可以像这样以开启调试输出<code>(-X)</code>的方式运行Maven。 </p><p>如果你开始大量使用Maven profile，你会希望将profile从POM中分离，使用一个单独的文件如<code>profiles.xml</code>。你可以混合使用定义在<code>pom.xml</code>中和外部<code>profiles.xml</code>文件中的profile。只需要将profiles元素放到<code>${basedir}</code>目录下的<code>profiles.xml</code>文件中，然后照常运行Maven就可以。<code>profiles.xml</code>文件的大概内容如下： </p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">profile</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">id</span>&gt;</span>development<span class="tag">&lt;/<span class="name">id</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">build</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">plugins</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">plugin</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">configuration</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">debug</span>&gt;</span>true<span class="tag">&lt;/<span class="name">debug</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">optimize</span>&gt;</span>false<span class="tag">&lt;/<span class="name">optimize</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">build</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">profile</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">profile</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">id</span>&gt;</span>production<span class="tag">&lt;/<span class="name">id</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">build</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">plugins</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">plugin</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">configuration</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">debug</span>&gt;</span>false<span class="tag">&lt;/<span class="name">debug</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;<span class="name">optimize</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optimize</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">build</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">profile</span>&gt;</span>&nbsp;&nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">&nbsp;&nbsp;<span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span></pre></td></tr></tbody></table></figure><p><strong>settings</strong>profile可以应用到所有你使用Maven构建的项目。<br>你可以在两个地方定义<code>settings profile</code>：<br>定义在<code>~/.m2/settings.xml</code>中的<code>用户特定settings profile</code>，<br>或者<br>定义在<code>${M2_HOME}/conf/settings.xml</code>中的<code>全局settings profile</code>。</p><h2 id="二、在项目中使用Nexus"><a href="#二、在项目中使用Nexus" class="headerlink" title="二、在项目中使用Nexus"></a>二、在项目中使用Nexus</h2><p>在对应项目的<code>pom.xml</code>文件中增加如下代码：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span></pre></td></tr></tbody></table></figure><p><strong>修改Maven工程的端口及其他配置</strong><br>在对应项目的<code>pom.xml</code>文件中增加如下代码：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>E:/deploy/war<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">warName</span>&gt;</span>PowerDesk<span class="tag">&lt;/<span class="name">warName</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span></pre></td></tr></tbody></table></figure><p><strong>部署第三方包到本地*</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mvn&nbsp;install:install-file&nbsp;-DgroupId=com.oracle&nbsp;-DartifactId=ojdbc14</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">-Dversion=10.2.0.3.0&nbsp;-Dpackaging=jar&nbsp;-Dfile=ojdbc.jar</span></pre></td></tr></tbody></table></figure><p><strong>修改本地Meven库目录</strong><br>在<code>～/.m2/settings.xml</code>中添加如下代码</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span></pre></td></tr></tbody></table></figure><p><strong>Eclipse Maven插件</strong><br>1）m2eclipse-wtp<br>更新地址：<a href="http://download.jboss.org/jbosstools/updates/m2eclipse-wtp/" target="_blank" rel="external nofollow noreferrer noopener">http://download.jboss.org/jbosstools/updates/m2eclipse-wtp/</a><br>注意：如果你的eclipse使用的jdk是1.6及以下版本，需要打开<code>eclipse.ini</code> 增加配置<br><code>-vm C:\Program Files\Java\jdk1.6.0_33\bin\javaw.exe</code>，如果jdk是1.7及以上版本，无需设置该参数</p><h2 id="三、Maven插件介绍"><a href="#三、Maven插件介绍" class="headerlink" title="三、Maven插件介绍"></a>三、Maven插件介绍</h2><ul><li>1、编译插件：<code>maven-compiler-plugin</code></li><li>2、打包war插件：<code>maven-war-plugin</code></li><li>3、测试插件：<code>maven-surefire-plugin</code></li><li>4、生成源码插件：<code>maven-source-plugin</code></li><li>5、生成编译日期时间插件：<code>buildnumber-maven-plugin</code></li></ul><p>以上插件使用代码示例：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>src<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span>test<span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">testOutputDirectory</span>&gt;</span>target/classes<span class="tag">&lt;/<span class="name">testOutputDirectory</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>src<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>false<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">warSourceDirectory</span>&gt;</span>${basedir}\WebContent<span class="tag">&lt;/<span class="name">warSourceDirectory</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>${war.output}<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">warName</span>&gt;</span>${project.artifactId}${buildNumber}<span class="tag">&lt;/<span class="name">warName</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>buildnumber-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">phase</span>&gt;</span>validate<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>create<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">format</span>&gt;</span>{0,date,yy-MM-dd}<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">items</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span>&gt;</span>timestamp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">items</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">doCheck</span>&gt;</span>false<span class="tag">&lt;/<span class="name">doCheck</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">doUpdate</span>&gt;</span>fasle<span class="tag">&lt;/<span class="name">doUpdate</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span></pre></td></tr></tbody></table></figure><h2 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h2><p>1、<a href="http://maven.apache.org/guides/index.html" target="_blank" rel="external nofollow noreferrer noopener">Mave官网</a><br>2、<a href="http://www.sonatype.org/nexus/" target="_blank" rel="external nofollow noreferrer noopener">Nexus官网</a><br>3. <a href="http://blog.csdn.net/shenshen123jun/article/details/9084293" target="_blank" rel="external nofollow noreferrer noopener">maven–私服的搭建（Nexus的使用）</a><br>4. <a href="http://blog.csdn.net/henren555/article/details/29925603" target="_blank" rel="external nofollow noreferrer noopener">使用Nexus搭建Maven代理仓库 </a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;maven–私服的搭建（Nexus的使用）&quot;&gt;&lt;a href=&quot;#maven–私服的搭建（Nexus的使用）&quot; class=&quot;headerlink&quot; title=&quot;maven–私服的搭建（Nexus的使用）&quot;&gt;&lt;/a&gt;maven–私服的搭建（Nexus的使用）&lt;/h1&gt;&lt;h2 id=&quot;私服是什么&quot;&gt;&lt;a href=&quot;#私服是什么&quot; class=&quot;headerlink&quot; title=&quot;私服是什么&quot;&gt;&lt;/a&gt;私服是什么&lt;/h2&gt;&lt;p&gt;私服，私有服务器，是公司内部Maven项目经常需要的部件。私服是架设在局域网的一种特殊的远程仓库，目的是代理远程仓库及部署第三方构件。我们可以从Maven中央仓库下载所需要的构件(artifact)，但实际开发中由于种种原因我们需要在架设一个Maven本地代理仓库，如：不方便访问公网、节省带宽和时间、管理自家的共用artifact等等。有了私服之后，当 Maven 需要下载构件时，直接请求私服，私服上存在则下载到本地仓库；否则，私服请求外部的远程仓库，将构件下载到私服，再提供给本地仓库下载。&lt;/p&gt;
&lt;p&gt;Nexus是常用的私用Maven服务器，一般是公司内部使用。下载地址是&lt;a href=&quot;http://www.sonatype.org/nexus/go。默认端口8081,这里我选择最新版nexus-2.11.1-01。&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;http://www.sonatype.org/nexus/go。默认端口8081,这里我选择最新版nexus-2.11.1-01。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;搭建私服前后Maven工作流程:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/images/nexus/01.png&quot; alt=&quot;nexus_01_01.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;/static/images/nexus/02.png&quot; alt=&quot;nexus_01_02.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Maven" scheme="http://notes.seirhsiao.com/categories/Maven/"/>
    
    
      <category term="maven" scheme="http://notes.seirhsiao.com/tags/maven/"/>
    
      <category term="nexus" scheme="http://notes.seirhsiao.com/tags/nexus/"/>
    
  </entry>
  
  <entry>
    <title>给Eclipse提速的7个技巧</title>
    <link href="http://notes.seirhsiao.com/posts/8b973c0a/"/>
    <id>http://notes.seirhsiao.com/posts/8b973c0a/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:24:02.356Z</updated>
    
    <content type="html"><![CDATA[<p>大约一个月前，我发表了一篇博客，其中介绍了<a href="http://www.nicolasbize.com/blog/the-best-ide-in-the-world/" target="_blank" rel="external nofollow noreferrer noopener">对Eclipse的爱与恨</a>。 有些人问我如何给<a href="http://res.importnew.com/eclipse" target="_blank" rel="external nofollow noreferrer noopener">Eclipse</a>提速，这篇文章就来讨论这个问题。顺带提一下，这篇文章不是比较IDE，所以不要说你讨厌某个IDE而选择另外一个。这篇文章只是关注如何让Eclipse运行得更快。每个技巧都针对Windows、Linux和MacOS用户详细说明。在使用所有优化技巧之后，Eclipse应该能在10秒内启动，并且比以前运行得更流畅。</p><p>这些技巧不仅仅缩短了Eclipse的启动时间，其中大部分技巧还改善了用户体验。例如，更快地打开类、从一处定义跳到另外一处、查看javadoc等。但这些提速无法用时间精确的测量，所以对每条技巧带来的提速效果也没有特定的基准。</p><a id="more"></a><p><strong>提示</strong>：假设你已经装了固态硬盘，并且有至少8Gb的内存。如果没有的话，带来的性能提升可能不大。</p><h3 id="技巧一：运行最新版本的JDK和Eclipse"><a href="#技巧一：运行最新版本的JDK和Eclipse" class="headerlink" title="技巧一：运行最新版本的JDK和Eclipse"></a>技巧一：运行最新版本的JDK和Eclipse</h3><p>通常，新版本的JDK和Eclipse都会有性能上的优化。请确保你使用的是64位Eclipse并且使用了Oracle的JDK。对于网络开发，需要使用Eclipse for Java EE而不是Eclipse for Java。</p><blockquote><p>Oracle JDK : <a href="http://www.oracle.com/technetwork/java/javase/downloads" target="_blank" rel="external nofollow noreferrer noopener">http://www.oracle.com/technetwork/java/javase/downloads</a><br>Eclipse : <a href="https://eclipse.org/downloads/" target="_blank" rel="external nofollow noreferrer noopener">https://eclipse.org/downloads/</a></p></blockquote><p>将Eclipse和workspace放在固态硬盘上。启动Eclipse吧。</p><h3 id="技巧二：调整Eclipse的Preferences"><a href="#技巧二：调整Eclipse的Preferences" class="headerlink" title="技巧二：调整Eclipse的Preferences"></a>技巧二：调整Eclipse的Preferences</h3><ol><li>General &gt; Startup and Shutdown : 移除所有在启动时加载的插件。</li><li>General &gt; Editors &gt; Text Editors &gt; Spelling : 关闭拼写检查。</li><li>General &gt; Validation &gt; 勾选“Suspend all validator”。</li><li>Window &gt; Customize Perspective &gt; 移除所有用不到或不想用的内容（尽量使用快捷键），菜单栏也是如此（你用过几次菜单栏的打印按钮？）。</li><li>Install/Update &gt; Automatic Updates &gt; 取消勾选“Automatically find new updates and notify me”。</li><li>General &gt; Appearance &gt; 取消勾选“Enable Animations”。</li><li>使用默认的主题。其他主题可能会降低运行速度。</li></ol><p>我自己还关闭了自动提示，这样在输入代码时不会拖累我。替代方案是使用Ctrl+Space在需要的使用手动提示。可以通过下面的配置来完成：（译者注：Ctrl+Space？中国人不会答应的）。</p><blockquote><p>Java &gt; Editor &gt; Content Assist &gt; 禁用“Enable Auto Activation”。<br>在Advanced中移除所有不需要的内容（在Eclipse 4.2.2中没找到）。</p></blockquote><h3 id="技巧3：将JDK放在内存盘（RAM-Disk）上"><a href="#技巧3：将JDK放在内存盘（RAM-Disk）上" class="headerlink" title="技巧3：将JDK放在内存盘（RAM Disk）上"></a>技巧3：将JDK放在内存盘（RAM Disk）上</h3><p>内存盘是将计算机内存的作为虚拟磁盘或硬盘使用。用来加速位于其中的软件的IO性能。内存中创建的RAM盘就像是计算机上的一块硬盘。由于这些内存当作硬盘使用，所以其他程序就不能使用这些内存空间。我们只是将JDK放到那里，300MB就足够了。</p><p><strong>警告</strong>：不要将任何内容永久性的放到内存盘中，每次重启时，里面的内容都会消失并重新创建。</p><p><strong>对于Linux用户</strong>：</p><p><a href="https://prezi.com/xgwyp3reqanc/ubuntu-debian-ramdisk/" target="_blank" rel="external nofollow noreferrer noopener">这个链接</a>中有详细的描述。</p><p><strong>对于Mac用户</strong>：</p><p>使用diskutil工具创建内存盘</p><ol><li>创建一个新的脚本，例如：~/tools/batch/ramdisk.sh<br>将其中的x、y、z替换为你的JDK版本：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">diskutil erasevolume HFS+ <span class="string">'JDK RAMDISK'</span> `hdiutil attach -nomount ram://614400`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">cp -r /Library/Java/JavaVirtualMachines/jdk1.x.y_z.jdk /Volumes/JDKRAMDISK</span></pre></td></tr></tbody></table></figure><p>（<strong>注意</strong>：diskutil期望的参数是512字节扇区的整数倍：对于300MB，应该是300 * 1024 ^ 2 / 512 = 614400）</p><ol start="2"><li>保存脚本，将其改为可执行模式：<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">chmod 755 ~/tools/batch/ramdisk.sh</span></pre></td></tr></tbody></table></figure>运行ramdisk.sh将创建内存盘：<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ ramdisk.sh</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Started erase on disk4</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Unmounting disk</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">Erasing</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Initialized /dev/rdisk4 as a 300 MB <span class="keyword">case</span>-insensitive HFS Plus volume</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">Mounting disk</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">Finished erase on disk4 JDKRAMDISK</span></pre></td></tr></tbody></table></figure></li></ol><p>现在用Finder应该能发现一个名为JDKRAMDISK的新设备，其中含有的就是JDK。点击“弹出”按钮可以移除RAM Disk并释放相应的内存。</p><p>如果想使用这个技巧，那么每次启动Eclipse都需要有这个内存盘，不然会看到“A Java Runtime … must be available in order to run Eclipse”错误。可以配置系统，用<a href="http://stackoverflow.com/questions/6442364/running-script-upon-login-mac/6445525#6445525" target="_blank" rel="external nofollow noreferrer noopener">Automator</a>或一个<a href="http://stackoverflow.com/questions/6442364/running-script-upon-login-mac/13372744#13372744" target="_blank" rel="external nofollow noreferrer noopener">unchtl守护程序</a>确保每次启动时会自动执行ramdisk.sh脚本。</p><p><strong>对于Windows用户</strong>：</p><ol><li><p>下载并安装名为imdisk的工具</p></li><li><p>创建一个新的批处理文件，如：C:/tools/batch/ramdisk.bat<br>将其中的x、y、z替换为你的JDK版本号：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> Placing JDK on Virtual Disk N:/</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">sc config imdisk start= auto</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">net start imdisk</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">imdisk -a -t vm -s 300m -m n:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">format n: /q /Y</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">call xcopy C:&lt;path_jdk&gt;jdk1.x.y_z N:jdk1.x.y_z /S /E /Y /Q</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">label n: JDK RAMDISK</span></pre></td></tr></tbody></table></figure><p>运行<code>ramdisk.bat</code>后，将看到创建了一个名为“JDK RAMDISK”的新磁盘N，其中含有的就是JDK。</p></li><li><p>确保文件以管理员模式运行。右击文件，选择<strong>“属性——兼容性——勾选“以管理员身份运行此程序”</strong>。</p></li></ol><p>如果想使用这个技巧，那么每次启动Eclipse都需要有这个内存盘，不然会看到“A Java Runtime … must be available in order to run Eclipse”错误。可以配置系统，将<code>ramdisk.bat</code>脚本放到启动文件夹中。</p><p>为了让技巧3能够工作，需要在<code>eclipse.ini</code>文件中添加-vm设置（详见下一节）。</p><h3 id="技巧4：调整你的eclipse-ini。"><a href="#技巧4：调整你的eclipse-ini。" class="headerlink" title="技巧4：调整你的eclipse.ini。"></a>技巧4：调整你的<code>eclipse.ini</code>。</h3><p>在Eclipse的优化中，这是最令人困惑的地方。网上有海量的文章介绍不同的配置方案。我只是介绍我自己的配置方案。</p><p>找到你的eclipse.ini文件：</p><ol><li>Windows/Linux：位于$ECLIPSE_HOME（译者注：<code>$ECLIPSE_HOME</code>是Eclipse的路径，这里假设Linux下也是自行安装，而不是通过源安装）</li><li>MacOS：位于<code>$ECLIPSE_HOME/Eclipse.app/Contents/MacOS</code></li></ol><p>明白接下来的工作的含义……</p><p>eclipse.ini中有两种类型的属性：与Eclipse应用相关的属性；与JVM相关的属性。这些选项具体取决于JDK和Eclipse的版本。下面的是我在网上找到的<a href="http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html" target="_blank" rel="external nofollow noreferrer noopener">最新的列表</a>。</p><p>要理解这些属性，首先要了解Oracle JVM的内存布局。一般来说，JVM内存分成几个内存池，对象根据不同存在时间位于不同的内存池中。</p><ol><li>Eden空间（堆）是用于许多刚创建的对象。垃圾收集器每趟一般都是在这里处理”新代的“对象，并移除所有不再使用的对象。</li><li>Survivor空间（堆）含有那些在Eden空间中GC两三趟都没有销毁的对象。这些对象依然属于新生代，但将其移动到更安全的地方，被收集的风险大大降低。垃圾收集器在这里运行的频率要低很多（GC根据以往的经验来判断这里的对象都是经常使用的）。</li><li>Tenured空间（堆）含有在Survior空间存活相当一段时间的对象。</li><li>永生代（非堆）含有JVM的元数据，如类属性、方法、枚举等。由于这些数据可以在多个JVM间共享。所以永生代分只读和读写两个区域。</li><li>代码缓存（非堆）提供了用于编译并存储代码的内存空间。</li></ol><p>如果你对此感兴趣，Oracle含有一篇很不错的关于配置垃圾收集的文章，其中详细介绍了所有这些空间的用途。</p><p>在<code>eclipse.ini</code>中，可以控制每个内存池的大小。下面的配置是针对我的16G内存设定的，但也可用于8G的内存。</p><p>使用位于RAM Disk中的JDK（使用在步骤三中的版本号）：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">-vm /Volumes/JDKRAMDISK/jdk1.x.y_z.jdk/Contents/Home/</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">-vm N:/jdk1.x.y_z/bin</span></pre></td></tr></tbody></table></figure><p><strong>禁用字节码验证（有风险）</strong></p><p>这是跳过了class文件的验证（class文件的验证的信息参见这里），意味着JVM不会检测使用的class文件。如果使用的class文件被修改过，会有安全风险。自己承担风险（我仅仅是玩的时候用，不会在工作中启用这个选项）。</p><p><strong>打开编译器性能优化</strong></p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-XX</span><span class="selector-pseudo">:+AggressiveOpts</span></span></pre></td></tr></tbody></table></figure><p><strong>增加永生代空间（分配新对象的地方）（译者注：在JDK 8中，取消了永生代）</strong></p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">-XX:<span class="attribute">PermSize</span>=512m</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">-XX:<span class="attribute">MaxPermSize</span>=512m</span></pre></td></tr></tbody></table></figure><p><strong>增加最小最大堆的空间（含有新生代和年老代）</strong></p><figure class="highlight diff"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-Xms2048m</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-Xmx2048m</span></span></pre></td></tr></tbody></table></figure><p><strong>为新生代增加堆的大小</strong></p><figure class="highlight diff"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-Xmn512m</span></span></pre></td></tr></tbody></table></figure><p><strong>为每个线程设置栈大小</strong></p><figure class="highlight diff"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-Xss2m</span></span></pre></td></tr></tbody></table></figure><p><strong>调整垃圾收集</strong></p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-XX</span><span class="selector-pseudo">:+UseParallelOldGC</span></span></pre></td></tr></tbody></table></figure><p>最后，这里列出其他可能在网上看到的选项。就我个人而言，这些选项都没有加速效果，所以仅仅是用来参考。读者可以在网上找到相应的文档，来了解并使用对应的选项：</p><figure class="highlight diff"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-XX:MaxGCPauseMillis=10</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-XX:+UseG1GC</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-XX:CompileThreshold=5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-XX:MaxGCPauseMillis=10</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-XX:MaxHeapFreeRatio=70</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-XX:+CMSIncrementalPacing</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-XX:+UseFastAccessorMethods</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-server</span></span></pre></td></tr></tbody></table></figure><p>最后，移除所有重复的选项，包括launcher.XXMaxPermSize，因为启用了XX:MaxPermSize选项后，这个选项就没用了。</p><h3 id="技巧5：关闭杀毒软件"><a href="#技巧5：关闭杀毒软件" class="headerlink" title="技巧5：关闭杀毒软件"></a>技巧5：关闭杀毒软件</h3><p>如果有杀毒软件，要确保这些软件不会检查代码文件夹。将JDK、Eclipse、你的.m2/jar代码库和代码文件夹添加到杀毒软件的白名单。</p><h3 id="技巧6：不要在Eclipse中运行SVN和GIT"><a href="#技巧6：不要在Eclipse中运行SVN和GIT" class="headerlink" title="技巧6：不要在Eclipse中运行SVN和GIT"></a>技巧6：不要在Eclipse中运行SVN和GIT</h3><p>这是个人偏好。有些人喜欢将Eclipse与团队协同工具结合起来。就我个人而言，这样速度很慢，我宁愿Eclipse专注于开发工作，而不是同时做许多事。我还非常喜欢SVN/GIT命令行。不管怎么说，我把这些工具从Eclipse中移除，发现响应速度更快了。</p><h3 id="技巧7：使用键盘"><a href="#技巧7：使用键盘" class="headerlink" title="技巧7：使用键盘"></a>技巧7：使用键盘</h3><p>Eclipse的一个有点是其中含有大量快捷键。读者可以自行设置相关快捷键。一般我会重新设置调试键，这样就和Visual Studio &amp; Chrome Dev Env的行为相同了。花点时间去学习快捷键。用的快捷键越多，使用Eclipse的体验就越快。</p><p>这里不会深入介绍快捷键，读者可以很容易的在网上找到相关资料。下面列出一些必备的快捷键：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Ctrl+Shift+R : jump <span class="keyword">to</span> resource</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Ctrl+Shift+T : jump <span class="keyword">to</span> class</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Ctrl+. : jump <span class="keyword">to</span> next error</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">Ctrl+Shift+G : search <span class="keyword">for</span> references</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Ctrl+Shift+P : select matching bracket</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">Alt+Arrows : go forward / backwards</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">Ctrl+Space : autocomplete</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">Ctrl+Shift+F : format source</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">Ctrl+Shift+O : organize imports</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">Ctrl+D : delete line</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">……</span></pre></td></tr></tbody></table></figure><p>差不多就是这些了。这里没有将Eclipse与其他IDE进行对比，我认为Eclipse是非常强大且快速的Java代码编辑工具。</p><p>如果你有其他技巧，请告诉我。</p><h3 id="参考推荐"><a href="#参考推荐" class="headerlink" title="参考推荐"></a>参考推荐</h3><p>原文链接： <a href="http://www.nicolasbize.com/blog/7-tips-to-speed-up-eclipse/" target="_blank" rel="external nofollow noreferrer noopener">nicolasbize</a> 翻译： <a href="http://www.importnew.com/" target="_blank" rel="external nofollow noreferrer noopener">ImportNew.com</a> - 孙波翔<br>译文链接： <a href="http://www.importnew.com/13942.html" target="_blank" rel="external nofollow noreferrer noopener">http://www.importnew.com/13942.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大约一个月前，我发表了一篇博客，其中介绍了&lt;a href=&quot;http://www.nicolasbize.com/blog/the-best-ide-in-the-world/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;对Eclipse的爱与恨&lt;/a&gt;。 有些人问我如何给&lt;a href=&quot;http://res.importnew.com/eclipse&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;Eclipse&lt;/a&gt;提速，这篇文章就来讨论这个问题。顺带提一下，这篇文章不是比较IDE，所以不要说你讨厌某个IDE而选择另外一个。这篇文章只是关注如何让Eclipse运行得更快。每个技巧都针对Windows、Linux和MacOS用户详细说明。在使用所有优化技巧之后，Eclipse应该能在10秒内启动，并且比以前运行得更流畅。&lt;/p&gt;
&lt;p&gt;这些技巧不仅仅缩短了Eclipse的启动时间，其中大部分技巧还改善了用户体验。例如，更快地打开类、从一处定义跳到另外一处、查看javadoc等。但这些提速无法用时间精确的测量，所以对每条技巧带来的提速效果也没有特定的基准。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Eclipse" scheme="http://notes.seirhsiao.com/categories/Eclipse/"/>
    
    
      <category term="eclipse" scheme="http://notes.seirhsiao.com/tags/eclipse/"/>
    
      <category term="技巧" scheme="http://notes.seirhsiao.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>eclipse设置和优化</title>
    <link href="http://notes.seirhsiao.com/posts/1af86ba2/"/>
    <id>http://notes.seirhsiao.com/posts/1af86ba2/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:26:41.801Z</updated>
    
    <content type="html"><![CDATA[<p>一般在不对eclipse进行相关设置的时候，使用eclipse总是会觉得启动好慢，用起来好卡，其实只要对eclipse的相关参数进行一些配置，就会有很大的改善。</p><a id="more"></a><h3 id="1-eclipse下的编码设置"><a href="#1-eclipse下的编码设置" class="headerlink" title="1. eclipse下的编码设置:"></a>1. eclipse下的编码设置:</h3><ul><li>eclipse 中使用模板新建 JSP,xhtml等 文件时，默认的编码为：ISO-8859-1。 </li></ul><p>ISO-8859-1 编码对于中文的显示是不支持的，如果要支持简体中文，则编码方式应为 GBK 或者 GB2312 或者 UTF-8(推荐) 等。</p><p>右键菜单栏<code>window</code> -&gt; <code>preferences</code> -&gt; 在<code>type filter text</code>中输入<code>jsp</code> -&gt; 选择下面的Jsp Files-&gt; 选择<code>creating files</code>组中的<code>encoding</code> 为UTF-8编码就可以了。</p><ul><li><p>如果要使新建立工程、java文件直接使UTF-8则需要做以下工作： </p><ul><li>1、<code>windows</code> -&gt; <code>Preferences</code>…打开<strong>“首选项”</strong>对话框，左侧导航树，导航到<code>general</code> -&gt; <code>Workspace</code>，右侧 <code>Text file encoding</code>，选择<code>Other</code>，改变为<strong>UTF-8</strong>，以后新建立工程其属性对话框中的<code>Text file encoding</code>即为<code>UTF-8</code>。</li><li>2、<code>windows</code> -&gt; <code>Preferences</code>…打开<strong>“首选项”</strong>对话框，左侧导航树，导航到<code>general</code> -&gt; <code>Content Types</code>，右侧<code>Context Types</code>树，点开<code>Text</code>，选择<code>Java Source File</code>，在下面的<code>Default encoding</code>输入框中输入<code>UTF-8</code>，点<code>Update</code>，则设置Java文件编码为UTF-8。其他java应用开发相关的文件 如：properties、XML等已经由Eclipse缺省指定，分别为ISO8859-1，UTF-8，如开发中确需改变编码格式则可以在此指定。</li><li>3、经过上述两步，新建java文件即为UTF-8编码，Eclipse编译、运行、调试都没问题，但是做RCP应用的Product输出时、或者 插件输出时，则总是出错，要么不能编译通过(输出时要重新compile)、要么输出的插件运行时中文显示乱码。此时需要再RCP应用、或插件 Plugin工程的build.properties中增加一行，javacDefaultEncoding.. = UTF-8。让输出时编译知道java源文件时UTF-8编码。这个设置需要保证所有的java源文件时UTF-8编码格式，如果不全是，</li></ul><p>可以参考 Eclipse帮助中(Plug-in Development Environment Guide &gt; Reference &gt; Feature and Plug-in Build configuration)，建议全部java源文件是UTF-8编码。</p></li></ul><h3 id="2-取消单词拼写检查"><a href="#2-取消单词拼写检查" class="headerlink" title="2. 取消单词拼写检查"></a>2. 取消单词拼写检查</h3><p>eclipse菜单 <code>window</code> -&gt; <code>General</code> -&gt; <code>Editors</code> -&gt; <code>Text Editors</code> -&gt; <code>Spelling</code> -&gt; 把右边的<code>Enable spell checking</code>的勾去掉就行了，也就是取消单词的拼写检查。</p><h3 id="3-去除不需要加载的模块"><a href="#3-去除不需要加载的模块" class="headerlink" title="3.去除不需要加载的模块"></a>3.去除不需要加载的模块</h3><p>通过<code>Windows</code> -&gt; <code>Preferences</code>打开配置窗口，依次选择左侧的<code>General</code> -&gt; <code>Startup and Shutdown</code>，这个时候在右侧就显示出了Eclipse启动时加载的模块，可以根据自己的实际情况去除一些模块。</p><p>关掉没用的启动项：</p><p>WTP webservice UI plug-in,Equinox Provisioning platform Automatic Update Support</p><p>一个是ui视图,一个是自动更新.我去掉了。</p><h3 id="4-取消在启动时自动验证项目配置文件"><a href="#4-取消在启动时自动验证项目配置文件" class="headerlink" title="4. 取消在启动时自动验证项目配置文件"></a>4. 取消在启动时自动验证项目配置文件</h3><p>默认情况下Eclipse在启动的时候会自动验证每个项目的配置文件，这是一个非常耗时的过程，可以在Preferences窗口选择 <code>Validation</code>，然后在右侧的Validator列表中只保留 Manual 项就可以了。如果需要验证的时候只需要选中文件，然后右键选择 Validate就可以了。</p><p><code>windows</code> –&gt; <code>perferences</code> –&gt; <code>validation</code><br>把 除了manual 下面的全部点掉，build下只留 classpath dependency Validator</p><p>手工验证方法：<br>在要验证的文件上，单击鼠标右键<code>validate</code></p><h3 id="5-修改Eclipse安装目录的eclipse-ini文件，加大JVM的非堆内存"><a href="#5-修改Eclipse安装目录的eclipse-ini文件，加大JVM的非堆内存" class="headerlink" title="5.修改Eclipse安装目录的eclipse.ini文件，加大JVM的非堆内存"></a>5.修改Eclipse安装目录的<code>eclipse.ini</code>文件，加大JVM的非堆内存</h3><p>Eclipse的设置如下:<br>打开eclipse配置文件<code>eclipse.ini</code>，更改把-Xmx（其数值代表jvm可以使用的最大内存数）</p><figure class="highlight diff"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-Xms256m</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="deletion">-Xmx1024m</span></span></pre></td></tr></tbody></table></figure><h3 id="6-修改Eclipse编辑JSP-xhtml等页面时的编辑工具"><a href="#6-修改Eclipse编辑JSP-xhtml等页面时的编辑工具" class="headerlink" title="6. 修改Eclipse编辑JSP,xhtml等页面时的编辑工具"></a>6. 修改Eclipse编辑JSP,xhtml等页面时的编辑工具</h3><p><code>Window</code> -&gt; <code>perferences</code> -&gt; <code>General</code> -&gt; <code>Editors</code> -&gt; <code>File Associations</code> -&gt;<br>在File types 中选择 *.jsp &gt; 在Associated editors 中将自己要用的设置为默认。</p><h3 id="7-设置字体大小"><a href="#7-设置字体大小" class="headerlink" title="7. 设置字体大小"></a>7. 设置字体大小</h3><p>在<code>window</code> -&gt; <code>perferences</code> -&gt; <code>General</code> -&gt; <code>Appearance</code> -&gt; <code>Colors and Fonts</code> -&gt; <code>Text Font</code></p><p>单击change 修改</p><h3 id="8-Eclipse中高亮显示相同的变量"><a href="#8-Eclipse中高亮显示相同的变量" class="headerlink" title="8. Eclipse中高亮显示相同的变量"></a>8. Eclipse中高亮显示相同的变量</h3><p>问题描述：<br>   在eclipse中使用快捷键或其他原因，不小心按错了，使得变量的高亮显示没了。<br>1.解决方法 ：<br>选择: <code>windows</code> -&gt; <code>preferences</code> -&gt; <code>java</code> -&gt; <code>Editor</code> -&gt; <code>Mark Occurences</code><br>选择最上的复选框，下面的就有很多了。<br>其中的 Local variables就是变量的高亮显示。<br>2.也有更简单的办法：<br>网上搜了一下，原来是Toggle Mark Occurrences (Alt + Shift + 0)<br>这个按钮没有按下，在工具栏的小黄颜色的笔 的形状的图标。<br>3.改变其颜色：<br>选择: <code>windows</code> -&gt; <code>preferences</code> -&gt; <code>java</code> -&gt; <code>Editor</code> -&gt; <code>Mark Occurences</code> -&gt;第一行有个“Annotations”点击进入，显示出列表，找到 Occurrence annotation 右边选择Color即可。 </p><h3 id="9-Eclipse-Ctrl-alt-J的注释修改"><a href="#9-Eclipse-Ctrl-alt-J的注释修改" class="headerlink" title="9. Eclipse Ctrl+alt+J的注释修改"></a>9. Eclipse <code>Ctrl+alt+J</code>的注释修改</h3><p><img alt="eclipse_01_01.jpg" data-src="/static/images/eclipse/eclipse_01_01.jpg" class="lazyload"></p><p>新建一个XML文件.输入一下内容:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</span><span class="tag">&lt;<span class="name">templates</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"true"</span> <span class="attr">context</span>=<span class="string">"typecomment_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"Comment for created types"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.typecomment"</span> <span class="attr">name</span>=<span class="string">"typecomment"</span>&gt;</span>/**</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> * &amp;lt;p&amp;gt;Project: Credo's Base&amp;lt;/p&amp;gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> * &amp;lt;p&amp;gt;Description: &amp;lt;/p&amp;gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"> * &amp;lt;p&amp;gt;Copyright (c) ${year} LionCredo.All Rights Reserved.&amp;lt;/p&amp;gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"> * @author &amp;lt;a href="hsiao@seirhsiao.com"&amp;gt;LionCredo&amp;lt;/a&amp;gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"> */<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;/<span class="name">templates</span>&gt;</span></span></pre></td></tr></tbody></table></figure><p>导入就ok了.</p><h3 id="10-Eclipse设置每行的单词数-防止换行"><a href="#10-Eclipse设置每行的单词数-防止换行" class="headerlink" title="10. Eclipse设置每行的单词数,防止换行"></a>10. Eclipse设置每行的单词数,防止换行</h3><p>如图所示设置</p><p><img alt="eclipse_01_02.jpg" data-src="/static/images/eclipse/eclipse_01_02.jpg" class="lazyload"></p><p>web换行,是进主菜单–web里进行设置.</p><h3 id="11-关于eclipse配置文件导出问题："><a href="#11-关于eclipse配置文件导出问题：" class="headerlink" title="11. 关于eclipse配置文件导出问题："></a>11. 关于eclipse配置文件导出问题：</h3><p>eclipse的默认配置一般不能满足我们的要求，我们一般会修改一些配置，如字体、背景颜色、快捷键及一些template等等，这样方便我们的开发。可是当我们新建一个工作空间的时候，eclipse又会使用默认配置，怎样将我们习惯的配置导出然后导入新工作空间呢？</p><p><strong>方法一</strong>：使用eclipse的导出功能（不推荐，很多配置不能导出）</p><p>工作目录中右键选择<code>File</code> -&gt; <code>Export</code> -&gt; <code>General</code> -&gt; <code>Preference</code>，这样可以导出epf文件，新的工作空间中可以用Import导入该配置文件，这个方法的确可以导入绝大多数的配置，但是并不全，导入后会丢失很多配置。</p><p><strong>方法二</strong>：将<code>workspace/.metadata/.plugins/org.eclipse.core.runtime</code>中的<code>.settings</code>文件夹拷贝出来，里面就是所有的配置文件，新建工作空间的时候将该<code>.settings</code>文件夹替换掉新工作空间中的.settings文件夹即可。（有网友是将.plugings文件夹替换，但是.plugings文件夹太大了，实际上就是替换.settings文件夹，.settings只有几百k。）</p><h3 id="12-在类文件上标注是接口还是枚举类等"><a href="#12-在类文件上标注是接口还是枚举类等" class="headerlink" title="12. 在类文件上标注是接口还是枚举类等"></a>12. 在类文件上标注是接口还是枚举类等</h3><p><img alt="eclipse_01_03.jpg" data-src="/static/images/eclipse/eclipse_01_03.jpg" class="lazyload"></p><p>勾选上”java type indicator” 即可看到效果</p><h3 id="13-显示java-类型-是接口还是抽象类还是枚举等"><a href="#13-显示java-类型-是接口还是抽象类还是枚举等" class="headerlink" title="13. 显示java 类型,是接口还是抽象类还是枚举等."></a>13. 显示java 类型,是接口还是抽象类还是枚举等.</h3><p><img alt="eclipse_01_04.jpg" data-src="/static/images/eclipse/eclipse_01_04.jpg" class="lazyload"></p><p>勾选<code>General</code> -&gt; <code>Appearance</code> -&gt; <code>Lable Desirations</code> -&gt; <code>Java Type Indicator</code></p><h3 id="14-html页面中-属性为中文-对应字体的设置"><a href="#14-html页面中-属性为中文-对应字体的设置" class="headerlink" title="14. html页面中,属性为中文,对应字体的设置"></a>14. html页面中,属性为中文,对应字体的设置</h3><p><img alt="eclipse_01_05.jpg" data-src="/static/images/eclipse/eclipse_01_05.jpg" class="lazyload"></p><h3 id="15-console输出完整信息"><a href="#15-console输出完整信息" class="headerlink" title="15. console输出完整信息"></a>15. console输出完整信息</h3><p>limit console output 不要勾选</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      一般在不对eclipse进行相关设置的时候，使用eclipse总是会觉得启动好慢，用起来好卡，其实只要对eclipse的相关参数进行一些配置，就会有很大的改善。
    
    </summary>
    
    
      <category term="Eclipse" scheme="http://notes.seirhsiao.com/categories/Eclipse/"/>
    
    
      <category term="eclipse" scheme="http://notes.seirhsiao.com/tags/eclipse/"/>
    
      <category term="优化" scheme="http://notes.seirhsiao.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Maven学习 —— Maven 环境搭建</title>
    <link href="http://notes.seirhsiao.com/posts/1bc69444/"/>
    <id>http://notes.seirhsiao.com/posts/1bc69444/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:26:55.553Z</updated>
    
    <content type="html"><![CDATA[<p>初始环境：</p><p>操作系统：windows 7 旗舰版64 bit</p><p>已装JDK1.7</p><p>已装tomcat7.0</p><p>Eclipse juno 64 bit</p><p>远程SVN服务器已搭建且已与eclipse集成</p><p>接下来开始进行环境搭建：</p><p>MAVEN:</p><p>主要介绍包括maven安装，与eclipse的集成与使用。</p><a id="more"></a><h3 id="一、-Maven-安装"><a href="#一、-Maven-安装" class="headerlink" title="一、 Maven 安装"></a>一、 Maven 安装</h3><ol><li><p>从官网下载<code>apache-maven-3.0.5-bin</code>文件，下载下来之后解压缩(路径随意)。</p></li><li><p>配置系统环境变量。</p></li></ol><p>新建系统变量 maven_home=解压之后的文件夹位置。</p><p>因为已经配置了java环境变量，所以就在已有的Path中添加</p><figure class="highlight taggerscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">;<span class="variable">% MAVEN_HOME%</span><span class="symbol">\b</span>in</span></pre></td></tr></tbody></table></figure><p>例如: maven_home=D:\work\maven\apache-maven-3.0.5-bin\apache-maven-3.0.5</p><p>Path =%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;%MAVEN_HOME%\bin</p><ol start="3"><li>修改配置文件，指定jar包仓库存放的位置。</li></ol><p>在解压之后的文件夹下面有个conf文件夹，里面有个<code>settings.xml</code>文件。</p><p>用notepad等编辑工具打开，在下图所示位置输入你想要存放的仓库路径。</p><p>我输入的是：<code>&lt;localRepository&gt;D:\maven&lt;/localRepository&gt;</code></p><p><img alt="maven_01_01.jpg" data-src="/static/images/maven/maven_01_01.jpg" class="lazyload"></p><p>配置好之后，在开始菜单输入<code>cmd</code>，打开dos，输入指令<code>mvn –v</code>,显示如下信息表示配置成功。</p><p><img alt="maven_01_01.png" data-src="/static/images/maven/maven_01_01.png" class="lazyload"></p><h3 id="二、与eclipse集成"><a href="#二、与eclipse集成" class="headerlink" title="二、与eclipse集成"></a>二、与eclipse集成</h3><ol><li><p>打开eclipse，安装maven插件。在eclipse中点击Help -&gt; eclipse Marketplace，在搜索栏中输入maven,回车。<br><img alt="maven_01_02.png" data-src="/static/images/maven/maven_01_02.png" class="lazyload"></p></li><li><p>在查询结果中选择<code>maven Integration for eclipse (juno and newer)</code>,点击<code>install</code>，我这已经安装了所以没显示install。</p><p><img alt="maven_01_03.png" data-src="/static/images/maven/maven_01_03.png" class="lazyload"></p></li><li><p>安装成功之后需要进行如下设置才能正常使用。</p></li></ol><p>打开windows -&gt; Preference -&gt;installation，添加一个外置的maven服务，不用自带的。点击add，选择我们第一步设置的maven路径。如下图：<br><img alt="maven_01_04.png" data-src="/static/images/maven/maven_01_04.png" class="lazyload"></p><p>接着点击<code>user settings</code> 设置，选择之前修改的<code>setting.xml</code>文件。<br><img alt="maven_01_05.png" data-src="/static/images/maven/maven_01_05.png" class="lazyload"></p><h3 id="三、-在eclipse中的使用"><a href="#三、-在eclipse中的使用" class="headerlink" title="三、 在eclipse中的使用"></a>三、 在eclipse中的使用</h3><ol><li><p>在eclipse中点击file-&gt;new-&gt;other,在搜索栏中输入maven，找到maven project。如图所示：<br><img alt="maven_01_06.png" data-src="/static/images/maven/maven_01_06.png" class="lazyload"></p></li><li><p>点击next,默认。</p></li><li><p>点击next，在如下界面执行1-2-3操作，新建一个maven web项目。<br><img alt="maven_01_07.png" data-src="/static/images/maven/maven_01_07.png" class="lazyload"></p></li><li><p>如下图进行输入，Group Id一般是org，com开头。Artifact id是你的项目名字，随意填写。<br><img alt="maven_01_08.png" data-src="/static/images/maven/maven_01_08.png" class="lazyload"></p></li></ol><p><strong>注意</strong>：这里最后finish的时候可能会报错，创建不成功。原因是由内网访问时通过代理下载不了创建工程所需的jar包。</p><ol start="5"><li><strong>注意</strong>：此时该项目还不算是web项目，因为maven工程的文件路径不是标准的web路径。目录结构如图所示：<br><img alt="maven_01_09.png" data-src="/static/images/maven/maven_01_09.png" class="lazyload"></li></ol><p>所以需要进行转换成标准的web路径。</p><p>右键zhangyu_web。选择properities,如图点击project facets -&gt; convert to faceted from…<br><img alt="maven_01_10.png" data-src="/static/images/maven/maven_01_10.png" class="lazyload"></p><p>进入之后按图继续操作<br><img alt="maven_01_11.png" data-src="/static/images/maven/maven_01_11.png" class="lazyload"></p><p>继续如图操作，修改content directory，并勾选</p><p>点击OK -&gt; APPLY -&gt; OK进行转换。项目转换之后结构如下:<br><img alt="maven_01_12.png" data-src="/static/images/maven/maven_01_12.png" class="lazyload"></p><ol start="6"><li><p>Pom.xml文件可以自己查看maven文档进行编写，默认的是可以进行打包的。</p></li><li><p>进行项目打包成war包，pom文件是打包的指令文件，里面指定了打包的文件类型为war。<br><img alt="maven_01_13.png" data-src="/static/images/maven/maven_01_13.png" class="lazyload"></p></li></ol><p>选择maven build之后</p><p><img alt="maven_01_14.png" data-src="/static/images/maven/maven_01_14.png" class="lazyload"></p><p> 之后应该执行打包命令。查看控制台如下图：<br><img alt="maven_01_15.png" data-src="/static/images/maven/maven_01_15.png" class="lazyload"></p><p><strong>注意</strong>：如果打包失败并且报错时处在下载jar包的时候connection time out，也就是连接超时，说明是网络的问题。</p><ol start="8"><li>测试war包是否可用。</li></ol><p>将war包从eclipse的目录下（上图红线的位置）拷贝出来，放入本地已有的tomcat文件夹的webapps下。<br><img alt="maven_01_16.png" data-src="/static/images/maven/maven_01_16.png" class="lazyload"></p><p>然后再bin文件夹下启动tomcat,点击<code>startup.bat</code><br><img alt="maven_01_17.png" data-src="/static/images/maven/maven_01_17.png" class="lazyload"></p><p>在浏览器中查看。输入localhost:8080/zhangyu_web。<br><img alt="maven_01_18.png" data-src="/static/images/maven/maven_01_18.png" class="lazyload"></p><p>至此，maven基本上安装完成，具体的使用细节还需参考maven相关文档进行深入学习。</p><h3 id="三、参考指南"><a href="#三、参考指南" class="headerlink" title="三、参考指南"></a>三、参考指南</h3><p><a href="http://blog.csdn.net/duaiwuyan/article/details/18663671" target="_blank" rel="external nofollow noreferrer noopener">原文</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初始环境：&lt;/p&gt;
&lt;p&gt;操作系统：windows 7 旗舰版64 bit&lt;/p&gt;
&lt;p&gt;已装JDK1.7&lt;/p&gt;
&lt;p&gt;已装tomcat7.0&lt;/p&gt;
&lt;p&gt;Eclipse juno 64 bit&lt;/p&gt;
&lt;p&gt;远程SVN服务器已搭建且已与eclipse集成&lt;/p&gt;
&lt;p&gt;接下来开始进行环境搭建：&lt;/p&gt;
&lt;p&gt;MAVEN:&lt;/p&gt;
&lt;p&gt;主要介绍包括maven安装，与eclipse的集成与使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Maven" scheme="http://notes.seirhsiao.com/categories/Maven/"/>
    
    
      <category term="maven" scheme="http://notes.seirhsiao.com/tags/maven/"/>
    
      <category term="环境搭建" scheme="http://notes.seirhsiao.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins安装以及集成使用</title>
    <link href="http://notes.seirhsiao.com/posts/e6fee501/"/>
    <id>http://notes.seirhsiao.com/posts/e6fee501/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:27:11.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jenkins安装以及集成使用"><a href="#Jenkins安装以及集成使用" class="headerlink" title="Jenkins安装以及集成使用"></a>Jenkins安装以及集成使用</h1><a id="more"></a><h3 id="一、jenkins的安装"><a href="#一、jenkins的安装" class="headerlink" title="一、jenkins的安装"></a>一、jenkins的安装</h3><ol><li>从jenkins官网下载最新的war包，放入本地tomcat/webapps文件夹下，启动tomcat,输入网址localhost:8080/Jenkins,进入jenkins访问。具体tomcat的操作跟上一章一致。</li></ol><h3 id="二、Jenkins的集成"><a href="#二、Jenkins的集成" class="headerlink" title="二、Jenkins的集成"></a>二、Jenkins的集成</h3><ol><li><p>Jenkins将会与<code>jira</code>进行集成，需要装1个插件。在首页点击左侧的系统管理</p><p><img alt="jenkins_01_01.png" data-src="/static/images/jenkins/jenkins_01_01.png" class="lazyload"></p></li><li><p>点击管理插件</p><p><img alt="jenkins_01_02.png" data-src="/static/images/jenkins/jenkins_01_02.png" class="lazyload"></p></li><li><p>点击高级 -&gt; 选择插件 -&gt; 上传。此插件用于jira集成插件的下载点此<br><img alt="jenkins_01_03.png" data-src="/static/images/jenkins/jenkins_01_03.png" class="lazyload"></p></li><li><p>加动态部署的插件，该插件会将打好的war包动态放到对应的web服务器目录下，并发布。在可选插件搜索<code>deploy</code>，安装<code>Deploy to container Plugin</code>插件。<br><img alt="jenkins_01_04.png" data-src="/static/images/jenkins/jenkins_01_04.png" class="lazyload"></p></li></ol><h3 id="三、jenkins的使用"><a href="#三、jenkins的使用" class="headerlink" title="三、jenkins的使用"></a>三、jenkins的使用</h3><ol><li><p>新建一个任务，回到首页点击左上角的新job<br><img alt="jenkins_01_05.png" data-src="/static/images/jenkins/jenkins_01_05.png" class="lazyload"></p></li><li><p>选择构建一个maven项目，并命名为dd<br><img alt="jenkins_01_06.png" data-src="/static/images/jenkins/jenkins_01_06.png" class="lazyload"></p></li><li><p>这时候需要先把上一章新建的web项目提交到svn服务器上去。，打开eclipse，右键web项目 -&gt; Team- &gt; share Project<br><img alt="jenkins_01_07.png" data-src="/static/images/jenkins/jenkins_01_07.png" class="lazyload"></p></li></ol><p>继续操作选择SVN -&gt; next<br> <img alt="jenkins_01_08.png" data-src="/static/images/jenkins/jenkins_01_08.png" class="lazyload"></p><p>继续，我这里已经配置好了SVN.配置svn很简单，这里就不赘述了。<br> <img alt="jenkins_01_09.png" data-src="/static/images/jenkins/jenkins_01_09.png" class="lazyload"></p><p>这里我在SVN服务器上新建了一个zytest的文件夹用于存放测试项目的。所以我在这里将zhangyu_web放在zytest文件夹下面。<br> <img alt="jenkins_01_10.png" data-src="/static/images/jenkins/jenkins_01_10.png" class="lazyload"></p><p>点击finish，然后等待弹出调整视窗的页面，点击yes。进入svn视图之后点击左侧的zhangyu_web进行查看，然后右键zhangyu_web，进行提交。<br> <img alt="jenkins_01_11.png" data-src="/static/images/jenkins/jenkins_01_12.png" class="lazyload"></p><p>查看eclipse中的svn资源库，具体在eclipse菜单栏点击windows -&gt; show view -&gt; other,然后搜索svn。出现zhangyu_web文件夹表示提交成功。<br> <img alt="jenkins_01_13.png" data-src="/static/images/jenkins/jenkins_01_13.png" class="lazyload"></p><ol start="4"><li>继续jenkins的集成，新建job之后，有如下几个地方需要填写。在源码管理选择subversion，然后配置好svn上项目的地址<br><img alt="jenkins_01_14.png" data-src="/static/images/jenkins/jenkins_01_14.png" class="lazyload"></li></ol><p>选择构建触发器，并输入时间第一个是分钟，第二个位置是小时，目前设定的是中午12点与晚上20点自动构建。后三位分别是日月年。*表示任意，该句的意思就是每天中午12点，晚上20点自动构建该项目。<br> <img alt="jenkins_01_15.png" data-src="/static/images/jenkins/jenkins_01_15.png" class="lazyload"></p><p>在build这块使用默认的pom文件，也就是项目中自带的pom文件，post steps是指在构建该项目完成时，根据其构建的状态是否继续运行。<br> <img alt="jenkins_01_16.png" data-src="/static/images/jenkins/jenkins_01_16.png" class="lazyload"></p><p>在构建后的操作选择配置war包路径以及tomcat的相关参数</p><p>Tomcat的账号密码，在tomcat/conf中一个配置文件中添加，不会的自己百度。<br> <img alt="jenkins_01_17.png" data-src="/static/images/jenkins/jenkins_01_17.png" class="lazyload"></p><ol start="5"><li>返回jenkins首页，点击右侧立即构建。注意因为maven环境搭建测试时将zhangyu_web.war拷贝到了tomcat中，为了不影响jenkins的结果测试，先将tomcat中的zhangyu_web.war包删除。然后再执行jenkins的构建。<br><img alt="jenkins_01_18.png" data-src="/static/images/jenkins/jenkins_01_18.png" class="lazyload"></li></ol><p>注意左下角正在执行。<br> <img alt="jenkins_01_19.png" data-src="/static/images/jenkins/jenkins_01_19.png" class="lazyload"></p><p>成功之后刷新首页，发现构建成功的状态。<br> <img alt="jenkins_01_20.png" data-src="/static/images/jenkins/jenkins_01_20.png" class="lazyload"></p><p>这时候浏览器访问localhost:8080/zhangyu_web。<br> <img alt="jenkins_01_02.png" data-src="/static/images/jenkins/jenkins_01_02.png" class="lazyload"></p><p>这时候表示我们的jenkins能从svn上下载项目，并根据maven的配置进行构建，并动态发布到web服务器上。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Jenkins安装以及集成使用&quot;&gt;&lt;a href=&quot;#Jenkins安装以及集成使用&quot; class=&quot;headerlink&quot; title=&quot;Jenkins安装以及集成使用&quot;&gt;&lt;/a&gt;Jenkins安装以及集成使用&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Jenkins" scheme="http://notes.seirhsiao.com/categories/Jenkins/"/>
    
    
      <category term="环境搭建" scheme="http://notes.seirhsiao.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="jenkins" scheme="http://notes.seirhsiao.com/tags/jenkins/"/>
    
      <category term="tools" scheme="http://notes.seirhsiao.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Sonar及其eclipse插件的安装</title>
    <link href="http://notes.seirhsiao.com/posts/7fb9dba/"/>
    <id>http://notes.seirhsiao.com/posts/7fb9dba/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:28:01.940Z</updated>
    
    <content type="html"><![CDATA[<p>本文档用于帮助您安装Sonar和Eclipse的Sonar插件,并利用Sonar分析您的项目，动态地清理代码中的问题，提高代码质量。</p><a id="more"></a><h3 id="一、Sonar安装"><a href="#一、Sonar安装" class="headerlink" title="一、Sonar安装"></a>一、Sonar安装</h3><ol><li>下载Sonar</li></ol><p>点击下面网址：<br><a href="http://dist.sonar.codehaus.org/sonar-3.5.1.zip" target="_blank" rel="external nofollow noreferrer noopener">下载Sonar</a> </p><p>下载后解压</p><ol start="2"><li>解压后安装</li></ol><p>解压后你将要看到如下图所示的目录结构：<br><img alt="sonar_01_01.png" data-src="/static/images/sonar/sonar_01_01.png" class="lazyload"><br>图 1 Sonar目录结构</p><ol start="3"><li>运行Sonar</li></ol><p>不同的操作系统需要执行不同的可执行文件，例如64位linux-x86系统需要执行<code>start.sh</code><br><img alt="sonar_01_02.png" data-src="/static/images/sonar/sonar_01_02.png" class="lazyload"><br>图 2 运行Sonar</p><ol start="4"><li>Sonar控制台</li></ol><p>启动Sonar后您将看到如下信息：<br><img alt="sonar_01_03.png" data-src="/static/images/sonar/sonar_01_03.png" class="lazyload"><br>图 3 Sonar控制台</p><ol start="5"><li>访问Sonar</li></ol><p>现在你可以通过<a href="http://localhost:9000访问你的Sonar" target="_blank" rel="external nofollow noreferrer noopener">http://localhost:9000访问你的Sonar</a></p><h3 id="二、生成Sonar报告"><a href="#二、生成Sonar报告" class="headerlink" title="二、生成Sonar报告"></a>二、生成Sonar报告</h3><ul><li>POM中增加Sonar配置</li></ul><p>Sonar安装完成后，为了可以生成maven项目的报告，我们需要在项目的pom.xml文件中添加下图所示的行（在properties section中增加Sonar主机地址）<br><img alt="sonar_01_04.png" data-src="/static/images/sonar/sonar_01_04.png" class="lazyload"><br>图 4 POM XML中添加Sonar配置</p><ul><li>例子<ul><li>让我们看一个普通项目的例子;执行下列操作步骤<ul><li>从库中检出最新的代码到您的工作中</li><li>执行<code>mvn clean install</code></li><li>修改pom.xml文件，在properties section中添加如下内容：<figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sonar.host.url</span>&gt;</span> http://localhost:9000/ <span class="tag">&lt;/<span class="name">sonar.host.url</span>&gt;</span></span></pre></td></tr></tbody></table></figure></li><li>保存文件</li><li>在命令行中执行<code>mvn sonar:sonar</code></li></ul></li></ul></li></ul><p>你将看到如下信息<br><img alt="sonar_01_05.png" data-src="/static/images/sonar/sonar_01_05.png" class="lazyload"><br>图 5 生成Sonar报告-1</p><p><strong>注意</strong>：需要等待几分钟（等待时间取决于sonar报告的模块大小，可能需要更长的时间）</p><p><img alt="sonar_01_06.png" data-src="/static/images/sonar/sonar_01_06.png" class="lazyload"><br>图 6 生成Sonar报告-2</p><p>最后看到如下信息时，表明sonar报告已经完成。</p><p><img alt="sonar_01_07.png" data-src="/static/images/sonar/sonar_01_07.png" class="lazyload"><br>图 7 Sonar报告生成成功</p><h3 id="三、Sonar中访问您的项目"><a href="#三、Sonar中访问您的项目" class="headerlink" title="三、Sonar中访问您的项目"></a>三、Sonar中访问您的项目</h3><p>现在登陆 <a href="http://localhost:9000" target="_blank" rel="external nofollow noreferrer noopener">http://localhost:9000</a> ，你将看到生成的项目报告<br><img alt="sonar_01_08.png" data-src="/static/images/sonar/sonar_01_08.png" class="lazyload"><br>图8 本地生成的Sonar报告</p><h3 id="四、Eclipse中集成Sonar"><a href="#四、Eclipse中集成Sonar" class="headerlink" title="四、Eclipse中集成Sonar"></a>四、Eclipse中集成Sonar</h3><ul><li><p>安装Eclipse的Sonar插件<br>通过Eclipse Market Place安装<br><img alt="sonar_01_09.png" data-src="/static/images/sonar/sonar_01_09.png" class="lazyload"><br>图 9 Sonar的Eclipse插件安装（Market Place）1<br><img alt="sonar_01_10.png" data-src="/static/images/sonar/sonar_01_10.png" class="lazyload"><br>图 10 Sonar的Eclipse插件安装（Market Place）2</p></li><li><p>通过Eclipse Software Update安装</p></li></ul><p>点击Help -&gt; Install New Software,将弹出Install对话框。 复制地址<a href="http://dist.sonar-ide.codehaus.org/eclipse/" target="_blank" rel="external nofollow noreferrer noopener">http://dist.sonar-ide.codehaus.org/eclipse/</a> 到Work with栏并回车，将显示可用的插件和组件列表，如下图</p><p><img alt="sonar_01_11.png" data-src="/static/images/sonar/sonar_01_11.png" class="lazyload"><br>图 11 Sonar的Eclipse插件安装（通过安装新软件菜单）</p><ul><li>选择Sonar Java, 按照步骤安装插件</li></ul><p><strong>注意</strong>：请确保你要关联Sonar的项目已经被Sonar安装版分析过</p><ul><li>配置Eclipse中的Sonar</li><li>配置eclispe的本地/远程Sonar服务器</li></ul><p>点击Window -&gt; Preferences -&gt; Sonar -&gt; Servers Sonar Eclipse预置的访问本地Sonar服务器的地址为<a href="http://localhost:9000/" target="_blank" rel="external nofollow noreferrer noopener">http://localhost:9000/</a> ，你可以修改、删除或者新增一个地址<br><img alt="sonar_01_12.png" data-src="/static/images/sonar/sonar_01_12.png" class="lazyload"><br>图 12 Eclipse中配置Sonar服务器</p><ul><li>第一次链接你的项目</li></ul><p>Sonar服务器配置完成后，下一步是将你的Eclipse项目链接到Sonar服务器，并利用Sonar服务器进行分析</p><p>首先，在Project Explorer中右键单击项目，然后点击Configure -&gt; Associate with Sonar.<br><img alt="sonar_01_13.png" data-src="/static/images/sonar/sonar_01_13.png" class="lazyload"><br>图 13配置/关联您的Eclipse项目到Sonar</p><ul><li><p>在Sonar project文本位置输入项目的名称，并在列表框中选择<br><img alt="sonar_01_14.png" data-src="/static/images/sonar/sonar_01_14.png" class="lazyload"><br>图 14关联您的Eclipse项目到Sonar 2</p></li><li><p>点击Finsh。您的项目现在关联到您的Sonar服务器上进行分析</p></li></ul><h3 id="五、分析和清理代码"><a href="#五、分析和清理代码" class="headerlink" title="五、分析和清理代码"></a>五、分析和清理代码</h3><ul><li>执行本地分析，清理代码<br><img alt="sonar_01_15.png" data-src="/static/images/sonar/sonar_01_15.png" class="lazyload"><br>图 15 配置模块<br><img alt="sonar_01_16.png" data-src="/static/images/sonar/sonar_01_16.png" class="lazyload"><br>图 16 在Eclipse中配置Sonar模块</li></ul><p><strong>注意</strong>：请确保你的本地Sonar服务器已经启动（在运行Sonar一节描述），否则您无法看到您打算配置的Sonar项目</p><ul><li>本地运行Sonar分析</li></ul><p><img alt="sonar_01_17_a.png" data-src="/static/images/sonar/sonar_01_17.png" class="lazyload"><br>图 17.a 设置Sonar分析为本地模式</p><p><img alt="sonar_01_17_b.png" data-src="/static/images/sonar/sonar_01_17_b.png" class="lazyload"><br>图 17.b 本地运行Sonar分析<br><img alt="sonar_01_18.png" data-src="/static/images/sonar/sonar_01_18.png" class="lazyload"><br>图 18 Sonar问题分析控制台<br><img alt="sonar_01_19.png" data-src="/static/images/sonar/sonar_01_19.png" class="lazyload"><br>图 19 Sonar问题分析控制台2<br><img alt="sonar_01_20.png" data-src="/static/images/sonar/sonar_01_20.png" class="lazyload"><br>图 20 Sonar问题标记</p><h3 id="六、参考推荐"><a href="#六、参考推荐" class="headerlink" title="六、参考推荐"></a>六、参考推荐</h3><p>原文链接： dzone 翻译： ImportNew.com - norwind<br>译文链接： <a href="http://www.importnew.com/10017.html" target="_blank" rel="external nofollow noreferrer noopener">http://www.importnew.com/10017.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      本文档用于帮助您安装Sonar和Eclipse的Sonar插件,并利用Sonar分析您的项目，动态地清理代码中的问题，提高代码质量。
    
    </summary>
    
    
      <category term="Maven" scheme="http://notes.seirhsiao.com/categories/Maven/"/>
    
    
      <category term="maven" scheme="http://notes.seirhsiao.com/tags/maven/"/>
    
      <category term="nexus" scheme="http://notes.seirhsiao.com/tags/nexus/"/>
    
      <category term="环境搭建" scheme="http://notes.seirhsiao.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="tools" scheme="http://notes.seirhsiao.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>HTML/CSS 开发规范指南</title>
    <link href="http://notes.seirhsiao.com/posts/7fe7f23a/"/>
    <id>http://notes.seirhsiao.com/posts/7fe7f23a/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-07T05:56:46.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML-CSS开发规范指南"><a href="#HTML-CSS开发规范指南" class="headerlink" title="HTML/CSS开发规范指南"></a>HTML/CSS开发规范指南</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#intro">规范概述</a></li><li><a href="#profile">基本信息</a></li><li><a href="#general">通用约定</a><ul><li><a href="#directory">文档目录结构</a></li><li><a href="#separate">分离</a></li><li><a href="#file-name">文件命名</a></li><li><a href="#indentation">缩进</a></li><li><a href="#encoding">编码</a></li><li><a href="#lowercase">小写</a></li><li><a href="#comment">注释</a></li><li><a href="#todo">待办事项</a></li><li><a href="#end-line-space">行尾空格</a></li><li><a href="#protocol-relative-url">省略嵌入式资源协议头</a></li><li><a href="#validator">代码有效性</a></li></ul></li><li><a href="#html">HTML约定</a><ul><li><a href="#doctype">文档类型</a></li><li><a href="#type">省略type属性</a></li><li><a href="#attribute">省略属性值</a></li><li><a href="#quots">用双引号包裹属性值</a></li><li><a href="#nest">嵌套</a></li><li><a href="#close-tag">标签闭合</a></li><li><a href="#perceivable">多媒体替代方案</a></li><li><a href="#friendly">有效操作</a></li><li><a href="#html-comment">按模块添加注释</a></li><li><a href="#format">格式</a></li><li><a href="#semantic">语义化标签</a></li><li><a href="#html-module">模块化</a></li></ul></li><li><a href="#css">CSS约定</a><ul><li><a href="#link">文件引用</a></li><li><a href="#element">命名-组成元素</a></li><li><a href="#word">命名-词汇规范</a></li><li><a href="#abbr">命名-缩写规范</a></li><li><a href="#prefix">命名-前缀规范</a></li><li><a href="#id">id与class</a></li><li><a href="#packaging">书写格式</a></li><li><a href="#semicolon">规则与分号</a></li><li><a href="#unit">0与单位</a></li><li><a href="#decimal">0与小数</a></li><li><a href="#non-quotes">去掉uri中引用资源的引号</a></li><li><a href="#hex">HEX颜色值写法</a></li><li><a href="#order">属性书写顺序</a></li><li><a href="#css-comment">注释规范</a></li><li><a href="#hack">hack规范</a></li><li><a href="#low-selector">避免低效率选择器</a></li><li><a href="#override">属性缩写与分拆</a></li><li><a href="#css-module">模块化</a></li></ul></li><li><a href="#img">图像约定</a><ul><li><a href="#img-compress">图像压缩</a></li><li><a href="#background-image">背景图</a></li><li><a href="#image">前景图</a></li><li><a href="#sprite">Sprite</a></li></ul></li><li><a href="#end">结语</a><a id="more"></a><a name="intro"></a><h2 id="规范概述"><a href="#规范概述" class="headerlink" title="规范概述"></a>规范概述</h2></li></ol><p>规范的制定是我们长期以来对工作的积累与沉淀的产物，帮助我们更快、更好、更高效的完成繁重、复杂、多样化的任务，我们制作规范的主要目的在于：</p><ul><li>降低每个组员介入项目的门槛成本；</li><li>提高工作效率及协同开发的便捷性；</li><li>高度统一的代码风格；</li><li>提供一整套HTML、CSS解决方案，来帮助开发人员快速做出高质量的符合要求的页面。</li></ul><p><a name="profile"></a></p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><table><thead><tr><th>规范名称</th><th>Cook</th></tr></thead><tbody><tr><td>当前版本</td><td>v1.0 beta</td></tr><tr><td>规范发起</td><td><a href="http://weibo.com/doyoe" target="_blank" rel="external nofollow noreferrer noopener">杜瑶(@doyoe)</a></td></tr><tr><td>参与人群</td><td>Qunar FED</td></tr><tr><td>最后更新</td><td>2015.03.20</td></tr></tbody></table><p><a name="general"></a></p><h2 id="通用约定"><a href="#通用约定" class="headerlink" title="通用约定"></a>通用约定</h2><p><a name="directory"></a></p><h3 id="1-文档目录结构"><a href="#1-文档目录结构" class="headerlink" title="1.文档目录结构"></a>1.文档目录结构</h3><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- 项目名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- src开发环境</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- html    静态页面模板目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- bgimg   背景图目录（假设有的话）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- image   前景图目录（假设有的话）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- font    字体目录（假设有的话）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- scripts      脚本目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- styles（Yo）  样式目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- lib   基础库</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- core      核心代码：reset</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- element   元素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- fragment  公用碎片</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- layout    布局</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- widget    组件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- usage  项目具体实现</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- project 某个子项目</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- core      核心代码：桥接lib中的core，可以进行项目级扩展</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- fragment  项目公用碎片</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- module    模块</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- page      page桥接文件目录：src-list</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- export    page pack之后的文件目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- prd生产环境</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- bgimg   背景图目录（假设有的话）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- image   前景图目录（假设有的话）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- font    字体目录（假设有的话）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- scripts      脚本目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- styles（Yo）  样式目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- project1 子项目</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- index.css</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- login.css</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- and etc...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- project2 子项目</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- index.css</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- login.css</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- and etc...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="string">|-- and etc...</span></span></pre></td></tr></tbody></table></figure><blockquote><p><code>src</code>, <code>scripts</code>, <code>styles</code> 三个目录是为了和现有项目保持一致，避免修改过大，所以保持不变。</p></blockquote><blockquote><p><code>html</code> 目录，用于存放前端开发做的静态页面，以备查阅、备份、review或给后端套页面。</p></blockquote><blockquote><p><code>bgimg</code>, <code>image</code>, <code>font</code> 三个目录在Qunar一般不会直接存在，因为我们有source服务器，这些资源都会在那上面管理；不过特殊情况也会有，比如一些独立的项目，没有使用source的，那么就需要遵循这样的目录划分。</p></blockquote><blockquote><p>至于 <code>html</code>, <code>bgimg</code>, <code>image</code>, <code>font</code> 这几个目录为什么没有加 <code>s</code>，主要是因为不希望大家去想某个目录是否为复数，简单点就好。</p></blockquote><blockquote><p><code>prd</code> 为生产环境目录，以 <code>xxx</code> 项目中的一个子项目 <code>mobile</code> 为例，其生产环境中的某个CSS外链大致如下：<code>//sitename.com/prd/styles/mobile/index.css</code></p></blockquote><p><a name="separate"></a></p><h3 id="2-分离"><a href="#2-分离" class="headerlink" title="2.分离"></a>2.分离</h3><p>结构（HTML）、表现（CSS）、行为分离（JavaScript）</p><blockquote><p>将结构与表现、行为分离，保证它们之间的最小耦合，这对前期开发和后期维护都至关重要。</p></blockquote><p><a name="file-name"></a></p><h3 id="3-文件命名"><a href="#3-文件命名" class="headerlink" title="3.文件命名"></a>3.文件命名</h3><ul><li>CSS模块文件，其文件名必须与模块名一致；</li></ul><p>假定有这样一个模块：</p><pre><code>.m-detail { sRules; }.m-detail-hd { sRules; }.m-detail-bd { sRules; }.m-detail-ft { sRules; }</code></pre><blockquote><p>那么该模块的文件名应该为：<code>m-detail.css</code></p></blockquote><ul><li>CSS页面文件，其文件名必须与HTML文件名一致；</li></ul><blockquote><p>假定有一个HTML页面叫 <code>product.html</code>，那么其相对应的CSS页面文件名应该为：<code>product.css</code></p></blockquote><blockquote><p>假定现在有一个 <code>product.html</code>，里面有2个模块：</p></blockquote><pre><code>+&lt;section class="m-list"&gt;+&lt;section class="m-info"&gt;</code></pre><p>那么开发人员能快速找到与该页面相关的3个直接CSS文件，包括：<code>product.css</code>, <code>m-list.css</code>, <code>m-info.css</code></p><p><a name="indentation"></a></p><h3 id="4-缩进"><a href="#4-缩进" class="headerlink" title="4.缩进"></a>4.缩进</h3><p>使用tab（4个空格宽度）来进行缩进，可以在IDE里进行设置</p><p><a name="encoding"></a></p><h3 id="5-编码"><a href="#5-编码" class="headerlink" title="5.编码"></a>5.编码</h3><ul><li>以 UTF-8 无 BOM 编码作为文件格式；</li><li>在HTML中文档中用 <code>&lt;meta charset="utf-8" /&gt;</code> 来指定编码；</li><li>为每个CSS文档显示的定义编码，在文档首行定义 <code>@charset "utf-8";</code></li></ul><blockquote><p>在 Sass 中，如果文档中出现中文，却未显示定义编码，将会编译出错，为了统一各种写法，且提前规避错误几率，统一要求每个CSS文档都需要定义编码</p></blockquote><p><a name="lowercase"></a></p><h3 id="6-小写"><a href="#6-小写" class="headerlink" title="6.小写"></a>6.小写</h3><ul><li>所有的HTML标签必须小写；</li><li>所有的HTML属性必须小写；</li><li>所有的样式名及规则必须小写。</li></ul><p><a name="comment"></a></p><h3 id="7-注释"><a href="#7-注释" class="headerlink" title="7.注释"></a>7.注释</h3><p>尽可能的为你的代码写上注释。解释为什么要这样写，它是新鲜的方案还是解决了什么问题。</p><p><a name="todo"></a></p><h3 id="8-待办事项"><a href="#8-待办事项" class="headerlink" title="8.待办事项"></a>8.待办事项</h3><p>用 TODO 标示待办事项和正在开发的条目</p><pre><code>&lt;!-- TODO: 图文混排 --&gt;&lt;div class="g-imgtext"&gt;&lt;img src="1.png" alt="" /&gt;.../* TODO: 图文混排 comm: g-imgtext */.g-imgtext { sRules; }</code></pre><p><a name="end-line-space"></a></p><h3 id="9-行尾空格"><a href="#9-行尾空格" class="headerlink" title="9.行尾空格"></a>9.行尾空格</h3><p>删除行尾空格，这些空格没有必要存在</p><p><a name="protocol-relative-url"></a></p><h3 id="10-省略嵌入式资源协议头"><a href="#10-省略嵌入式资源协议头" class="headerlink" title="10.省略嵌入式资源协议头"></a>10.省略嵌入式资源协议头</h3><p>省略图像、媒体文件、样式表和脚本等URL协议头部声明 ( http: , https: )。如果不是这两个声明的URL则不省略。</p><p>省略协议声明，使URL成相对地址，防止内容混淆问题和导致小文件重复下载（这个主要是指http和https交杂的场景中）。</p><p>不推荐：</p><pre><code>&lt;script src="http://www.google.com/js/gweb/analytics/autotrack.js"&gt;&lt;/script&gt;</code></pre><p>推荐：</p><pre><code>&lt;script src="//www.google.com/js/gweb/analytics/autotrack.js"&gt;&lt;/script&gt;</code></pre><p>不推荐：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.example</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(http://www.google.com/images/example);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>推荐：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.example</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(//www.google.com/images/example);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><blockquote><p>注：省略协议头在IE7-8下会有一点小问题，外部CSS文件（link和@import）会被下载两遍，所以该条目的约定看具体项目。</p></blockquote><p><a name="validator"></a></p><h3 id="11-代码有效性"><a href="#11-代码有效性" class="headerlink" title="11.代码有效性"></a>11.代码有效性</h3><ul><li>使用 <a href="http://validator.w3.org/" target="_blank" rel="external nofollow noreferrer noopener">W3C HTML Validator</a> 来验证你的HTML代码有效性；</li><li>使用 <a href="http://jigsaw.w3.org/css-validator/" target="_blank" rel="external nofollow noreferrer noopener">W3C CSS Validator</a> 来验证你的CSS代码有效性。</li></ul><blockquote><p>代码验证不是最终目的，真的目的在于让开发者在经过多次的这种验证过程后，能够深刻理解到怎样的语法或写法是非标准和不推荐的，即使在某些场景下被迫要使用非标准写法，也可以做到心中有数。</p></blockquote><p><a name="html"></a></p><h2 id="HTML约定"><a href="#HTML约定" class="headerlink" title="HTML约定"></a>HTML约定</h2><p><a name="doctype"></a></p><h3 id="1-文档类型"><a href="#1-文档类型" class="headerlink" title="1.文档类型"></a>1.文档类型</h3><ul><li>统一使用HTML5的标准文档类型：<code>&lt;!DOCTYPE html&gt;</code>；</li></ul><blockquote><p>HTML5文档类型具备前后兼容的特质，并且易记易书写</p></blockquote><ul><li>在文档doctype申明之前，不允许加上任何非空字符；</li></ul><blockquote><p>任何出现在doctype申明之前的字符都将使得你的HTML文档进入非标准模式</p></blockquote><ul><li>不允许添加 <code>&lt;meta&gt;</code> 标签强制改变文档模式。</li></ul><blockquote><p>避免出现不可控的问题</p></blockquote><p><a name="type"></a></p><h3 id="2-省略type属性"><a href="#2-省略type属性" class="headerlink" title="2.省略type属性"></a>2.省略type属性</h3><p>在调用CSS和JavaScript时，可以将type属性省略不写</p><p>不允许：</p><pre><code>&lt;link type="text/css" rel="stylesheet" href="base.css" /&gt;&lt;script type="text/javascript" src="base.js"&gt;&lt;/script&gt;</code></pre><p>应该：</p><pre><code>&lt;link rel="stylesheet" href="base.css" /&gt;&lt;script src="base.js"&gt;&lt;/script&gt;</code></pre><blockquote><p>因为HTML5在引入CSS时，默认type值为text/css；在引入JavaScript时，默认type值为text/javascript</p></blockquote><p><a name="attribute"></a></p><h3 id="3-省略属性值"><a href="#3-省略属性值" class="headerlink" title="3.省略属性值"></a>3.省略属性值</h3><p>非必须属性值可以省略</p><p>不允许：</p><pre><code>&lt;input type="text" readonly="readonly" /&gt;&lt;input type="text" disabled="disabled" /&gt;</code></pre><p>应该：</p><pre><code>&lt;input type="text" readonly /&gt;&lt;input type="text" disabled /&gt;</code></pre><blockquote><p>这里的 readonly 和 disabled 属性的值是非必须的，可以省略不写，我们知道HTML5表单元素新增了很多类似的属性，如: required</p></blockquote><p><a name="quots"></a></p><h3 id="4-用双引号包裹属性值"><a href="#4-用双引号包裹属性值" class="headerlink" title="4.用双引号包裹属性值"></a>4.用双引号包裹属性值</h3><p>所有的标签属性值必须要用双引号包裹，同时也不允许有的用双引号，有的用单引号的情况</p><p>不允许：</p><pre><code>&lt;a href=http://www.qunar.com class=home&gt;去哪儿网&lt;/a&gt;</code></pre><p>应该：</p><pre><code>&lt;a href="http://www.qunar.com" class="home"&gt;去哪儿网&lt;/a&gt;</code></pre><p><a name="nest"></a></p><h3 id="5-嵌套"><a href="#5-嵌套" class="headerlink" title="5.嵌套"></a>5.嵌套</h3><p>所有元素必须正确嵌套</p><ul><li>不允许交叉；</li></ul><p>不允许：</p><pre><code>&lt;span&gt;&lt;dfn&gt;交叉嵌套&lt;/span&gt;&lt;/dfn&gt;</code></pre><p>应该：</p><pre><code>&lt;span&gt;&lt;dfn&gt;交叉嵌套&lt;/dfn&gt;&lt;/span&gt;</code></pre><ul><li>不允许非法的子元素嵌套。</li></ul><p>不允许：</p><pre><code>&lt;ul&gt;    &lt;h3&gt;xx列表&lt;/h3&gt;    &lt;li&gt;asdasdsdasd&lt;/li&gt;    &lt;li&gt;asdasdsdasd&lt;/li&gt;&lt;/ul&gt;</code></pre><p>应该：</p><pre><code>&lt;div&gt;    &lt;h3&gt;xx列表&lt;/h3&gt;    &lt;ul&gt;        &lt;li&gt;asdasdsdasd&lt;/li&gt;        &lt;li&gt;asdasdsdasd&lt;/li&gt;    &lt;/ul&gt;&lt;/div&gt;</code></pre><ul><li>不推荐inline元素包含block元素；</li></ul><p>不推荐：</p><pre><code>&lt;span&gt;    &lt;h1&gt;这是一个块级h1元素&lt;/h1&gt;    &lt;p&gt;这是一个块级p元素&lt;/p&gt;&lt;/span&gt;</code></pre><p>推荐：</p><pre><code>&lt;div&gt;    &lt;h1&gt;这是一个块级h1元素&lt;/h1&gt;    &lt;p&gt;这是一个块级p元素&lt;/p&gt;&lt;/div&gt;</code></pre><blockquote><p>规则可参考：</p></blockquote><blockquote><p>HTML4/XHTML1.0 Strict: <a href="http://www.cs.tut.fi/~jkorpela/html/strict.html" target="_blank" rel="external nofollow noreferrer noopener">嵌套规则</a>。</p><p>HTML5: <a href="http://www.w3.org/TR/html5/" target="_blank" rel="external nofollow noreferrer noopener">嵌套规则</a></p><p>举个例子，在HTML5中，a元素同时属于 Flow content, Phrasing content, Interactive content, Palpable content 4个分类，那些子元素是 phrasing 元素的元素可以是 a 的父元素，a 允许的子元素是以它的父元素允许的子元素为准，但不能包含 interactive 元素。</p></blockquote><p><a name="close-tag"></a></p><h3 id="6-标签闭合"><a href="#6-标签闭合" class="headerlink" title="6.标签闭合"></a>6.标签闭合</h3><p>所有标签必须闭合</p><p>不允许：</p><pre><code>&lt;div&gt;balabala...&lt;link rel="stylesheet" href="*.css"&gt;</code></pre><p>应该：</p><pre><code>&lt;div&gt;balabala...&lt;/div&gt;&lt;link rel="stylesheet" href="*.css" /&gt;</code></pre><blockquote><p>虽然有些标记没有要求必须关闭，但是为了避免出错的几率，要求必须全部关闭，省去判断某标记是否需要关闭的时间</p></blockquote><p><a name="perceivable"></a></p><h3 id="7-多媒体替代方案"><a href="#7-多媒体替代方案" class="headerlink" title="7.多媒体替代方案"></a>7.多媒体替代方案</h3><ul><li>为img元素加上alt属性；</li><li>为视频内容提供音轨替代；</li><li>为音频内容提供字母替代等等。</li></ul><p>不推荐：</p><pre><code>&lt;img src="banner.jpg" /&gt;</code></pre><p>推荐：</p><pre><code>&lt;img src="banner.jpg" alt="520即将到来，爱就大声说出来" /&gt;</code></pre><blockquote><p>alt属性的内容为对该图片的简要描述，这对于盲人用户和图像损毁都非常有意义，即无障碍。对于纯粹的装饰性图片，alt属性值可以留空，如 alt=””</p></blockquote><p><a name="friendly"></a></p><h3 id="8-有效操作"><a href="#8-有效操作" class="headerlink" title="8.有效操作"></a>8.有效操作</h3><p>为表单元素label加上for属性</p><p>不允许：</p><pre><code>&lt;input type="radio" name="color" value="0" /&gt;&lt;label&gt;蓝色&lt;/label&gt;&lt;input type="radio" name="color" value="1" /&gt;&lt;label&gt;粉色&lt;/label&gt;</code></pre><p>应该：</p><pre><code>&lt;input type="radio" id="blue" name="color" value="0" /&gt;&lt;label for="blue"&gt;蓝色&lt;/label&gt;&lt;input type="radio" id="pink" name="color" value="1" /&gt;&lt;label for="pink"&gt;粉色&lt;/label&gt;</code></pre><blockquote><p>for属性能让点击label标签的时候，同时focus到对应的 input 和 textarea上，增加响应区域</p></blockquote><p><a name="html-comment"></a></p><h3 id="9-按模块添加注释"><a href="#9-按模块添加注释" class="headerlink" title="9.按模块添加注释"></a>9.按模块添加注释</h3><p>在每个模块开始和结束的地方添加注释</p><pre><code>&lt;!-- 新闻列表模块 --&gt;&lt;div class="m-news g-mod"...&lt;!-- /新闻列表模块 --&gt;&lt;!-- 排行榜模块 --&gt;&lt;div class="m-topic g-mod"...&lt;!-- /排行榜模块 --&gt;</code></pre><blockquote><p>注释内容左右两边保留和注释符号有1个空格位，在注释内容内不允许再出现中划线“-”，某些浏览器会报错。</p><p>注释风格保持与原生HTML的语法相似：成对出现 <code>&lt;!-- comment --&gt;&lt;!-- /comment --&gt;</code></p></blockquote><p><a name="format"></a></p><h3 id="10-格式"><a href="#10-格式" class="headerlink" title="10.格式"></a>10.格式</h3><ul><li>将每个块元素、列表元素或表格元素都放在新行；</li><li>inline元素视情况换行，以长度不超过编辑器一屏为宜；</li><li>每个子元素都需要相对其父级缩进（参见<a href="#indentation">缩进约定</a>）。</li></ul><p>不推荐：</p><pre><code>&lt;div&gt;&lt;h1&gt;asdas&lt;/h1&gt;&lt;p&gt;dff&lt;em&gt;asd&lt;/em&gt;asda&lt;span&gt;sds&lt;/span&gt;dasdasd&lt;/p&gt;&lt;/div&gt;</code></pre><p>推荐：</p><pre><code>&lt;div&gt;    &lt;h1&gt;asdas&lt;/h1&gt;    &lt;p&gt;dff&lt;em&gt;asd&lt;/em&gt;asda&lt;span&gt;sds&lt;/span&gt;dasdasd&lt;/p&gt;&lt;/div&gt;</code></pre><p><a name="semantic"></a></p><h3 id="11-语义化标签"><a href="#11-语义化标签" class="headerlink" title="11.语义化标签"></a>11.语义化标签</h3><ul><li>根据HTML元素的本身用途去使用它们；</li><li>禁止使用被废弃的用于表现的标签，如 center, font 等；</li><li>部分在XHTML1中被废弃的标签，在HTML5中被重新赋予了新的语义，在选用时请先弄清其语义，如:b, i, u等。</li></ul><p>不允许：</p><pre><code>&lt;p&gt;标题&lt;/p&gt;</code></pre><p>应该：</p><pre><code>&lt;h1&gt;标题&lt;/h1&gt;</code></pre><blockquote><p>虽然使用p标签，也可以通过CSS去定义它的外观和标题相同，但p标签本身的并不是表示标题，而是表示文本段落</p></blockquote><blockquote><p>参阅：<a href="http://www.w3.org/TR/html5/" target="_blank" rel="external nofollow noreferrer noopener">HTML5 Elements</a></p></blockquote><p><a name="html-module"></a></p><h3 id="12-模块化"><a href="#12-模块化" class="headerlink" title="12.模块化"></a>12.模块化</h3><ul><li>每个模块必须有一个模块名；</li><li>每个模块的基本组成部分应该一致；</li><li>模块的子节点类名需带上模块名（防止模块间嵌套时产生不必要的覆盖）；</li><li>孙辈节点无需再带模块名。</li></ul><p>代码如：</p><pre><code>&lt;section class="m-detail"&gt;    &lt;header class="m-detail-hd"&gt;        &lt;h1 class="title"&gt;模块标题&lt;/h1&gt;    &lt;/header&gt;    &lt;div class="m-detail-bd"&gt;        &lt;p class="info"&gt;一些实际内容&lt;/p&gt;    &lt;/div&gt;    &lt;footer class="m-detail-ft"&gt;        &lt;a href="#" class="more"&gt;更多&lt;/a&gt;    &lt;/footer&gt;&lt;/section&gt;</code></pre><blockquote><p>其中 <code>.m-detail-hd</code>, <code>.m-detail-bd</code>, <code>.m-detail-ft</code> 为可选，视具体模块情况决定是否需要抽象为这种 <strong>头，中，尾</strong> 的结构</p></blockquote><p><a name="css"></a></p><h2 id="CSS约定"><a href="#CSS约定" class="headerlink" title="CSS约定"></a>CSS约定</h2><p><a name="link"></a></p><h3 id="1-文件引用"><a href="#1-文件引用" class="headerlink" title="1.文件引用"></a>1.文件引用</h3><ul><li>一律使用link的方式调用外部样式</li><li>不允许在页面中使用 <code>&lt;style&gt;</code> 块；</li><li>不允许在 <code>&lt;style&gt;</code> 块中使用 <code>@import</code>；</li><li>不允许使用 <code>style</code> 属性写行内样式。</li></ul><blockquote><p>一般情况下，在页面中只允许使用 <code>&lt;link /&gt;</code> 标签来引用CSS文件，</p></blockquote><p><a name="element"></a></p><h3 id="2-命名-组成元素"><a href="#2-命名-组成元素" class="headerlink" title="2.命名-组成元素"></a>2.命名-组成元素</h3><ul><li>命名必须由单词、中划线①或数字组成；</li><li>不允许使用拼音（约定俗成的除外，如：youku, baidu），尤其是缩写的拼音、拼音与英文的混合。</li></ul><p>不推荐：</p><pre><code>.xiangqing { sRules; }.news_list { sRules; }.zhuti { sRules; }</code></pre><p>推荐：</p><pre><code>.detail { sRules; }.news-list { sRules; }.topic { sRules; }</code></pre><blockquote><p>①我们使用中划线 “-” 作为连接字符，而不是下划线 “_”。</p><p>我们知道2种方式都有不少支持者，但 “-“ 能让你少按一次shift键，并且更符合CSS原生语法，所以我们只选一种目前业内普遍使用的方式</p></blockquote><p><a name="word"></a></p><h3 id="3-命名-词汇规范"><a href="#3-命名-词汇规范" class="headerlink" title="3.命名-词汇规范"></a>3.命名-词汇规范</h3><ul><li>不依据表现形式来命名；</li><li>可根据内容来命名；</li><li>可根据功能来命名。</li></ul><p>不推荐：</p><pre><code>left, right, center, red, black</code></pre><p>推荐：</p><pre><code>nav, aside, news, type, search</code></pre><p><a name="abbr"></a></p><h3 id="4-命名-缩写规范"><a href="#4-命名-缩写规范" class="headerlink" title="4.命名-缩写规范"></a>4.命名-缩写规范</h3><ul><li>保证缩写后还能较为清晰保持原单词所能表述的意思；</li><li>使用业界熟知的或者约定俗成的。</li></ul><p>不推荐：</p><pre><code>navigation   =&gt;  naviheader       =&gt;  headdescription  =&gt;  des</code></pre><p>推荐：</p><pre><code>navigation   =&gt;  navheader       =&gt;  hddescription  =&gt;  desc</code></pre><p><a name="prefix"></a></p><h3 id="5-命名-前缀规范"><a href="#5-命名-前缀规范" class="headerlink" title="5.命名-前缀规范"></a>5.命名-前缀规范</h3><table><thead><tr><th>前缀</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>g-</td><td>全局通用样式命名，前缀g全称为global，一旦修改将影响全站样式</td><td>g-mod</td></tr><tr><td>m-</td><td>模块命名方式</td><td>m-detail</td></tr><tr><td>ui-</td><td>组件命名方式</td><td>ui-selector</td></tr><tr><td>js-</td><td>所有用于纯交互的命名，不涉及任何样式规则。JSer拥有全部定义权限</td><td>js-switch</td></tr></tbody></table><ul><li>选择器必须是以某个前缀开头</li></ul><p>不推荐：</p><pre><code>.info { sRules; }.current { sRules; }.news { sRules; }</code></pre><blockquote><p>因为这样将给我们带来不可预知的管理麻烦以及沉重的历史包袱。你永远也不会知道哪些样式名已经被用掉了，如果你是一个新人，你可能会遭遇，你每定义个样式名，都有同名的样式已存在，然后你只能是换样式名或者覆盖规则。</p></blockquote><p>推荐：</p><pre><code>.m-detail .info { sRules; }.m-detail .current { sRules; }.m-detail .news { sRules; }</code></pre><blockquote><p>所有的选择器必须是以 g-, m-, ui- 等有前缀的选择符开头的，意思就是说所有的规则都必须在某个相对的作用域下才生效，尽可能减少全局污染。</p></blockquote><p>js- 这种级别的className完全交由JSer自定义，但是命名的规则也可以保持跟重构一致，比如说不能使用拼音之类的</p><p><a name="id"></a></p><h3 id="6-id与class"><a href="#6-id与class" class="headerlink" title="6.id与class"></a>6.id与class</h3><p>重构工程师只允许使用class（因历史原因及大家的习惯做出妥协）。</p><p><a name="packaging"></a></p><h3 id="7-书写格式"><a href="#7-书写格式" class="headerlink" title="7.书写格式"></a>7.书写格式</h3><ul><li>选择器与大括号之间保留一个空格；</li><li>分号之后保留一个空格；</li><li>逗号之后保留一个空格；</li><li>所有规则需换行；</li><li>多组选择器之间需换行。</li></ul><p>不推荐：</p><pre><code>main{    display:inline-block;}h1,h2,h3{    margin:0;    background-color:rgba(0,0,0,.5);}</code></pre><p>推荐：</p><pre><code>main {    display: inline-block;}h1,h2,h3 {    margin: 0;    background-color: rgba(0, 0, 0, .5);}</code></pre><p><a name="semicolon"></a></p><h3 id="8-规则与分号"><a href="#8-规则与分号" class="headerlink" title="8.规则与分号"></a>8.规则与分号</h3><p>每条规则结束后都必须加上分号</p><p>不推荐：</p><pre><code>body {    margin: 0;    padding: 0;    font-size: 14px}</code></pre><p>推荐：</p><pre><code>body {    margin: 0;    padding: 0;    font-size: 14px;}</code></pre><p><a name="unit"></a></p><h3 id="9-0与单位"><a href="#9-0与单位" class="headerlink" title="9.0与单位"></a>9.0与单位</h3><p>如果属性值为0，则不需要为0加单位</p><p>不推荐：</p><pre><code>body {    margin: 0px;    padding: 0px;}</code></pre><p>推荐：</p><pre><code>body {    margin: 0;    padding: 0;}</code></pre><p><a name="decimal"></a></p><h3 id="10-0与小数"><a href="#10-0与小数" class="headerlink" title="10.0与小数"></a>10.0与小数</h3><p>如果是0开始的小数，前面的0可以省略不写</p><p>不推荐：</p><pre><code>body {    opacity: 0.6;    text-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);}</code></pre><p>推荐：</p><pre><code>body {    opacity: .6;    text-shadow: 1px 1px 5px rgba(0, 0, 0, .5);}</code></pre><p><a name="non-quotes"></a></p><h3 id="11-去掉uri中引用资源的引号"><a href="#11-去掉uri中引用资源的引号" class="headerlink" title="11.去掉uri中引用资源的引号"></a>11.去掉uri中引用资源的引号</h3><p>不要在url()里对引用资源加引号</p><p>不推荐：</p><pre><code>body {    background-image: url("sprites.png");}@import url("global.css");</code></pre><p>推荐：</p><pre><code>body {    background-image: url(sprites.png);}@import url(global.css);</code></pre><p><a name="hex"></a></p><h3 id="12-HEX颜色值写法"><a href="#12-HEX颜色值写法" class="headerlink" title="12.HEX颜色值写法"></a>12.HEX颜色值写法</h3><ul><li>将所有的颜色值小写；</li><li>可以缩写的缩写至3位。</li></ul><p>不推荐：</p><pre><code>body {    background-color: #FF0000;}</code></pre><p>推荐：</p><pre><code>body {    background-color: #f00;}</code></pre><p><a name="order"></a></p><h3 id="13-属性书写顺序"><a href="#13-属性书写顺序" class="headerlink" title="13.属性书写顺序"></a>13.属性书写顺序</h3><ul><li>遵循先布局后内容的顺序。</li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.g-box</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">display</span>: block;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">float</span>: left;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">width</span>: <span class="number">500px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">height</span>: <span class="number">200px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">margin</span>: <span class="number">10px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">padding</span>: <span class="number">10px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">border</span>: <span class="number">10px</span> solid;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">background</span>: <span class="number">#aaa</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">color</span>: <span class="number">#000</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">font</span>: <span class="number">14px</span>/<span class="number">1.5</span> sans-serif;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><blockquote><p>这个应该好理解，比如优先布局，我们知道布局属性有 display, float, overflow 等等；内容次之，比如 color, font, text-align 之类。</p></blockquote><ul><li>组概念。</li></ul><p>拿上例的代码来说，如果我们还需要进行定位及堆叠，规则我们可以改成如下：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.g-box</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">display</span>: block;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">position</span>: relative;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">z-index</span>: <span class="number">2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">top</span>: <span class="number">10px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">left</span>: <span class="number">100px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">float</span>: left;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">width</span>: <span class="number">500px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">height</span>: <span class="number">200px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">margin</span>: <span class="number">10px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">padding</span>: <span class="number">10px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">border</span>: <span class="number">10px</span> solid;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">background</span>: <span class="number">#aaa</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">color</span>: <span class="number">#000</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">font</span>: <span class="number">14px</span>/<span class="number">1.5</span> sans-serif;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><blockquote><p>从代码中可以看到，我们直接将z-index, top, left 紧跟在 position 之后，因为这几个属性其实是一组的，如果去掉position，则后3条属性规则都将失效。</p></blockquote><ul><li>私有属性在前标准属性在后</li></ul><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">.g-box {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">　　　-webkit-box-shadow: <span class="number">1</span>px <span class="number">1</span>px <span class="number">5</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.5</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">　　　-moz-box-shadow: <span class="number">1</span>px <span class="number">1</span>px <span class="number">5</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.5</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">　　　-o-box-shadow: <span class="number">1</span>px <span class="number">1</span>px <span class="number">5</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.5</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">　　　box-shadow: <span class="number">1</span>px <span class="number">1</span>px <span class="number">5</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.5</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><blockquote><p>当有一天你的浏览器升级后，可能不再支持私有写法，那么这时写在后面的标准写法将生效，避免无法向后兼容的情况发生。</p></blockquote><p><a name="css-comment"></a></p><h3 id="14-注释规范"><a href="#14-注释规范" class="headerlink" title="14.注释规范"></a>14.注释规范</h3><p>保持注释内容与星号之间有一个空格的距离</p><p><strong>普通注释（单行）</strong></p><pre><code>/* 普通注释 */</code></pre><p><strong>区块注释</strong></p><pre><code>/** * 模块: m-detail * 描述：酒店详情模块 * 应用：page detail, info and etc...etc */</code></pre><blockquote><p>有特殊作用的规则一定要有注释说明<br>应用了高级技巧的地方一定要注释说明</p></blockquote><p><a name="hack"></a></p><h3 id="15-hack规范"><a href="#15-hack规范" class="headerlink" title="15.hack规范"></a>15.hack规范</h3><ul><li>尽可能的减少对Hack的使用和依赖，如果在项目中对Hack的使用太多太复杂，对项目的维护将是一个巨大的挑战；</li><li>使用其它的解决方案代替Hack思路；</li><li>如果非Hack不可，选择稳定且常用并易于理解的。</li></ul><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">color</span>: <span class="number">#000</span>;       <span class="comment">/* For all */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">color</span>: <span class="number">#111</span>\<span class="number">9</span>;     <span class="comment">/* For all IE */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">color</span>: <span class="number">#222</span>\<span class="number">0</span>;     <span class="comment">/* For IE8 and later, Opera without Webkit */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">color</span>: <span class="number">#333</span>\<span class="number">9</span>\<span class="number">0</span>;   <span class="comment">/* For IE8 and later */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">color</span>: <span class="number">#444</span>\<span class="number">0</span>/;    <span class="comment">/* For IE8 and later */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">　　　*<span class="attribute">color</span>: <span class="number">#666</span>;      <span class="comment">/* For IE7 and earlier */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">　　　_color: <span class="number">#777</span>;      <span class="comment">/* For IE6 and earlier */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><ul><li>严谨且长期的项目，针对IE可以使用条件注释作为预留Hack或者在当前使用</li></ul><p>IE条件注释语法：</p><pre><code>&lt;!--[if &lt;keywords&gt;? IE &lt;version&gt;?]&gt;&lt;link rel="stylesheet" href="*.css" /&gt;&lt;![endif]--&gt;</code></pre><p>语法说明：</p><figure class="highlight cmake"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;keywords&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>条件共包含<span class="number">6</span>种选择方式：是否、大于、大于或等于、小于、小于或等于、非指定版本</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">是否：指定是否IE或IE某个版本。关键字：空</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">大于：选择大于指定版本的IE版本。关键字：gt（<span class="keyword">greater</span> than）</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">大于或等于：选择大于或等于指定版本的IE版本。关键字：gte（<span class="keyword">greater</span> than <span class="keyword">or</span> <span class="keyword">equal</span>）</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">小于：选择小于指定版本的IE版本。关键字：lt（<span class="keyword">less</span> than）</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">小于或等于：选择小于或等于指定版本的IE版本。关键字：lte（<span class="keyword">less</span> than <span class="keyword">or</span> <span class="keyword">equal</span>）</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">非指定版本：选择除指定版本外的所有IE版本。关键字：!</span></pre></td></tr></tbody></table></figure><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">目前的常用IE版本为<span class="number">6.0</span>及以上，推荐酌情忽略低版本，把精力花在为使用高级浏览器的用户提供更好的体验上，另从IE10开始已无此特性</span></pre></td></tr></tbody></table></figure><p><a name="low-selector"></a></p><h3 id="16-避免低效率选择器"><a href="#16-避免低效率选择器" class="headerlink" title="16.避免低效率选择器"></a>16.避免低效率选择器</h3><ul><li>避免类型选择器</li></ul><p>不允许：</p><pre><code>div#doc { sRules; }li.first { sRules; }</code></pre><p>应该：</p><pre><code>#doc { sRules; }.first { sRules; }</code></pre><blockquote><p>CSS选择器是由右到左进行解析的，所以 div#doc 本身并不会比 #doc 更快</p></blockquote><ul><li>避免多id选择器</li></ul><p>不允许：</p><pre><code>#xxx #yyy { sRules; }</code></pre><p>应该：</p><pre><code>#yyy { sRules; }</code></pre><p><a name="override"></a></p><h3 id="17-属性缩写与分拆"><a href="#17-属性缩写与分拆" class="headerlink" title="17.属性缩写与分拆"></a>17.属性缩写与分拆</h3><ul><li>无继承关系时，使用缩写</li></ul><p>不推荐：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">margin-left</span>: <span class="number">10px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>推荐：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">margin</span>: <span class="number">10px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><ul><li>存在继承关系时，使用分拆方式</li></ul><p>不推荐：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.m-detail</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">font</span>: bold <span class="number">12px</span>/<span class="number">1.5</span> arial, sans-serif;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.m-detail</span> <span class="selector-class">.info</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">font</span>: normal <span class="number">14px</span>/<span class="number">1.5</span> arial, sans-serif;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>要避免错误的覆盖：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.m-detail</span> <span class="selector-class">.info</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">font</span>: <span class="number">14px</span> sans;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><blockquote><p>如果你只是想改字号和字体，然后写成了上面这样，这是错误的写法，因为 <code>font</code> 复合属性里的其他属性将会被重置为 user agent 的默认值，比如 <code>font-weight</code> 就会被重置为 <code>normal</code>。</p></blockquote><p>推荐：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.m-detail</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">font</span>: bold <span class="number">12px</span>/<span class="number">1.5</span> arial, sans-serif;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.m-detail</span> <span class="selector-class">.info</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">font-weight</span>: normal;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">font-size</span>: <span class="number">14px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><blockquote><p>在存在继承关系的情况下，只将需要变更的属性重定义，不进行缩写，避免不需要的重写的属性被覆盖定义</p></blockquote><ul><li>根据规则条数选择缩写和拆分</li></ul><p>不推荐：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.m-detail</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">border-width</span>: <span class="number">1px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">border-style</span>: solid;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">border-color</span>: <span class="number">#000</span> <span class="number">#000</span> <span class="number">#f00</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>推荐：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.m-detail</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">border-bottom-color</span>: <span class="number">#f00</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p><a name="css-module"></a></p><h3 id="18-模块化"><a href="#18-模块化" class="headerlink" title="18.模块化"></a>18.模块化</h3><ul><li>每个模块必须是一个独立的样式文件，文件名与模块名一致；</li><li>模块样式的选择器必须以模块名开头以作范围约定；</li></ul><p>假定有一个模块如前文 <a href="#html-module">HTML模块化</a>，那么 <code>m-detail.scss</code> 的写法大致如下：</p><pre><code>.m-detail {    background: #fff;    color: #333;    &amp;-hd {        padding: 5px 10px;        background: #eee;        .title {            background: #eee;        }    }    &amp;-bd {        padding: 10px;        .info {            font-size: 14px;            text-indent: 2em;        }    }    &amp;-ft {        text-align: center;        .more {            color: blue;        }    }}</code></pre><p>编译之后代码如下：</p><pre><code>.m-detail {    background: #fff;    color: #333;}.m-detail-hd {    padding: 5px 10px;    background: #eee;}.m-detail-hd .title {    background: #eee;}.m-detail-bd {    padding: 10px;}.m-detail-bd .info {    font-size: 14px;    text-indent: 2em;}.m-detail-ft {    text-align: center;}.m-detail-ft .more {    color: blue;}</code></pre><blockquote><p>任何超过3级的选择器，需要思考是否必要，是否有无歧义的，能唯一命中的更简短的写法</p></blockquote><p><a name="img"></a></p><h2 id="图像约定"><a href="#图像约定" class="headerlink" title="图像约定"></a>图像约定</h2><p><a name="img-compress"></a></p><h3 id="1-图像压缩"><a href="#1-图像压缩" class="headerlink" title="1.图像压缩"></a>1.图像压缩</h3><p>所有图片必须经过一定的压缩和优化才能发布</p><p><a name="background-image"></a></p><h3 id="2-背景图"><a href="#2-背景图" class="headerlink" title="2.背景图"></a>2.背景图</h3><ul><li>使用PNG格式而不是GIF格式，因为PNG格式色彩更丰富，还能提供更好的压缩比；</li><li>在需要兼容IE6的项目中，尽可能选择PNG8，而不是使用PNG24+滤镜。</li></ul><p><a name="image"></a></p><h3 id="3-前景图"><a href="#3-前景图" class="headerlink" title="3.前景图"></a>3.前景图</h3><ul><li>内容图片建议使用JPG，可以拥有更好地显示效果；</li><li>装饰性图片使用PNG。</li></ul><p><a name="sprite"></a></p><h3 id="4-Sprite"><a href="#4-Sprite" class="headerlink" title="4.Sprite"></a>4.Sprite</h3><ul><li>CSS Sprite是一种将数个图片合成为一张大图的技术（既可以是背景图也可以是前景图），然后通过偏移来进行图像位置选取；</li><li>CSS Sprite可以减少http请求。</li></ul><p><a name="end"></a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>坚持一致性的原则。</p><p>一个团队的代码风格如果统一了，首先可以培养良好的协同和编码习惯，其次可以减少无谓的思考，再次可以提升代码质量和可维护性。</p><p>统一的代码风格，团队内部阅读或编辑代码，将会变得非常轻松，因为所有组员都处在一致思维环境中。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML-CSS开发规范指南&quot;&gt;&lt;a href=&quot;#HTML-CSS开发规范指南&quot; class=&quot;headerlink&quot; title=&quot;HTML/CSS开发规范指南&quot;&gt;&lt;/a&gt;HTML/CSS开发规范指南&lt;/h1&gt;&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#intro&quot;&gt;规范概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#profile&quot;&gt;基本信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#general&quot;&gt;通用约定&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#directory&quot;&gt;文档目录结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#separate&quot;&gt;分离&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#file-name&quot;&gt;文件命名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#indentation&quot;&gt;缩进&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#encoding&quot;&gt;编码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#lowercase&quot;&gt;小写&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#comment&quot;&gt;注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#todo&quot;&gt;待办事项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#end-line-space&quot;&gt;行尾空格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#protocol-relative-url&quot;&gt;省略嵌入式资源协议头&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#validator&quot;&gt;代码有效性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#html&quot;&gt;HTML约定&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#doctype&quot;&gt;文档类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#type&quot;&gt;省略type属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#attribute&quot;&gt;省略属性值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#quots&quot;&gt;用双引号包裹属性值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#nest&quot;&gt;嵌套&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#close-tag&quot;&gt;标签闭合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#perceivable&quot;&gt;多媒体替代方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#friendly&quot;&gt;有效操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#html-comment&quot;&gt;按模块添加注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#format&quot;&gt;格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#semantic&quot;&gt;语义化标签&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#html-module&quot;&gt;模块化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#css&quot;&gt;CSS约定&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#link&quot;&gt;文件引用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#element&quot;&gt;命名-组成元素&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#word&quot;&gt;命名-词汇规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#abbr&quot;&gt;命名-缩写规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#prefix&quot;&gt;命名-前缀规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#id&quot;&gt;id与class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#packaging&quot;&gt;书写格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#semicolon&quot;&gt;规则与分号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#unit&quot;&gt;0与单位&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#decimal&quot;&gt;0与小数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#non-quotes&quot;&gt;去掉uri中引用资源的引号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#hex&quot;&gt;HEX颜色值写法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#order&quot;&gt;属性书写顺序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#css-comment&quot;&gt;注释规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#hack&quot;&gt;hack规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#low-selector&quot;&gt;避免低效率选择器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#override&quot;&gt;属性缩写与分拆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#css-module&quot;&gt;模块化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#img&quot;&gt;图像约定&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#img-compress&quot;&gt;图像压缩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#background-image&quot;&gt;背景图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#image&quot;&gt;前景图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sprite&quot;&gt;Sprite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#end&quot;&gt;结语&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Guide" scheme="http://notes.seirhsiao.com/categories/Guide/"/>
    
    
      <category term="html" scheme="http://notes.seirhsiao.com/tags/html/"/>
    
      <category term="指南" scheme="http://notes.seirhsiao.com/tags/%E6%8C%87%E5%8D%97/"/>
    
      <category term="css" scheme="http://notes.seirhsiao.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Git 风格指南</title>
    <link href="http://notes.seirhsiao.com/posts/81fc5f62/"/>
    <id>http://notes.seirhsiao.com/posts/81fc5f62/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:29:59.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-风格指南"><a href="#Git-风格指南" class="headerlink" title="Git 风格指南"></a>Git 风格指南</h1><p><a href="https://github.com/agis-/git-style-guide" target="_blank" rel="external nofollow noreferrer noopener">原文</a><br>这份风格指南受到 <a href="https://www.kernel.org/doc/Documentation/SubmittingPatches" target="_blank" rel="external nofollow noreferrer noopener"><em>How to Get Your Change Into the Linux Kernel</em></a>，<a href="http://git-scm.com/doc" target="_blank" rel="external nofollow noreferrer noopener">git man pages</a> 和大量社区通用实践的启发。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol><li><a href="#branches">分支</a></li><li><a href="#commits">提交</a><ol><li><a href="#messages">消息</a></li></ol></li><li><a href="#merging">合并</a></li><li><a href="#misc">杂项</a><a id="more"></a></li></ol><h2 id="Branches"><a href="#Branches" class="headerlink" title="Branches"></a>Branches</h2><ul><li><p>选择<em>简短</em>和<em>具有描述性</em>的名字来命名分支：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b oauth-migration</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 不好，过于模糊</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b login_fix</span></span></pre></td></tr></tbody></table></figure></li><li><p>来自外部的标识符也适合用作分支的名字，例如来自 Github 的 Issue 序号。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> GitHub issue <span class="comment">#15</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b issue-15</span></span></pre></td></tr></tbody></table></figure></li><li><p>用破折号分割单词。</p></li><li><p>当不同的人围绕同一个特性开发时，维护整个团队的特性分支与每个人的独立分支是比较方便的做法。使用如下的命名方式：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b feature<span class="_">-a</span>/master <span class="comment"># team-wide branch</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b feature<span class="_">-a</span>/maria <span class="comment"># Maria's branch</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b feature<span class="_">-a</span>/nick <span class="comment"># Nick's branch</span></span></span></pre></td></tr></tbody></table></figure><p>合并时，由每个人的独立分支向全队的功能分支合并，最后合并到主分支。见<a href="#merging">合并</a> 。</p></li><li><p>合并之后，除非有特殊原因，从上游仓库中删除你的分支。使用如下命令查看已合并的分支：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch --merged | grep -v <span class="string">"\*"</span></span></span></pre></td></tr></tbody></table></figure></li></ul><h2 id="Commits"><a href="#Commits" class="headerlink" title="Commits"></a>Commits</h2><ul><li>每个提交应当只包含一个简单的逻辑改动，不要在一个提交里包含多个逻辑改动。比如，如果一个补丁修复了一个 Bug，又优化了一个特性的性能，就将其拆分。</li><li>不要将一个逻辑改动拆分提交。例如一个功能的实现及其对应的测试应当一并提交。</li><li>尽早、尽快提交。出问题时，短小、完整的提交更容易发现并修正。</li><li>提交应当依<em>逻辑</em>排序。例如，如果 X 提交依赖于 Y，那么 Y 提交应该在 X 前面。</li></ul><h3 id="Messages"><a href="#Messages" class="headerlink" title="Messages"></a>Messages</h3><ul><li><p>使用编辑器编写提交信息，而非命令行。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 不好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"Quick fix"</span></span></span></pre></td></tr></tbody></table></figure><p>使用命令行会鼓励试图用一行概括提交內容的风气，而这会令提交信息难以理解。</p></li><li><p>概要行（即第一行）应当简明扼要。它最好不超过 50 个字符，首字母大写，使用现在时祈使语气。不要以句号结尾, 因为它相当于<em>标题</em>。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Mark huge records as obsolete when clearing hinting faults</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 不好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">fixed ActiveModel::Errors deprecation messages failing when AR was used outside of Rails.</span></pre></td></tr></tbody></table></figure></li><li><p>在那之后空一行，然后填写详细描述。每行不超过 <em>72 字符</em>，解释<em>为什么</em>需要改动, <em>如何</em>解决了这个 issue 以及它有什么<em>副作用</em>。</p><p>最好提供相关资源的链接，例如 bug tracker 的 issue 编号：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Short (50 chars or fewer) summary of changes</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">More detailed explanatory text, if necessary. Wrap it to</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">72 characters. In some contexts, the first</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">line is treated as the subject of an email and the rest of</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">the text as the body.  The blank line separating the</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">summary from the body is critical (unless you omit the body</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">entirely); tools like rebase can get confused if you run</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">the two together.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">Further paragraphs come after blank lines.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">- Bullet points are okay, too</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">- Use a hyphen or an asterisk for the bullet,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  followed by a single space, with blank lines in</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  between</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">Source http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html</span></pre></td></tr></tbody></table></figure><p>最后，编写提交信息时，设想一下你一年以后再看这段提交信息时，希望获取什么信息。</p></li><li><p>如果 <em>提交 A</em> 依赖于另一个 <em>提交 B</em> ，在前者的 commit message 中应当指明。援引对应提交的 Hash。</p><p>同理，如果 <em>提交 A</em> 解决了 <em>提交 B</em> 引入的 bug，这应当也被在 <em>提交 A</em> 提及。</p></li><li><p>如果将一个提交 squash 到另一个提交，分别使用 <code>--squash</code> 和 <code>--fixup</code> 来强调目的。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit --squash f387cab2</span></span></pre></td></tr></tbody></table></figure><p><em>（Rebase 时使用 <code>--autosquash</code> 参数，标记的提交就会自动 squash。）</em></p></li></ul><h2 id="Merging"><a href="#Merging" class="headerlink" title="Merging"></a>Merging</h2><ul><li><p><strong>不要篡改提交历史。</strong>仓库的历史本身就很宝贵，重要的是它能够还原<em>实际发生了什么</em>。对任何参与项目的人来说，修改历史是万恶之源。</p></li><li><p>尽管如此，有些时候还是可以重写历史，例如：</p><ul><li>你一个人孤军奋战，而且你的代码不会被人看到。</li><li>你希望整理分支（例如使用 squash），以便日后合并。<br>最重要的，<em>不要重写你的 master 分支历史</em> 或者任何有特殊意义的分支（例如发布分支或 CI 分支）。</li></ul></li><li><p>保持你的提交历史<em>干净<em>、</em>简单<em>。</em>在你 merge</em> 你的分支之前：</p><ol><li>确保它符合风格指南，如果不符合就执行相应操作，比如 squash 或重写提交信息。</li><li>将其 rebase 到目标分支：<figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[my-branch] $ git fetch</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[my-branch] $ git rebase origin/master</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">then</span> merge</span></span></pre></td></tr></tbody></table></figure>这样会在 master 后直接添加一个新版本，令提交历史更简洁。</li></ol><p><em>（这个策略更适合较短生命周期的分支，否则还是最好经常合并而不是 rebase。）</em></p></li><li><p>如果你的分支包含多个 commmit , 不要使用快进模式。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 好；注意添加合并信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge --no-ff my-branch</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 不好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge my-branch</span></span></pre></td></tr></tbody></table></figure></li></ul><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc."></a>Misc.</h2><ul><li><p>有许多工作流，每一个都有好有坏。一个工作流是否符合你的情况，取决于你的团队，项目，和你的开发规律。</p><p>也就是说，重要的是认真 <em>选择</em> 合适的工作流并且坚持。</p></li><li><p><em>保持统一</em>， 这涉及到从工作流到你的提交信息，分支名还有标签。 在整个 Repository 中保持统一的命名风格有助于辨认工作进度。</p></li><li><p><em>push 前测试</em>， 不要提交未完成的工作。</p></li><li><p>使用 <a href="http://git-scm.com/book/en/v2/Git-Basics-Tagging#Annotated-Tags" target="_blank" rel="external nofollow noreferrer noopener">annotated tags</a> 标记发布版本或者其他重要的时间点。</p><p>个人开发可以使用 <a href="http://git-scm.com/book/en/v2/Git-Basics-Tagging#Lightweight-Tags" target="_blank" rel="external nofollow noreferrer noopener">lightweight tags</a>，例如为以后参考做标记。</p></li><li><p>定期维护，保证你的仓库状态良好，包括本地还有远程的仓库。</p><ul><li><a href="http://git-scm.com/docs/git-gc" target="_blank" rel="external nofollow noreferrer noopener"><code>git-gc(1)</code></a></li><li><a href="http://git-scm.com/docs/git-prune" target="_blank" rel="external nofollow noreferrer noopener"><code>git-prune(1)</code></a></li><li><a href="http://git-scm.com/docs/git-fsck" target="_blank" rel="external nofollow noreferrer noopener"><code>git-fsck(1)</code></a></li></ul></li></ul><h1 id="License"><a href="#License" class="headerlink" title="License"></a>License</h1><p><img alt="cc license" data-src="http://i.creativecommons.org/l/by-nc/3.0/88x31.png" class="lazyload"></p><p>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0<br>International license.</p><h1 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h1><p>Agis Anastasopoulos / <a href="https://twitter.com/agisanast" target="_blank" rel="external nofollow noreferrer noopener">@agisanast</a> / <a href="http://agis.io" target="_blank" rel="external nofollow noreferrer noopener">http://agis.io</a></p><h1 id="Translators"><a href="#Translators" class="headerlink" title="Translators"></a>Translators</h1><ul><li>Qi Chen / <a href="mailto:aseaday@gmail.com" target="_blank" rel="external nofollow noreferrer noopener">aseaday@gmail.com</a></li><li>chadluo / <a href="mailto:i@yuki.rocks" target="_blank" rel="external nofollow noreferrer noopener">i@yuki.rocks</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git-风格指南&quot;&gt;&lt;a href=&quot;#Git-风格指南&quot; class=&quot;headerlink&quot; title=&quot;Git 风格指南&quot;&gt;&lt;/a&gt;Git 风格指南&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/agis-/git-style-guide&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;原文&lt;/a&gt;&lt;br&gt;这份风格指南受到 &lt;a href=&quot;https://www.kernel.org/doc/Documentation/SubmittingPatches&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;&lt;em&gt;How to Get Your Change Into the Linux Kernel&lt;/em&gt;&lt;/a&gt;，&lt;a href=&quot;http://git-scm.com/doc&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;git man pages&lt;/a&gt; 和大量社区通用实践的启发。&lt;/p&gt;
&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#branches&quot;&gt;分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#commits&quot;&gt;提交&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#messages&quot;&gt;消息&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#merging&quot;&gt;合并&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#misc&quot;&gt;杂项&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Guide" scheme="http://notes.seirhsiao.com/categories/Guide/"/>
    
    
      <category term="指南" scheme="http://notes.seirhsiao.com/tags/%E6%8C%87%E5%8D%97/"/>
    
      <category term="git" scheme="http://notes.seirhsiao.com/tags/git/"/>
    
      <category term="风格" scheme="http://notes.seirhsiao.com/tags/%E9%A3%8E%E6%A0%BC/"/>
    
      <category term="翻译" scheme="http://notes.seirhsiao.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 基本语法</title>
    <link href="http://notes.seirhsiao.com/posts/7894e390/"/>
    <id>http://notes.seirhsiao.com/posts/7894e390/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:30:54.535Z</updated>
    
    <content type="html"><![CDATA[<p><strong>声明：</strong> 这份文档派生(fork)于<a href="http://wowubuntu.com/markdown/" target="_blank" rel="external nofollow noreferrer noopener">简体中文版</a>，在此基础上进行了适当地修改工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里<a href="http://gitcafe.com/hsiao/Markdown-Syntax-CN/blob/master/syntax.md" target="_blank" rel="external nofollow noreferrer noopener">查看它的源文件</a>。「繁体中文版的原始文件可以<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md" target="_blank" rel="external nofollow noreferrer noopener">查看这里</a> 。」–By @<a href="http://www.seirhsiao.com/" target="_blank" rel="external nofollow noreferrer noopener">hsiao</a></p><p><strong>注：</strong> 本项目托管于<a href="https://github.com/seirhsiao/Markdown-Syntax-CN" target="_blank" rel="external nofollow noreferrer noopener">Github</a>  和 <a href="https://gitcafe.com/hsiao/Markdown-Syntax-CN" target="_blank" rel="external nofollow noreferrer noopener">GitCafe</a>上，请通过”派生”和”合并请求”来帮忙改进本项目。</p><p>Markdown: Basics （快速入门） / (<a href="./2013-07-05-markdown-syntax-guide.html">点击查看完整语法说明</a>)</p><a id="more"></a><p>================</p><h2 id="Getting-the-Gist-of-Markdown’s-Formatting-Syntax"><a href="#Getting-the-Gist-of-Markdown’s-Formatting-Syntax" class="headerlink" title="Getting the Gist of Markdown’s Formatting Syntax"></a>Getting the Gist of Markdown’s Formatting Syntax</h2><p>此页提供了 Markdown 的简单概念， <a href="http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md" target="_blank" rel="external nofollow noreferrer noopener" title="Markdown Syntax">语法说明</a> 页提供了完整详细的文档，说明了每项功能。但是 Markdown 其实很简单就可以上手，此页文档提供了一些范例，并且每个范例都会提供输出的 HTML 结果。</p><p>其实直接试试看也是一个很不错的方法， <a href="http://daringfireball.net/projects/markdown/dingus" target="_blank" rel="external nofollow noreferrer noopener" title="Markdown Dingus">Dingus</a> 是一个网页应用程序，你可以把自已编写的 Markdown 文档转成 XHTML。</p><h2 id="段落、标题、区块代码"><a href="#段落、标题、区块代码" class="headerlink" title="段落、标题、区块代码"></a>段落、标题、区块代码</h2><p>一个段落是由一个以上的连接的行句组成，而一个以上的空行则会划分出不同的段落（空行的定义是显示上看起来像是空行，就被视为空行，例如有一行只有空白和 tab，那该行也会被视为空行），一般的段落不需要用空白或换行缩进。</p><p>Markdown 支持两种标题的语法，[Setext] <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="external nofollow noreferrer noopener">1</a> 和 [atx] <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="external nofollow noreferrer noopener">2</a> 形式。Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），Atx 形式在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶。</p><p>区块引用则使用 email 形式的 ‘<code>&gt;</code>‘ 角括号。</p><p>Markdown 语法:</p><pre><code>A First Level Header====================A Second Level Header---------------------Now is the time for all good men to come tothe aid of their country. This is just aregular paragraph.The quick brown fox jumped over the lazydog's back.### Header 3&gt; This is a blockquote.&gt; &gt; This is the second paragraph in the blockquote.&gt;&gt; ## This is an H2 in a blockquote</code></pre><p>输出 HTML 为：</p><pre><code>&lt;h1&gt;A First Level Header&lt;/h1&gt;&lt;h2&gt;A Second Level Header&lt;/h2&gt;&lt;p&gt;Now is the time for all good men to come tothe aid of their country. This is just aregular paragraph.&lt;/p&gt;&lt;p&gt;The quick brown fox jumped over the lazydog's back.&lt;/p&gt;&lt;h3&gt;Header 3&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;This is a blockquote.&lt;/p&gt;&lt;p&gt;This is the second paragraph in the blockquote.&lt;/p&gt;&lt;h2&gt;This is an H2 in a blockquote&lt;/h2&gt;&lt;/blockquote&gt;</code></pre><h3 id="修辞和强调"><a href="#修辞和强调" class="headerlink" title="修辞和强调"></a>修辞和强调</h3><p>Markdown 使用星号和底线来标记需要强调的区段。</p><p>Markdown 语法:</p><pre><code>Some of these words *are emphasized*.Some of these words _are emphasized also_.Use two asterisks for **strong emphasis**.Or, if you prefer, __use two underscores instead__.</code></pre><p>输出 HTML 为:</p><pre><code>&lt;p&gt;Some of these words &lt;em&gt;are emphasized&lt;/em&gt;.Some of these words &lt;em&gt;are emphasized also&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Use two asterisks for &lt;strong&gt;strong emphasis&lt;/strong&gt;.Or, if you prefer, &lt;strong&gt;use two underscores instead&lt;/strong&gt;.&lt;/p&gt;</code></pre><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的，使用星号：</p><pre><code>* Candy.* Gum.* Booze.</code></pre><p>加号：</p><pre><code>+ Candy.+ Gum.+ Booze.</code></pre><p>和减号</p><pre><code>- Candy.- Gum.- Booze.</code></pre><p>都会输出 HTML 为：</p><pre><code>&lt;ul&gt;&lt;li&gt;Candy.&lt;/li&gt;&lt;li&gt;Gum.&lt;/li&gt;&lt;li&gt;Booze.&lt;/li&gt;&lt;/ul&gt;</code></pre><p>有序的列表则是使用一般的数字接着一个英文句点作为项目标记：</p><pre><code>1. Red2. Green3. Blue</code></pre><p>输出 HTML 为：</p><pre><code>&lt;ol&gt;&lt;li&gt;Red&lt;/li&gt;&lt;li&gt;Green&lt;/li&gt;&lt;li&gt;Blue&lt;/li&gt;&lt;/ol&gt;</code></pre><p>如果你在项目之间插入空行，那项目的内容会用 <code>&lt;p&gt;</code> 包起来，你也可以在一个项目内放上多个段落，只要在它前面缩排 4 个空白或 1 个 tab 。</p><pre><code>* A list item.    With multiple paragraphs.* Another item in the list.</code></pre><p>输出 HTML 为：</p><pre><code>&lt;ul&gt;&lt;li&gt;&lt;p&gt;A list item.&lt;/p&gt;&lt;p&gt;With multiple paragraphs.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Another item in the list.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</code></pre><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown 支援两种形式的链接语法： <em>行内</em> 和 <em>参考</em> 两种形式，两种都是使用角括号来把文字转成连结。</p><p>行内形式是直接在后面用括号直接接上链接：</p><pre><code>This is an [example link](http://example.com/).</code></pre><p>输出 HTML 为：</p><pre><code>&lt;p&gt;This is an &lt;a href="http://example.com/"&gt;example link&lt;/a&gt;.&lt;/p&gt;</code></pre><p>你也可以选择性的加上 title 属性：</p><pre><code>This is an [example link](http://example.com/ "With a Title").</code></pre><p>输出 HTML 为：</p><pre><code>&lt;p&gt;This is an &lt;a href="http://example.com/" title="With a Title"&gt;example link&lt;/a&gt;.&lt;/p&gt;</code></pre><p>参考形式的链接让你可以为链接定一个名称，之后你可以在文件的其他地方定义该链接的内容：</p><pre><code>I get 10 times more traffic from [Google][1] than from[Yahoo][2] or [MSN][3].[1]: http://google.com/ "Google"[2]: http://search.yahoo.com/ "Yahoo Search"[3]: http://search.msn.com/ "MSN Search"</code></pre><p>输出 HTML 为：</p><pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href="http://google.com/"title="Google"&gt;Google&lt;/a&gt; than from &lt;a href="http://search.yahoo.com/"title="Yahoo Search"&gt;Yahoo&lt;/a&gt; or &lt;a href="http://search.msn.com/"title="MSN Search"&gt;MSN&lt;/a&gt;.&lt;/p&gt;</code></pre><p>title 属性是选择性的，链接名称可以用字母、数字和空格，但是不分大小写：</p><pre><code>I start my morning with a cup of coffee and[The New York Times][NY Times].[ny times]: http://www.nytimes.com/</code></pre><p>输出 HTML 为：</p><pre><code>&lt;p&gt;I start my morning with a cup of coffee and&lt;a href="http://www.nytimes.com/"&gt;The New York Times&lt;/a&gt;.&lt;/p&gt;</code></pre><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>图片的语法和链接很像。</p><p>行内形式（title 是选择性的）：</p><pre><code>![alt text](/path/to/img.jpg "Title")</code></pre><p>参考形式：</p><pre><code>![alt text][id][id]: /path/to/img.jpg "Title"</code></pre><p>上面两种方法都会输出 HTML 为：</p><pre><code>&lt;img src="/path/to/img.jpg" alt="alt text" title="Title" /&gt;</code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>在一般的段落文字中，你可以使用反引号 <code>`</code> 来标记代码区段，区段内的 <code>&amp;</code>、<code>&lt;</code> 和 <code>&gt;</code> 都会被自动的转换成 HTML 实体，这项特性让你可以很容易的在代码区段内插入 HTML 码：</p><pre><code>I strongly recommend against using any `&lt;blink&gt;` tags.I wish SmartyPants used named entities like `&amp;mdash;`instead of decimal-encoded entites like `&amp;#8212;`.</code></pre><p>输出 HTML 为：</p><pre><code>&lt;p&gt;I strongly recommend against using any&lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;&lt;p&gt;I wish SmartyPants used named entities like&lt;code&gt;&amp;amp;mdash;&lt;/code&gt; instead of decimal-encodedentites like &lt;code&gt;&amp;amp;#8212;&lt;/code&gt;.&lt;/p&gt;</code></pre><p>如果要建立一个已经格式化好的代码区块，只要每行都缩进 4 个空格或是一个 tab 就可以了，而 <code>&amp;</code>、<code>&lt;</code> 和 <code>&gt;</code> 也一样会自动转成 HTML 实体。</p><p>Markdown 语法:</p><pre><code>If you want your page to validate under XHTML 1.0 Strict,you've got to put paragraph tags in your blockquotes:&lt;blockquote&gt;&lt;p&gt;For example.&lt;/p&gt;&lt;/blockquote&gt;</code></pre><p>输出 HTML 为：</p><pre><code>&lt;p&gt;If you want your page to validate under XHTML 1.0 Strict,you've got to put paragraph tags in your blockquotes:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;blockquote&amp;gt;&amp;lt;p&amp;gt;For example.&amp;lt;/p&amp;gt;&amp;lt;/blockquote&amp;gt;&lt;/code&gt;&lt;/pre&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;声明：&lt;/strong&gt; 这份文档派生(fork)于&lt;a href=&quot;http://wowubuntu.com/markdown/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;简体中文版&lt;/a&gt;，在此基础上进行了适当地修改工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里&lt;a href=&quot;http://gitcafe.com/hsiao/Markdown-Syntax-CN/blob/master/syntax.md&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;查看它的源文件&lt;/a&gt;。「繁体中文版的原始文件可以&lt;a href=&quot;https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;查看这里&lt;/a&gt; 。」–By @&lt;a href=&quot;http://www.seirhsiao.com/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;hsiao&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 本项目托管于&lt;a href=&quot;https://github.com/seirhsiao/Markdown-Syntax-CN&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;Github&lt;/a&gt;  和 &lt;a href=&quot;https://gitcafe.com/hsiao/Markdown-Syntax-CN&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;GitCafe&lt;/a&gt;上，请通过”派生”和”合并请求”来帮忙改进本项目。&lt;/p&gt;
&lt;p&gt;Markdown: Basics （快速入门） / (&lt;a href=&quot;./2013-07-05-markdown-syntax-guide.html&quot;&gt;点击查看完整语法说明&lt;/a&gt;)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="http://notes.seirhsiao.com/categories/Markdown/"/>
    
    
      <category term="markdown" scheme="http://notes.seirhsiao.com/tags/markdown/"/>
    
      <category term="语法" scheme="http://notes.seirhsiao.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>给程序员的开源、免费图书集合</title>
    <link href="http://notes.seirhsiao.com/posts/83e9c285/"/>
    <id>http://notes.seirhsiao.com/posts/83e9c285/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-07T02:40:54.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="books-collection-给程序员的开源、免费图书集合"><a href="#books-collection-给程序员的开源、免费图书集合" class="headerlink" title="books-collection 给程序员的开源、免费图书集合"></a>books-collection 给程序员的开源、免费图书集合</h1><p>To programmer’s open source and free books collection.  </p><p>In this project, we will constantly update collection,<br>if you are interested, you can continue to focus on, click<br>Watch or Star.</p><p>I am improving and expanding the documentation all the time. If you’d like to help this project, please consider corrected, expanding, or adding documentation where you see a need. Every little bit of help you provide in turn improves books-collection.The easiest way to contribute your documentation is to send it to the <a href="https://github.com/waylau/books-collection/issues" target="_blank" rel="external nofollow noreferrer noopener">Issues</a> </p><p>给程序员的开源、免费书籍收集，图书集合。</p><p>本项目中所列出的图书均由人工校验过，放心可用。</p><p>本项目将不断更新收集，如果你感兴趣，可以持续关注, 点 <strong>Watch</strong> 或者 <strong>Star</strong> ,查看<a href="http://www.waylau.com/github-use-watch-star-fork/" target="_blank" rel="external nofollow noreferrer noopener">Github中watch、star的用法</a>。</p><p>同时，欢迎你提出宝贵的意见，或者投稿。使用 <a href="https://github.com/waylau/books-collection/issues" target="_blank" rel="external nofollow noreferrer noopener">issues</a> </p><p><strong>说明：</strong>标志<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8">🇺🇸</span>为英文,<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8">🇨🇳</span>为中文, <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b07.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b07.png?v8">⬇</span>为可以下载的附件,</p><a id="more"></a><h2 id="翻墙"><a href="#翻墙" class="headerlink" title="翻墙"></a>翻墙</h2><ul><li><a href="http://www.waylau.com/simple-way-to-implement-browsing-famous-overseas-web-sites-without-the-ladder-gateway-dns-hosts/" target="_blank" rel="external nofollow noreferrer noopener">简单实现浏览国外著名网站的方法，不用梯子，修改本机的 hosts</a></li><li><a href="http://www.waylau.com/heroku-snova-c4-cross-wall/" target="_blank" rel="external nofollow noreferrer noopener">用Heroku、snova-c4搭梯子上墙</a></li><li><a href="http://www.waylau.com/about-dnscrypt/" target="_blank" rel="external nofollow noreferrer noopener">又一架梯子上墙利器–DNSCrypt</a></li><li><a href="http://www.waylau.com/about-vpngate/" target="_blank" rel="external nofollow noreferrer noopener">用 VPN Gate 翻墙科学上网</a></li><li><a href="http://www.waylau.com/vpn-setting/" target="_blank" rel="external nofollow noreferrer noopener">设置 VPN,通过 VPN 翻墙科学上网</a></li><li><a href="http://www.waylau.com/about-azure-remoteapp/" target="_blank" rel="external nofollow noreferrer noopener">用 Azure RemoteApp 翻墙科学上网</a></li><li><a href="http://www.waylau.com/windows-hosts-auto-update/" target="_blank" rel="external nofollow noreferrer noopener">Windows 下自动化更新 hosts</a></li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li><a href="http://dev.mysql.com/doc/refman/5.7/en/index.html" target="_blank" rel="external nofollow noreferrer noopener">MySQL 5.7 Reference Manual</a></li><li><a href="http://dev.mysql.com/doc/refman/5.6/en/index.html" target="_blank" rel="external nofollow noreferrer noopener">MySQL 5.6 Reference Manual</a></li><li><a href="https://github.com/waylau/h2-database-doc" target="_blank" rel="external nofollow noreferrer noopener">H2 Database 教程</a></li></ul><h2 id="Security-安全"><a href="#Security-安全" class="headerlink" title="Security 安全"></a>Security 安全</h2><ul><li><a href="https://github.com/waylau/apache-shiro-1.2.x-reference" target="_blank" rel="external nofollow noreferrer noopener">Apache Shiro 1.2.x 用户指南</a></li></ul><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ul><li><a href="https://github.com/waylau/rest-in-action" target="_blank" rel="external nofollow noreferrer noopener">REST 实战</a></li><li><a href="https://github.com/waylau/Jersey-2.x-User-Guide" target="_blank" rel="external nofollow noreferrer noopener">Jersey 2.x 用户指南</a></li><li><a href="https://github.com/waylau/spring-framework-4-reference" target="_blank" rel="external nofollow noreferrer noopener">Spring Framework 4.x参考文档</a></li><li><a href="https://github.com/waylau/netty-4-user-guide" target="_blank" rel="external nofollow noreferrer noopener">Netty 4.x 用户指南</a></li><li><a href="https://github.com/waylau/essential-netty-in-action" target="_blank" rel="external nofollow noreferrer noopener">Netty 实战(精髓)</a></li><li><a href="https://github.com/waylau/java-code-conventions" target="_blank" rel="external nofollow noreferrer noopener">Java 编码规范</a></li><li><a href="https://github.com/waylau/apache-mina-2.x-user-guide" target="_blank" rel="external nofollow noreferrer noopener">Apache MINA 2 用户指南</a></li><li><a href="http://gee.cs.oswego.edu/dl/cpj/index.html" target="_blank" rel="external nofollow noreferrer noopener">Concurrent Programming in Java-Design principles and patterns</a></li><li><a href="http://www.slideshare.net/longhao/java-11808629" target="_blank" rel="external nofollow noreferrer noopener">Java 并发编程培训(阿里巴巴)</a></li><li>Java Servlet 3.1 规范 <a href="https://github.com/waylau/servlet-3.1-specification" target="_blank" rel="external nofollow noreferrer noopener"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8">🇨🇳</span></a><a href="http://download.oracle.com/otndocs/jcp/servlet-3_1-fr-eval-spec/index.html" target="_blank" rel="external nofollow noreferrer noopener"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b07.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b07.png?v8">⬇</span></a></li><li><a href="https://github.com/waylau/jsse-reference-guide" target="_blank" rel="external nofollow noreferrer noopener">JSSE 参考指南</a></li></ul><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><ul><li><a href="http://gitbookio.gitbooks.io/javascript/" target="_blank" rel="external nofollow noreferrer noopener">Learn Javascript</a></li><li>Less.js <a href="http://lesscss.org/" target="_blank" rel="external nofollow noreferrer noopener"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8">🇺🇸</span></a>, <a href="http://lesscss.net/" target="_blank" rel="external nofollow noreferrer noopener"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8">🇨🇳</span></a></li><li>Jekyll 文档 <a href="http://jekyllrb.com/docs/home/" target="_blank" rel="external nofollow noreferrer noopener"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8">🇺🇸</span></a>, <a href="http://jekyllcn.com/docs/home/" target="_blank" rel="external nofollow noreferrer noopener"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8">🇨🇳</span></a></li><li><a href="https://github.com/waylau/nwjs-demos" target="_blank" rel="external nofollow noreferrer noopener">NW.js 入门指南</a> </li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li>Bootstrap 文档  <a href="http://getbootstrap.com/" target="_blank" rel="external nofollow noreferrer noopener"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8">🇺🇸</span></a>,<a href="http://v3.bootcss.com/" target="_blank" rel="external nofollow noreferrer noopener"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8">🇨🇳</span></a></li><li><a href="http://css.doyoe.com/" target="_blank" rel="external nofollow noreferrer noopener">CSS 参考手册</a></li><li><a href="http://alloyteam.github.io/CodeGuide/" target="_blank" rel="external nofollow noreferrer noopener">Code Guide by @AlloyTeam</a></li><li><a href="https://github.com/waylau/css3-tutorial" target="_blank" rel="external nofollow noreferrer noopener">CSS3 教程</a></li></ul><h2 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h2><ul><li><a href="https://github.com/waylau/Gradle-2-User-Guide" target="_blank" rel="external nofollow noreferrer noopener">Gradle 2 用户指南</a></li><li><a href="http://www.sonatype.com/books/mvnref-book/reference/public-book.html" target="_blank" rel="external nofollow noreferrer noopener">Maven: The Complete Reference</a></li><li><a href="http://books.sonatype.com/mvnex-book/reference/public-book.html" target="_blank" rel="external nofollow noreferrer noopener">Maven by Example</a></li></ul><h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><ul><li><a href="https://github.com/waylau/github-help" target="_blank" rel="external nofollow noreferrer noopener">Github 帮助文档</a></li><li><a href="https://github.com/progit/progit2" target="_blank" rel="external nofollow noreferrer noopener">Pro Git, 2nd Edition</a> , <a href="http://git-scm.com/book/en/v2" target="_blank" rel="external nofollow noreferrer noopener"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8">🇺🇸</span></a>, <a href="http://git-scm.com/book/zh/v2" target="_blank" rel="external nofollow noreferrer noopener"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8">🇨🇳</span></a></li><li><a href="https://github.com/progit/progit" target="_blank" rel="external nofollow noreferrer noopener">Pro Git, 1st Edition</a>  , <a href="http://git-scm.com/book/en/v1" target="_blank" rel="external nofollow noreferrer noopener"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8">🇺🇸</span></a>,  <a href="http://git-scm.com/book/zh/v1" target="_blank" rel="external nofollow noreferrer noopener"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8">🇨🇳</span></a></li></ul><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><ul><li><a href="github.com/waylau/activiti-5.x-user-guide">Activiti 5.x 用户指南</a></li></ul><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul><li><a href="http://vbird.dic.ksu.edu.tw/" target="_blank" rel="external nofollow noreferrer noopener">鸟哥的Linux私房菜</a></li></ul><p>##Web</p><ul><li><a href="https://github.com/willianjusten/awesome-svg" target="_blank" rel="external nofollow noreferrer noopener">Svg 资源集合</a></li><li><a href="http://www.w3.org/TR/2015/WD-SVG2-20150409/" target="_blank" rel="external nofollow noreferrer noopener">Scalable Vector Graphics (SVG) 2</a></li><li><a href="http://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99?pn=1" target="_blank" rel="external nofollow noreferrer noopener">HTTP/2.0 中文翻译</a></li><li>http2 explained <a href="http://daniel.haxx.se/http2/" target="_blank" rel="external nofollow noreferrer noopener"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8">🇺🇸</span></a>, <a href="https://www.gitbook.com/book/ye11ow/http2-explained/details" target="_blank" rel="external nofollow noreferrer noopener"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8">🇨🇳</span></a></li></ul><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><ul><li>The Swift Programming Language <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html" target="_blank" rel="external nofollow noreferrer noopener"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8">🇺🇸</span></a>, <a href="http://siemenliu.gitbooks.io/the-swift-programming-language-in-chinese/" target="_blank" rel="external nofollow noreferrer noopener"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8">🇨🇳</span></a></li><li><a href="http://swift-lang.org/guides/release-0.94/userguide/userguide.html" target="_blank" rel="external nofollow noreferrer noopener">Swift User Guide</a></li></ul><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><ul><li>Architectural Styles and the Design of Network-based Software Architectures(架构风格与基于网络应用软件的架构设计) <a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="external nofollow noreferrer noopener"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8">🇺🇸</span></a> <a href="http://yuedu.baidu.com/ebook/780324fbf121dd36a32d8269.html?f=read" target="_blank" rel="external nofollow noreferrer noopener"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8">🇨🇳</span></a><a href="http://www.infoq.com/cn/minibooks/web-based-apps-archit-design" target="_blank" rel="external nofollow noreferrer noopener"><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b07.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b07.png?v8">⬇</span></a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;books-collection-给程序员的开源、免费图书集合&quot;&gt;&lt;a href=&quot;#books-collection-给程序员的开源、免费图书集合&quot; class=&quot;headerlink&quot; title=&quot;books-collection 给程序员的开源、免费图书集合&quot;&gt;&lt;/a&gt;books-collection 给程序员的开源、免费图书集合&lt;/h1&gt;&lt;p&gt;To programmer’s open source and free books collection.  &lt;/p&gt;
&lt;p&gt;In this project, we will constantly update collection,&lt;br&gt;if you are interested, you can continue to focus on, click&lt;br&gt;Watch or Star.&lt;/p&gt;
&lt;p&gt;I am improving and expanding the documentation all the time. If you’d like to help this project, please consider corrected, expanding, or adding documentation where you see a need. Every little bit of help you provide in turn improves books-collection.The easiest way to contribute your documentation is to send it to the &lt;a href=&quot;https://github.com/waylau/books-collection/issues&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;Issues&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;给程序员的开源、免费书籍收集，图书集合。&lt;/p&gt;
&lt;p&gt;本项目中所列出的图书均由人工校验过，放心可用。&lt;/p&gt;
&lt;p&gt;本项目将不断更新收集，如果你感兴趣，可以持续关注, 点 &lt;strong&gt;Watch&lt;/strong&gt; 或者 &lt;strong&gt;Star&lt;/strong&gt; ,查看&lt;a href=&quot;http://www.waylau.com/github-use-watch-star-fork/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;Github中watch、star的用法&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;同时，欢迎你提出宝贵的意见，或者投稿。使用 &lt;a href=&quot;https://github.com/waylau/books-collection/issues&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;issues&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;标志&lt;span class=&quot;github-emoji&quot; style=&quot;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8) center/contain&quot; data-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8&quot;&gt;🇺🇸&lt;/span&gt;为英文,&lt;span class=&quot;github-emoji&quot; style=&quot;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8) center/contain&quot; data-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8&quot;&gt;🇨🇳&lt;/span&gt;为中文, &lt;span class=&quot;github-emoji&quot; style=&quot;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b07.png?v8) center/contain&quot; data-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/2b07.png?v8&quot;&gt;⬇&lt;/span&gt;为可以下载的附件,&lt;/p&gt;
    
    </summary>
    
    
      <category term="Books" scheme="http://notes.seirhsiao.com/categories/Books/"/>
    
    
      <category term="资源" scheme="http://notes.seirhsiao.com/tags/%E8%B5%84%E6%BA%90/"/>
    
      <category term="book" scheme="http://notes.seirhsiao.com/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 语法指南</title>
    <link href="http://notes.seirhsiao.com/posts/c8e71c7e/"/>
    <id>http://notes.seirhsiao.com/posts/c8e71c7e/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:31:07.631Z</updated>
    
    <content type="html"><![CDATA[<p>简介：</p><h2 id="Markdown-语法-简体中文版"><a href="#Markdown-语法-简体中文版" class="headerlink" title="Markdown 语法 (简体中文版)"></a>Markdown 语法 (简体中文版)</h2><p>&lt;&lt; <a href="http://wowubuntu.com" target="_blank" rel="external nofollow noreferrer noopener">访问 Wow!Ubuntu</a></p><p><strong>NOTE:</strong> This is Simplelified  Chinese Edition Document of Markdown Syntax. If you are seeking for English Edition Document. Please refer to <a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external nofollow noreferrer noopener">Markdown: Syntax</a>.</p><p><strong>声明：</strong> 这份文档派生(fork)于<a href="http://wowubuntu.com/markdown/" target="_blank" rel="external nofollow noreferrer noopener">简体中文版</a>，在此基础上进行了适当地修改工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里<a href="http://gitcafe.com/hsiao/Markdown-Syntax-CN/blob/master/syntax.md" target="_blank" rel="external nofollow noreferrer noopener">查看它的源文件</a>。「繁体中文版的原始文件可以<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md" target="_blank" rel="external nofollow noreferrer noopener">查看这里</a> 。」–By @<a href="http://www.seirhsiao.com/" target="_blank" rel="external nofollow noreferrer noopener">hsiao</a></p><p><strong>注：</strong> 本项目托管于<a href="https://github.com/seirhsiao/Markdown-Syntax-CN" target="_blank" rel="external nofollow noreferrer noopener">Github</a>  和 <a href="https://gitcafe.com/hsiao/Markdown-Syntax-CN" target="_blank" rel="external nofollow noreferrer noopener">GitCafe</a>上，请通过”派生”和”合并请求”来帮忙改进本项目。</p><p>Markdown 语法说明 (简体中文版) / (<a href="./2013-07-04-markdown-basic-syntax.html">点击查看快速入门</a>)</p><a id="more"></a><p>================</p><ul><li><a href="#overview">概述</a><ul><li><a href="#philosophy">宗旨</a></li><li><a href="#html">兼容 HTML</a></li><li><a href="#autoescape">特殊字符自动转换</a></li></ul></li><li><a href="#block">区块元素</a><ul><li><a href="#p">段落和换行</a></li><li><a href="#header">标题</a></li><li><a href="#blockquote">区块引用</a></li><li><a href="#list">列表</a></li><li><a href="#precode">代码区块</a></li><li><a href="#hr">分隔线</a></li></ul></li><li><a href="#span">区段元素</a><ul><li><a href="#link">链接</a></li><li><a href="#em">强调</a></li><li><a href="#code">代码</a></li><li><a href="#img">图片</a></li></ul></li><li><a href="#misc">其它</a><ul><li><a href="#backslash">反斜杠</a></li><li><a href="#autolink">自动链接</a></li></ul></li><li><a href="#acknowledgement">感谢</a></li><li><a href="#editor">Markdown 免费编辑器</a></li></ul><hr><h2 id="overview">概述</h2><h3 id="philosophy">宗旨</h3><p>Markdown 的目标是实现「易读易写」。</p><p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 [Setext] <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="external nofollow noreferrer noopener">1</a>、[atx] <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="external nofollow noreferrer noopener">2</a>、[Textile] <a href="http://textism.com/tools/textile/" target="_blank" rel="external nofollow noreferrer noopener">3</a>、[reStructuredText] <a href="http://docutils.sourceforge.net/rst.html" target="_blank" rel="external nofollow noreferrer noopener">4</a>、[Grutatext] <a href="http://www.triptico.com/software/grutatxt.html" target="_blank" rel="external nofollow noreferrer noopener">5</a> 和 [EtText] <a href="http://ettext.taint.org/doc/" target="_blank" rel="external nofollow noreferrer noopener">6</a>，而最大灵感来源其实是纯文本电子邮件的格式。</p><p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p><h3 id="html">兼容 HTML</h3><p>Markdown 语法的目标是：成为一种适用于网络的<em>书写</em>语言。</p><p>Markdown 并不是想取代 HTML的地位，甚至接近它。它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想<em>不是</em>要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种<em>发布</em>的格式，Markdown 是一种<em>书写</em>的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p><p>要制约的只有一些 HTML 区块元素――比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 <code>&lt;p&gt;</code> 标签。</p><p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p><pre><code>这是一个普通段落。&lt;table&gt;    &lt;tr&gt;        &lt;td&gt;Foo&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;这是另一个普通段落。</code></pre><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。</p><p>HTML 的区段（行内）标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p><p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p><h3 id="autoescape">特殊字符自动转换</h3><p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>。</p><p><code>&amp;</code> 字符尤其让网络文档编写者受折磨，如果你要打「<code>AT&amp;T</code>」 ，你必须要写成「<code>AT&amp;amp;T</code>」。而网址中的 <code>&amp;</code> 字符也要转换。比如你要链接到：</p><pre><code>http://images.google.com/images?num=30&amp;q=larry+bird</code></pre><p>你必须要把网址转换写为：</p><pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird</code></pre><p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p><p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 <code>&amp;</code> 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 <code>&amp;amp</code>;。</p><p>所以你如果要在文档中插入一个版权符号 <code>©</code>，你可以这样写：</p><pre><code>&amp;copy;</code></pre><p>Markdown 会保留它不动。而若你写：</p><pre><code>AT&amp;T</code></pre><p>Markdown 就会将它转为：</p><pre><code>AT&amp;amp;T</code></pre><p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 允许 <a href="#html">兼容 HTML</a> ，如果你是把 <code>&lt;</code> 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p><pre><code>4 &lt; 5</code></pre><p>Markdown 将会把它转换为：</p><pre><code>4 &amp;lt; 5</code></pre><p>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都<em>一定</em>会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p><hr><h2 id="block">区块元素</h2><h3 id="p">段落和换行</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p><p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <code>&lt;br /&gt;</code> 标签。</p><p>如果你<em>确实</em>想要依赖 Markdown 来插入 <code>&lt;br /&gt;</code> 标签的话，在插入处先按入两个以上的空格然后回车。</p><p>的确，需要多费点事（多加空格）来产生 <code>&lt;br /&gt;</code> ，但是简单地「每个换行都转换为 <code>&lt;br /&gt;</code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 <a href="#blockquote">区块引用</a> 和多段落的 <a href="#list">列表</a> 在使用换行来排版的时候，不但更好用，还更方便阅读。</p><h3 id="header">标题</h3><p>Markdown 支持两种标题的语法，类 [Setext] <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="external nofollow noreferrer noopener">1</a> 和类 [atx] <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="external nofollow noreferrer noopener">2</a> 形式。</p><p>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如：</p><pre><code>This is an H1=============This is an H2-------------</code></pre><p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p><p>类 Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，例如：</p><pre><code># 这是 H1## 这是 H2###### 这是 H6</code></pre><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p><pre><code># 这是 H1 ### 这是 H2 ##### 这是 H3 ######</code></pre><h3 id="blockquote">区块引用 Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 <code>&gt;</code> ：</p><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&gt; id sem consectetuer libero luctus adipiscing.</code></pre><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 <code>&gt;</code> ：</p><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing.</code></pre><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 <code>&gt;</code> ：</p><pre><code>&gt; This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level.</code></pre><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p><pre><code>&gt; ## 这是一个标题。&gt; &gt; 1.   这是第一行列表项。&gt; 2.   这是第二行列表项。&gt; &gt; 给出一些例子代码：&gt; &gt;     return shell_exec("echo $input | $markdown_script");</code></pre><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择<em>增加引用阶层</em>。</p><h3 id="list">列表</h3><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号、加号或是减号作为列表标记：</p><pre><code>*   Red*   Green*   Blue</code></pre><p>效果就是</p><ul><li>red</li><li>green</li><li>blue</li></ul><p>等同于：</p><pre><code>+   Red+   Green+   Blue</code></pre><p>也等同于：</p><pre><code>-   Red-   Green-   Blue</code></pre><p>有序列表则使用数字接着一个英文句点：</p><pre><code>1.  Bird2.  McHale3.  Parish</code></pre><p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p><pre><code>&lt;ol&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;McHale&lt;/li&gt;&lt;li&gt;Parish&lt;/li&gt;&lt;/ol&gt;</code></pre><p>如果你的列表标记写成：</p><pre><code>1.  Bird1.  McHale1.  Parish</code></pre><p>或甚至是：</p><pre><code>3. Bird1. McHale8. Parish</code></pre><p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p><p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p><p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p><pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,    viverra nec, fringilla in, laoreet vitae, risus.*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.    Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>但是如果你懒，那也行：</p><pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus.*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 <code>&lt;p&gt;</code><br>标签包起来，举例来说：</p><pre><code>*   Bird*   Magic</code></pre><p>会被转换为：</p><pre><code>&lt;ul&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;Magic&lt;/li&gt;&lt;/ul&gt;</code></pre><p>但是这个：</p><pre><code>*   Bird*   Magic</code></pre><p>会被转换为：</p><pre><code>&lt;ul&gt;&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</code></pre><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p><pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor    sit amet, consectetuer adipiscing elit. Aliquam hendrerit    mi posuere lectus.    Vestibulum enim wisi, viverra nec, fringilla in, laoreet    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum    sit amet velit.2.  Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p><pre><code>*   This is a list item with two paragraphs.    This is the second paragraph in the list item. You'reonly required to indent the first line. Lorem ipsum dolorsit amet, consectetuer adipiscing elit.*   Another item in the same list.</code></pre><p>如果要在列表项目内放进引用，那 <code>&gt;</code> 就需要缩进：</p><pre><code>*   A list item with a blockquote:    &gt; This is a blockquote    &gt; inside a list item.</code></pre><p>如果要放代码区块的话，该区块就需要缩进<em>两次</em>，也就是 8 个空格或是 2 个制表符：</p><pre><code>*   一列表项包含一个列表区块：        &lt;代码写在这&gt;</code></pre><p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p><pre><code>1986. What a great season.</code></pre><p>换句话说，也就是在行首出现<em>数字-句点-空白</em>，要避免这样的状况，你可以在句点前面加上反斜杠。</p><pre><code>1986\. What a great season.</code></pre><h3 id="precode">代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。</p><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p><pre><code>这是一个普通段落：    这是一个代码区块。</code></pre><p>Markdown 会转换成：</p><pre><code>&lt;p&gt;这是一个普通段落：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;这是一个代码区块。&lt;/code&gt;&lt;/pre&gt;</code></pre><p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p><pre><code>Here is an example of AppleScript:    tell application "Foo"        beep    end tell</code></pre><p>会被转换为：</p><pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tell application "Foo"    beepend tell&lt;/code&gt;&lt;/pre&gt;</code></pre><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p><p>在代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p><pre><code>&lt;div class="footer"&gt;    &amp;copy; 2004 Foo Corporation&lt;/div&gt;</code></pre><p>会被转换为：</p><pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class="footer"&amp;gt;    &amp;amp;copy; 2004 Foo Corporation&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;</code></pre><p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p><h3 id="hr">分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre><code>* * *********- - ----------------------------------------</code></pre><hr><h2 id="span">区段元素</h2><h3 id="link">链接</h3><p>Markdown 支持两种形式的链接语法： <em>行内式</em>和<em>参考式</em>两种形式。</p><p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p><p>要建立一个<em>行内式</em>的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p><pre><code>This is [an example](http://example.com/ "Title") inline link.[This link](http://example.net/) has no title attribute.</code></pre><p>会产生：</p><pre><code>&lt;p&gt;This is &lt;a href="http://example.com/" title="Title"&gt;an example&lt;/a&gt; inline link.&lt;/p&gt;&lt;p&gt;&lt;a href="http://example.net/"&gt;This link&lt;/a&gt; has notitle attribute.&lt;/p&gt;</code></pre><p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p><pre><code>See my [About](/about/) page for details.   </code></pre><p><em>参考式</em>的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p><pre><code>This is [an example][id] reference-style link.</code></pre><p>你也可以选择性地在两个方括号中间加上一个空格：</p><pre><code>This is [an example] [id] reference-style link.</code></pre><p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p><pre><code>[id]: http://example.com/  "Optional Title Here"</code></pre><p>链接内容定义的形式为：</p><ul><li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li><li>接着一个冒号</li><li>接着一个以上的空格或制表符</li><li>接着链接的网址</li><li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li></ul><p>下面这三种链接的定义都是相同：</p><pre><code>[foo]: http://example.com/  "Optional Title Here"[foo]: http://example.com/  'Optional Title Here'[foo]: http://example.com/  (Optional Title Here)</code></pre><p><strong>请注意：</strong>有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p><p>链接网址也可以用尖括号包起来：</p><pre><code>[id]: &lt;http://example.com/&gt;  "Optional Title Here"</code></pre><p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p><pre><code>[id]: http://example.com/longish/path/to/resource/here    "Optional Title Here"</code></pre><p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p><p>链接辨别标签可以有字母、数字、空白和标点符号，但是并<em>不</em>区分大小写，因此下面两个链接是一样的：</p><pre><code>[link text][a][link text][A]</code></pre><p><em>隐式链接标记</em>功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：</p><pre><code>[Google][]</code></pre><p>然后定义链接内容：</p><pre><code>[Google]: http://google.com/</code></pre><p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p><pre><code>Visit [Daring Fireball][] for more information.</code></pre><p>然后接着定义链接：</p><pre><code>[Daring Fireball]: http://daringfireball.net/</code></pre><p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p><p>下面是一个参考式链接的范例：</p><pre><code>I get 10 times more traffic from [Google] [1] than from[Yahoo] [2] or [MSN] [3].  [1]: http://google.com/        "Google"  [2]: http://search.yahoo.com/  "Yahoo Search"  [3]: http://search.msn.com/    "MSN Search"</code></pre><p>如果改成用链接名称的方式写：</p><pre><code>I get 10 times more traffic from [Google][] than from[Yahoo][] or [MSN][].  [google]: http://google.com/        "Google"  [yahoo]:  http://search.yahoo.com/  "Yahoo Search"  [msn]:    http://search.msn.com/    "MSN Search"</code></pre><p>上面两种写法都会产生下面的 HTML。</p><pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href="http://google.com/"title="Google"&gt;Google&lt;/a&gt; than from&lt;a href="http://search.yahoo.com/" title="Yahoo Search"&gt;Yahoo&lt;/a&gt;or &lt;a href="http://search.msn.com/" title="MSN Search"&gt;MSN&lt;/a&gt;.&lt;/p&gt;</code></pre><p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p><pre><code>I get 10 times more traffic from [Google](http://google.com/ "Google")than from [Yahoo](http://search.yahoo.com/ "Yahoo Search") or[MSN](http://search.msn.com/ "MSN Search").</code></pre><p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p><p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p><h3 id="em">强调</h3><p>Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 <code>*</code> 或 <code>_</code> 包起来的话，则会被转成 <code>&lt;strong&gt;</code>，例如：</p><pre><code>*single asterisks*_single underscores_**double asterisks**__double underscores__</code></pre><p>会转成：</p><pre><code>&lt;em&gt;single asterisks&lt;/em&gt;&lt;em&gt;single underscores&lt;/em&gt;&lt;strong&gt;double asterisks&lt;/strong&gt;&lt;strong&gt;double underscores&lt;/strong&gt;</code></pre><p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p><p>强调也可以直接插在文字中间：</p><pre><code>un*frigging*believable</code></pre><p>但是<strong>如果你的 <code>*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号</strong>。</p><p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p><pre><code>\*this text is surrounded by literal asterisks\*</code></pre><h3 id="code">代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来（<code>`</code>），例如：</p><pre><code>Use the `printf()` function.</code></pre><p>会产生：</p><pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</code></pre><p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p><pre><code>``There is a literal backtick (`) here.``</code></pre><p>这段语法会产生：</p><pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;</code></pre><p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</p><pre><code>A single backtick in a code span: `` ` ``A backtick-delimited string in a code span: `` `foo` ``</code></pre><p>会产生：</p><pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;</code></pre><p>在代码区段内，<code>&amp;</code> 和尖括号<strong>都</strong>会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</p><pre><code>Please don't use any `&lt;blink&gt;` tags.</code></pre><p>转为：</p><pre><code>&lt;p&gt;Please don't use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;</code></pre><p>你也可以这样写：</p><pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</code></pre><p>以产生：</p><pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encodedequivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;</code></pre><h3 id="img">图片</h3><p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： <em>行内式</em>和<em>参考式</em>。</p><p>行内式的图片语法看起来像是：</p><pre><code>![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg "Optional title")</code></pre><p>详细叙述如下：</p><ul><li>一个惊叹号 <code>!</code></li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上<br>选择性的 ‘title’ 文字。</li></ul><p>参考式的图片语法则长得像这样：</p><pre><code>![Alt text][id]</code></pre><p>「id」是图片参考的名称，图片参考的定义方式则和链接参考一样：</p><pre><code>[id]: url/to/image  "Optional title attribute"</code></pre><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p><hr><h2 id="misc">其它</h2><h3 id="autolink">自动链接</h3><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p><pre><code>&lt;http://example.com/&gt;</code></pre><p>Markdown 会转为：</p><pre><code>&lt;a href="http://example.com/"&gt;http://example.com/&lt;/a&gt;</code></pre><p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p><pre><code>&lt;address@example.com&gt;</code></pre><p>Markdown 会转成：</p><pre><code>&lt;a href="&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;</code></pre><p>在浏览器里面，这段字串（其实是 <code>&lt;a href="mailto:address@example.com"&gt;address@example.com&lt;/a&gt;</code>）会变成一个可以点击的「<a href="mailto:address@example.com" target="_blank" rel="external nofollow noreferrer noopener">address@example.com</a>」链接。</p><p>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p><h3 id="backslash">反斜杠</h3><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <code>&lt;em&gt;</code> 标签），你可以在星号的前面加上反斜杠：</p><pre><code>\*literal asterisks\*</code></pre><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre><code>\   反斜线`   反引号*   星号_   底线{}  花括号[]  方括号()  括弧#   井字号+   加号-   减号.   英文句点!   惊叹号</code></pre><h2 id="acknowledgement">感谢</h2><p>感谢 <a href="https://twitter.com/#!/leafy7382" target="_blank" rel="external nofollow noreferrer noopener">leafy7382</a> 协助翻译，<a href="http://iamhlb.com/" target="_blank" rel="external nofollow noreferrer noopener">hlb</a>、<a href="http://twitter.com/randylien" target="_blank" rel="external nofollow noreferrer noopener">Randylien</a> 帮忙润稿，<a href="https://twitter.com/#!/ethantw" target="_blank" rel="external nofollow noreferrer noopener">ethantw</a> 的<a href="http://ethantw.net/projects/han/" target="_blank" rel="external nofollow noreferrer noopener">汉字标准格式・CSS Reset</a>， <a href="http://kidwm.net/" target="_blank" rel="external nofollow noreferrer noopener">WM</a> 回报文字错误。</p><p>感谢 <a href="https://github.com/fenprace" target="_blank" rel="external nofollow noreferrer noopener">fenprace</a>，<a href="https://github.com/addv" target="_blank" rel="external nofollow noreferrer noopener">addv</a>。</p><hr><h2 id="editor">Markdown 免费编辑器</h2><p>Windows 平台</p><ul><li><a href="http://markdownpad.com/" target="_blank" rel="external nofollow noreferrer noopener">MarkdownPad</a></li><li><a href="http://code52.org/DownmarkerWPF/" target="_blank" rel="external nofollow noreferrer noopener">MarkPad</a></li></ul><p>Linux 平台</p><ul><li><a href="http://sourceforge.net/p/retext/home/ReText/" target="_blank" rel="external nofollow noreferrer noopener">ReText</a></li></ul><p>Mac 平台</p><ul><li><a href="http://mouapp.com/" target="_blank" rel="external nofollow noreferrer noopener">Mou</a></li></ul><p>在线编辑器</p><ul><li><a href="http://markable.in/" target="_blank" rel="external nofollow noreferrer noopener">Markable.in</a></li><li><a href="http://dillinger.io/" target="_blank" rel="external nofollow noreferrer noopener">Dillinger.io</a></li></ul><p>浏览器插件</p><ul><li><a href="https://chrome.google.com/webstore/detail/oknndfeeopgpibecfjljjfanledpbkog" target="_blank" rel="external nofollow noreferrer noopener">MaDe</a> (Chrome)</li></ul><p>高级应用</p><ul><li><a href="http://www.sublimetext.com/2" target="_blank" rel="external nofollow noreferrer noopener">Sublime Text 2</a> + <a href="http://ttscoff.github.com/MarkdownEditing/" target="_blank" rel="external nofollow noreferrer noopener">MarkdownEditing</a> / <a href="http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/" target="_blank" rel="external nofollow noreferrer noopener">教程</a></li></ul><p>*** 如有更好的 Markdown 免费编辑器推荐，请到<a href="https://gitcafe.com/riku/Markdown-Syntax-CN/tickets/1" target="_blank" rel="external nofollow noreferrer noopener">这里反馈</a>，谢谢！</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>项目主页：<a href="http://wowubuntu.com/markdown" target="_blank" rel="external nofollow noreferrer noopener">http://wowubuntu.com/markdown</a></p><p>繁体中文版主页：<a href="http://markdown.tw/" target="_blank" rel="external nofollow noreferrer noopener">http://markdown.tw/</a></p><h3 id="附注"><a href="#附注" class="headerlink" title="附注"></a>附注</h3><p>By @riku - <a href="http://twitter.com/riku" target="_blank" rel="external nofollow noreferrer noopener">twitter.com/riku</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简介：&lt;/p&gt;
&lt;h2 id=&quot;Markdown-语法-简体中文版&quot;&gt;&lt;a href=&quot;#Markdown-语法-简体中文版&quot; class=&quot;headerlink&quot; title=&quot;Markdown 语法 (简体中文版)&quot;&gt;&lt;/a&gt;Markdown 语法 (简体中文版)&lt;/h2&gt;&lt;p&gt;&amp;lt;&amp;lt; &lt;a href=&quot;http://wowubuntu.com&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;访问 Wow!Ubuntu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This is Simplelified  Chinese Edition Document of Markdown Syntax. If you are seeking for English Edition Document. Please refer to &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;Markdown: Syntax&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;声明：&lt;/strong&gt; 这份文档派生(fork)于&lt;a href=&quot;http://wowubuntu.com/markdown/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;简体中文版&lt;/a&gt;，在此基础上进行了适当地修改工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里&lt;a href=&quot;http://gitcafe.com/hsiao/Markdown-Syntax-CN/blob/master/syntax.md&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;查看它的源文件&lt;/a&gt;。「繁体中文版的原始文件可以&lt;a href=&quot;https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;查看这里&lt;/a&gt; 。」–By @&lt;a href=&quot;http://www.seirhsiao.com/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;hsiao&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 本项目托管于&lt;a href=&quot;https://github.com/seirhsiao/Markdown-Syntax-CN&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;Github&lt;/a&gt;  和 &lt;a href=&quot;https://gitcafe.com/hsiao/Markdown-Syntax-CN&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;GitCafe&lt;/a&gt;上，请通过”派生”和”合并请求”来帮忙改进本项目。&lt;/p&gt;
&lt;p&gt;Markdown 语法说明 (简体中文版) / (&lt;a href=&quot;./2013-07-04-markdown-basic-syntax.html&quot;&gt;点击查看快速入门&lt;/a&gt;)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Guide" scheme="http://notes.seirhsiao.com/categories/Guide/"/>
    
    
      <category term="指南" scheme="http://notes.seirhsiao.com/tags/%E6%8C%87%E5%8D%97/"/>
    
      <category term="风格" scheme="http://notes.seirhsiao.com/tags/%E9%A3%8E%E6%A0%BC/"/>
    
      <category term="翻译" scheme="http://notes.seirhsiao.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="markdown" scheme="http://notes.seirhsiao.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>前端资源收集</title>
    <link href="http://notes.seirhsiao.com/posts/649971dd/"/>
    <id>http://notes.seirhsiao.com/posts/649971dd/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:32:03.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端收集"><a href="#前端收集" class="headerlink" title="前端收集"></a>前端收集</h1><p>在前端路上摸索前行，在这里分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者。欢迎更新，以下各排名不分先后顺序。</p><p>自己 RSS 长期订阅了一些IT 和技术相关博客，这里是我Feedly 输出的opml，可直接导入一些RSS 阅读器:<br><a href="https://github.com/foru17/luolei-dotfiles/blob/master/feedly.opml" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/foru17/luolei-dotfiles/blob/master/feedly.opml</a></p><p>====</p><h4 id="前端收集图谱"><a href="#前端收集图谱" class="headerlink" title="前端收集图谱"></a><a href="http://get-set.cn/front-end-collect/" target="_blank" rel="external nofollow noreferrer noopener">前端收集图谱</a></h4><p>此部分为<a href="https://github.com/jikeytang" target="_blank" rel="external nofollow noreferrer noopener">@jikeytang </a>贡献</p><ul><li>clone <a href="https://github.com/hjzheng/front-end-collect" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/hjzheng/front-end-collect</a></li><li>cd front-end-collect</li><li>bower install</li><li>放入你喜欢的web容器,访问index.html即可</li><li>你也直接可以访问: <a href="http://get-set.cn/front-end-collect/" target="_blank" rel="external nofollow noreferrer noopener">http://get-set.cn/front-end-collect/</a></li><li>支持Chrome, Firefox and IE10&amp;11以上浏览器</li></ul><p><img alt="image" data-src="https://raw.githubusercontent.com/hjzheng/front-end-collect/master/img/front-end-chart.png" class="lazyload"></p><a id="more"></a><h4 id="聚合-amp-amp-周报订阅"><a href="#聚合-amp-amp-周报订阅" class="headerlink" title="聚合&amp;&amp;周报订阅"></a>聚合&amp;&amp;周报订阅</h4><table><thead><tr><th>名称</th><th>订阅地址</th><th>介绍</th></tr></thead><tbody><tr><td><strong>英文推送</strong></td><td></td><td></td></tr><tr><td>Html5 Weekly</td><td><a href="http://html5weekly.com/" target="_blank" rel="external nofollow noreferrer noopener">http://html5weekly.com/</a></td><td>Html 技术类</td></tr><tr><td>CSS Weekly</td><td><a href="http://css-weekly.com/" target="_blank" rel="external nofollow noreferrer noopener">http://css-weekly.com/</a></td><td></td></tr><tr><td>Javascript Weekly</td><td><a href="http://javascriptweekly.com/" target="_blank" rel="external nofollow noreferrer noopener">http://javascriptweekly.com/</a></td><td>JS相关，同样有 html,css 和工具相关</td></tr><tr><td>Web Design Weekly</td><td><a href="http://web-design-weekly.com/" target="_blank" rel="external nofollow noreferrer noopener">http://web-design-weekly.com/</a></td><td>设计、技术、技巧、工具聚合</td></tr><tr><td>UX Weekly</td><td><a href="http://uxwkly.com/" target="_blank" rel="external nofollow noreferrer noopener">http://uxwkly.com/</a></td><td>用户体验、网页设计推送</td></tr><tr><td>Web Tools Weekly</td><td><a href="http://webtoolsweekly.com/" target="_blank" rel="external nofollow noreferrer noopener">http://webtoolsweekly.com/</a></td><td>Js，工具推送</td></tr><tr><td>RESPONSIVE DESIGN NEWSLETTER</td><td><a href="http://responsivedesignweekly.com/" target="_blank" rel="external nofollow noreferrer noopener">http://responsivedesignweekly.com/</a></td><td>每周推送一次响应式设计相关</td></tr><tr><td>Tutorialzine</td><td><a href="http://tutorialzine.com/" target="_blank" rel="external nofollow noreferrer noopener">http://tutorialzine.com/</a></td><td>精品教程和资源推送</td></tr><tr><td>Sidebar</td><td><a href="http://sidebar.io/" target="_blank" rel="external nofollow noreferrer noopener">http://sidebar.io/</a></td><td>每天、每半周、每周推送5条设计相关</td></tr><tr><td>The Hacker News Newsletter</td><td><a href="http://www.hackernewsletter.com/" target="_blank" rel="external nofollow noreferrer noopener">http://www.hackernewsletter.com/</a></td><td>HN 每周精选</td></tr><tr><td>Design News</td><td><a href="https://news.layervault.com/" target="_blank" rel="external nofollow noreferrer noopener">https://news.layervault.com/</a></td><td>F2类资讯聚合</td></tr><tr><td>Css Animations</td><td><a href="http://cssanimation.rocks/" target="_blank" rel="external nofollow noreferrer noopener">http://cssanimation.rocks/</a></td><td>关于CSS动画的订阅</td></tr><tr><td>HACKDESIGN</td><td><a href="http://hackdesign.org/" target="_blank" rel="external nofollow noreferrer noopener">http://hackdesign.org/</a></td><td>每周发布一个设计类课程</td></tr><tr><td><strong>中文推送</strong></td><td></td><td></td></tr><tr><td>稀土:掘金</td><td><a href="http://gold.xitu.io/" target="_blank" rel="external nofollow noreferrer noopener">http://gold.xitu.io/</a></td><td>国内十分用心的开发者技术分享、交流平台</td></tr><tr><td>SegmentFault精选</td><td><a href="http://segmentfault.com/" target="_blank" rel="external nofollow noreferrer noopener">http://segmentfault.com/</a></td><td>国内开发者技术问答社区每周精选问答</td></tr><tr><td>FE Weekly</td><td><a href="http://www.feweekly.com/" target="_blank" rel="external nofollow noreferrer noopener">http://www.feweekly.com/</a></td><td>每周一次，内容主要是英文的，不过有中文导读</td></tr><tr><td>EchoJs_News</td><td><a href="http://www.echojs.com/" target="_blank" rel="external nofollow noreferrer noopener">http://www.echojs.com/</a></td><td>每天推送若干好文，都是英文的，JS技术类</td></tr><tr><td>碼天狗週刊</td><td><a href="http://weekly.codetengu.com/" target="_blank" rel="external nofollow noreferrer noopener">http://weekly.codetengu.com/</a></td><td>台湾的，一份開發者導向的IT 技術週刊，適合所有患有資訊焦慮症、氣血循環不順以及性受挫的軟體工程師們。</td></tr><tr><td>前端资源分享 半月刊</td><td><a href="http://www.hacke2.cn/monthly/" target="_blank" rel="external nofollow noreferrer noopener">http://www.hacke2.cn/monthly/</a></td><td>每半月发布最新高质量的前端资源</td></tr></tbody></table><h4 id="专业博客"><a href="#专业博客" class="headerlink" title="专业博客"></a>专业博客</h4><p>注:此处<code>活跃度</code>为博客更新频率，<code>原创度</code>指的是作者原创或者翻译的文章所占博文比例。请尊重原创，大量转载其他网站资讯的网站和聚合类网站不做推荐。</p><h6 id="中文博客"><a href="#中文博客" class="headerlink" title="中文博客"></a>中文博客</h6><table><thead><tr><th>名称</th><th>活跃度</th><th>原创度</th><th>维护者</th><th>其他</th></tr></thead><tbody><tr><td><a href="http://www.w3cplus.com/" target="_blank" rel="external nofollow noreferrer noopener">W3Cplus</a></td><td>★★★★★</td><td>★★★★★</td><td>携程 @大漠</td><td>国内最优秀的前端博客，原创居多</td></tr><tr><td><a href="http://www.w3cfuns.com/" target="_blank" rel="external nofollow noreferrer noopener">W3Cfuns</a></td><td>★★★★★</td><td>★★★★☆</td><td><a href="http://www.w3cfuns.com/misc.php?mod=faq&amp;action=faq&amp;id=1" target="_blank" rel="external nofollow noreferrer noopener">#</a></td><td>专注于web前端开发行业的综合性门户网站</td></tr><tr><td><a href="http://www.qianduan.net/" target="_blank" rel="external nofollow noreferrer noopener">前端观察</a></td><td>★★★★☆</td><td>★★★★☆</td><td>腾讯 ISUX @神飞</td><td>曾经最优秀，最近更新不频繁了</td></tr><tr><td><a href="http://www.alloyteam.com/" target="_blank" rel="external nofollow noreferrer noopener">腾讯web前端 AlloyTeam 团队</a></td><td>★★★★</td><td>★★★★</td><td><a href="http://t.qq.com/AlloyTeam" target="_blank" rel="external nofollow noreferrer noopener">@腾讯AlloyTeam</a></td><td>来自于腾讯SNG(社交网络事业群)</td></tr><tr><td><a href="http://www.zhangxinxu.com/wordpress/" target="_blank" rel="external nofollow noreferrer noopener">张鑫旭-鑫空间-鑫生活</a></td><td>★★★★☆</td><td>★★★★★</td><td>张鑫旭</td><td>重构很厉害，不少经典文章经验</td></tr><tr><td><a href="http://www.36ria.com/" target="_blank" rel="external nofollow noreferrer noopener">ria之家</a></td><td>★★★★☆</td><td>★★★★☆</td><td>淘宝 @明河</td><td>#</td></tr><tr><td><a href="http://www.daqianduan.com/" target="_blank" rel="external nofollow noreferrer noopener">大前端</a></td><td>★★★★☆</td><td>★★★★☆</td><td><a href="http://www.cssforest.org/blog/index.php?s=about" target="_blank" rel="external nofollow noreferrer noopener">#</a></td><td>#</td></tr><tr><td><a href="http://www.cssforest.org/blog/" target="_blank" rel="external nofollow noreferrer noopener">CSS森林</a></td><td>★★★★☆</td><td>★★★★☆</td><td><a href="http://www.cssforest.org/blog/index.php?s=about" target="_blank" rel="external nofollow noreferrer noopener">关于</a></td><td>#</td></tr><tr><td><a href="http://www.shejidaren.com/" target="_blank" rel="external nofollow noreferrer noopener">设计达人</a></td><td>★★★★☆</td><td>★★★☆☆</td><td><a href="http://www.cssforest.org/blog/index.php?s=about" target="_blank" rel="external nofollow noreferrer noopener">#</a></td><td>更新较频繁，但转载也较多</td></tr><tr><td><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external nofollow noreferrer noopener">阮一峰博客</a></td><td>★★★★☆</td><td>★★★☆☆</td><td><a href="http://www.ruanyifeng.com/about.html" target="_blank" rel="external nofollow noreferrer noopener">#</a></td><td>牛人一个</td></tr><tr><td><a href="http://beforweb.com/" target="_blank" rel="external nofollow noreferrer noopener">Be For Web - 为网而生 - 原创译文博客</a></td><td>★★★★☆</td><td>★★★★☆</td><td><a href="http://weibo.com/c7210" target="_blank" rel="external nofollow noreferrer noopener">@C7210</a></td><td>关注移动应用及互联网产品、用户体验设计、前端开发</td></tr></tbody></table><p>######国外博客<br>|名称 |活跃度 | 原创度 | 维护者|其他|<br>| —– | —– | —— |—– |——|<br>|<a href="http://www.smashingmagazine.com/" target="_blank" rel="external nofollow noreferrer noopener">Smashing Magazine</a>|★★★★★|★★★★★| # |业界权威，web 设计很赞|<br>|<a href="http://hub.tutsplus.com/" target="_blank" rel="external nofollow noreferrer noopener">Tuts</a>|★★★★★|★★★★★| - |国外知名开发者网站|<br>|<a href="http://www.developerdrive.com/" target="_blank" rel="external nofollow noreferrer noopener">DeveloperDrive</a>|★★★★★|★★★★★| - |优质前端技术信息|<br>|<a href="http://css-tricks.com/" target="_blank" rel="external nofollow noreferrer noopener">CSS-TRICKS</a>|★★★★★|★★★★★| Chris Coyier |左边这位是大神|<br>|<a href="http://webdesignerwall.com/" target="_blank" rel="external nofollow noreferrer noopener">Web Designer Wall</a>|★★★★★|★★★★★| Nick La.|优质 Html5,CSS3等教程|<br>|<a href="http://tutorialzine.com/" target="_blank" rel="external nofollow noreferrer noopener">Tutorialzine</a>|★★★★★|★★★★★| #|大量 web 教程和资源|<br>|<a href="http://inspectelement.com/" target="_blank" rel="external nofollow noreferrer noopener">Inspect Element</a>|★★★★★|★★★★★| #|CSS,wordpress 相关教程挺多|<br>|<a href="http://tympanus.net/codrops/" target="_blank" rel="external nofollow noreferrer noopener">Codrops</a>|★★★★★|★★★★★| #|设计、交互、CSS|<br>|<a href="http://www.onerutter.com/" target="_blank" rel="external nofollow noreferrer noopener">Jake Rutter</a>|★★★★★|★★★★★| Jake Rutter|Jquery 作者，不解释了|<br>|<a href="http://www.paulirish.com/" target="_blank" rel="external nofollow noreferrer noopener">Paul Irish</a>|★★★★★|★★★★★| Paul Irish|大神,Google Chrome团队,Yeoman|<br>|<a href="http://krasimirtsonev.com/blog" target="_blank" rel="external nofollow noreferrer noopener">Krasimir Tsonev</a>|★★★★★|★★★★★| Krasimir Tsonev|html5,ccs3,javascript|<br>|<a href="http://www.nczonline.net/" target="_blank" rel="external nofollow noreferrer noopener">NCZOnline</a>|★★★★★|★★★★★| Nicholas C. Zakas |html5,ccs3,javascript|<br>|<a href="http://www.html5rocks.com/en/" target="_blank" rel="external nofollow noreferrer noopener">HTML5 Rocks</a>|★★★★★|★★★★★| # |html5权威网站|<br>|<a href="http://alistapart.com/" target="_blank" rel="external nofollow noreferrer noopener">A List Apart</a>|★★★★★|★★★★★| # |可以改变世界的文章|<br>|<a href="http://hakim.se/" target="_blank" rel="external nofollow noreferrer noopener">hakim</a>|★★★★★|★★★★★| HAKIM EL HATTAB|ccs3,javascript|<br>|<a href="http://dailyjs.com/" target="_blank" rel="external nofollow noreferrer noopener">DailyJS</a> | ★★★★★ | ★★★★★ | # | javascript |</p><h5 id="活跃微博"><a href="#活跃微博" class="headerlink" title="活跃微博"></a>活跃微博</h5><table><thead><tr><th>ID</th><th>公司</th><th>简介</th></tr></thead><tbody><tr><td><a href="http://weibo.com/xitucircle" target="_blank" rel="external nofollow noreferrer noopener">@稀土圈</a></td><td>#</td><td>强烈推荐，分享一些技术文章和Github项目</td></tr><tr><td><a href="http://weibo.com/w3cchina" target="_blank" rel="external nofollow noreferrer noopener">@w3c中国</a></td><td>#</td><td>万维网联盟中国办事处官方微博</td></tr><tr><td><a href="http://weibo.com/javascriptdev" target="_blank" rel="external nofollow noreferrer noopener">@TheFrontEnd</a></td><td>#</td><td>JavaScript技术资讯、新闻、教程、深度文章。</td></tr><tr><td><a href="http://weibo.com/fekb" target="_blank" rel="external nofollow noreferrer noopener">@前端快爆</a></td><td>阿里巴巴</td><td>有HTML5、CSS3、JS</td></tr><tr><td><a href="http://e.weibo.com/html5cn" target="_blank" rel="external nofollow noreferrer noopener">@HTML5中国</a></td><td>#</td><td>中国<a href="http://www.html5cn.org官方微博" target="_blank" rel="external nofollow noreferrer noopener">www.html5cn.org官方微博</a></td></tr></tbody></table><h4 id="开发者博客"><a href="#开发者博客" class="headerlink" title="开发者博客"></a>开发者博客</h4><p>微博微信流行后，明显感觉到写博客的人还是越来越少了，下面推荐的这些开发者属于在网上比较活跃的，或者博客积累了大量优质资源的。</p><h6 id="国内开发者"><a href="#国内开发者" class="headerlink" title="国内开发者"></a>国内开发者</h6><p>国内开发者一块欢迎大家 <code>Fork</code>提交推荐，最好能推荐一些在前端界较活跃的的开发者。</p><table><thead><tr><th>ID</th><th>博客</th><th>微博</th><th>Github</th><th>Twitter</th><th>公司</th><th>关键字</th></tr></thead><tbody><tr><td>阮一峰</td><td><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external nofollow noreferrer noopener">阮一峰博客</a></td><td><a href="http://weibo.com/ruanyf" target="_blank" rel="external nofollow noreferrer noopener">@ruanyf</a></td><td>#</td><td><a href="https://twitter.com/ruanyf" target="_blank" rel="external nofollow noreferrer noopener">@ruanyf</a></td><td>上海金融学院国际金融学院</td><td>教师，博客写作人，翻译人，《黑客与画家》的译者</td></tr><tr><td>老赵</td><td><a href="http://blog.zhaojie.me/" target="_blank" rel="external nofollow noreferrer noopener">http://blog.zhaojie.me/</a></td><td><a href="http://weibo.com/jeffz" target="_blank" rel="external nofollow noreferrer noopener">@老赵</a></td><td>#</td><td><a href>#</a></td><td>摩根大通（香港）</td><td>资深码农</td></tr><tr><td>玉伯</td><td><a href="http://lifesinger.wordpress.com/" target="_blank" rel="external nofollow noreferrer noopener">岁月如歌</a></td><td><a href="http://weibo.com/lifesinger" target="_blank" rel="external nofollow noreferrer noopener">@玉伯也叫射雕</a></td><td><a href="https://github.com/lifesinger" target="_blank" rel="external nofollow noreferrer noopener">@lifesinger</a></td><td><a href="https://twitter.com/lifesinger" target="_blank" rel="external nofollow noreferrer noopener">@lifesinger</a></td><td>支付宝</td><td>大牛</td></tr><tr><td>kejun</td><td><a href="http://hikejun.com/" target="_blank" rel="external nofollow noreferrer noopener">http://hikejun.com/</a></td><td><a href="http://weibo.com/kejunz" target="_blank" rel="external nofollow noreferrer noopener">@kejunz</a></td><td><a href="https://github.com/kejun" target="_blank" rel="external nofollow noreferrer noopener">@kejunz</a></td><td>#</td><td>豆瓣</td><td>前端大神</td></tr><tr><td>寒冬winter</td><td><a href="http://winter-cn.cnblogs.com/" target="_blank" rel="external nofollow noreferrer noopener">winter-cn</a></td><td><a href="http://weibo.com/wintercn" target="_blank" rel="external nofollow noreferrer noopener">@寒冬winter</a></td><td>#</td><td>#</td><td>#</td><td>#</td></tr><tr><td>左耳朵耗子</td><td><a href="http://coolshell.cn/" target="_blank" rel="external nofollow noreferrer noopener">酷壳</a></td><td><a href="http://weibo.com/haoel" target="_blank" rel="external nofollow noreferrer noopener">@左耳朵耗子</a></td><td>#</td><td><a href="https://twitter.com/haoel" target="_blank" rel="external nofollow noreferrer noopener">@haoel</a></td><td>淘宝</td><td>#</td></tr><tr><td>fool2fish</td><td>#</td><td><a href="http://weibo.com/fool2fish" target="_blank" rel="external nofollow noreferrer noopener">@fool2fish</a></td><td>#</td><td>#</td><td>支付宝</td><td>#</td></tr><tr><td>朴灵</td><td><a href="http://html5ify.com/" target="_blank" rel="external nofollow noreferrer noopener">Html5fiy</a></td><td><a href="http://weibo.com/shyvo" target="_blank" rel="external nofollow noreferrer noopener">@朴灵</a></td><td><a href="https://github.com/JacksonTian" target="_blank" rel="external nofollow noreferrer noopener">JacksonTian</a></td><td>#</td><td>阿里巴巴</td><td>《深入浅出Node.js》作者,大牛</td></tr><tr><td>Cat Chen</td><td><a href="http://catchen.biz/home.zh-CN.html" target="_blank" rel="external nofollow noreferrer noopener">陈广琛</a></td><td><a href="http://weibo.com/u/1640352230" target="_blank" rel="external nofollow noreferrer noopener">@CatChen</a></td><td><a href="https://github.com/CatChen" target="_blank" rel="external nofollow noreferrer noopener">@CatChen</a></td><td><a href="https://twitter.com/CatChen" target="_blank" rel="external nofollow noreferrer noopener">@CatChen</a></td><td>Facebook</td><td>大牛</td></tr><tr><td>BYVod</td><td><a href="https://www.byvoid.com/" target="_blank" rel="external nofollow noreferrer noopener">Beyond the Void</a></td><td><a href="http://weibo.com/byvoid" target="_blank" rel="external nofollow noreferrer noopener">@BYVoid</a></td><td><a href="https://github.com/BYVoid" target="_blank" rel="external nofollow noreferrer noopener">@byvoid</a></td><td><a href="https://twitter.com/byvoid" target="_blank" rel="external nofollow noreferrer noopener">@BYVoid</a></td><td>Facebook 英国</td><td>《Node.js 开发指南》作者,大牛</td></tr><tr><td>郭宇</td><td><a href="http://blog.guoyu.me/" target="_blank" rel="external nofollow noreferrer noopener">Einmal ist keinmal</a></td><td><a href="http://weibo.com/137601206" target="_blank" rel="external nofollow noreferrer noopener">@郭宇</a></td><td><a href="https://github.com/turingou" target="_blank" rel="external nofollow noreferrer noopener">@turingou</a></td><td><a href="https://twitter.com/turingou" target="_blank" rel="external nofollow noreferrer noopener">@turingou</a></td><td>糗事百科,原支付宝</td><td>Node.js</td></tr><tr><td>勾三股四</td><td>#</td><td><a href="http://weibo.com/mx006" target="_blank" rel="external nofollow noreferrer noopener">@勾三股四</a></td><td>#</td><td>#</td><td>淘宝</td><td>#</td></tr><tr><td>cnberg</td><td><a href="http://cnberg.com" target="_blank" rel="external nofollow noreferrer noopener">冰山一角</a></td><td><a href="http://weibo.com/berg" target="_blank" rel="external nofollow noreferrer noopener">@berg</a></td><td>@cnberg</td><td><a href>@cnberg</a></td><td>百度</td><td>骑行</td></tr><tr><td>大猫</td><td><a href="http://bigc.at" target="_blank" rel="external nofollow noreferrer noopener">意淫笔记</a></td><td><a href="http://weibo.com/daemao" target="_blank" rel="external nofollow noreferrer noopener">@daemao</a></td><td><a href="https://github.com/Damao" target="_blank" rel="external nofollow noreferrer noopener">@Damao</a></td><td><a href="https://twitter.com/13igcat" target="_blank" rel="external nofollow noreferrer noopener">@13igcat</a></td><td>腾讯</td><td><a href="http://www.zhihu.com/people/13igcat" target="_blank" rel="external nofollow noreferrer noopener">知乎</a></td></tr><tr><td>hzlzh</td><td><a href="https://zlz.im" target="_blank" rel="external nofollow noreferrer noopener">自力博客</a></td><td><a href="http://weibo.com/hzlzh" target="_blank" rel="external nofollow noreferrer noopener">@hzlzh</a></td><td><a href="http://github.com/hzlzh" target="_blank" rel="external nofollow noreferrer noopener">@hzlzh</a></td><td><a href="http://twitter.com/hzlzh" target="_blank" rel="external nofollow noreferrer noopener">@hzlzh</a></td><td>腾讯</td><td>前端开发</td></tr><tr><td>C7210</td><td>beforweb.com/</td><td><a href="http://weibo.com/c7210" target="_blank" rel="external nofollow noreferrer noopener">@C7210</a></td><td><a href="http://twittercom/hzlzh" target="_blank" rel="external nofollow noreferrer noopener">@C7210</a></td><td><a href="http://github.com/hzlzh" target="_blank" rel="external nofollow noreferrer noopener">@C7210</a></td><td>#</td><td>UX、交互设计师、视觉与前端</td></tr><tr><td>kejun</td><td><a href="http://hikejun.com/" target="_blank" rel="external nofollow noreferrer noopener">http://hikejun.com/</a></td><td><a href="http://weibo.com/kejun" target="_blank" rel="external nofollow noreferrer noopener">#</a></td><td><a href="http://twittercom/kejun" target="_blank" rel="external nofollow noreferrer noopener">#</a></td><td><a href="http://github.com/hzlzh" target="_blank" rel="external nofollow noreferrer noopener">#</a></td><td>腾讯</td><td>前端开发</td></tr><tr><td>张鑫旭</td><td><a href="http://www.zhangxinxu.com/wordpress/" target="_blank" rel="external nofollow noreferrer noopener">张鑫旭博客</a></td><td><a href="http://weibo.com/zhangxinxu" target="_blank" rel="external nofollow noreferrer noopener">@张鑫旭</a></td><td><a href="https://github.com/zhangxinxu" target="_blank" rel="external nofollow noreferrer noopener">@zhangxinxu</a></td><td><a href="https://twitter.com/zhangxinxu" target="_blank" rel="external nofollow noreferrer noopener">@zhangxinxu</a></td><td>腾讯 上海 ISUX</td><td>前端开发</td></tr><tr><td>lucifr</td><td><a href="http://lucifr.com/" target="_blank" rel="external nofollow noreferrer noopener">http://lucifr.com/</a></td><td><a href="http://weibo.com/lucifr" target="_blank" rel="external nofollow noreferrer noopener">@lucifr</a></td><td><a href="http://twittercom/lucifr" target="_blank" rel="external nofollow noreferrer noopener">@lucifr</a></td><td><a href="http://github.com/lucifr" target="_blank" rel="external nofollow noreferrer noopener">@lucifr</a></td><td>#</td><td>Mac,ios</td></tr><tr><td>smallni</td><td><a href="http://www.smallni.com/" target="_blank" rel="external nofollow noreferrer noopener">http://www.smallni.com/</a></td><td><a href="http://weibo.com/hzlzh" target="_blank" rel="external nofollow noreferrer noopener">#</a></td><td><a href="https://twitter.com/smallniding/" target="_blank" rel="external nofollow noreferrer noopener">@Smallni</a></td><td><a href="http://github.com/hzlzh" target="_blank" rel="external nofollow noreferrer noopener">#</a></td><td>腾讯</td><td>前端开发</td></tr><tr><td>TQ</td><td><a href="http://targetkiller.net/" target="_blank" rel="external nofollow noreferrer noopener">http://targetkiller.net/</a></td><td><a href="http://weibo.com/targetkiller" target="_blank" rel="external nofollow noreferrer noopener">@Piser-TQ</a></td><td><a href="https://twitter.com/tqtan/" target="_blank" rel="external nofollow noreferrer noopener">@tqtan</a></td><td><a href="https://github.com/targetkiller" target="_blank" rel="external nofollow noreferrer noopener">@targetkiller</a></td><td>腾讯 ISUX</td><td>网页重构</td></tr><tr><td>LOO2K</td><td><a href="http://loo2k.com/blog/" target="_blank" rel="external nofollow noreferrer noopener">LOO2K</a></td><td><a href="http://weibo.com/loo2k" target="_blank" rel="external nofollow noreferrer noopener">@LOO2K</a></td><td><a href="https://github.com/loo2k" target="_blank" rel="external nofollow noreferrer noopener">LOO2K</a></td><td><a href="https://twitter.com/loo2k/" target="_blank" rel="external nofollow noreferrer noopener">LOO2K</a></td><td>墨筹网</td><td>少年才俊</td></tr><tr><td>qiqiboy</td><td><a href="http://www.qiqiboy.com/" target="_blank" rel="external nofollow noreferrer noopener">qiqiboy</a></td><td><a href="http://weibo.com/qiqiboy" target="_blank" rel="external nofollow noreferrer noopener">@qiqiboy</a></td><td>#</td><td>#</td><td>金山网络 UX</td><td>吐槽清理大师开发者</td></tr><tr><td>foru17</td><td><a href="http://luolei.org" target="_blank" rel="external nofollow noreferrer noopener">罗磊的独立博客</a></td><td><a href="http://weibo.com/foru17" target="_blank" rel="external nofollow noreferrer noopener">@罗罗磊磊</a></td><td><a href="https://github.com/foru17" target="_blank" rel="external nofollow noreferrer noopener">@foru17</a></td><td><a href="https://twitter.com/foru17" target="_blank" rel="external nofollow noreferrer noopener">@foru17</a></td><td></td><td>打酱油的</td></tr><tr><td>周爱民</td><td><a href="http://blog.csdn.net/aimingoo/" target="_blank" rel="external nofollow noreferrer noopener">aimingoo专栏</a></td><td>#</td><td>#</td><td>#</td><td>支付宝</td><td>JavaScript语言精髓与编程实践作者</td></tr><tr><td>hax</td><td><a href="http://hax.iteye.com/" target="_blank" rel="external nofollow noreferrer noopener">hax的技术部落格</a></td><td>#</td><td>#</td><td>#</td><td>#</td><td>前端大牛</td></tr><tr><td>三生石上</td><td><a href="http://www.cnblogs.com/sanshi" target="_blank" rel="external nofollow noreferrer noopener">三生石上</a></td><td>#</td><td>#</td><td>#</td><td>#</td><td>js秘密花园译者</td></tr><tr><td>司徒正美</td><td><a href="http://www.cnblogs.com/rubylouvre" target="_blank" rel="external nofollow noreferrer noopener">Ruby’s Louvre</a></td><td>#</td><td>#</td><td>#</td><td>#</td><td>前端开发</td></tr><tr><td>叶小钗</td><td><a href="http://www.cnblogs.com/yexiaochai" target="_blank" rel="external nofollow noreferrer noopener">叶小钗</a></td><td>#</td><td>#</td><td>#</td><td>#</td><td>前端开发</td></tr><tr><td>聂微东</td><td><a href="http://www.cnblogs.com/Darren_code/" target="_blank" rel="external nofollow noreferrer noopener">Darren</a></td><td>#</td><td>#</td><td>#</td><td>百度移动云</td><td>前端开发</td></tr><tr><td>当耐特</td><td><a href="http://www.cnblogs.com/iamzhanglei/" target="_blank" rel="external nofollow noreferrer noopener">iamzhanglei</a></td><td>#</td><td>#</td><td>#</td><td>#</td><td>HTML5实验室作者</td></tr><tr><td>教主</td><td><a href="http://www.cnblogs.com/_franky" target="_blank" rel="external nofollow noreferrer noopener">_frank</a></td><td>#</td><td>#</td><td>#</td><td>#</td><td>又一牛</td></tr><tr><td>typeof</td><td><a href="http://typeof.net/" target="_blank" rel="external nofollow noreferrer noopener">typeof</a></td><td>#</td><td>#</td><td>#</td><td>#</td><td>又一牛</td></tr><tr><td>Gray Zhang</td><td><a href="http://www.cnblogs.com/GrayZhang" target="_blank" rel="external nofollow noreferrer noopener">Gray Zhang</a></td><td>#</td><td>#</td><td>#</td><td>#</td><td>百度一牛</td></tr><tr><td>李松峰</td><td><a href="http://www.cn-cuckoo.com" target="_blank" rel="external nofollow noreferrer noopener">为之漫笔</a></td><td>#</td><td>#</td><td>#</td><td>#</td><td>高程2等书的译者</td></tr><tr><td>小鱼</td><td><a href="http://sofish.de/" target="_blank" rel="external nofollow noreferrer noopener">sofish</a></td><td><a href="http://weibo.com/sofish" target="_blank" rel="external nofollow noreferrer noopener">@sofish</a></td><td>#</td><td>#</td><td>#</td><td>饿了么前端Leader</td></tr><tr><td>vilic</td><td><a href="http://vilic.info/" target="_blank" rel="external nofollow noreferrer noopener">vilic</a></td><td>#</td><td>#</td><td>#</td><td>#</td><td>年轻一牛</td></tr><tr><td>彬Go</td><td><a href="http://blog.bingo929.com/" target="_blank" rel="external nofollow noreferrer noopener">彬Go</a></td><td>#</td><td>#</td><td>#</td><td>#</td><td>人人网一牛</td></tr><tr><td>PuterJam</td><td><a href="http://www.pjhome.net" target="_blank" rel="external nofollow noreferrer noopener">PuterJam’s Blog</a></td><td>#</td><td>#</td><td>#</td><td>#</td><td>腾讯一牛</td></tr><tr><td>css森林</td><td><a href="http://www.cssforest.org" target="_blank" rel="external nofollow noreferrer noopener">cssforest</a></td><td>#</td><td>#</td><td>#</td><td>#</td><td>前端博客</td></tr><tr><td>99css</td><td><a href="http://www.99css.com/" target="_blank" rel="external nofollow noreferrer noopener">99css</a></td><td><a href="http://weibo.com/ytzong" target="_blank" rel="external nofollow noreferrer noopener">@ytzong</a></td><td>#</td><td>#</td><td>#</td><td>腾讯一牛</td></tr><tr><td>秦歌</td><td><a href="http://dancewithnet.com/" target="_blank" rel="external nofollow noreferrer noopener">Kaven</a></td><td>#</td><td><a href="http://twitter.com/kavenyan" target="_blank" rel="external nofollow noreferrer noopener">@kavenyan</a></td><td>#</td><td>#</td><td>js语言精粹译者</td></tr><tr><td>linxz</td><td><a href="http://www.linxz.de/" target="_blank" rel="external nofollow noreferrer noopener">linxz</a></td><td>#</td><td>#</td><td>#</td><td>#</td><td>css那些事儿的作者</td></tr><tr><td>米随随</td><td><a href="http://s5s5.me/" target="_blank" rel="external nofollow noreferrer noopener">米随随</a></td><td>#</td><td>#</td><td>#</td><td>#</td><td>腾讯ISUX 一牛</td></tr><tr><td>飘飘</td><td><a href="http://pufen.net/" target="_blank" rel="external nofollow noreferrer noopener">飘飘</a></td><td>#</td><td>#</td><td>#</td><td>#</td><td>腾讯一牛</td></tr><tr><td>Along</td><td><a href="http://jinlong.github.io/" target="_blank" rel="external nofollow noreferrer noopener">Along’s Blog</a></td><td><a href="http://weibo.com/newwave" target="_blank" rel="external nofollow noreferrer noopener">@newwave</a></td><td>#</td><td>#</td><td>#</td><td>Opera 欧朋一牛</td></tr><tr><td>安记</td><td><a href="http://www.cssha.com/" target="_blank" rel="external nofollow noreferrer noopener">cssha</a></td><td><a href="http://weibo.com/hanan321" target="_blank" rel="external nofollow noreferrer noopener">@hanan321</a></td><td><a href="https://github.com/hanan198501" target="_blank" rel="external nofollow noreferrer noopener">hanan198501</a></td><td>#</td><td>#</td><td>去哪网一牛</td></tr><tr><td>余弦</td><td><a href="http://evilcos.me/" target="_blank" rel="external nofollow noreferrer noopener">EVILCOS</a></td><td><a href="http://weibo.com/evilcos" target="_blank" rel="external nofollow noreferrer noopener">余弦</a></td><td><a href="https://github.com/evilcos" target="_blank" rel="external nofollow noreferrer noopener">evilcos</a></td><td>#</td><td><a href="http://www.knownsec.com/" target="_blank" rel="external nofollow noreferrer noopener">知道创宇</a></td><td>安全（黑客）、架构、团队的各种观点与分享</td></tr><tr><td>汤姆大叔</td><td><a href="http://www.cnblogs.com/TomXu/" target="_blank" rel="external nofollow noreferrer noopener">汤姆大叔的博客</a></td><td>#</td><td>#</td><td>#</td><td>#</td><td>《深入理解Bootstrap》、《JavaScript启示录》、《JavaScript设计模式》等多本前端书籍翻译作者</td></tr><tr><td>屈光宇</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><a href="https://imququ.com/" target="_blank" rel="external nofollow noreferrer noopener">Jerry Qu的小站</a></td><td>[屈光宇</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>](<a href="http://weibo.com/jerryqu" target="_blank" rel="external nofollow noreferrer noopener">http://weibo.com/jerryqu</a>)</td><td>#</td><td>#</td><td>#</td><td>奇虎360前端，对WEB性能研究很深入</td><td></td><td></td></tr></tbody></table><p>####一些社区</p><table><thead><tr><th>名称</th><th>地址</th><th>介绍</th></tr></thead><tbody><tr><td>V2EX</td><td><a href="http://v2ex.com/" target="_blank" rel="external nofollow noreferrer noopener">http://v2ex.com/</a></td><td>小众活跃社区</td></tr><tr><td>知乎</td><td><a href="http://www.zhihu.com/" target="_blank" rel="external nofollow noreferrer noopener">http://www.zhihu.com/</a></td><td>综合问答社区</td></tr><tr><td>前端乱炖</td><td><a href="http://www.html-js.com/" target="_blank" rel="external nofollow noreferrer noopener">http://www.html-js.com/</a></td><td>专业的前端知识平台</td></tr><tr><td>segmentfault</td><td><a href="http://segmentfault.com/" target="_blank" rel="external nofollow noreferrer noopener">http://segmentfault.com/</a></td><td>综合问答社区</td></tr><tr><td>果壳问答</td><td><a href="http://www.guokr.com/ask/pending/" target="_blank" rel="external nofollow noreferrer noopener">http://www.guokr.com/ask/pending/</a></td><td>综合问答社区</td></tr><tr><td>Ruby</td><td><a href="http://ruby-china.org/" target="_blank" rel="external nofollow noreferrer noopener">http://ruby-china.org/</a></td><td>同 V2EX 氛围类似，不局限于Ruby</td></tr><tr><td>Node.js 中文社区</td><td><a href="http://cnodejs.org/" target="_blank" rel="external nofollow noreferrer noopener">http://cnodejs.org/</a></td><td>Node.js 国内最活跃的社区</td></tr><tr><td>Code Wall</td><td><a href="https://coderwall.com/" target="_blank" rel="external nofollow noreferrer noopener">https://coderwall.com/</a></td><td>国外技术社区</td></tr><tr><td>前端乱炖</td><td><a href="http://www.html-js.com/" target="_blank" rel="external nofollow noreferrer noopener">http://www.html-js.com/</a></td><td>国内前端技术社区</td></tr><tr><td>DIV.IO</td><td><a href="http://div.io/" target="_blank" rel="external nofollow noreferrer noopener">http://div.io/</a></td><td>国内前端技术社区</td></tr><tr><td>w3ctech</td><td><a href="http://www.w3ctech.com/" target="_blank" rel="external nofollow noreferrer noopener">http://www.w3ctech.com/</a></td><td>国内前端技术社区，常有一些线下活动发布</td></tr></tbody></table><h5 id="企业官方博客"><a href="#企业官方博客" class="headerlink" title="企业官方博客"></a>企业官方博客</h5><p>在开头我的 Feedly 订阅 opml 文件里比较全面。</p><table><thead><tr><th>名称</th><th>公司</th><th>部门</th><th>活跃度</th><th>简介</th><th>微博</th></tr></thead><tbody><tr><td><a href="http://isux.tencent.com/" target="_blank" rel="external nofollow noreferrer noopener">ISUX 社交用户体验设计</a></td><td>腾讯</td><td>ISUX</td><td>★★★★☆</td><td>负责腾讯的社交网络相关产品的用户体验设计与研究。</td><td>#</td></tr><tr><td><a href="http://cdc.tencent.com/" target="_blank" rel="external nofollow noreferrer noopener">腾讯 CDC</a></td><td>腾讯</td><td>CDC</td><td>★★★★☆</td><td>简介</td><td>#</td></tr><tr><td><a href="http://www.alloyteam.com/" target="_blank" rel="external nofollow noreferrer noopener">腾讯Web前端 Alloy 团队 Blog</a></td><td>腾讯</td><td>SNG</td><td>★★★★☆</td><td>主要负责手机QQ、QQ互联、腾讯Q+、WebQQ项目的团队。</td><td><a href="http://weibo.com/alloyteam" target="_blank" rel="external nofollow noreferrer noopener">alloyteam</a></td></tr><tr><td><a href="http://tid.tenpay.com/" target="_blank" rel="external nofollow noreferrer noopener">TID-财付通设计中心</a></td><td>腾讯</td><td>TID</td><td>★★★★☆</td><td>简介</td><td>#</td></tr><tr><td><a href="http://mxd.tencent.com/" target="_blank" rel="external nofollow noreferrer noopener">腾讯MXD移动互联网设计中心</a></td><td>腾讯</td><td>MXD</td><td>★★★★☆</td><td>简介</td><td><a href="http://e.t.qq.com/tencent_mxd" target="_blank" rel="external nofollow noreferrer noopener">@腾讯MXD</a></td></tr><tr><td><a href="http://fed.renren.com/" target="_blank" rel="external nofollow noreferrer noopener">人人网FED Team</a></td><td>人人网</td><td>FED</td><td>★★★★☆</td><td>简介</td><td>#</td></tr><tr><td><a href="http://udc.weibo.com/" target="_blank" rel="external nofollow noreferrer noopener">微博UDC</a></td><td>新浪</td><td>UDC</td><td>★★★★☆</td><td>简介</td><td><a href="http://weibo.com/sudc" target="_blank" rel="external nofollow noreferrer noopener">@微博UDC设计中心</a></td></tr><tr><td><a href="http://ued.sina.com.cn/" target="_blank" rel="external nofollow noreferrer noopener">新浪UED</a></td><td>新浪</td><td>UED</td><td>★★★★☆</td><td>简介</td><td><a href="http://weibo.com/sudc" target="_blank" rel="external nofollow noreferrer noopener">#</a></td></tr><tr><td><a href="http://uedc.163.com/" target="_blank" rel="external nofollow noreferrer noopener">网易用户体验设计中心</a></td><td>网易</td><td>UED</td><td>★★★★☆</td><td>简介</td><td><a href="http://weibo.com/sudc" target="_blank" rel="external nofollow noreferrer noopener">#</a></td></tr><tr><td><a href="http://www.aliued.cn/" target="_blank" rel="external nofollow noreferrer noopener">阿里巴巴（中国站）用户体验设计部博客</a></td><td>阿里巴巴</td><td>UED</td><td>★★★★☆</td><td>简介</td><td><a href="http://weibo.com/aliued" target="_blank" rel="external nofollow noreferrer noopener">@Alibaba-UED</a></td></tr><tr><td><a href="http://ued.ctrip.com/blog/" target="_blank" rel="external nofollow noreferrer noopener">携程UED-携程旅行前端开发团队</a></td><td>携程网</td><td>UED</td><td>★★★☆☆</td><td>携程UED,携程前端开发团队,UED,Javascript,重构,ux</td><td>#</td></tr><tr><td><a href="http://fex.baidu.com/" target="_blank" rel="external nofollow noreferrer noopener">百度FEX</a></td><td>百度</td><td>FEX</td><td>★★★★☆</td><td>百度前端团队Blog,关注前端技术，还更重视全端及全栈的能力。</td><td>#</td></tr><tr><td><a href="http://ued.taobao.org/blog/" target="_blank" rel="external nofollow noreferrer noopener">淘宝UED</a></td><td>淘宝网</td><td>UED</td><td>★★★★☆</td><td>用户体验、交互设计、视觉设计、前端技术博客</td><td><a href="http://weibo.com/taobaoued" target="_blank" rel="external nofollow noreferrer noopener">@淘宝UED</a></td></tr></tbody></table><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><table><thead><tr><th>名称</th><th>作者</th><th>价格</th><th>出版社</th><th>简评</th></tr></thead><tbody><tr><td><a href="http://book.douban.com/subject/3327829/" target="_blank" rel="external nofollow noreferrer noopener">Web标准设计</a></td><td>刘杰（嗷嗷）</td><td>RMB 60.00</td><td>清华大学出版社</td><td>基础入门</td></tr><tr><td><a href="http://book.douban.com/subject/4914146/" target="_blank" rel="external nofollow noreferrer noopener">大巧不工 : Web前端设计修炼之道</a></td><td>赖定清 / 林坚</td><td>RMB 59.00</td><td>机械工业出版社</td><td>适合入门，了解前端全局</td></tr><tr><td><a href="http://book.douban.com/subject/3132277/" target="_blank" rel="external nofollow noreferrer noopener">高性能网站建设指南:前端工程师技能精髓</a></td><td>Steve Souders</td><td>RMB 35.00</td><td>电子工业出版社</td><td>能从原理层理解各种方法</td></tr><tr><td><a href="http://book.douban.com/subject/4719162/" target="_blank" rel="external nofollow noreferrer noopener">高性能网站建设指南:Web开发者性能优化最佳实践</a></td><td>Steve Souders</td><td>RMB 49.80</td><td>电子工业出版社</td><td>#</td></tr><tr><td><a href="http://book.douban.com/subject/4124141/" target="_blank" rel="external nofollow noreferrer noopener">Web站点优化 : Web站点优化</a></td><td>金</td><td>RMB 55.00</td><td>#</td><td>#</td></tr><tr><td><a href="http://book.douban.com/subject/10789820/" target="_blank" rel="external nofollow noreferrer noopener">Node.js开发指南</a></td><td>郭家寶</td><td>RMB 45.00</td><td>#</td><td>作者很牛</td></tr><tr><td><a href="http://book.douban.com/subject/10546125/" target="_blank" rel="external nofollow noreferrer noopener">JavaScript高级程序设计</a></td><td>Nicholas C. Zakas</td><td>RMB 99.00</td><td>人民邮电出版社</td><td>适合没事就翻翻</td></tr><tr><td><a href="http://book.douban.com/subject/2228378/" target="_blank" rel="external nofollow noreferrer noopener">JavaScript权威指南</a></td><td>弗拉纳根</td><td>RMB 109.00</td><td>机械工业出版社</td><td>犀牛书</td></tr><tr><td><a href="http://book.douban.com/subject/3590768/" target="_blank" rel="external nofollow noreferrer noopener">JavaScript语言精粹</a></td><td>Douglas Crockford</td><td>RMB 35.00</td><td>电子工业出版社</td><td>绝对经典，相信看完后，对Javascript这门语言有了重新认识，原来这个语言是这么的美丽！</td></tr><tr><td><a href="http://book.douban.com/subject/25768396/" target="_blank" rel="external nofollow noreferrer noopener">深入浅出node.js</a></td><td>朴灵</td><td>RMB 69.00</td><td>人民邮电出版社</td><td>一本从前端通往全端的好书</td></tr><tr><td><a href="http://book.douban.com/subject/3137282/" target="_blank" rel="external nofollow noreferrer noopener">CSS开发王</a></td><td>张亚飞</td><td>RMB 49.00</td><td>电子工业出版社</td><td>适合有一定基础后CSS进阶用</td></tr><tr><td><a href="http://book.douban.com/subject/6038371/" target="_blank" rel="external nofollow noreferrer noopener">JavaScript DOM编程艺术</a></td><td>Jeremy Keith /Jeffrey Sambells</td><td>RMB 49.00</td><td>人民邮电出版社</td><td>适合Javascript入门看</td></tr></tbody></table><p>=======</p><p>####线上的一些翻译版好书</p><table><thead><tr><th>书名</th><th>地址</th><th>作者</th><th>译者</th><th>介绍</th></tr></thead><tbody><tr><td>JavaScript秘密花园</td><td><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="external nofollow noreferrer noopener">http://bonsaiden.github.io/JavaScript-Garden/zh/</a></td><td>伊沃·韦特泽尔&amp;张易江</td><td><a href="http://sanshi.me/" target="_blank" rel="external nofollow noreferrer noopener">三生石上</a></td><td>完整书籍，界面美观，有详细demo</td></tr><tr><td>Material Design 中文版</td><td><a href="http://design.1sters.com/" target="_blank" rel="external nofollow noreferrer noopener">http://design.1sters.com/</a></td><td>Google设计手册</td><td>协同翻译</td><td>Google I/O 2014 发布的 Material Design 官方手册的中文翻译</td></tr></tbody></table><h1 id="关于"><a href="#关于" class="headerlink" title="##关于"></a>##关于</h1><p>本 repo 会 不断更新，感谢推荐和分享新资源的朋友。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前端收集&quot;&gt;&lt;a href=&quot;#前端收集&quot; class=&quot;headerlink&quot; title=&quot;前端收集&quot;&gt;&lt;/a&gt;前端收集&lt;/h1&gt;&lt;p&gt;在前端路上摸索前行，在这里分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者。欢迎更新，以下各排名不分先后顺序。&lt;/p&gt;
&lt;p&gt;自己 RSS 长期订阅了一些IT 和技术相关博客，这里是我Feedly 输出的opml，可直接导入一些RSS 阅读器:&lt;br&gt;&lt;a href=&quot;https://github.com/foru17/luolei-dotfiles/blob/master/feedly.opml&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;https://github.com/foru17/luolei-dotfiles/blob/master/feedly.opml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;====&lt;/p&gt;
&lt;h4 id=&quot;前端收集图谱&quot;&gt;&lt;a href=&quot;#前端收集图谱&quot; class=&quot;headerlink&quot; title=&quot;前端收集图谱&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://get-set.cn/front-end-collect/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;前端收集图谱&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;此部分为&lt;a href=&quot;https://github.com/jikeytang&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;@jikeytang &lt;/a&gt;贡献&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clone &lt;a href=&quot;https://github.com/hjzheng/front-end-collect&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;https://github.com/hjzheng/front-end-collect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cd front-end-collect&lt;/li&gt;
&lt;li&gt;bower install&lt;/li&gt;
&lt;li&gt;放入你喜欢的web容器,访问index.html即可&lt;/li&gt;
&lt;li&gt;你也直接可以访问: &lt;a href=&quot;http://get-set.cn/front-end-collect/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;http://get-set.cn/front-end-collect/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持Chrome, Firefox and IE10&amp;amp;11以上浏览器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hjzheng/front-end-collect/master/img/front-end-chart.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Books" scheme="http://notes.seirhsiao.com/categories/Books/"/>
    
    
      <category term="资源" scheme="http://notes.seirhsiao.com/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Rails 风格指南</title>
    <link href="http://notes.seirhsiao.com/posts/e129951/"/>
    <id>http://notes.seirhsiao.com/posts/e129951/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:30:40.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序幕"><a href="#序幕" class="headerlink" title="序幕"></a>序幕</h1><blockquote><p>Role models are important. <br><br>– 机械战警 Alex J. Murphy</p></blockquote><p>这份指南目的于演示一整套 Rails 3 开发的风格惯例及最佳实践。这是一份与由现存社群所驱动的<a href="https://github.com/bbatsov/ruby-style-guide" target="_blank" rel="external nofollow noreferrer noopener">Ruby 编码风格指南</a>互补的指南。</p><p>而本指南中<a href="#testing">测试 Rails 应用</a>小节摆在<a href="#developing">开发 Rails 应用</a>之后，因为我相信<a href="http://en.wikipedia.org/wiki/Behavior_Driven_Development" target="_blank" rel="external nofollow noreferrer noopener">行为驱动开发</a><br>(BDD) 是最佳的软体开发之道。铭记在心吧。</p><p>Rails 是一个坚持己见的框架，而这也是一份坚持己见的指南。在我的心里，我坚信 <a href="https://www.relishapp.com/rspec" target="_blank" rel="external nofollow noreferrer noopener">RSpec</a> 优于 Test::Unit，<a href="http://sass-lang.com/" target="_blank" rel="external nofollow noreferrer noopener">Sass</a> 优于 CSS 以及<br><a href="http://haml-lang.com/" target="_blank" rel="external nofollow noreferrer noopener">Haml</a>，(<a href="http://slim-lang.com/" target="_blank" rel="external nofollow noreferrer noopener">Slim</a>) 优于 Erb。所以不要期望在这里找到 Test::Unit, CSS 及 Erb 的忠告。</p><p>某些忠告仅适用于 Rails 3.1+ 以上版本。</p><p>你可以使用 <a href="https://github.com/TechnoGate/transmuter" target="_blank" rel="external nofollow noreferrer noopener">Transmuter</a> 来产生本指南的一份 PDF 或 HTML 复本。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#-rails-">开发 Rails 应用程序</a><ul><li><a href="#-2">配置</a></li><li><a href="#-3">路由</a></li><li><a href="#-4">控制器</a></li><li><a href="#-5">模型</a></li><li><a href="#-6">迁移</a></li><li><a href="#-7">视图</a></li><li><a href="#-8">国际化</a></li><li><a href="#assets">Assets</a></li><li><a href="#mailers">Mailers</a></li><li><a href="#bundler">Bundler</a></li><li><a href="#-gems">无价的 Gems</a></li><li><a href="#-gems-1">缺陷的 Gems</a></li><li><a href="#-9">管理进程</a></li></ul></li><li><a href="#-rails--1">测试 Rails 应用</a><ul><li><a href="#cucumber">Cucumber</a></li><li><a href="#rspec">RSpec</a></li></ul></li></ul><p>本指南被翻译成下列语言：</p><ul><li><a href="https://github.com/JuanitoFatas/rails-style-guide/blob/master/README.md" target="_blank" rel="external nofollow noreferrer noopener">英文原版</a></li><li><a href="https://github.com/JuanitoFatas/rails-style-guide/blob/master/README-zhTW.md" target="_blank" rel="external nofollow noreferrer noopener">繁體中文</a><a id="more"></a><h1 id="开发-Rails-应用程序"><a href="#开发-Rails-应用程序" class="headerlink" title="开发 Rails 应用程序"></a>开发 Rails 应用程序</h1></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li><p>把惯用的初始化代码放在 <code>config/initializers</code>。 在 initializers 内的代码于应用启动时执行。</p></li><li><p>每一个 gem 相关的初始化代码应当使用同样的名称，放在不同的文件里，如： <code>carrierwave.rb</code>, <code>active_admin.rb</code>, 等等。</p></li><li><p>相应调整配置开发、测试及生产环境（在 <code>config/environments/</code> 下对应的文件）</p><ul><li><p>添加需要预编译的额外静态资源文件（如果有的话）：</p><pre><code><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/environments/production.rb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预编译额外的静态资源文件(application.js, application.css, 以及所有已经被加入的非 JS 或 CSS 的文件)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">config.assets.precompile += <span class="string">%w( rails_admin/rails_admin.css rails_admin/rails_admin.js )</span></span></pre></td></tr></tbody></table></figure></code></pre></li></ul></li><li><p>将所有环境皆通用的配置档放在 <code>config/application.rb</code> 文件。</p></li><li><p>构建一个与生产环境(production enviroment)相似的，一个额外的 <code>staging</code> 环境。</p></li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ul><li><p>当你需要加入一个或多个动作至一个 RESTful 资源时（你真的需要吗？），使用 <code>member</code> and <code>collection</code> 路由。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">get <span class="string">'subscriptions/:id/unsubscribe'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">resources <span class="symbol">:subscriptions</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">resources <span class="symbol">:subscriptions</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  get <span class="string">'unsubscribe'</span>, <span class="symbol">on:</span> <span class="symbol">:member</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">get <span class="string">'photos/search'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">resources <span class="symbol">:photos</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">resources <span class="symbol">:photos</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  get <span class="string">'search'</span>, <span class="symbol">on:</span> <span class="symbol">:collection</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>若你需要定义多个 <code>member/collection</code> 路由时，使用替代的区块语法(block syntax)。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">resources <span class="symbol">:subscriptions</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  member <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    get <span class="string">'unsubscribe'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 更多路由</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">resources <span class="symbol">:photos</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  collection <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    get <span class="string">'search'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 更多路由</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>使用嵌套路由(nested routes)来更佳地表达与 ActiveRecord 模型的关系。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> &lt; ActiveRecord::Base</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  has_many <span class="symbol">:comments</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comments</span> &lt; ActiveRecord::Base</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  belongs_to <span class="symbol">:post</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># routes.rb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">resources <span class="symbol">:posts</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  resources <span class="symbol">:comments</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>使用命名空间路由来群组相关的行为。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">namespace <span class="symbol">:admin</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># Directs /admin/products/* to Admin::ProductsController</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># (app/controllers/admin/products_controller.rb)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  resources <span class="symbol">:products</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>不要在控制器里使用留给后人般的疯狂路由(legacy wild controller route)。这种路由会让每个控制器的动作透过 GET 请求存取。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 非常差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">match <span class="string">':controller(/:action(/:id(.:format)))'</span></span></pre></td></tr></tbody></table></figure></li></ul><h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><ul><li>让你的控制器保持苗条 ― 它们应该只替视图层取出数据且不包含任何业务逻辑（所有业务逻辑应当放在模型里）。</li><li>每个控制器的行动应当（理想上）只调用一个除了初始的 find 或 new 方法。</li><li>控制器与视图之间共享不超过两个实例变量(instance variable)。</li></ul><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><ul><li><p>自由地引入不是 ActiveRecord 的类别吧。</p></li><li><p>替模型命名有意义（但简短）且不带缩写的名字。</p></li><li><p>如果你需要模型有著 ActiveRecord 行为的对象，比方说验证这一块，使用 <a href="https://github.com/cgriego/active_attr" target="_blank" rel="external nofollow noreferrer noopener">ActiveAttr</a> gem。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">include</span> ActiveAttr::Model</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  attribute <span class="symbol">:name</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  attribute <span class="symbol">:email</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  attribute <span class="symbol">:content</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  attribute <span class="symbol">:priority</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  attr_accessible <span class="symbol">:name</span>, <span class="symbol">:email</span>, <span class="symbol">:content</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  validates_presence_of <span class="symbol">:name</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  validates_format_of <span class="symbol">:email</span>, <span class="symbol">:with</span> =&gt; <span class="regexp">/\A[-a-z0-9_+\.]+\@([-a-z0-9]+\.)+[a-z0-9]{2,4}\z/i</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  validates_length_of <span class="symbol">:content</span>, <span class="symbol">:maximum</span> =&gt; <span class="number">500</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure><p>  更完整的示例，参考 <a href="http://railscasts.com/episodes/326-activeattr" target="_blank" rel="external nofollow noreferrer noopener">RailsCast on the subject</a>。</p></li></ul><h3 id="ActiveRecord"><a href="#ActiveRecord" class="headerlink" title="ActiveRecord"></a>ActiveRecord</h3><ul><li><p>避免改动缺省的 ActiveRecord（表的名字、主键，等等），除非你有一个非常好的理由（像是不受你控制的数据库）。</p></li><li><p>把宏风格的方法（<code>has_many</code>, <code>validates</code>, 等等）放在类别定义的前面。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ActiveRecord::Base</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 默认的scope放在最前面(如果有)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  default_scope { where(<span class="symbol">active:</span> <span class="literal">true</span>) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 接下来是常量</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  GENDERS = <span class="string">%w(male female)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 然后放一些attr相关的宏</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:formatted_date_of_birth</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  attr_accessible <span class="symbol">:login</span>, <span class="symbol">:first_name</span>, <span class="symbol">:last_name</span>, <span class="symbol">:email</span>, <span class="symbol">:password</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 仅接着是关联的宏</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  belongs_to <span class="symbol">:country</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  has_many <span class="symbol">:authentications</span>, <span class="symbol">dependent:</span> <span class="symbol">:destroy</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 以及宏的验证</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  validates <span class="symbol">:email</span>, <span class="symbol">presence:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  validates <span class="symbol">:username</span>, <span class="symbol">presence:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  validates <span class="symbol">:username</span>, <span class="symbol">uniqueness:</span> { <span class="symbol">case_sensitive:</span> <span class="literal">false</span> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  validates <span class="symbol">:username</span>, <span class="symbol">format:</span> { <span class="symbol">with:</span> /\A[A-Za-z][A-Za-z<span class="number">0</span>-<span class="number">9._</span>-]{<span class="number">2</span>,<span class="number">19</span>}\z/ }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  validates <span class="symbol">:password</span>, <span class="symbol">format:</span> { <span class="symbol">with:</span> /\A\S{<span class="number">8</span>,<span class="number">128</span>}\z/, <span class="symbol">allow_nil:</span> <span class="literal">true</span>}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 接着是回调</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  before_save <span class="symbol">:cook</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  before_save <span class="symbol">:update_username_lower</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 其它的宏 (像devise的) 应该放在回调的后面</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>偏好 <code>has_many :through</code> 胜于 <code>has_and_belongs_to_many</code>。 使用 <code>has_many :through</code> 允许在 join 模型有附加的属性及验证</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 has_and_belongs_to_many</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ActiveRecord::Base</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  has_and_belongs_to_many <span class="symbol">:groups</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span> &lt; ActiveRecord::Base</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  has_and_belongs_to_many <span class="symbol">:users</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 偏好方式 - using has_many :through</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ActiveRecord::Base</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  has_many <span class="symbol">:memberships</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  has_many <span class="symbol">:groups</span>, <span class="symbol">through:</span> <span class="symbol">:memberships</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Membership</span> &lt; ActiveRecord::Base</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  belongs_to <span class="symbol">:user</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  belongs_to <span class="symbol">:group</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span> &lt; ActiveRecord::Base</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  has_many <span class="symbol">:memberships</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  has_many <span class="symbol">:users</span>, <span class="symbol">through:</span> <span class="symbol">:memberships</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>使用新的 <a href="http://thelucid.com/2010/01/08/sexy-validation-in-edge-rails-rails-3/" target="_blank" rel="external nofollow noreferrer noopener">“sexy” validation</a>。</p></li><li><p>当一个惯用的验证使用超过一次或验证是某个正则表达映射时，创建一个惯用的 validator 文件。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  validates <span class="symbol">:email</span>, <span class="symbol">format:</span> { <span class="symbol">with:</span> /\A([^@\s]+)@((?<span class="symbol">:</span>[-a-z<span class="number">0</span>-<span class="number">9</span>]+\.)+[a-z]{<span class="number">2</span>,})\z/i }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmailValidator</span> &lt; ActiveModel::EachValidator</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">validate_each</span><span class="params">(record, attribute, value)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    record.errors[attribute] &lt;&lt; (options[<span class="symbol">:message</span>] <span class="params">||</span> <span class="string">'is not a valid email'</span>) <span class="keyword">unless</span> value =~ <span class="regexp">/\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/i</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  validates <span class="symbol">:email</span>, <span class="symbol">email:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>所有惯用的验证器应放在一个共享的 gem 。</p></li><li><p>自由地使用命名的作用域(scope)。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ActiveRecord::Base</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  scope <span class="symbol">:active</span>, -&gt; { where(<span class="symbol">active:</span> <span class="literal">true</span>) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  scope <span class="symbol">:inactive</span>, -&gt; { where(<span class="symbol">active:</span> <span class="literal">false</span>) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  scope <span class="symbol">:with_orders</span>, -&gt; { joins(<span class="symbol">:orders</span>).select(<span class="string">'distinct(users.id)'</span>) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>将命名的作用域包在 <code>lambda</code> 里来惰性地初始化。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差劲</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ActiveRecord::Base</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  scope <span class="symbol">:active</span>, where(<span class="symbol">active:</span> <span class="literal">true</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  scope <span class="symbol">:inactive</span>, where(<span class="symbol">active:</span> <span class="literal">false</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  scope <span class="symbol">:with_orders</span>, joins(<span class="symbol">:orders</span>).select(<span class="string">'distinct(users.id)'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ActiveRecord::Base</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  scope <span class="symbol">:active</span>, -&gt; { where(<span class="symbol">active:</span> <span class="literal">true</span>) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  scope <span class="symbol">:inactive</span>, -&gt; { where(<span class="symbol">active:</span> <span class="literal">false</span>) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  scope <span class="symbol">:with_orders</span>, -&gt; { joins(<span class="symbol">:orders</span>).select(<span class="string">'distinct(users.id)'</span>) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>当一个由 lambda 及参数定义的作用域变得过于复杂时，更好的方式是建一个作为同样用途的类别方法，并返回一个 <code>ActiveRecord::Relation</code> 对象。你也可以这么定义出更精简的作用域。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ActiveRecord::Base</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">with_orders</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    joins(<span class="symbol">:orders</span>).select(<span class="string">'distinct(users.id)'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>注意 <code>update_attribute</code> 方法的行为。它不运行模型验证（不同于 <code>update_attributes</code> ）并且可能把模型状态给搞砸。</p></li><li><p>使用用户友好的网址。在网址显示具描述性的模型属性，而不只是 <code>id</code> 。<br>有不止一种方法可以达成：</p><ul><li><p>覆写模型的 <code>to_param</code> 方法。这是 Rails 用来给对象建构网址的方法。缺省的实作会以字串形式返回该 <code>id</code> 的记录。它可被另一个具人类可读的属性覆写。</p><pre><code><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">to_param</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"<span class="subst">#{id}</span> <span class="subst">#{name}</span>"</span>.parameterize</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></code></pre><p>为了要转换成对网址友好 (URL-friendly)的数值，字串应当调用 <code>parameterize</code> 。 对象的 <code>id</code> 要放在开头，以便给 ActiveRecord 的 <code>find</code> 方法查找。</p></li><li><p>使用此 <code>friendly_id</code> gem。它允许藉由某些具描述性的模型属性，而不是用 <code>id</code> 来创建人类可读的网址。</p><pre><code><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  extend FriendlyId</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  friendly_id <span class="symbol">:name</span>, <span class="symbol">use:</span> <span class="symbol">:slugged</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure>查看 [gem 文档](https://github.com/norman/friendly_id)获得更多关于使用的信息。</code></pre></li></ul></li></ul><h3 id="ActiveResource"><a href="#ActiveResource" class="headerlink" title="ActiveResource"></a>ActiveResource</h3><ul><li><p>当 HTTP 响应是一个与存在的格式不同的格式时（XML 和 JSON），需要某些额外的格式解析，创一个你惯用的格式，并在类别中使用它。惯用的格式应当实作下列方法：<code>extension</code>, <code>mime_type</code>,<br><code>encode</code> 以及 <code>decode</code>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">ActiveResource</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">module</span> <span class="title">Formats</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">module</span> <span class="title">Extend</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      <span class="class"><span class="keyword">module</span> <span class="title">CSVFormat</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        extend <span class="keyword">self</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">extension</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">          <span class="string">'csv'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">mime_type</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">          <span class="string">'text/csv'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(hash, options = <span class="literal">nil</span>)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">          <span class="comment"># 数据以新格式编码并返回</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(csv)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">          <span class="comment"># 数据以新格式解码并返回</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ActiveResource::Base</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">self</span>.format = ActiveResource::Formats::Extend::CSVFormat</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>若 HTTP 请求应当不扩展发送时，覆写 <code>ActiveResource::Base</code> 的 <code>element_path</code> 及 <code>collection_path</code> 方法，并移除扩展的部份。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ActiveResource::Base</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">collection_path</span><span class="params">(prefix_options = {}, query_options = <span class="literal">nil</span>)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    prefix_options, query_options = split_options(prefix_options) <span class="keyword">if</span> query_options.<span class="literal">nil</span>?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"<span class="subst">#{prefix(prefix_options)}</span><span class="subst">#{collection_name}</span><span class="subst">#{query_string(query_options)}</span>"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">element_path</span><span class="params">(id, prefix_options = {}, query_options = <span class="literal">nil</span>)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    prefix_options, query_options = split_options(prefix_options) <span class="keyword">if</span> query_options.<span class="literal">nil</span>?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"<span class="subst">#{prefix(prefix_options)}</span><span class="subst">#{collection_name}</span>/<span class="subst">#{URI.parser.escape id.to_s}</span><span class="subst">#{query_string(query_options)}</span>"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure><p>  如有任何改动网址的需求时，这些方法也可以被覆写。</p></li></ul><h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><ul><li><p>把 <code>schema.rb</code> 保存在版本管控之下。</p></li><li><p>使用 <code>rake db:scheme:load</code> 取代 <code>rake db:migrate</code> 来初始化空的数据库。</p></li><li><p>使用 <code>rake db:test:prepare</code> 来更新测试数据库的 schema。</p></li><li><p>避免在表里设置缺省数据。使用模型层来取代。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">amount</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">self</span>[<span class="symbol">:amount</span>] <span class="keyword">or</span> <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure><p>  然而 <code>self[:attr_name]</code> 的使用被视为相当常见的，你也可以考虑使用更罗嗦的（争议地可读性更高的） <code>read_attribute</code> 来取代：</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">amount</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  read_attribute(<span class="symbol">:amount</span>) <span class="keyword">or</span> <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>当编写建设性的迁移时（加入表或栏位），使用 Rails 3.1 的新方式来迁移 - 使用 <code>change</code> 方法取代 <code>up</code> 与 <code>down</code> 方法。</p></li></ul><pre><code><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过去的方式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddNameToPerson</span> &lt; ActiveRecord::Migration</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">up</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    add_column <span class="symbol">:persons</span>, <span class="symbol">:name</span>, <span class="symbol">:string</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">down</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    remove_column <span class="symbol">:person</span>, <span class="symbol">:name</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新的偏好方式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddNameToPerson</span> &lt; ActiveRecord::Migration</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    add_column <span class="symbol">:persons</span>, <span class="symbol">:name</span>, <span class="symbol">:string</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></code></pre><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ul><li><p>不要直接从视图调用模型层。</p></li><li><p>不要在视图构造复杂的格式，把它们输出到视图 helper 的一个方法或是模型。</p></li><li><p>使用 partial 模版与布局来减少重复的代码。</p></li><li><p>加入 <a href="https://github.com/bcardarella/client_side_validations" target="_blank" rel="external nofollow noreferrer noopener">client side validation</a> 至惯用的 validators。 要做的步骤有：</p><ul><li><p>声明一个由 <code>ClientSideValidations::Middleware::Base</code> 而来的自定 validator</p><pre><code><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">ClientSideValidations::Middleware</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Email</span> &lt; Base</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">response</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> request.params[<span class="symbol">:email</span>] =~ <span class="regexp">/\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/i</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">self</span>.status = <span class="number">200</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">self</span>.status = <span class="number">404</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">super</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></code></pre></li><li><p>建立一个新文件<br><code>public/javascripts/rails.validations.custom.js.coffee</code> 并在你的 <code>application.js.coffee</code> 文件加入一个它的参照：</p><pre><code><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/assets/javascripts/application.js.coffee</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#= require rails.validations.custom</span></span></pre></td></tr></tbody></table></figure></code></pre></li><li><p>添加你的用户端 validator：</p><pre><code><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#public/javascripts/rails.validations.custom.js.coffee</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">clientSideValidations.validators.remote[<span class="string">'email'</span>] = (element, options) -&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> $.ajax({</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="symbol">url:</span> <span class="string">'/validators/email.json'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="symbol">data:</span> { <span class="symbol">email:</span> element.val() },</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="symbol">async:</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  }).status == <span class="number">404</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> options.message <span class="params">||</span> <span class="string">'invalid e-mail format'</span></span></pre></td></tr></tbody></table></figure></code></pre></li></ul></li></ul><h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><ul><li><p>视图、模型与控制器里不应使用语言相关设置与字串。这些文字应搬到在 <code>config/locales</code> 下的语言文件里。</p></li><li><p>当 ActiveRecord 模型的标签需要被翻译时，使用<code>activerecord</code> 作用域:</p>  <figure class="highlight dts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">en:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">  activerecord:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">    models:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">      user:</span> Member</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">    attributes:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">      user:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">        name:</span> <span class="string">"Full name"</span></span></pre></td></tr></tbody></table></figure><p>  然后 <code>User.model_name.human</code> 会返回 “Member” ，而 <code>User.human_attribute_name("name")</code> 会返回 “Full name”。这些属性的翻译会被视图作为标签使用。</p></li><li><p>把在视图使用的文字与 ActiveRecord 的属性翻译分开。 把给模型使用的语言文件放在名为 <code>models</code> 的文件夹，给视图使用的文字放在名为 <code>views</code> 的文件夹。</p><ul><li><p>当使用额外目录的语言文件组织完成时，为了要载入这些目录，要在 <code>application.rb</code> 文件里描述这些目录。</p><pre><code><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/application.rb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">config.i18n.load_path += Dir[Rails.root.join(<span class="string">'config'</span>, <span class="string">'locales'</span>, <span class="string">'**'</span>, <span class="string">'*.{rb,yml}'</span>)]</span></pre></td></tr></tbody></table></figure></code></pre></li></ul></li><li><p>把共享的本土化选项，像是日期或货币格式，放在 <code>locales</code> 的根目录下。</p></li><li><p>使用精简形式的 I18n 方法： <code>I18n.t</code> 来取代 <code>I18n.translate</code> 以及使用 <code>I18n.l</code> 取代 <code>I18n.localize</code>。</p></li><li><p>使用 “懒惰” 查询视图中使用的文字。假设我们有以下结构：</p>  <figure class="highlight dts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">en:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">  users:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">    show:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">      title:</span> <span class="string">"User details page"</span></span></pre></td></tr></tbody></table></figure><p>  <code>users.show.title</code> 的数值能这样被 <code>app/views/users/show.html.haml</code> 查询：</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">= t <span class="string">'.title'</span></span></pre></td></tr></tbody></table></figure></li><li><p>在控制器与模型使用点分隔的键，来取代指定 <code>:scope</code> 选项。点分隔的调用更容易阅读及追踪层级。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这样子调用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">I18n.t <span class="string">'activerecord.errors.messages.record_invalid'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 而不是这样</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">I18n.t <span class="symbol">:record_invalid</span>, <span class="symbol">:scope</span> =&gt; [<span class="symbol">:activerecord</span>, <span class="symbol">:errors</span>, <span class="symbol">:messages</span>]</span></pre></td></tr></tbody></table></figure></li><li><p>关于 Rails i18n 更详细的信息可以在这里找到 <a href="http://guides.rubyonrails.org/i18n.html" target="_blank" rel="external nofollow noreferrer noopener">Rails Guides</a>。</p></li></ul><h2 id="Assets"><a href="#Assets" class="headerlink" title="Assets"></a>Assets</h2><p>利用这个 <a href="http://guides.rubyonrails.org/asset_pipeline.html" target="_blank" rel="external nofollow noreferrer noopener">assets pipeline</a> 来管理应用的结构。</p><ul><li>保留 <code>app/assets</code> 给自定的样式表，Javascripts 或图片。</li><li>把自己开发，但不适合用在这个应用的函式库，放在 <code>lib/assets/</code>。</li><li>第三方代码如： <a href="http://jquery.com/" target="_blank" rel="external nofollow noreferrer noopener">jQuery</a> 或 <a href="http://twitter.github.com/bootstrap/" target="_blank" rel="external nofollow noreferrer noopener">bootstrap</a> 应放置在 <code>vendor/assets</code>。</li><li>当可能的时候，使用 gem 化的 assets 版本。(如： <a href="https://github.com/rails/jquery-rails" target="_blank" rel="external nofollow noreferrer noopener">jquery-rails</a>)。</li></ul><h2 id="Mailers"><a href="#Mailers" class="headerlink" title="Mailers"></a>Mailers</h2><ul><li><p>把 mails 命名为 <code>SomethingMailer</code>。 没有 Mailer 字根的话，不能立即显现哪个是一个 Mailer，以及哪个视图与它有关。</p></li><li><p>提供 HTML 与纯文本视图模版。</p></li><li><p>在你的开发环境启用信件失败发送错误。这些错误缺省是被停用的。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/environments/development.rb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">config.action_mailer.raise_delivery_errors = <span class="literal">true</span></span></pre></td></tr></tbody></table></figure></li><li><p>在开发模式使用 <code>smtp.gmail.com</code> 设置 SMTP 服务器（当然了，除非你自己有本地 SMTP 服务器）。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/environments/development.rb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">config.action_mailer.smtp_settings = {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="symbol">address:</span> <span class="string">'smtp.gmail.com'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 更多设置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure></li><li><p>提供缺省的配置给主机名。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/environments/development.rb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">config.action_mailer.default_url_options = {<span class="symbol">host:</span> <span class="string">"<span class="subst">#{local_ip}</span>:3000"</span>}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/environments/production.rb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">config.action_mailer.default_url_options = {<span class="symbol">host:</span> <span class="string">'your_site.com'</span>}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在你的 mailer 类</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">default_url_options[<span class="symbol">:host</span>] = <span class="string">'your_site.com'</span></span></pre></td></tr></tbody></table></figure></li><li><p>如果你需要在你的网站使用一个 email 链结，总是使用 <code>_url</code> 方法，而不是 <code>_path</code> 方法。 <code>_url</code> 方法包含了主机名，而 <code>_path</code> 方法没有。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 错误</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">You can always find more info about this course</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">= link_to <span class="string">'here'</span>, url_for(course_path(@course))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">You can always find more info about this course</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">= link_to <span class="string">'here'</span>, url_for(course_url(@course))</span></pre></td></tr></tbody></table></figure></li><li><p>正确地显示寄与收件人地址的格式。使用下列格式：</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在你的 mailer 类别</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">default <span class="symbol">from:</span> <span class="string">'Your Name &lt;info@your_site.com&gt;'</span></span></pre></td></tr></tbody></table></figure></li><li><p>确定测试环境的 email 发送方法设置为 <code>test</code> ：</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/environments/test.rb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">config.action_mailer.delivery_method = <span class="symbol">:test</span></span></pre></td></tr></tbody></table></figure></li><li><p>开发与生产环境的发送方法应为 <code>smtp</code> ：</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/environments/development.rb, config/environments/production.rb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">config.action_mailer.delivery_method = <span class="symbol">:smtp</span></span></pre></td></tr></tbody></table></figure></li><li><p>当发送 HTML email 时，所有样式应为行内样式，由于某些用户有关于外部样式的问题。某种程度上这使得更难管理及造成代码重用。有两个相似的 gem 可以转换样式，以及将它们放在对应的 html 标签里： <a href="https://github.com/fphilipe/premailer-rails3" target="_blank" rel="external nofollow noreferrer noopener">premailer-rails3</a> 和 <a href="https://github.com/Mange/roadie" target="_blank" rel="external nofollow noreferrer noopener">roadie</a>。</p></li><li><p>应避免页面产生响应时寄送 email。若多个 email 寄送时，造成了页面载入延迟，以及请求可能逾时。使用 <a href="https://github.com/tobi/delayed_job" target="_blank" rel="external nofollow noreferrer noopener">delayed_job</a> gem 的帮助来克服在背景处理寄送 email 的问题。</p></li></ul><h2 id="Bundler"><a href="#Bundler" class="headerlink" title="Bundler"></a>Bundler</h2><ul><li><p>把只给开发环境或测试环境的 gem 适当地分组放在 Gemfile 文件中。</p></li><li><p>在你的项目中只使用公认的 gem。 如果你考虑引入某些鲜为人所知的 gem ，你应该先仔细复查一下它的源代码。</p></li><li><p>关于多个开发者使用不同操作系统的项目，操作系统相关的 gem 缺省会产生一个经常变动的 <code>Gemfile.lock</code> 。 在 Gemfile 文件里，所有与 OS X 相关的 gem 放在 <code>darwin</code> 群组，而所有 Linux 相关的 gem 放在 <code>linux</code> 群组：</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">group <span class="symbol">:darwin</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  gem <span class="string">'rb-fsevent'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  gem <span class="string">'growl'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">group <span class="symbol">:linux</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  gem <span class="string">'rb-inotify'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure><p>  要在对的环境获得合适的 gem，添加以下代码至 <code>config/application.rb</code> ：</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">platform = RUBY_PLATFORM.match(<span class="regexp">/(linux|darwin)/</span>)[<span class="number">0</span>].to_sym</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Bundler.<span class="keyword">require</span>(platform)</span></pre></td></tr></tbody></table></figure></li><li><p>不要把 <code>Gemfile.lock</code> 文件从版本控制里移除。这不是随机产生的文件 - 它确保你所有的组员执行 <code>bundle install</code> 时，获得相同版本的 gem 。</p></li></ul><h2 id="无价的-Gems"><a href="#无价的-Gems" class="headerlink" title="无价的 Gems"></a>无价的 Gems</h2><p>一个最重要的编程理念是 “不要重造轮子！” 。若你遇到一个特定问题，你应该要在你开始前，看一下是否有存在的解决方案。下面是一些在很多 Rails 项目中 “无价的” gem 列表（全部兼容 Rails 3.1）：</p><ul><li><a href="https://github.com/gregbell/active_admin" target="_blank" rel="external nofollow noreferrer noopener">active_admin</a> - 有了 ActiveAdmin，创建 Rails 应用的管理界面就像儿戏。你会有一个很好的仪表盘，图形化 CRUD 界面以及更多东西。非常灵活且可客制化。</li><li><a href="https://github.com/charliesome/better_errors" target="_blank" rel="external nofollow noreferrer noopener">better_errors</a> - Better Errors 用更好更有效的错误页面，取代了 Rails 标准的错误页面。不仅可用在 Rails，任何将 Rack 当作中间件的 app 都可使用。</li><li><a href="https://github.com/flyerhzm/bullet" target="_blank" rel="external nofollow noreferrer noopener">bullet</a> - Bullet 就是为了帮助提升应用的效能（通过减少查询）而打造的 gem。会在你开发应用时，替你注意你的查询，并在需要 eager loading (N+1 查询)时、或是你在不必要的情况使用 eager loading 时，或是在应该要使用 counter cache 时，都会提醒你。</li><li><a href="https://github.com/ryanb/cancan" target="_blank" rel="external nofollow noreferrer noopener">cancan</a> - CanCan 是一个权限管理的 gem，<br>让你可以管制用户可存取的支援。所有的授权都定义在一个档案里（ability.rb），并提供许多方便的方法，让你检查及确保整个应用内权限是否是可得的。</li><li><a href="https://github.com/jnicklas/capybara" target="_blank" rel="external nofollow noreferrer noopener">capybara</a> - Capybara 旨在简化整合测试 Rack 应用的过程，像是 Rails、Sinatra 或 Merb。Capybara 模拟了真实用户使用 web 应用的互动。 它与你测试在运行的驱动无关，并原生搭载 Rack::Test 及 Selenium 支持。透过外部 gem 支持 HtmlUnit、WebKit 及 env.js 。与 RSpec &amp; Cucumber 一起使用时工作良好。</li><li><a href="https://github.com/jnicklas/carrierwave" target="_blank" rel="external nofollow noreferrer noopener">carrierwave</a> - Rails 最后一个文件上传解决方案。支持上传档案（及很多其它的酷玩意儿的）的本地储存与云储存。图片后处理与 ImageMagick 整合得非常好。</li><li><a href="https://github.com/bcardarella/client_side_validations" target="_blank" rel="external nofollow noreferrer noopener">client_side_validations</a> -<br>一个美妙的 gem，替你从现有的服务器端模型验证自动产生 Javascript 用户端验证。高度推荐！</li><li><a href="https://github.com/chriseppstein/compass" target="_blank" rel="external nofollow noreferrer noopener">compass-rails</a> - 一个优秀的 gem，添加了某些 css 框架的支持。包括了 sass mixin 的蒐集，让你减少 css 文件的代码并帮你解决浏览器兼容问题。</li><li><a href="https://github.com/cucumber/cucumber-rails" target="_blank" rel="external nofollow noreferrer noopener">cucumber-rails</a> - Cucumber 是一个由 Ruby 所写，开发功能测试的顶级工具。 cucumber-rails 提供了 Cucumber 的 Rails 整合。</li><li><a href="https://github.com/plataformatec/devise" target="_blank" rel="external nofollow noreferrer noopener">devise</a> - Devise 是 Rails 应用的一个完整解决方案。多数情况偏好使用 devise 来开始你的客制验证方案。</li><li><a href="http://fabricationgem.org/" target="_blank" rel="external nofollow noreferrer noopener">fabrication</a> - 一个很好的假数据产生器（编辑者的选择）。</li><li><a href="https://github.com/thoughtbot/factory_girl" target="_blank" rel="external nofollow noreferrer noopener">factory_girl</a> - 另一个 Fabrication 的选择。一个成熟的假数据产生器。 Fabrication 的精神领袖先驱。</li><li><a href="https://github.com/EmmanuelOga/ffaker" target="_blank" rel="external nofollow noreferrer noopener">ffaker</a> - 实用的 gem 来产生仿造的数据（名字、地址，等等）。</li><li><a href="https://github.com/pauldix/feedzirra" target="_blank" rel="external nofollow noreferrer noopener">feedzirra</a> - 非常快速及灵活的 RSS 或 Atom 种子解析器。</li><li><a href="https://github.com/norman/friendly_id" target="_blank" rel="external nofollow noreferrer noopener">friendly_id</a> - 透过使用某些具描述性的模型属性，而不是使用 id，允许你创建人类可读的网址。</li><li><a href="https://github.com/svenfuchs/globalize3.git" target="_blank" rel="external nofollow noreferrer noopener">globalize3</a> - Globalize3 是 Globalize 的后继者，针对 ActiveRecord 3.x 设计。基于新的 I18n API 打造而成，并帮 ActiveRecord 模型添加了事务功能。</li><li><a href="https://github.com/guard/guard" target="_blank" rel="external nofollow noreferrer noopener">guard</a> - 极佳的 gem 监控文件变化及任务的调用。搭载了很多实用的扩充。远优于 autotest 与 <a href="https://github.com/mynyml/watchr" target="_blank" rel="external nofollow noreferrer noopener">watchr</a>。</li><li><a href="https://github.com/indirect/haml-rails" target="_blank" rel="external nofollow noreferrer noopener">haml-rails</a> - haml-rails 提供了 Haml 的 Rails 整合。</li><li><a href="http://haml-lang.com" target="_blank" rel="external nofollow noreferrer noopener">haml</a> - Haml 是一个简洁的模型语言，被很多人认为（包括我）远优于 Erb。</li><li><a href="https://github.com/amatsuda/kaminari" target="_blank" rel="external nofollow noreferrer noopener">kaminari</a> - 很棒的分页解决方案。</li><li><a href="https://github.com/notahat/machinist" target="_blank" rel="external nofollow noreferrer noopener">machinist</a> - 假数据不好玩，Machinist 才好玩。</li><li><a href="https://github.com/rspec/rspec-rails" target="_blank" rel="external nofollow noreferrer noopener">rspec-rails</a> - RSpec 是 Test::MiniTest 的取代者。我不高度推荐 RSpec。 rspec-rails 提供了 RSpec 的 Rails 整合。</li><li><a href="https://github.com/plataformatec/simple_form" target="_blank" rel="external nofollow noreferrer noopener">simple_form</a> - 一旦用过 simple_form（或 formatastic），你就不想听到关于 Rails 缺省的表单。它是一个创造表单很棒的DSL。</li><li><a href="https://github.com/fguillen/simplecov-rcov" target="_blank" rel="external nofollow noreferrer noopener">simplecov-rcov</a> - 为了 SimpleCov 打造的 RCov formatter。若你想使用 SimpleCov 搭配 Hudson 持续整合服务器，很有用。</li><li><a href="https://github.com/colszowka/simplecov" target="_blank" rel="external nofollow noreferrer noopener">simplecov</a> - 代码覆盖率工具。不像 RCov，完全兼容 Ruby 1.9。产生精美的报告。必须用！</li><li><a href="http://slim-lang.com" target="_blank" rel="external nofollow noreferrer noopener">slim</a> - Slim 是一个简洁的模版语言，被视为是远远优于 HAML(Erb 就更不用说了)的语言。唯一会阻止我大规模地使用它的是，主流 IDE 及编辑器对它的支持不好。但它的效能是非凡的。</li><li><a href="https://github.com/sporkrb/spork" target="_blank" rel="external nofollow noreferrer noopener">spork</a> - 一个给测试框架（RSpec 或 现今 Cucumber）用的 DRb 服务器，每次运行前确保分支出一个乾净的测试状态。 简单的说，预载很多测试环境的结果是大幅降低你的测试启动时间，绝对必须用！</li><li><a href="https://github.com/sunspot/sunspot" target="_blank" rel="external nofollow noreferrer noopener">sunspot</a> - 基于 SOLR 的全文检索引擎。</li></ul><p>这不是完整的清单，以及其它的 gem 也可以在之后加进来。以上清单上的所有 gems 皆经测试，处于活跃开发阶段，有社群以及代码的质量很高。</p><h2 id="缺陷的-Gems"><a href="#缺陷的-Gems" class="headerlink" title="缺陷的 Gems"></a>缺陷的 Gems</h2><p>这是一个有问题的或被别的 gem 取代的 gem 清单。你应该在你的项目里避免使用它们。</p><ul><li><a href="http://rmagick.rubyforge.org/" target="_blank" rel="external nofollow noreferrer noopener">rmagick</a> - 这个 gem 因大量消耗内存而声名狼藉。使用 <a href="https://github.com/probablycorey/mini_magick" target="_blank" rel="external nofollow noreferrer noopener">minimagick</a> 来取代。</li><li><a href="http://www.zenspider.com/ZSS/Products/ZenTest/" target="_blank" rel="external nofollow noreferrer noopener">autotest</a> - 自动测试的老旧解决方案。远不如 guard 及 <a href="https://github.com/mynyml/watchr" target="_blank" rel="external nofollow noreferrer noopener">watchr</a>。</li><li><a href="https://github.com/relevance/rcov" target="_blank" rel="external nofollow noreferrer noopener">rcov</a> - 代码覆盖率工具，不兼容 Ruby 1.9。使用 <a href="https://github.com/colszowka/simplecov" target="_blank" rel="external nofollow noreferrer noopener">SimpleCov</a> 来取代。</li><li><a href="https://github.com/cowboyd/therubyracer" target="_blank" rel="external nofollow noreferrer noopener">therubyracer</a> - 极度不鼓励在生产模式使用这个 gem，它消耗大量的内存。我会推荐使用 <code>node.js</code> 来取代。</li></ul><p>这仍是一个完善中的清单。请告诉我受人欢迎但有缺陷的 gems 。</p><h2 id="管理进程"><a href="#管理进程" class="headerlink" title="管理进程"></a>管理进程</h2><ul><li>若你的项目依赖各种外部的进程使用 <a href="https://github.com/ddollar/foreman" target="_blank" rel="external nofollow noreferrer noopener">foreman</a> 来管理它们。</li></ul><h1 id="测试-Rails-应用"><a href="#测试-Rails-应用" class="headerlink" title="测试 Rails 应用"></a>测试 Rails 应用</h1><p>也许 BDD 方法是实作一个新功能最好的方法。你从开始写一些高阶的测试（通常使用 Cucumber），然后使用这些测试来驱使你实作功能。一开始你给功能的视图写测试，并使用这些测试来创建相关的视图。之后，你创建丢给视图数据的控制器测试来实现控制器。最后你实作模型的测试以及模型自身。</p><h2 id="Cucumber"><a href="#Cucumber" class="headerlink" title="Cucumber"></a>Cucumber</h2><ul><li><p>用 <code>@wip</code> （工作进行中）标签标记你未完成的场景。这些场景不纳入考虑，且不标记为测试失败。当完成一个未完成场景且功能测试通过时，为了把此场景加至测试套件里，应该移除 <code>@wip</code> 标签。</p></li><li><p>配置你的缺省配置文件，排除掉标记为 <code>@javascript</code> 的场景。它们使用浏览器来测试，推荐停用它们来增加一般场景的执行速度。</p></li><li><p>替标记著 <code>@javascript</code> 的场景配置另一个配置文件。</p><ul><li><p>配置文件可在 <code>cucumber.yml</code> 文件里配置。</p><pre><code><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置文件的定义：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">profile_name:</span> --tags @tag_name</span></pre></td></tr></tbody></table></figure></code></pre></li><li><p>带指令运行一个配置文件：</p><pre><code><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attribute">cucumber</span> -p profile_name</span></pre></td></tr></tbody></table></figure></code></pre></li></ul></li><li><p>若使用 <a href="http://fabricationgem.org/" target="_blank" rel="external nofollow noreferrer noopener">fabrication</a> 来替换假数据 (fixtures)，使用预定义的 <a href="http://fabricationgem.org/#!cucumber-steps" target="_blank" rel="external nofollow noreferrer noopener">fabrication steps</a>。</p></li><li><p>不要使用旧版的 <code>web_steps.rb</code> 步骤定义！<a href="http://aslakhellesoy.com/post/11055981222/the-training-wheels-came-off" target="_blank" rel="external nofollow noreferrer noopener">最新版 Cucumber 已移除 web steps</a>，使用它们导致冗赘的场景，而且它并没有正确地反映出应用的领域。</p></li><li><p>当检查一元素的可视文字时，检查元素的文字而不是检查 id。这样可以查出 i18n 的问题。</p></li><li><p>给同种类对象创建不同的功能特色：</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Feature:</span> Articles</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># ... 功能实作 ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Feature:</span> Article Editing</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># ... 功能实作 ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Feature:</span> Article Publishing</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># ... 功能实作 ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Feature:</span> Article Search</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># ... 功能实作 ...</span></span></pre></td></tr></tbody></table></figure></li><li><p>每一个功能有三个主要成分：</p><ul><li>Title</li><li>Narrative - 简短说明这个特色关于什么。</li><li>Acceptance criteria - 每个由独立步骤组成的一套场景。</li></ul></li><li><p>最常见的格式称为 Connextra 格式。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">In order to [benefit] ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">A [stakeholder]...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Wants to [feature] ...</span></pre></td></tr></tbody></table></figure></li></ul><p>这是最常见但不是要求的格式，叙述可以是依赖功能复杂度的任何文字。</p><ul><li><p>自由地使用场景概述使你的场景备作它用 (keep your scenarios DRY)。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Scenario <span class="symbol">Outline:</span> User cannot register with invalid e-mail</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  When I try to register with an email <span class="string">"&lt;email&gt;"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  Then I should see the error message <span class="string">"&lt;error&gt;"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Examples:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="params">|email         |</span>error                 <span class="params">|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="params">  |</span>              <span class="params">|The e-mail is required|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="params">|invalid email |</span>is <span class="keyword">not</span> a valid e-mail <span class="params">|</span></span></pre></td></tr></tbody></table></figure></li><li><p>场景的步骤放在 <code>step_definitions</code> 目录下的 <code>.rb</code> 文件。步骤文件命名惯例为 <code>[description]_steps.rb</code>。步骤根据不同的标准放在不同的文件里。每一个功能可能有一个步骤文件 (<code>home_page_steps.rb</code>)<br>。也可能给每个特定对象的功能，建一个步骤文件 (<code>articles_steps.rb</code>)。</p></li><li><p>使用多行步骤参数来避免重复</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">场景: User profile</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  Given I am logged <span class="keyword">in</span> as a user <span class="string">"John Doe"</span> with an e-mail <span class="string">"user@test.com"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  When I go to my profile</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  Then I should see the following <span class="symbol">information:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="params">|First name|</span>John         <span class="params">|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="params">    |</span>Last name <span class="params">|Doe          |</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="params">|E-mail    |</span>user@test.com<span class="params">|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="params"></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="params"># 步骤:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="params">Then /^I should see the following information:$/ <span class="keyword">do</span> |</span>table<span class="params">|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="params">  table.raw.each <span class="keyword">do</span> |</span>field, value<span class="params">|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="params">    find_field(field).value.should =~ /#{value}/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="params">  <span class="keyword">end</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="params"><span class="keyword">end</span></span></span></pre></td></tr></tbody></table></figure></li><li><p>使用复合步骤使场景备作它用 (Keep your scenarios DRY)</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">When I subscribe <span class="keyword">for</span> news from the category <span class="string">"Technical News"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 步骤:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">When /^I subscribe <span class="keyword">for</span> news from the category <span class="string">"([^"</span>]*)<span class="string">"$/ do |category|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="string">  steps %Q{</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="string">    When I go to the news categories page</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="string">    And I select the category <span class="subst">#{category}</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="string">    And I click the button "</span>Subscribe <span class="keyword">for</span> this category<span class="string">"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="string">    And I confirm the subscription</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="string">  }</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="string">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>总是使用 Capybara 否定匹配来取代正面情况搭配 should_not，它们会在给定的超时时重试匹配，允许你测试 ajax 动作。 见 <a href="https://github.com/jnicklas/capybara" target="_blank" rel="external nofollow noreferrer noopener">Capybara 的 读我文件</a>获得更多说明。</p></li></ul><h2 id="RSpec"><a href="#RSpec" class="headerlink" title="RSpec"></a>RSpec</h2><ul><li><p>一个例子仅用一个期望值。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">describe ArticlesController <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">#...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  describe <span class="string">'GET new'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    it <span class="string">'assigns new article and renders the new article template'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      get <span class="symbol">:new</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      assigns[<span class="symbol">:article</span>].should be_a_new Article</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      response.should render_template <span class="symbol">:new</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">describe ArticlesController <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">#...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  describe <span class="string">'GET new'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    it <span class="string">'assigns a new article'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">      get <span class="symbol">:new</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">      assigns[<span class="symbol">:article</span>].should be_a_new Article</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    it <span class="string">'renders the new article template'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">      get <span class="symbol">:new</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      response.should render_template <span class="symbol">:new</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>大量使用 <code>descibe</code> 及 <code>context</code> 。</p></li><li><p>如下地替 <code>describe</code> 区块命名：</p><ul><li><p>非方法使用 “description”</p></li><li><p>实例方法使用井字号 “#method”</p></li><li><p>类别方法使用点 “.method”</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">summary</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">latest</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># the spec...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">describe Article <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  describe <span class="string">'#summary'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  describe <span class="string">'.latest'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li></ul></li><li><p>使用 <a href="http://fabricationgem.org/" target="_blank" rel="external nofollow noreferrer noopener">fabricators</a> 来创建测试对象。</p></li><li><p>大量使用 mocks 与 stubs。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># mocking 一个模型</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">article = mock_model(Article)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># stubbing 一个方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Article.stub(<span class="symbol">:find</span>).with(article.id).and_return(article)</span></pre></td></tr></tbody></table></figure></li><li><p>当 mocking 一个模型时，使用 <code>as_null_object</code> 方法。它告诉输出仅监听我们预期的讯息，并忽略其它的讯息。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">article = mock_model(Article).as_null_object</span></pre></td></tr></tbody></table></figure></li><li><p>使用 <code>let</code> 区块而不是 <code>before(:each)</code> 区块替 spec 例子创建数据。<code>let</code> 区块会被懒惰求值。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用这个：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">let(<span class="symbol">:article</span>) { Fabricate(<span class="symbol">:article</span>) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># ... 而不是这个：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">before(<span class="symbol">:each</span>) { @article = Fabricate(<span class="symbol">:article</span>) }</span></pre></td></tr></tbody></table></figure></li><li><p>当可能时，使用 <code>subject</code>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">describe Article <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  subject { Fabricate(<span class="symbol">:article</span>) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  it <span class="string">'is not published on creation'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    subject.should_not be_published</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>如果可能的话，使用 <code>specify</code>。它是 <code>it</code> 的同义词，但在没 docstring 的情况下可读性更高。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">describe Article <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  before { @article = Fabricate(<span class="symbol">:article</span>) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  it <span class="string">'is not published on creation'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    @article.should_not be_published</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">describe Article <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  let(<span class="symbol">:article</span>) { Fabricate(<span class="symbol">:article</span>) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  specify { article.should_not be_published }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>当可能时，使用 <code>its</code> 。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">describe Article <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  subject { Fabricate(<span class="symbol">:article</span>) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  it <span class="string">'has the current date as creation date'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    subject.creation_date.should == Date.today</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">describe Article <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  subject { Fabricate(<span class="symbol">:article</span>) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  its(<span class="symbol">:creation_date</span>) { should == Date.today }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>Use <code>shared_examples</code> if you want to create a spec group that can be shared by many other tests.</p> <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">   <span class="comment"># bad</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    describe Array <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">      subject { Array.new [<span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>] }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      context <span class="string">"initialized with 3 items"</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        its(<span class="symbol">:size</span>) { should eq(<span class="number">3</span>) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    describe Set <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      subject { Set.new [<span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>] }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      context <span class="string">"initialized with 3 items"</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        its(<span class="symbol">:size</span>) { should eq(<span class="number">3</span>) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">   <span class="comment">#good</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    shared_examples <span class="string">"a collection"</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      subject { described_class.new([<span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>]) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">      context <span class="string">"initialized with 3 items"</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        its(<span class="symbol">:size</span>) { should eq(<span class="number">3</span>) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    describe Array <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      it_behaves_like <span class="string">"a collection"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    describe Set <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">      it_behaves_like <span class="string">"a collection"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="comment">### 视图</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">* 视图测试的目录结构要与 <span class="string">`app/views`</span> 之中的相符。 举例来说，在 <span class="string">`app/views/users`</span> 视图被放在 <span class="string">`spec/views/users`</span>。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">* 视图测试的命名惯例是添加 <span class="string">`_spec.rb`</span> 至视图名字之后，举例来说，视图 <span class="string">`_form.html.haml`</span> 有一个对应的测试叫做 <span class="string">`_form.html.haml_spec.rb`</span>。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">* 每个视图测试文件都需要 <span class="string">`spec_helper.rb`</span>。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">* 外部描述区块使用不含 <span class="string">`app/views`</span> 部分的视图路径。 <span class="string">`render`</span> 方法没有传入参数时，是这么使用的。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">    <span class="string">``</span><span class="string">`Ruby</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"><span class="string">    # spec/views/articles/new.html.haml_spec.rb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line"><span class="string">    require 'spec_helper'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"><span class="string">    describe 'articles/new.html.haml' do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"><span class="string">      # ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"><span class="string">    end</span></span></pre></td></tr></tbody></table></figure></li><li><p>永远在视图测试来 mock 模型。视图的目的只是显示信息。</p></li><li><p><code>assign</code> 方法提供由控制器提供视图使用的实例变量(instance variable)。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># spec/views/articles/edit.html.haml_spec.rb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">describe <span class="string">'articles/edit.html.haml'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">it <span class="string">'renders the form for a new article creation'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  assign(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="symbol">:article</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    mock_model(Article).as_new_record.as_null_object</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  render</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  rendered.should have_selector(<span class="string">'form'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="symbol">method:</span> <span class="string">'post'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="symbol">action:</span> articles_path</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  ) <span class="keyword">do</span> <span class="params">|form|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    form.should have_selector(<span class="string">'input'</span>, <span class="symbol">type:</span> <span class="string">'submit'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>偏好 capybara 否定情况选择器，胜于搭配正面情况的 should_not 。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">page.should_not have_selector(<span class="string">'input'</span>, <span class="symbol">type:</span> <span class="string">'submit'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">page.should_not have_xpath(<span class="string">'tr'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">page.should have_no_selector(<span class="string">'input'</span>, <span class="symbol">type:</span> <span class="string">'submit'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">page.should have_no_xpath(<span class="string">'tr'</span>)</span></pre></td></tr></tbody></table></figure></li><li><p>当一个视图使用 helper 方法时，这些方法需要被 stubbed。Stubbing 这些 helper 方法是在 <code>template</code> 完成的：</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/helpers/articles_helper.rb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticlesHelper</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">formatted_date</span><span class="params">(date)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/views/articles/show.html.haml</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">= <span class="string">"Published at: <span class="subst">#{formatted_date(@article.published_at)}</span>"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># spec/views/articles/show.html.haml_spec.rb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">describe <span class="string">'articles/show.html.haml'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  it <span class="string">'displays the formatted date of article publishing'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    article = mock_model(Article, <span class="symbol">published_at:</span> Date.new(<span class="number">2012</span>, <span class="number">01</span>, <span class="number">01</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    assign(<span class="symbol">:article</span>, article)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    template.stub(<span class="symbol">:formatted_date</span>).with(article.published_at).and_return(<span class="string">'01.01.2012'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    render</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    rendered.should have_content(<span class="string">'Published at: 01.01.2012'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>在 <code>spec/helpers</code> 目录的 helper specs 是与视图 specs 分开的。</p></li></ul><h3 id="控制器-1"><a href="#控制器-1" class="headerlink" title="控制器"></a>控制器</h3><ul><li><p>Mock 模型及 stub 他们的方法。测试控制器时不应依赖建模。</p></li><li><p>仅测试控制器需负责的行为：</p><ul><li><p>执行特定的方法</p></li><li><p>从动作返回的数据 - assigns, 等等。</p></li><li><p>从动作返回的结果 - template render, redirect, 等等。</p><pre><code><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常用的控制器 spec 示例</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># spec/controllers/articles_controller_spec.rb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们只对控制器应执行的动作感兴趣</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所以我们 mock 模型及 stub 它的方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 并且专注在控制器该做的事情上</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">describe ArticlesController <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 模型将会在测试中被所有控制器的方法所使用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  let(<span class="symbol">:article</span>) { mock_model(Article) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  describe <span class="string">'POST create'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    before { Article.stub(<span class="symbol">:new</span>).and_return(article) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    it <span class="string">'creates a new article with the given attributes'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      Article.should_receive(<span class="symbol">:new</span>).with(<span class="symbol">title:</span> <span class="string">'The New Article Title'</span>).and_return(article)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">      post <span class="symbol">:create</span>, <span class="symbol">message:</span> { <span class="symbol">title:</span> <span class="string">'The New Article Title'</span> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    it <span class="string">'saves the article'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      article.should_receive(<span class="symbol">:save</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      post <span class="symbol">:create</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    it <span class="string">'redirects to the Articles index'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">      article.stub(<span class="symbol">:save</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">      post <span class="symbol">:create</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">      response.should redirect_to(<span class="symbol">action:</span> <span class="string">'index'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></code></pre></li></ul></li><li><p>当控制器根据不同参数有不同行为时，使用 context。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个在控制器中使用 context 的典型例子是，对象正确保存时，使用创建，保存失败时更新。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">describe ArticlesController <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  let(<span class="symbol">:article</span>) { mock_model(Article) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  describe <span class="string">'POST create'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    before { Article.stub(<span class="symbol">:new</span>).and_return(article) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    it <span class="string">'creates a new article with the given attributes'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      Article.should_receive(<span class="symbol">:new</span>).with(<span class="symbol">title:</span> <span class="string">'The New Article Title'</span>).and_return(article)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      post <span class="symbol">:create</span>, <span class="symbol">article:</span> { <span class="symbol">title:</span> <span class="string">'The New Article Title'</span> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    it <span class="string">'saves the article'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      article.should_receive(<span class="symbol">:save</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">      post <span class="symbol">:create</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    context <span class="string">'when the article saves successfully'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      before { article.stub(<span class="symbol">:save</span>).and_return(<span class="literal">true</span>) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">      it <span class="string">'sets a flash[:notice] message'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        post <span class="symbol">:create</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        flash[<span class="symbol">:notice</span>].should eq(<span class="string">'The article was saved successfully.'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">      it <span class="string">'redirects to the Articles index'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        post <span class="symbol">:create</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        response.should redirect_to(<span class="symbol">action:</span> <span class="string">'index'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    context <span class="string">'when the article fails to save'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">      before { article.stub(<span class="symbol">:save</span>).and_return(<span class="literal">false</span>) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">      it <span class="string">'assigns @article'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        post <span class="symbol">:create</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        assigns[<span class="symbol">:article</span>].should be_eql(article)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">      it <span class="string">'re-renders the "new" template'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">        post <span class="symbol">:create</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">        response.should render_template(<span class="string">'new'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li></ul><h3 id="模型-1"><a href="#模型-1" class="headerlink" title="模型"></a>模型</h3><ul><li><p>不要在自己的测试里 mock 模型。</p></li><li><p>使用捏造的东西来创建真的对象</p></li><li><p>Mock 别的模型或子对象是可接受的。</p></li><li><p>在测试里建立所有例子的模型来避免重复。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">describe Article <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  let(<span class="symbol">:article</span>) { Fabricate(<span class="symbol">:article</span>) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>加入一个例子确保捏造的模型是可行的。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">describe Article <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  it <span class="string">'is valid with valid attributes'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    article.should be_valid</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>当测试验证时，使用 <code>have(x).errors_on</code> 来指定要被验证的属性。使用 <code>be_valid</code> 不保证问题在目的的属性。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">describe <span class="string">'#title'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  it <span class="string">'is required'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    article.title = <span class="literal">nil</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    article.should_not be_valid</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 偏好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">describe <span class="string">'#title'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  it <span class="string">'is required'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    article.title = <span class="literal">nil</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    article.should have(<span class="number">1</span>).error_on(<span class="symbol">:title</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>替每个有验证的属性加另一个 <code>describe</code>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">describe Article <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  describe <span class="string">'#title'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    it <span class="string">'is required'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      article.title = <span class="literal">nil</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      article.should have(<span class="number">1</span>).error_on(<span class="symbol">:title</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>当测试模型属性的独立性时，把其它对象命名为 <code>another_object</code>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">describe Article <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  describe <span class="string">'#title'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    it <span class="string">'is unique'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      another_article = Fabricate.build(<span class="symbol">:article</span>, <span class="symbol">title:</span> article.title)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      article.should have(<span class="number">1</span>).error_on(<span class="symbol">:title</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li></ul><h3 id="Mailers-1"><a href="#Mailers-1" class="headerlink" title="Mailers"></a>Mailers</h3><ul><li><p>在 Mailer 测试的模型应该要被 mock。 Mailer 不应依赖建模。</p></li><li><p>Mailer 的测试应该确认如下：</p><ul><li><p>这个 subject 是正确的</p></li><li><p>这个 receiver e-mail 是正确的</p></li><li><p>这个 e-mail 寄送至对的邮件地址</p></li><li><p>这个 e-mail 包含了需要的信息</p> <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">describe SubscriberMailer</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  let(<span class="symbol">:subscriber</span>) { mock_model(Subscription, <span class="symbol">email:</span> <span class="string">'johndoe@test.com'</span>, <span class="symbol">name:</span> <span class="string">'John Doe'</span>) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  describe <span class="string">'successful registration email'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    subject { SubscriptionMailer.successful_registration_email(subscriber) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    its(<span class="symbol">:subject</span>) { should == <span class="string">'Successful Registration!'</span> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    its(<span class="symbol">:from</span>) { should == [<span class="string">'info@your_site.com'</span>] }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    its(<span class="symbol">:to</span>) { should == [subscriber.email] }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    it <span class="string">'contains the subscriber name'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">      subject.body.encoded.should match(subscriber.name)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li></ul></li></ul><h3 id="Uploaders"><a href="#Uploaders" class="headerlink" title="Uploaders"></a>Uploaders</h3><ul><li><p>我们如何测试上传器是否正确地调整大小。这里是一个 <a href="https://github.com/jnicklas/carrierwave" target="_blank" rel="external nofollow noreferrer noopener">carrierwave</a> 图片上传器的示例 spec：</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># rspec/uploaders/person_avatar_uploader_spec.rb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'spec_helper'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'carrierwave/test/matchers'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">describe PersonAvatarUploader <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">include</span> CarrierWave::Test::Matchers</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 在执行例子前启用图片处理</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  before(<span class="symbol">:all</span>) <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    UserAvatarUploader.enable_processing = <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 创建一个新的 uploader。模型被模仿为不依赖建模时的上传及调整图片。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  before(<span class="symbol">:each</span>) <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    @uploader = PersonAvatarUploader.new(mock_model(Person).as_null_object)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    @uploader.store!(File.open(path_to_file))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 执行完例子时停用图片处理</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  after(<span class="symbol">:all</span>) <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    UserAvatarUploader.enable_processing = <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 测试图片是否不比给定的维度长</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  context <span class="string">'the default version'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    it <span class="string">'scales down an image to be no larger than 256 by 256 pixels'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">      @uploader.should be_no_larger_than(<span class="number">256</span>, <span class="number">256</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 测试图片是否有确切的维度</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  context <span class="string">'the thumb version'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    it <span class="string">'scales down an image to be exactly 64 by 64 pixels'</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">      @uploader.thumb.should have_dimensions(<span class="number">64</span>, <span class="number">64</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li></ul><h1 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h1><p>有几个绝妙讲述 Rails 风格的资源，若有闲暇时应当考虑延伸阅读：</p><ul><li><a href="http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321601661" target="_blank" rel="external nofollow noreferrer noopener">The Rails 3 Way</a></li><li><a href="http://guides.rubyonrails.org/" target="_blank" rel="external nofollow noreferrer noopener">Ruby on Rails Guides</a></li><li><a href="http://pragprog.com/book/achbd/the-rspec-book" target="_blank" rel="external nofollow noreferrer noopener">The RSpec Book</a></li><li><a href="http://pragprog.com/book/hwcuc/the-cucumber-book" target="_blank" rel="external nofollow noreferrer noopener">The Cucumber Book</a></li><li><a href="https://leanpub.com/everydayrailsrspec" target="_blank" rel="external nofollow noreferrer noopener">Everyday Rails Testing with RSpec</a></li></ul><h1 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h1><p>在本指南所写的每个东西都不是定案。这只是我渴望想与同样对 Rails 编码风格有兴趣的大家一起工作，以致于最终我们可以替整个 Ruby 社群创造一个有益的资源。</p><p>欢迎开票或发送一个带有改进的更新请求。在此提前感谢你的帮助！</p><h1 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h1><p><img alt="Creative Commons License" data-src="http://i.creativecommons.org/l/by/3.0/88x31.png" class="lazyload"><br>This work is licensed under a <a href="http://creativecommons.org/licenses/by/3.0/deed.zh" target="_blank" rel="external nofollow noreferrer noopener">Creative Commons Attribution 3.0 Unported License</a></p><h1 id="口耳相传"><a href="#口耳相传" class="headerlink" title="口耳相传"></a>口耳相传</h1><p>一份社群驱动的风格指南，对一个社群来说，只是让人知道有这个社群。微博转发这份指南，分享给你的朋友或同事。我们得到的每个注解、建议或意见都可以让这份指南变得更好一点。而我们想要拥有的是最好的指南，不是吗？</p><p>共勉之,<br><br><a href="https://twitter.com/bbatsov" target="_blank" rel="external nofollow noreferrer noopener">Bozhidar</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序幕&quot;&gt;&lt;a href=&quot;#序幕&quot; class=&quot;headerlink&quot; title=&quot;序幕&quot;&gt;&lt;/a&gt;序幕&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Role models are important. &lt;br&gt;&lt;br&gt;– 机械战警 Alex J. Murphy&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这份指南目的于演示一整套 Rails 3 开发的风格惯例及最佳实践。这是一份与由现存社群所驱动的&lt;a href=&quot;https://github.com/bbatsov/ruby-style-guide&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;Ruby 编码风格指南&lt;/a&gt;互补的指南。&lt;/p&gt;
&lt;p&gt;而本指南中&lt;a href=&quot;#testing&quot;&gt;测试 Rails 应用&lt;/a&gt;小节摆在&lt;a href=&quot;#developing&quot;&gt;开发 Rails 应用&lt;/a&gt;之后，因为我相信&lt;a href=&quot;http://en.wikipedia.org/wiki/Behavior_Driven_Development&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;行为驱动开发&lt;/a&gt;&lt;br&gt;(BDD) 是最佳的软体开发之道。铭记在心吧。&lt;/p&gt;
&lt;p&gt;Rails 是一个坚持己见的框架，而这也是一份坚持己见的指南。在我的心里，我坚信 &lt;a href=&quot;https://www.relishapp.com/rspec&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;RSpec&lt;/a&gt; 优于 Test::Unit，&lt;a href=&quot;http://sass-lang.com/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;Sass&lt;/a&gt; 优于 CSS 以及&lt;br&gt;&lt;a href=&quot;http://haml-lang.com/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;Haml&lt;/a&gt;，(&lt;a href=&quot;http://slim-lang.com/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;Slim&lt;/a&gt;) 优于 Erb。所以不要期望在这里找到 Test::Unit, CSS 及 Erb 的忠告。&lt;/p&gt;
&lt;p&gt;某些忠告仅适用于 Rails 3.1+ 以上版本。&lt;/p&gt;
&lt;p&gt;你可以使用 &lt;a href=&quot;https://github.com/TechnoGate/transmuter&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;Transmuter&lt;/a&gt; 来产生本指南的一份 PDF 或 HTML 复本。&lt;/p&gt;
&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#-rails-&quot;&gt;开发 Rails 应用程序&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#-2&quot;&gt;配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-3&quot;&gt;路由&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-4&quot;&gt;控制器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-5&quot;&gt;模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-6&quot;&gt;迁移&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-7&quot;&gt;视图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-8&quot;&gt;国际化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#assets&quot;&gt;Assets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#mailers&quot;&gt;Mailers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#bundler&quot;&gt;Bundler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-gems&quot;&gt;无价的 Gems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-gems-1&quot;&gt;缺陷的 Gems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-9&quot;&gt;管理进程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-rails--1&quot;&gt;测试 Rails 应用&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#cucumber&quot;&gt;Cucumber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec&quot;&gt;RSpec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本指南被翻译成下列语言：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/JuanitoFatas/rails-style-guide/blob/master/README.md&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;英文原版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/JuanitoFatas/rails-style-guide/blob/master/README-zhTW.md&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;繁體中文&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Guide" scheme="http://notes.seirhsiao.com/categories/Guide/"/>
    
    
      <category term="指南" scheme="http://notes.seirhsiao.com/tags/%E6%8C%87%E5%8D%97/"/>
    
      <category term="风格" scheme="http://notes.seirhsiao.com/tags/%E9%A3%8E%E6%A0%BC/"/>
    
      <category term="翻译" scheme="http://notes.seirhsiao.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="ruby" scheme="http://notes.seirhsiao.com/tags/ruby/"/>
    
      <category term="rails" scheme="http://notes.seirhsiao.com/tags/rails/"/>
    
  </entry>
  
  <entry>
    <title>markdown学习资料汇总</title>
    <link href="http://notes.seirhsiao.com/posts/1f302c16/"/>
    <id>http://notes.seirhsiao.com/posts/1f302c16/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:33:19.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>自从学习使用 <code>markdown</code> 以来，收集的学习资料、软件工具、使用指南等，如果你没有听说过或者还没有体验过<code>markdown</code> 进行写作文章，强烈建议 have a try !</p><h2 id="markdown-介绍"><a href="#markdown-介绍" class="headerlink" title="markdown 介绍"></a>markdown 介绍</h2><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。 - <strong>wikipedia</strong></p></blockquote><ul><li><p><a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external nofollow noreferrer noopener">Daring Fireball: Markdown</a> Project markdown</p></li><li><p><a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="external nofollow noreferrer noopener">Markdown wikipedia 介绍</a></p></li><li><p><a href="http://fletcherpenney.net/multimarkdown/" target="_blank" rel="external nofollow noreferrer noopener">MultiMarkdown</a> 引入更多标记特性和输出选项的改进版Markdown</p><a id="more"></a><h2 id="why-markdown"><a href="#why-markdown" class="headerlink" title="why markdown"></a>why markdown</h2></li><li><p>纯文本，兼容性极强，可以用任意文本编辑器打开.</p></li><li><p>语法简单（the syntax is so simple you can barely call it “syntax.”），零学习成本，极好的可读性，让你专注于文字写作而不是页面排版，并且兼容 HTML，simple but powerful .</p></li><li><p>格式转换方便，Markdown 的文本你可以轻松转换为 html、pdf、epub、电子书等。</p></li><li><p>适合团队协作，可以使用 git/svn 等进行版本控制管理。</p></li><li><p><a href="http://www.yangzhiping.com/tech/r-markdown-knitr.html" target="_blank" rel="external nofollow noreferrer noopener">阳志平：为什么 Markdown 成为科技界写作主流？</a></p></li><li><p><a href="http://www.ituring.com.cn/article/828?q=markdown" target="_blank" rel="external nofollow noreferrer noopener">图灵社区：用Markdown来写自由书籍-开源技术的方案</a></p></li></ul><p>目前很多在线服务商均支持使用markdown编写：</p><ul><li><a href="https://github.com" target="_blank" rel="external nofollow noreferrer noopener">Github</a> 最先支持，使用Markdown的一个分支版本来格式化评论、消息以及其它内容。</li><li><a href="http://stackoverflow.com/" target="_blank" rel="external nofollow noreferrer noopener">Stack Overflow</a> 使用一种 Markdown 的分支作为它的文章格式化系统。</li><li><a href="http://www.cnblogs.com/" target="_blank" rel="external nofollow noreferrer noopener">博客园</a> 国内技术人的博客家园，每天活跃上万用户，高质量社区。</li><li><a href="http://www.csdn.net/" target="_blank" rel="external nofollow noreferrer noopener">CSDN</a> 号称全球最大中文IT社区，涵盖了多种语言、架构、博客、俱乐部等模块的技术论坛。</li><li><a href="http://www.ituring.com.cn/" target="_blank" rel="external nofollow noreferrer noopener">图灵社区</a> 使用markdown语法供用户写作电子书.</li><li><a href="http://www.jianshu.com/" target="_blank" rel="external nofollow noreferrer noopener">简书</a> 重拾文字的力量，交流故事，沟通想法，一个基于内容分享的社区。</li><li><a href="http://www.wiz.cn/" target="_blank" rel="external nofollow noreferrer noopener">为知笔记</a> 国内顶尖笔记软件，支持使用Markdown语法编辑笔记。</li><li>……</li></ul><h2 id="markdown-使用"><a href="#markdown-使用" class="headerlink" title="markdown 使用"></a>markdown 使用</h2><ul><li><a href="http://wowubuntu.com/markdown/basic.html" target="_blank" rel="external nofollow noreferrer noopener">Markdown: Basics （快速入门）</a></li><li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external nofollow noreferrer noopener">Markdown 完整语法说明 (简体中文版)</a></li><li><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="external nofollow noreferrer noopener">Github: Mastering Markdown</a> GitHub 帮助中关于 Markdown 的语法帮助</li><li><a href="https://github.com/hzlzh/1MarkDown" target="_blank" rel="external nofollow noreferrer noopener">MarkDown 语法团队规范</a> 语法规范简洁版</li><li><a href="http://www.cirosantilli.com/markdown-style-guide/" target="_blank" rel="external nofollow noreferrer noopener">Markdown Style Guide</a> 语法规范复杂版</li><li><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" target="_blank" rel="external nofollow noreferrer noopener">Markdown Cheatsheet</a></li><li><a href="https://help.github.com/articles/github-flavored-markdown/" target="_blank" rel="external nofollow noreferrer noopener">GitHub Flavored Markdown</a> GitHub 使用的 Markdown 语法，略微不同于标准 Markdown 语法。提供了一些更加简洁的语法，类似 URL autolinking, Strikethrough, Fenced code blocks, Syntax highlighting 等等</li><li><a href="http://fletcherpenney.net/multimarkdown/" target="_blank" rel="external nofollow noreferrer noopener">MultiMarkdown 介绍</a> 对 markdown 进行的扩展功能</li></ul><h2 id="markdown-工具"><a href="#markdown-工具" class="headerlink" title="markdown 工具"></a>markdown 工具</h2><ul><li><a href="https://maxiang.info/" target="_blank" rel="external nofollow noreferrer noopener">马克飞象</a> web/chrome 离线客户端，markdown 全功能支持，最大特点内容能够同步到印象笔记（evernote）中，笔记的用户重度推荐，按年收费，目前作者 <a href="http://weibo.com/u/2788354117" target="_blank" rel="external nofollow noreferrer noopener">@weibo</a> 正在开发跨平台的客户端。</li><li><a href="https://stackedit.io/" target="_blank" rel="external nofollow noreferrer noopener">StackEdit</a> 在线 markdown 编辑器，可同步文档到Google Drive和 Dropbox，可发布文章到 Blogger，GitHub，Google Drive，Dropbox，Tumblr和WordPress。</li><li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external nofollow noreferrer noopener">cmd 作业部落</a> 支持 win/mac/linux/web/chrome 全平台，支持实时同步预览，支持代码高亮、数学公式，区分写作和阅读模式，支持在线存储，分享文稿网址。</li><li><a href="http://macdown.uranusjr.com/" target="_blank" rel="external nofollow noreferrer noopener">MacDown</a> OSX 上的 Markdown 开源编辑器，支持代码高亮，实时预览等。</li><li><a href="http://www.markdownpad.com/" target="_blank" rel="external nofollow noreferrer noopener">MarkdownPad</a> Windows上的全功能Markdown编辑器，推荐win上使用，基本全部功能。</li><li><a href="http://marked2app.com/" target="_blank" rel="external nofollow noreferrer noopener">Marked2</a> 多种 md 显示方案，不能够编辑文件，只用来展示文件，配合 <a href="https://packagecontrol.io/packages/MarkdownEditing" target="_blank" rel="external nofollow noreferrer noopener">subline text markdown edit</a> 插件，完美使用； </li><li><a href="http://zh.mweb.im/" target="_blank" rel="external nofollow noreferrer noopener">MWeb</a> 专业的 Markdown 写作、记笔记、静态博客生成软件，由国内独立开发者<a href="http://weibo.com/oulvhai" target="_blank" rel="external nofollow noreferrer noopener">@oulvhai</a>开发，支持Toc、Table、代码高亮、支持发布到 Wordrpess 博客、支持 Metaweblog API 的博客服务、Wordpress.com、Evernote 和印象笔记、Blogger、Scriptogr.am、Tumblr等服务。</li><li><a href="http://pad.haroopress.com/user.html" target="_blank" rel="external nofollow noreferrer noopener">Haroopad</a> 又一款简洁多功能的跨平台编辑器，全功能支持，再加上对社交网络友好的连接，多种主题等，感兴趣的可以看看。详情参考<a href="https://github.com/xirong/my-markdown/issues/1" target="_blank" rel="external nofollow noreferrer noopener">issue#1</a></li><li>这几款就够了，多了就有选择症 ……</li></ul><h2 id="reference-参考"><a href="#reference-参考" class="headerlink" title="reference 参考"></a>reference 参考</h2><ul><li><a href="http://brettterpstra.com/2011/08/31/why-markdown-a-two-minute-explanation/" target="_blank" rel="external nofollow noreferrer noopener">Why Markdown? A two-minute explanation</a></li><li><a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="external nofollow noreferrer noopener">简书：献给写作者的 Markdown 新手指南</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;自从学习使用 &lt;code&gt;markdown&lt;/code&gt; 以来，收集的学习资料、软件工具、使用指南等，如果你没有听说过或者还没有体验过&lt;code&gt;markdown&lt;/code&gt; 进行写作文章，强烈建议 have a try !&lt;/p&gt;
&lt;h2 id=&quot;markdown-介绍&quot;&gt;&lt;a href=&quot;#markdown-介绍&quot; class=&quot;headerlink&quot; title=&quot;markdown 介绍&quot;&gt;&lt;/a&gt;markdown 介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Markdown 是一种轻量级标记语言，它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。 - &lt;strong&gt;wikipedia&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;Daring Fireball: Markdown&lt;/a&gt; Project markdown&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Markdown&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;Markdown wikipedia 介绍&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://fletcherpenney.net/multimarkdown/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;MultiMarkdown&lt;/a&gt; 引入更多标记特性和输出选项的改进版Markdown&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="http://notes.seirhsiao.com/categories/Markdown/"/>
    
    
      <category term="markdown" scheme="http://notes.seirhsiao.com/tags/markdown/"/>
    
      <category term="资源" scheme="http://notes.seirhsiao.com/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>前端知识结构</title>
    <link href="http://notes.seirhsiao.com/posts/ad32fa10/"/>
    <id>http://notes.seirhsiao.com/posts/ad32fa10/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:33:05.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Frontend-Knowledge-Structure"><a href="#Frontend-Knowledge-Structure" class="headerlink" title="Frontend Knowledge Structure"></a>Frontend Knowledge Structure</h1><h2 id="项目起源"><a href="#项目起源" class="headerlink" title="项目起源"></a>项目起源</h2><p>还记得@jayli 的这幅前端知识结构图么。</p><p><img alt="前端知识结构" data-src="https://raw.github.com/JacksonTian/fks/master/figures/fks.jpg" class="lazyload"></p><p>图片的形式具有诸多的不便。缺失源图的我们，无法为此图贡献些什么，随着时间的迁移，或许有些技术点会发生改变，所以有了这个GitHub项目。我们可以通过协作的方式来共同维护这个项目。Git的历史记录也可以见证前端行业的一些变迁。</p><p><a href="http://html5ify.com/fks/fks_chart/" target="_blank" rel="external nofollow noreferrer noopener">可视化效果</a></p><a id="more"></a><h2 id="前端开发知识结构"><a href="#前端开发知识结构" class="headerlink" title="前端开发知识结构"></a>前端开发知识结构</h2><ul><li><p>前端工程师</p><ul><li>浏览器<ul><li>IE6/<a href="http://www.microsoft.com/en-us/download/internet-explorer-7-details.aspx" target="_blank" rel="external nofollow noreferrer noopener">7</a>/<a href="http://windows.microsoft.com/en-US/internet-explorer/downloads/ie-8" target="_blank" rel="external nofollow noreferrer noopener">8</a>/<a href="http://windows.microsoft.com/en-US/internet-explorer/downloads/ie-9/worldwide-languages" target="_blank" rel="external nofollow noreferrer noopener">9</a>/<a href="http://windows.microsoft.com/en-US/internet-explorer/ie-10-worldwide-languages" target="_blank" rel="external nofollow noreferrer noopener">10</a>/<a href="http://windows.microsoft.com/en-US/internet-explorer/ie-11-worldwide-languages" target="_blank" rel="external nofollow noreferrer noopener">11</a> (Trident)</li><li><a href="http://www.mozilla.org/en-US/" target="_blank" rel="external nofollow noreferrer noopener">Firefox</a> (Gecko)</li><li><a href="http://www.google.com/chrome" target="_blank" rel="external nofollow noreferrer noopener">Chrome</a>/<a href="http://www.chromium.org/" target="_blank" rel="external nofollow noreferrer noopener">Chromium</a> (Blink)</li><li><a href="http://www.apple.com/safari/" target="_blank" rel="external nofollow noreferrer noopener">Safari</a> (WebKit)</li><li><a href="http://www.opera.com/" target="_blank" rel="external nofollow noreferrer noopener">Opera</a> (Blink)</li></ul></li><li>编程语言<ul><li><a href="https://developer.mozilla.org/en-US/docs/JavaScript" target="_blank" rel="external nofollow noreferrer noopener">JavaScript</a>/<a href="http://nodejs.org/" target="_blank" rel="external nofollow noreferrer noopener">Node.js</a></li><li><a href="http://coffeescript.org/" target="_blank" rel="external nofollow noreferrer noopener">CoffeeScript</a></li><li><a href="http://www.typescriptlang.org/" target="_blank" rel="external nofollow noreferrer noopener">TypeScript</a></li></ul></li><li>切页面<ul><li><a href="http://www.w3.org/html/" target="_blank" rel="external nofollow noreferrer noopener">HTML</a>/<a href="http://www.w3.org/TR/html5/" target="_blank" rel="external nofollow noreferrer noopener">HTML5</a></li><li><a href="http://www.w3.org/Style/CSS/" target="_blank" rel="external nofollow noreferrer noopener">CSS/CSS3</a></li><li><a href="http://sass-lang.com/" target="_blank" rel="external nofollow noreferrer noopener">Sass</a>/<a href="http://lesscss.org/" target="_blank" rel="external nofollow noreferrer noopener">LESS</a>/<a href="http://learnboost.github.io/stylus/" target="_blank" rel="external nofollow noreferrer noopener">Stylus</a></li><li><a href="http://www.photoshop.com/products/photoshop" target="_blank" rel="external nofollow noreferrer noopener">PhotoShop</a>/<a href="http://www.getpaint.net/" target="_blank" rel="external nofollow noreferrer noopener">Paint.net</a>/<a href="http://www.adobe.com/cn/products/fireworks.html" target="_blank" rel="external nofollow noreferrer noopener">Fireworks</a>/<a href="http://www.gimp.org/" target="_blank" rel="external nofollow noreferrer noopener">GIMP</a>/<a href="http://bohemiancoding.com/sketch/" target="_blank" rel="external nofollow noreferrer noopener">Sketch</a></li></ul></li><li>开发工具<ul><li>编辑器和IDE<ul><li><a href="http://www.vim.org/" target="_blank" rel="external nofollow noreferrer noopener">VIM</a>/<a href="http://www.sublimetext.com/" target="_blank" rel="external nofollow noreferrer noopener">Sublime Text2</a></li><li><a href="http://notepad-plus-plus.org/" target="_blank" rel="external nofollow noreferrer noopener">Notepad++</a>/<a href="http://www.editplus.com/" target="_blank" rel="external nofollow noreferrer noopener">EditPlus</a></li><li><a href="http://www.jetbrains.com/webstorm/" target="_blank" rel="external nofollow noreferrer noopener">WebStorm</a></li><li><a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external nofollow noreferrer noopener">Emacs</a>  <a href="http://emacswiki.org" target="_blank" rel="external nofollow noreferrer noopener">EmacsWiki</a></li><li><a href="http://brackets.io" target="_blank" rel="external nofollow noreferrer noopener">Brackets</a></li><li><a href="https://atom.io/" target="_blank" rel="external nofollow noreferrer noopener">Atom</a></li><li><a href="http://limetext.org/" target="_blank" rel="external nofollow noreferrer noopener">Lime Text</a></li><li><a href="http://lighttable.com/" target="_blank" rel="external nofollow noreferrer noopener">Light Table</a></li><li><a href="https://www.codebox.io/" target="_blank" rel="external nofollow noreferrer noopener">Codebox</a></li><li><a href="http://macromates.com/" target="_blank" rel="external nofollow noreferrer noopener">TextMate</a></li><li><a href="http://neovim.org/" target="_blank" rel="external nofollow noreferrer noopener">Neovim</a></li><li><a href="http://www.activestate.com/komodo-edit" target="_blank" rel="external nofollow noreferrer noopener">Komodo IDE / Edit</a></li><li><a href="http://www.eclipse.org/" target="_blank" rel="external nofollow noreferrer noopener">Eclipse</a></li><li><a href="http://www.visualstudio.com/" target="_blank" rel="external nofollow noreferrer noopener">Visual Studio</a>/<a href="https://code.visualstudio.com/" target="_blank" rel="external nofollow noreferrer noopener">Visual Studio Code</a></li><li><a href="https://netbeans.org/" target="_blank" rel="external nofollow noreferrer noopener">NetBeans</a></li><li><a href="http://c9.io/" target="_blank" rel="external nofollow noreferrer noopener">Cloud9 IDE</a></li><li><a href="http://www.dcloud.io/" target="_blank" rel="external nofollow noreferrer noopener">HBuilder</a></li><li><a href="http://nuclide.io/" target="_blank" rel="external nofollow noreferrer noopener">Nuclide</a></li></ul></li><li>调试工具<ul><li><a href="http://getfirebug.com/" target="_blank" rel="external nofollow noreferrer noopener">Firebug</a>/<a href="https://addons.mozilla.org/en-US/firefox/addon/firecookie/" target="_blank" rel="external nofollow noreferrer noopener">Firecookie</a></li><li><a href="http://developer.yahoo.com/yslow/" target="_blank" rel="external nofollow noreferrer noopener">YSlow</a></li><li><a href="http://www.microsoft.com/en-us/download/details.aspx?id=18359" target="_blank" rel="external nofollow noreferrer noopener">IEDeveloperToolbar</a>/<a href="http://www.my-debugbar.com/wiki/IETester/HomePage" target="_blank" rel="external nofollow noreferrer noopener">IETester</a></li><li><a href="http://www.fiddler2.com/fiddler2/" target="_blank" rel="external nofollow noreferrer noopener">Fiddler</a></li><li><a href="https://developer.chrome.com/devtools" target="_blank" rel="external nofollow noreferrer noopener">Chrome Dev Tools</a></li><li><a href="http://www.opera.com/dragonfly/" target="_blank" rel="external nofollow noreferrer noopener">Dragonfly</a></li><li><a href="http://www.debugbar.com/" target="_blank" rel="external nofollow noreferrer noopener">DebugBar</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Venkman" target="_blank" rel="external nofollow noreferrer noopener">Venkman</a></li></ul></li><li>版本管理<ul><li><a href="http://git-scm.com/" target="_blank" rel="external nofollow noreferrer noopener">Git</a>/<a href="http://subversion.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">SVN</a>/<a href="http://mercurial.selenic.com/" target="_blank" rel="external nofollow noreferrer noopener">Mercurial</a></li><li><a href="https://github.com/" target="_blank" rel="external nofollow noreferrer noopener">Github</a>/<a href="https://about.gitlab.com/" target="_blank" rel="external nofollow noreferrer noopener">GitLab</a>/<a href="https://bitbucket.org/" target="_blank" rel="external nofollow noreferrer noopener">Bitbucket</a>/<a href="https://gitorious.org/" target="_blank" rel="external nofollow noreferrer noopener">Gitorious</a>/<a href="http://savannah.gnu.org/" target="_blank" rel="external nofollow noreferrer noopener">GNU Savannah</a>/<a href="https://launchpad.net/" target="_blank" rel="external nofollow noreferrer noopener">Launchpad</a>/<a href="http://sourceforge.net/" target="_blank" rel="external nofollow noreferrer noopener">SourceForge</a>/<a href="http://www.collab.net/products/teamforge" target="_blank" rel="external nofollow noreferrer noopener">TeamForge</a></li></ul></li></ul></li><li>代码质量<ul><li>Coding style<ul><li><a href="http://www.jslint.com/" target="_blank" rel="external nofollow noreferrer noopener">JSLint</a>/<a href="http://www.jshint.com/" target="_blank" rel="external nofollow noreferrer noopener">JSHint</a>/<a href="https://github.com/mdevils/node-jscs" target="_blank" rel="external nofollow noreferrer noopener">jscs</a>/<a href="https://github.com/eslint/eslint" target="_blank" rel="external nofollow noreferrer noopener">ESLint</a></li><li><a href="http://csslint.net/" target="_blank" rel="external nofollow noreferrer noopener">CSSLint</a></li><li><a href="http://validator.w3.org/" target="_blank" rel="external nofollow noreferrer noopener">Markup Validation Service</a></li><li><a href="https://validator.whatwg.org/" target="_blank" rel="external nofollow noreferrer noopener">HTML Validators</a></li></ul></li><li>单元测试<ul><li><a href="http://qunitjs.com/" target="_blank" rel="external nofollow noreferrer noopener">QUnit</a>/<a href="http://jasmine.github.io/" target="_blank" rel="external nofollow noreferrer noopener">Jasmine</a></li><li><a href="http://mochajs.org/" target="_blank" rel="external nofollow noreferrer noopener">Mocha</a>/<a href="https://github.com/visionmedia/should.js/" target="_blank" rel="external nofollow noreferrer noopener">Should</a>/<a href="http://chaijs.com/" target="_blank" rel="external nofollow noreferrer noopener">Chai</a>/<a href="https://github.com/LearnBoost/expect.js/" target="_blank" rel="external nofollow noreferrer noopener">Expect</a></li><li><a href="http://unitjs.com/" target="_blank" rel="external nofollow noreferrer noopener">Unit JS</a></li></ul></li><li>自动化测试<ul><li><a href="http://docs.seleniumhq.org/docs/03_webdriver.jsp" target="_blank" rel="external nofollow noreferrer noopener">WebDriver</a>/<a href="https://github.com/angular/protractor" target="_blank" rel="external nofollow noreferrer noopener">Protractor</a>/<a href="https://github.com/karma-runner/karma" target="_blank" rel="external nofollow noreferrer noopener">Karma Runner</a>/<a href="http://sahi.co.in/" target="_blank" rel="external nofollow noreferrer noopener">Sahi</a></li><li><a href="http://phantomjs.org/" target="_blank" rel="external nofollow noreferrer noopener">phantomjs</a></li><li><a href="https://saucelabs.com/" target="_blank" rel="external nofollow noreferrer noopener">SourceLabs</a>/<a href="http://www.browserstack.com/" target="_blank" rel="external nofollow noreferrer noopener">BrowserStack</a></li></ul></li></ul></li><li>前端库/框架<ul><li><a href="http://jquery.com/" target="_blank" rel="external nofollow noreferrer noopener">jQuery</a>/<a href="http://underscorejs.org/" target="_blank" rel="external nofollow noreferrer noopener">Underscore</a>/<a href="http://mootools.net/" target="_blank" rel="external nofollow noreferrer noopener">Mootools</a>/<a href="http://www.prototypejs.org/" target="_blank" rel="external nofollow noreferrer noopener">Prototype.js</a></li><li><a href="http://yuilibrary.com/projects/yui3/" target="_blank" rel="external nofollow noreferrer noopener">YUI3</a>/<a href="http://dojotoolkit.org/" target="_blank" rel="external nofollow noreferrer noopener">Dojo</a>/<a href="http://www.sencha.com/products/extjs" target="_blank" rel="external nofollow noreferrer noopener">ExtJS</a>/<a href="http://docs.kissyui.com/" target="_blank" rel="external nofollow noreferrer noopener">KISSY</a></li><li><a href="http://backbonejs.org/" target="_blank" rel="external nofollow noreferrer noopener">Backbone</a>/<a href="http://knockoutjs.com/" target="_blank" rel="external nofollow noreferrer noopener">KnockoutJS</a>/<a href="http://emberjs.com/" target="_blank" rel="external nofollow noreferrer noopener">Emberjs</a></li><li><a href="http://angularjs.org/" target="_blank" rel="external nofollow noreferrer noopener">AngularJS</a><ul><li><a href="https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk" target="_blank" rel="external nofollow noreferrer noopener">Batarang</a></li></ul></li><li><a href="http://getbootstrap.com/" target="_blank" rel="external nofollow noreferrer noopener">Bootstrap</a></li><li><a href="http://www.semantic-ui.com/" target="_blank" rel="external nofollow noreferrer noopener">Semantic UI</a></li><li><a href="http://juiceui.com/" target="_blank" rel="external nofollow noreferrer noopener">Juice UI</a></li><li><a href="http://webatomsjs.neurospeech.com/" target="_blank" rel="external nofollow noreferrer noopener">Web Atoms</a></li><li><a href="http://docs.polymerchina.org/" target="_blank" rel="external nofollow noreferrer noopener">Polymer</a></li><li><a href="http://dhtmlx.com/" target="_blank" rel="external nofollow noreferrer noopener">Dhtmlx</a></li><li><a href="http://qooxdoo.org/" target="_blank" rel="external nofollow noreferrer noopener">qooxdoo</a></li><li><a href="http://facebook.github.io/react/" target="_blank" rel="external nofollow noreferrer noopener">React</a></li><li><a href="http://mozbrick.github.io/" target="_blank" rel="external nofollow noreferrer noopener">Brick</a></li><li><a href="http://cn.vuejs.org/" target="_blank" rel="external nofollow noreferrer noopener">vue.js</a></li></ul></li><li>前端标准/规范<ul><li>HTTP/1.1: RFCs 7230-7235</li><li><a href="https://http2.github.io/" target="_blank" rel="external nofollow noreferrer noopener">HTTP/2</a></li><li><a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm" target="_blank" rel="external nofollow noreferrer noopener">ECMAScript3/5</a></li><li><a href="http://www.ecma-international.org/ecma-262/6.0/index.html" target="_blank" rel="external nofollow noreferrer noopener">ECMAScript6</a></li><li><a href="http://www.w3.org/TR/" target="_blank" rel="external nofollow noreferrer noopener">W3C: DOM/BOM/XHTML/XML/JSON/JSONP/…</a></li><li><a href="http://wiki.commonjs.org/wiki/Modules/1.0" target="_blank" rel="external nofollow noreferrer noopener">CommonJS Modules</a>/<a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="external nofollow noreferrer noopener">AMD</a></li><li><a href="http://www.w3.org/html/wg/drafts/html/master/" target="_blank" rel="external nofollow noreferrer noopener">HTML5</a>/<a href="http://www.w3.org/Style/CSS/specs.en.html" target="_blank" rel="external nofollow noreferrer noopener">CSS3</a></li><li><a href="http://semanticweb.org/" target="_blank" rel="external nofollow noreferrer noopener">Semantic Web</a><ul><li><a href="http://schema.org" target="_blank" rel="external nofollow noreferrer noopener">MicroData</a></li><li><a href="http://www.w3.org/TR/rdfa-core/" target="_blank" rel="external nofollow noreferrer noopener">RDFa</a></li></ul></li><li><a href="http://www.w3.org/WAI/" target="_blank" rel="external nofollow noreferrer noopener">Web Accessibility</a><ul><li><a href="http://www.w3.org/TR/WAI-WEBCONTENT/" target="_blank" rel="external nofollow noreferrer noopener">WCAG</a></li><li><a href="http://www.w3.org/TR/role-attribute/" target="_blank" rel="external nofollow noreferrer noopener">Role Attribute</a></li><li><a href="http://www.w3.org/TR/wai-aria/" target="_blank" rel="external nofollow noreferrer noopener">WAI-ARIA</a></li></ul></li></ul></li><li>性能<ul><li><a href="http://jsperf.com/" target="_blank" rel="external nofollow noreferrer noopener">JSPerf</a></li><li><a href="http://developer.yahoo.com/performance/rules.html" target="_blank" rel="external nofollow noreferrer noopener">YSlow 35 rules</a></li><li><a href="https://developers.google.com/speed/pagespeed/" target="_blank" rel="external nofollow noreferrer noopener">PageSpeed</a></li><li><a href="http://www.httpwatch.com/" target="_blank" rel="external nofollow noreferrer noopener">HTTPWatch</a></li><li><a href="http://www.compuware.com/application-performance-management/dynatrace-ajax-download.html" target="_blank" rel="external nofollow noreferrer noopener">DynaTrace’s Ajax</a></li><li><a href="http://book.douban.com/subject/5362856/" target="_blank" rel="external nofollow noreferrer noopener">高性能JavaScript</a></li></ul></li><li>SEO</li><li>编程知识储备<ul><li><a href="http://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84" target="_blank" rel="external nofollow noreferrer noopener">数据结构</a></li><li>OOP/AOP</li><li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/prototypes-in-javascript-what-you-need-to-know/" target="_blank" rel="external nofollow noreferrer noopener">原型链</a>/作用域链</li><li><a href="http://www.jibbering.com/faq/notes/closures/" target="_blank" rel="external nofollow noreferrer noopener">闭包</a></li><li><a href="http://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%9E%8B" target="_blank" rel="external nofollow noreferrer noopener">编程范型</a></li><li><a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/" target="_blank" rel="external nofollow noreferrer noopener">设计模式</a></li><li><a href="http://sanshi.me/articles/JavaScript-Garden-CN/html/index.html" target="_blank" rel="external nofollow noreferrer noopener">Javascript Tips</a></li></ul></li><li>部署流程<ul><li>压缩合并<ul><li><a href="http://developer.yahoo.com/yui/compressor/" target="_blank" rel="external nofollow noreferrer noopener">YUI Compressor</a></li><li><a href="https://developers.google.com/closure/compiler/" target="_blank" rel="external nofollow noreferrer noopener">Google Clousure Complier</a></li><li><a href="https://github.com/mishoo/UglifyJS" target="_blank" rel="external nofollow noreferrer noopener">UglifyJS</a></li><li><a href="https://github.com/GoalSmashers/clean-css" target="_blank" rel="external nofollow noreferrer noopener">CleanCSS</a></li></ul></li><li>文档输出<ul><li><a href="https://github.com/jsdoc3/jsdoc" target="_blank" rel="external nofollow noreferrer noopener">JSDoc</a></li><li><a href="https://github.com/visionmedia/dox" target="_blank" rel="external nofollow noreferrer noopener">Dox</a>/<a href="https://github.com/JacksonTian/doxmate" target="_blank" rel="external nofollow noreferrer noopener">Doxmate</a>/<a href="https://github.com/luozhihua/grunt-doxmate" target="_blank" rel="external nofollow noreferrer noopener">Grunt-Doxmate</a></li></ul></li><li>项目构建工具<ul><li><a href="http://www.gnu.org/software/make/" target="_blank" rel="external nofollow noreferrer noopener">make</a>/<a href="http://ant.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Ant</a></li><li><a href="http://code.google.com/p/gyp/" target="_blank" rel="external nofollow noreferrer noopener">GYP</a></li><li><a href="http://gruntjs.com/" target="_blank" rel="external nofollow noreferrer noopener">Grunt</a></li><li><a href="http://gulpjs.com/" target="_blank" rel="external nofollow noreferrer noopener">Gulp</a></li><li><a href="http://yeoman.io/" target="_blank" rel="external nofollow noreferrer noopener">Yeoman</a></li><li><a href="http://fis.baidu.com/" target="_blank" rel="external nofollow noreferrer noopener">FIS</a></li><li><a href="https://github.com/modulejs/modjs" target="_blank" rel="external nofollow noreferrer noopener">Mod</a></li></ul></li></ul></li><li>代码组织<ul><li>类库模块化<ul><li><a href="http://www.commonjs.org/" target="_blank" rel="external nofollow noreferrer noopener">CommonJS</a>/AMD</li><li><a href="http://yuilibrary.com/projects/yui3/" target="_blank" rel="external nofollow noreferrer noopener">YUI3模块</a></li><li><a href="http://webpack.github.io/" target="_blank" rel="external nofollow noreferrer noopener">webpack</a></li></ul></li><li>业务逻辑模块化<ul><li><a href="https://github.com/twitter/bower" target="_blank" rel="external nofollow noreferrer noopener">bower</a>/<a href="https://github.com/component/component" target="_blank" rel="external nofollow noreferrer noopener">component</a></li></ul></li><li>文件加载<ul><li><a href="http://labjs.com/" target="_blank" rel="external nofollow noreferrer noopener">LABjs</a></li><li><a href="http://seajs.org/" target="_blank" rel="external nofollow noreferrer noopener">SeaJS</a>/<a href="http://requirejs.org/" target="_blank" rel="external nofollow noreferrer noopener">Require.js</a></li></ul></li><li>模块化预处理器<ul><li><a href="https://github.com/substack/node-browserify" target="_blank" rel="external nofollow noreferrer noopener">Browserify</a></li></ul></li></ul></li><li>安全<ul><li><a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery" target="_blank" rel="external nofollow noreferrer noopener">CSRF</a>/<a href="http://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank" rel="external nofollow noreferrer noopener">XSS</a></li><li><a href="http://www.w3.org/TR/CSP/" target="_blank" rel="external nofollow noreferrer noopener">CSP</a></li><li><a href="https://developer.mozilla.org/docs/Web/Security/Same-origin_policy" target="_blank" rel="external nofollow noreferrer noopener">Same-origin policy</a></li><li>ADsafe/Caja/Sandbox</li></ul></li><li>移动Web<ul><li>HTML5/CSS3</li><li><a href="http://zh.wikipedia.org/wiki/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1" target="_blank" rel="external nofollow noreferrer noopener">响应式网页设计</a></li><li><a href="http://zeptojs.com/" target="_blank" rel="external nofollow noreferrer noopener">Zeptojs</a>/<a href="http://cubiq.org/iscroll" target="_blank" rel="external nofollow noreferrer noopener">iScroll</a></li><li>V5/<a href="http://www.sencha.com/products/touch" target="_blank" rel="external nofollow noreferrer noopener">Sencha Touch</a></li><li><a href="http://phonegap.com/" target="_blank" rel="external nofollow noreferrer noopener">PhoneGap</a></li><li><a href="http://jquerymobile.com/" target="_blank" rel="external nofollow noreferrer noopener">jQuery Mobile</a></li><li><a href="http://www.w3.org/Mobile/" target="_blank" rel="external nofollow noreferrer noopener">W3C Mobile Web Initiative</a></li><li><a href="http://validator.w3.org/mobile/" target="_blank" rel="external nofollow noreferrer noopener">W3C mobileOK Checker</a></li><li><a href="http://openmobilealliance.org/" target="_blank" rel="external nofollow noreferrer noopener">Open Mobile Alliance</a></li></ul></li><li>前沿技术社区/会议<ul><li><a href="http://d2forum.org" target="_blank" rel="external nofollow noreferrer noopener">D2</a>/<a href="http://www.webrebuild.org/" target="_blank" rel="external nofollow noreferrer noopener">WebRebuild</a></li><li>NodeParty/<a href="http://w3ctech.com" target="_blank" rel="external nofollow noreferrer noopener">W3CTech</a>/<a href="http://www.html5dw.com" target="_blank" rel="external nofollow noreferrer noopener">HTML5梦工厂</a></li><li><a href="http://jsconf.com/" target="_blank" rel="external nofollow noreferrer noopener">JSConf</a>/<a href="http://jsconf.cn" target="_blank" rel="external nofollow noreferrer noopener">沪JS(JSConf.cn)</a></li><li>QCon/Velocity/SDCC</li><li><a href="http://jsconf.com/" target="_blank" rel="external nofollow noreferrer noopener">JSConf</a>/<a href="http://www.nodeconf.com/" target="_blank" rel="external nofollow noreferrer noopener">NodeConf</a></li><li><a href="http://cssconf.com/" target="_blank" rel="external nofollow noreferrer noopener">CSSConf</a></li><li>YDN/YUIConf</li><li>HybridApp</li><li><a href="http://whatwg.org/" target="_blank" rel="external nofollow noreferrer noopener">WHATWG</a></li><li><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="external nofollow noreferrer noopener">MDN</a></li><li><a href="http://codepen.io/" target="_blank" rel="external nofollow noreferrer noopener">codepen</a></li><li><a href="http://www.w3cplus.com/" target="_blank" rel="external nofollow noreferrer noopener">w3cplus</a></li><li><a href="https://cnodejs.org/" target="_blank" rel="external nofollow noreferrer noopener">CNode</a></li></ul></li><li>计算机知识储备<ul><li>编译原理</li><li><a href="http://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C" target="_blank" rel="external nofollow noreferrer noopener">计算机网络</a></li><li><a href="http://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" target="_blank" rel="external nofollow noreferrer noopener">操作系统</a></li><li>算法原理</li><li>软件工程/软件测试原理</li><li><a href="http://www.unicode.org/" target="_blank" rel="external nofollow noreferrer noopener">Unicode</a></li></ul></li><li>软技能<ul><li>知识管理/总结分享</li><li>沟通技巧/团队协作</li><li>需求管理/PM</li><li>交互设计/可用性/可访问性知识</li></ul></li><li>可视化<ul><li>SVG/Canvas/VML</li><li>SVG: <a href="http://d3js.org/" target="_blank" rel="external nofollow noreferrer noopener">D3</a>/<a href="http://raphaeljs.com/" target="_blank" rel="external nofollow noreferrer noopener">Raphaël</a>/<a href="http://snapsvg.io/" target="_blank" rel="external nofollow noreferrer noopener">Snap.svg</a>/<a href="http://datavlab.org/datavjs/" target="_blank" rel="external nofollow noreferrer noopener">DataV</a></li><li>Canvas: <a href="http://www.createjs.com/" target="_blank" rel="external nofollow noreferrer noopener">CreateJS</a>/<a href="http://kineticjs.com/" target="_blank" rel="external nofollow noreferrer noopener">KineticJS</a></li><li><a href="http://en.wikipedia.org/wiki/WebGL" target="_blank" rel="external nofollow noreferrer noopener">WebGL</a>/<a href="http://threejs.org/" target="_blank" rel="external nofollow noreferrer noopener">Three.JS</a></li></ul></li></ul></li><li><p>后端工程师</p><ul><li>编程语言<ul><li>C/C++/Java/PHP/Ruby/Python/…</li></ul></li><li>网页服务器<ul><li><a href="http://nginx.org/en/" target="_blank" rel="external nofollow noreferrer noopener">Nginx</a></li><li><a href="http://httpd.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">Apache</a></li><li><a href="http://www.lighttpd.net/" target="_blank" rel="external nofollow noreferrer noopener">Lighttpd</a></li></ul></li><li>数据库<ul><li>SQL</li><li><a href="http://www.mysql.com/" target="_blank" rel="external nofollow noreferrer noopener">MySQL</a>/<a href="http://www.postgresql.org/" target="_blank" rel="external nofollow noreferrer noopener">PostgreSQL</a>/<a href="http://www.oracle.com/us/products/database/overview/index.html" target="_blank" rel="external nofollow noreferrer noopener">Oracle</a>/<a href="http://www-01.ibm.com/software/data/db2" target="_blank" rel="external nofollow noreferrer noopener">DB2</a></li><li><a href="http://www.mongodb.org/" target="_blank" rel="external nofollow noreferrer noopener">MongoDB</a>/<a href="http://couchdb.apache.org/" target="_blank" rel="external nofollow noreferrer noopener">CouchDB</a></li></ul></li><li>数据缓存<ul><li><a href="http://redis.io/" target="_blank" rel="external nofollow noreferrer noopener">Redis</a></li><li><a href="http://memcached.org/" target="_blank" rel="external nofollow noreferrer noopener">Memcached</a></li></ul></li><li>文件缓存/代理<ul><li><a href="https://www.varnish-cache.org/" target="_blank" rel="external nofollow noreferrer noopener">Varnish</a></li><li><a href="http://www.squid-cache.org/" target="_blank" rel="external nofollow noreferrer noopener">Squid</a></li></ul></li><li>操作系统<ul><li>Unix/Linux/OS X/Windows</li></ul></li><li>数据结构</li></ul></li></ul><h2 id="前端书籍推荐"><a href="#前端书籍推荐" class="headerlink" title="前端书籍推荐"></a>前端书籍推荐</h2><p>★越少越简单,越适合入门,★多的要么是难度比较高,要么是比较适合在后面看,比如讲性能之类的书.</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ul><li><a href="http://www.amazon.cn/Eric-Meyer-谈-CSS-迈耶/dp/B00170M84I/" target="_blank" rel="external nofollow noreferrer noopener">Eric Meyer 谈 CSS（卷二）</a>★★★</li><li><a href="http://book.douban.com/subject/2308234/" target="_blank" rel="external nofollow noreferrer noopener">CSS权威指南 （第3版）</a>★★</li><li><a href="http://book.douban.com/subject/4736167/" target="_blank" rel="external nofollow noreferrer noopener">精通CSS</a>★★★</li><li><a href="http://book.douban.com/subject/21338365/" target="_blank" rel="external nofollow noreferrer noopener">HTML &amp; CSS设计与构建网站</a>★ </li></ul><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ul><li><a href="http://book.douban.com/subject/26433805/" target="_blank" rel="external nofollow noreferrer noopener">JavaScript &amp; jQuery交互式Web前端开发</a>★ </li><li><a href="http://book.douban.com/subject/6038371/" target="_blank" rel="external nofollow noreferrer noopener">JavaScript DOM编程艺术 （第2版）</a>★</li><li><a href="http://book.douban.com/subject/10546125/" target="_blank" rel="external nofollow noreferrer noopener">JavaScript高级程序设计（第3版）</a>★★</li><li><a href="http://book.douban.com/subject/10792216/" target="_blank" rel="external nofollow noreferrer noopener">锋利的jQuery</a>★★</li><li><a href="http://book.douban.com/subject/5362856/" target="_blank" rel="external nofollow noreferrer noopener">高性能JavaScript</a>★★★</li><li><a href="http://book.douban.com/subject/3590768/" target="_blank" rel="external nofollow noreferrer noopener">JavaScript语言精粹</a>★★★</li><li><a href="http://book.douban.com/subject/10549733/" target="_blank" rel="external nofollow noreferrer noopener">JavaScript权威指南</a>★★★</li><li><a href="http://book.douban.com/subject/21792530/" target="_blank" rel="external nofollow noreferrer noopener">编写可维护的JavaScript</a>★★★</li><li><a href="http://book.douban.com/subject/3012828/" target="_blank" rel="external nofollow noreferrer noopener">JAVASCRIPT语言精髓与编程实践</a>★★★</li><li><a href="http://www.amazon.com/Effective-JavaScript-Specific-Software-Development/dp/0321812182" target="_blank" rel="external nofollow noreferrer noopener">Effective Javascript</a>★★★</li><li><a href="http://book.douban.com/subject/3176860/" target="_blank" rel="external nofollow noreferrer noopener">Secrets of the JavaScript Ninja</a>★★★</li><li><a href="http://book.douban.com/subject/11506062/" target="_blank" rel="external nofollow noreferrer noopener">JavaScript模式</a>★★★</li><li><a href="http://book.douban.com/subject/3329540/" target="_blank" rel="external nofollow noreferrer noopener">JavaScript设计模式</a>★★★★</li><li><a href="http://book.douban.com/subject/10733304/" target="_blank" rel="external nofollow noreferrer noopener">基于MVC的JavaScript Web富应用开发</a>★★★</li></ul><h3 id="性能实践"><a href="#性能实践" class="headerlink" title="性能实践"></a>性能实践</h3><ul><li><a href="http://book.douban.com/subject/25891125/" target="_blank" rel="external nofollow noreferrer noopener">Web性能实践日志</a>★★★</li><li><a href="http://book.douban.com/subject/25856314/" target="_blank" rel="external nofollow noreferrer noopener">Web性能权威指南</a>★★★</li></ul><h3 id="版本控制工具"><a href="#版本控制工具" class="headerlink" title="版本控制工具"></a>版本控制工具</h3><ul><li><a href="http://book.douban.com/subject/4813786/" target="_blank" rel="external nofollow noreferrer noopener">版本控制之道 (git)</a>★★</li><li><a href="http://iissnan.com/progit/" target="_blank" rel="external nofollow noreferrer noopener">Pro Git</a>★★★</li><li><a href="http://book.douban.com/subject/6526452/" target="_blank" rel="external nofollow noreferrer noopener">Git权威指南</a>★★★★</li></ul><h2 id="后端书籍推荐"><a href="#后端书籍推荐" class="headerlink" title="后端书籍推荐"></a>后端书籍推荐</h2><h3 id="Linux管理"><a href="#Linux管理" class="headerlink" title="Linux管理"></a>Linux管理</h3><ul><li><a href="http://book.douban.com/subject/3042029/" target="_blank" rel="external nofollow noreferrer noopener">Linux 系统管理技术手册</a></li><li><a href="http://book.douban.com/subject/4889838/" target="_blank" rel="external nofollow noreferrer noopener">鸟哥的 Linux 私房菜</a></li><li><a href="http://www.thegeekstuff.com/linux-101-hacks-free-ebook-non-english/" target="_blank" rel="external nofollow noreferrer noopener">Linux 101 Hacks</a></li><li><a href="http://book.douban.com/subject/3519360/" target="_blank" rel="external nofollow noreferrer noopener">UNIX Shell Scripting</a></li><li><a href="http://book.douban.com/subject/6806862/" target="_blank" rel="external nofollow noreferrer noopener">The Linux Command Line</a></li><li><a href="http://oreilly.com/openbook/linag2/book/index.html" target="_blank" rel="external nofollow noreferrer noopener">Linux Network Administrator’s Guide</a></li></ul><h3 id="Linux编程"><a href="#Linux编程" class="headerlink" title="Linux编程"></a>Linux编程</h3><ul><li><a href="http://book.douban.com/subject/4831448/" target="_blank" rel="external nofollow noreferrer noopener">Linux程序设计</a></li><li><a href="http://book.douban.com/subject/3907181/" target="_blank" rel="external nofollow noreferrer noopener">Linux系统编程</a></li><li><a href="http://book.douban.com/subject/1788421/" target="_blank" rel="external nofollow noreferrer noopener">Unix环境高级编程</a></li><li><a href="http://book.douban.com/subject/1467587/" target="_blank" rel="external nofollow noreferrer noopener">Unix编程艺术</a></li><li><a href="http://book.douban.com/subject/4292217/" target="_blank" rel="external nofollow noreferrer noopener">The Linux Programming Interface</a></li><li><a href="http://book.douban.com/subject/3652388/" target="_blank" rel="external nofollow noreferrer noopener">程序员的自我修养</a></li><li><a href="http://book.douban.com/subject/2287506/" target="_blank" rel="external nofollow noreferrer noopener">深入理解Linux内核</a></li><li><a href="http://book.douban.com/subject/1500149/" target="_blank" rel="external nofollow noreferrer noopener">Unix网络编程</a></li><li><a href="http://book.douban.com/subject/1088054/" target="_blank" rel="external nofollow noreferrer noopener">TCP/IP高级编程</a></li></ul><h3 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h3><ul><li><a href="http://book.douban.com/subject/4141733/" target="_blank" rel="external nofollow noreferrer noopener">Linux C编程一站式学习</a></li><li><a href="http://book.douban.com/subject/3012360/" target="_blank" rel="external nofollow noreferrer noopener">C和指针</a></li><li><a href="http://book.douban.com/subject/2778632/" target="_blank" rel="external nofollow noreferrer noopener">C陷阱与缺陷</a></li><li><a href="http://book.douban.com/subject/2377310/" target="_blank" rel="external nofollow noreferrer noopener">C专家编程</a></li><li><a href="http://book.douban.com/subject/2226913/" target="_blank" rel="external nofollow noreferrer noopener">C语言核心技术</a></li><li><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0CDEQFjAA&amp;url=http%3A%2F%2Fblogimg.chinaunix.net%2Fblog%2Fupfile2%2F110210170023.pdf&amp;ei=P95mUfrmNKKriALS04HAAw&amp;usg=AFQjCNEzB88PnpfL0fRgJDkP3O9TlBPswA&amp;sig2=isyd4ktsByNBMa5M9EPhRQ&amp;bvm=bv.45107431,d.cGE&amp;cad=rjt" target="_blank" rel="external nofollow noreferrer noopener">彻底搞定C指针</a></li><li><a href="http://book.douban.com/subject/21317828/" target="_blank" rel="external nofollow noreferrer noopener">征服C指针</a></li><li><a href="http://book.douban.com/subject/1094797/" target="_blank" rel="external nofollow noreferrer noopener">C++编程思想</a></li><li><a href="http://book.douban.com/subject/2116929/" target="_blank" rel="external nofollow noreferrer noopener">高质量程序设计指南—C/C++语言</a></li><li><a href="http://book.douban.com/subject/1484262/" target="_blank" rel="external nofollow noreferrer noopener">Inside the C++ Object Model</a></li><li><a href="http://www.stroustrup.com/Tour.html" target="_blank" rel="external nofollow noreferrer noopener">A Tour of C++</a></li><li><a href="http://en.wikipedia.org/wiki/The_C%2B%2B_Programming_Language" target="_blank" rel="external nofollow noreferrer noopener">The C++ Programming Language</a></li><li><a href="http://www.cppstdlib.com/" target="_blank" rel="external nofollow noreferrer noopener">The C++ Standard Library - A Tutorial and Reference</a></li><li><a href="http://webstore.ansi.org/RecordDetail.aspx?sku=INCITS%2fISO%2fIEC+14882-2012" target="_blank" rel="external nofollow noreferrer noopener">The C++ Standard (INCITS/ISO/IEC 14882-2011)</a></li><li><a href="http://www.artima.com/shop/overview_of_the_new_cpp" target="_blank" rel="external nofollow noreferrer noopener">Overview of the New C++</a></li></ul><h2 id="前端工作面试"><a href="#前端工作面试" class="headerlink" title="前端工作面试"></a>前端工作面试</h2><ul><li><a href="https://github.com/darcyclarke/Front-end-Developer-Interview-Questions" target="_blank" rel="external nofollow noreferrer noopener">前端工作面试问题</a></li></ul><h2 id="内容贡献者"><a href="#内容贡献者" class="headerlink" title="内容贡献者"></a>内容贡献者</h2><p>除了感谢Jayli提供了知识结构图的原本来，还感谢以下的内容贡献者们，结果由<code>git-summary</code>生成于2014-01-03：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">project  :</span> <span class="string">fks</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="attr">repo age :</span> <span class="number">1</span> <span class="string">year,</span> <span class="number">3</span> <span class="string">months</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="attr">active   :</span> <span class="number">53</span> <span class="string">days</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="attr">commits  :</span> <span class="number">108</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="attr">files    :</span> <span class="number">4</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="attr">authors  :</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">   <span class="number">56</span>  <span class="string">Jackson</span> <span class="string">Tian</span>            <span class="number">51.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="number">9</span>  <span class="string">吴晓兰</span>               <span class="number">8.3</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="number">5</span>  <span class="string">liyinkan</span>                <span class="number">4.6</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="number">3</span>  <span class="string">chriscai</span>                <span class="number">2.8</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="number">3</span>  <span class="string">fengxiaolong</span>            <span class="number">2.8</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="number">3</span>  <span class="string">XiNGRZ</span>                  <span class="number">2.8</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="number">2</span>  <span class="string">monkadd</span>                 <span class="number">1.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="number">2</span>  <span class="string">Johnny</span>                  <span class="number">1.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="number">2</span>  <span class="string">weiwenqing</span>              <span class="number">1.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="number">2</span>  <span class="string">Yinkan</span> <span class="string">Li</span>               <span class="number">1.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="number">2</span>  <span class="string">Copypeng</span>                <span class="number">1.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="number">2</span>  <span class="string">左岸</span>                  <span class="number">1.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="number">2</span>  <span class="string">Jakukyo</span> <span class="string">Friel</span>           <span class="number">1.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="number">2</span>  <span class="string">Glowin</span>                  <span class="number">1.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="number">1</span>  <span class="string">李亚川</span>               <span class="number">0.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="number">1</span>  <span class="string">Evan</span> <span class="string">You</span>                <span class="number">0.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="number">1</span>  <span class="string">Mickey</span>                  <span class="number">0.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="number">1</span>  <span class="string">Mickey-</span>                 <span class="number">0.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="number">1</span>  <span class="string">Qi</span> <span class="string">Junyuan</span>              <span class="number">0.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="number">1</span>  <span class="string">browsnet</span>                <span class="number">0.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="number">1</span>  <span class="string">doabit</span>                  <span class="number">0.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="number">1</span>  <span class="string">guoxiangyang</span>            <span class="number">0.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    <span class="number">1</span>  <span class="string">linkgod</span>                 <span class="number">0.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    <span class="number">1</span>  <span class="string">popomore</span>                <span class="number">0.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    <span class="number">1</span>  <span class="string">vipzhicheng</span>             <span class="number">0.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    <span class="number">1</span>  <span class="string">zhaqiang</span>                <span class="number">0.9</span><span class="string">%</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    <span class="number">1</span>  <span class="string">Colin</span> <span class="string">Luo</span>               <span class="number">0.9</span><span class="string">%</span></span></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Frontend-Knowledge-Structure&quot;&gt;&lt;a href=&quot;#Frontend-Knowledge-Structure&quot; class=&quot;headerlink&quot; title=&quot;Frontend Knowledge Structure&quot;&gt;&lt;/a&gt;Frontend Knowledge Structure&lt;/h1&gt;&lt;h2 id=&quot;项目起源&quot;&gt;&lt;a href=&quot;#项目起源&quot; class=&quot;headerlink&quot; title=&quot;项目起源&quot;&gt;&lt;/a&gt;项目起源&lt;/h2&gt;&lt;p&gt;还记得@jayli 的这幅前端知识结构图么。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/JacksonTian/fks/master/figures/fks.jpg&quot; alt=&quot;前端知识结构&quot;&gt;&lt;/p&gt;
&lt;p&gt;图片的形式具有诸多的不便。缺失源图的我们，无法为此图贡献些什么，随着时间的迁移，或许有些技术点会发生改变，所以有了这个GitHub项目。我们可以通过协作的方式来共同维护这个项目。Git的历史记录也可以见证前端行业的一些变迁。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://html5ify.com/fks/fks_chart/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;可视化效果&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Structure" scheme="http://notes.seirhsiao.com/categories/Structure/"/>
    
    
      <category term="资源" scheme="http://notes.seirhsiao.com/tags/%E8%B5%84%E6%BA%90/"/>
    
      <category term="frontend" scheme="http://notes.seirhsiao.com/tags/frontend/"/>
    
  </entry>
  
  <entry>
    <title>免费编程书籍</title>
    <link href="http://notes.seirhsiao.com/posts/31d41407/"/>
    <id>http://notes.seirhsiao.com/posts/31d41407/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-07T02:40:49.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#语言无关">语言无关</a><ul><li><a href="#在线教育">在线教育</a></li><li><a href="#软件开发方法">软件开发方法</a></li><li><a href="#操作系统">操作系统</a></li><li><a href="#版本控制">版本控制</a></li><li><a href="#数据库">数据库</a></li><li><a href="#正则表达式">正则表达式</a></li><li><a href="#智能系统">智能系统</a></li><li><a href="#分布式系统">分布式系统</a></li><li><a href="#编译原理">编译原理</a></li><li><a href="#函数式概念">函数式概念</a></li><li><a href="#计算机图形学">计算机图形学</a></li><li><a href="#web服务器">WEB服务器</a></li><li><a href="#编辑器">编辑器</a></li><li><a href="#nosql">NoSQL</a></li><li><a href="#postgresql">PostgreSQL</a></li><li><a href="#mysql">MySQL</a></li><li><a href="#管理和监控">管理和监控</a></li><li><a href="#项目相关">项目相关</a></li><li><a href="#设计模式">设计模式</a></li><li><a href="#web">Web</a></li><li><a href="#大数据">大数据</a></li><li><a href="#编程艺术">编程艺术</a></li><li><a href="#其它">其它</a></li></ul></li><li><a href="#语言相关">语言相关</a><ul><li><a href="#android">Android</a></li><li><a href="#awk">AWK</a></li><li><a href="#cc">C/C++</a></li><li><a href="#coffeescript">CoffeeScript</a></li><li><a href="#dart">Dart</a></li><li><a href="#elasticsearch">Elasticsearch</a></li><li><a href="#erlang">Erlang</a></li><li><a href="#fortran">Fortran</a></li><li><a href="#golang">Golang</a></li><li><a href="#haskell">Haskell</a></li><li><a href="#html--css">HTML / CSS</a></li><li><a href="#http">HTTP</a></li><li><a href="#ios">iOS</a></li><li><a href="#java">Java</a></li><li><a href="#javascript">JavaScript</a></li><li><a href="#latex">LaTeX</a></li><li><a href="#lisp">LISP</a></li><li><a href="#lua">Lua</a></li><li><a href="#markdown">Markdown</a></li><li><a href="#nodejs">Node.js</a></li><li><a href="#perl">Perl</a></li><li><a href="#php">PHP</a></li><li><a href="#python">Python</a></li><li><a href="#r">R</a></li><li><a href="#restructuredtext">reStructuredText</a></li><li><a href="#ruby">Ruby</a></li><li><a href="#scala">Scala</a></li><li><a href="#scheme">Scheme</a></li><li><a href="#shell">Shell</a></li><li><a href="#swift">Swift</a></li><li><a href="#vim">Vim</a></li><li><a href="#visual-prolog">Visual Prolog</a></li></ul></li></ul><a id="more"></a><h2 id="语言无关"><a href="#语言无关" class="headerlink" title="语言无关"></a>语言无关</h2><h3 id="在线教育"><a href="#在线教育" class="headerlink" title="在线教育"></a>在线教育</h3><ul><li><a href="https://www.codeschool.com" target="_blank" rel="external nofollow noreferrer noopener">CodeSchool</a></li><li><a href="http://www.codecademy.com/?locale_code=zh" target="_blank" rel="external nofollow noreferrer noopener">Codecademy</a></li><li><a href="https://www.coursera.org/courses?orderby=upcoming&amp;lngs=zh" target="_blank" rel="external nofollow noreferrer noopener">Coursera</a></li><li><a href="http://learnxinyminutes.com" target="_blank" rel="external nofollow noreferrer noopener">Learn X in Y minutes</a> (数十种语言快速入门教程)</li><li><a href="https://www.shiyanlou.com" target="_blank" rel="external nofollow noreferrer noopener">shiyanlou</a></li><li><a href="http://teamtreehouse.com" target="_blank" rel="external nofollow noreferrer noopener">TeamTreeHouse</a></li><li><a href="https://www.udacity.com" target="_blank" rel="external nofollow noreferrer noopener">Udacity</a></li><li><a href="https://www.xuetangx.com" target="_blank" rel="external nofollow noreferrer noopener">xuetangX</a></li><li><a href="http://www.imooc.com/course/list" target="_blank" rel="external nofollow noreferrer noopener">慕课网</a> (丰富的移动端开发、php开发、web前端、html5教程以及css3视频教程等课程资源)</li><li><a href="http://www.jikexueyuan.com" target="_blank" rel="external nofollow noreferrer noopener">极客学院</a></li><li><a href="http://edu.51cto.com" target="_blank" rel="external nofollow noreferrer noopener">51CTO学院</a></li><li><a href="http://www.jisuanke.com" target="_blank" rel="external nofollow noreferrer noopener">计蒜客</a></li></ul><h3 id="软件开发方法"><a href="#软件开发方法" class="headerlink" title="软件开发方法"></a>软件开发方法</h3><ul><li><a href="https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn" target="_blank" rel="external nofollow noreferrer noopener">傻瓜函数编程</a> (《Functional Programming For The Rest of Us》中文版)</li><li><a href="http://www.infoq.com/cn/minibooks/scrum-xp-from-the-trenches" target="_blank" rel="external nofollow noreferrer noopener">硝烟中的 Scrum 和 XP</a></li></ul><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul><li><a href="http://man.chinaunix.net/linux/debian/reference/reference.zh-cn.html" target="_blank" rel="external nofollow noreferrer noopener">Debian 参考手册 </a></li><li><a href="http://wiki.ubuntu.org.cn/UbuntuManual" target="_blank" rel="external nofollow noreferrer noopener">Ubuntu 参考手册 </a></li><li><a href="http://www.freebsd.org/doc/zh_CN.UTF-8/books/handbook/" target="_blank" rel="external nofollow noreferrer noopener">FreeBSD 使用手册</a></li><li><a href="http://happypeter.github.io/LGCB/book/" target="_blank" rel="external nofollow noreferrer noopener">Linux Guide for Complete Beginners</a></li><li><a href="http://cb.vu/unixtoolbox_zh_CN.xhtml" target="_blank" rel="external nofollow noreferrer noopener">UNIX TOOLBOX</a></li><li><a href="http://vbird.dic.ksu.edu.tw/linux_basic/linux_basic.php" target="_blank" rel="external nofollow noreferrer noopener">鸟哥的 Linux 私房菜 基础学习篇</a></li><li><a href="http://vbird.dic.ksu.edu.tw/linux_server/" target="_blank" rel="external nofollow noreferrer noopener">鸟哥的 Linux 私房菜 服务器架设篇</a></li><li><a href="http://i.linuxtoy.org/docs/guide/index.html" target="_blank" rel="external nofollow noreferrer noopener">开源世界旅行手册</a></li><li><a href="http://sourceforge.net/apps/trac/elpi/wiki/ALP" target="_blank" rel="external nofollow noreferrer noopener">Linux 系统高级编程</a></li><li><a href="http://billie66.github.io/TLCL/index.html" target="_blank" rel="external nofollow noreferrer noopener">The Linux Command Line</a> (中英文版)</li><li><a href="http://oss.org.cn/kernel-book/ldd3/index.html" target="_blank" rel="external nofollow noreferrer noopener">Linux 设备驱动</a> (第三版)</li><li><a href="http://www.kerneltravel.net/kernel-book/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81.html" target="_blank" rel="external nofollow noreferrer noopener">深入分析Linux内核源码</a></li><li><a href="http://works.jinbuguo.com/lfs/lfs62/index.html" target="_blank" rel="external nofollow noreferrer noopener">Linux 构建指南</a></li><li><a href="https://github.com/me115/linuxtools_rst" target="_blank" rel="external nofollow noreferrer noopener">Linux工具快速教程</a></li><li><a href="http://tinylab.gitbooks.io/linux-doc" target="_blank" rel="external nofollow noreferrer noopener">Linux Documentation (中文版)</a></li><li><a href="http://tinylab.gitbooks.io/elinux" target="_blank" rel="external nofollow noreferrer noopener">嵌入式 Linux 知识库 (eLinux.org 中文版)</a></li><li><a href="https://github.com/tobegit3hub/understand_linux_process" target="_blank" rel="external nofollow noreferrer noopener">理解Linux进程</a></li><li><a href="http://pages.cs.wisc.edu/~remzi/OSTEP/" target="_blank" rel="external nofollow noreferrer noopener">Operating Systems: Three Easy Pieces</a></li><li><a href="https://www.gitbook.com/book/objectkuan/ucore-docs/details" target="_blank" rel="external nofollow noreferrer noopener">uCore Lab: Operating System Course in Tsinghua University</a></li><li><a href="https://github.com/widuu/chinese_docker" target="_blank" rel="external nofollow noreferrer noopener">Docker中文指南</a></li><li><a href="https://github.com/yeasy/docker_practice" target="_blank" rel="external nofollow noreferrer noopener">Docker —— 从入门到实践</a></li><li><a href="http://yuedu.baidu.com/ebook/d817967416fc700abb68fca1" target="_blank" rel="external nofollow noreferrer noopener">Docker入门实战</a></li><li><a href="http://freeradius.akagi201.org" target="_blank" rel="external nofollow noreferrer noopener">FreeRADIUS新手入门</a></li><li><a href="http://aaaaaashu.gitbooks.io/mac-dev-setup/content/" target="_blank" rel="external nofollow noreferrer noopener">Mac 开发配置手册</a></li><li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md" target="_blank" rel="external nofollow noreferrer noopener">命令行的艺术</a></li></ul><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><ul><li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external nofollow noreferrer noopener">Git - 简易指南</a></li><li><a href="http://gitbook.liuhui998.com" target="_blank" rel="external nofollow noreferrer noopener">Git Community Book 中文版</a></li><li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/" target="_blank" rel="external nofollow noreferrer noopener">Git magic</a></li><li><a href="http://gitref.justjavac.com" target="_blank" rel="external nofollow noreferrer noopener">Git 参考手册</a></li><li><a href="https://github.com/gotgit/gotgithub" target="_blank" rel="external nofollow noreferrer noopener">Got GitHub</a></li><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external nofollow noreferrer noopener">Pro Git</a></li><li><a href="https://www.gitbook.com/book/0532/progit/details" target="_blank" rel="external nofollow noreferrer noopener">Pro Git 中文版</a> (整理在gitbook上)</li><li><a href="http://pcottle.github.io/learnGitBranching/" target="_blank" rel="external nofollow noreferrer noopener">学习 Git 分支</a> (点击右下角按钮可切换至简体及正体中文)</li><li><a href="http://igit.linuxtoy.org/index.html" target="_blank" rel="external nofollow noreferrer noopener">沉浸式学 Git</a></li><li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external nofollow noreferrer noopener">Git教程</a> （本文由 <a href="http://weibo.com/liaoxuefeng" target="_blank" rel="external nofollow noreferrer noopener">@廖雪峰</a> 创作，如果觉得本教程对您有帮助，可以去 <a href="https://itunes.apple.com/cn/app/git-jiao-cheng/id876420437" target="_blank" rel="external nofollow noreferrer noopener">iTunes</a> 购买）</li><li><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="external nofollow noreferrer noopener">猴子都能懂的GIT入门</a></li><li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/" target="_blank" rel="external nofollow noreferrer noopener">Git Magic</a></li><li><a href="http://www.worldhello.net/gotgithub/index.html" target="_blank" rel="external nofollow noreferrer noopener">GotGitHub</a></li><li><a href="http://mercurial.selenic.com/wiki/ChineseTutorial" target="_blank" rel="external nofollow noreferrer noopener">Mercurial 使用教程</a></li><li><a href="http://bucunzai.net/hginit/" target="_blank" rel="external nofollow noreferrer noopener">HgInit (中文版)</a></li><li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet" target="_blank" rel="external nofollow noreferrer noopener">Git-Cheat-Sheet</a> （感谢 @flyhigher139 翻译了中文版）</li><li><a href="http://snowdream86.gitbooks.io/github-cheat-sheet/content/zh/index.html" target="_blank" rel="external nofollow noreferrer noopener">GitHub秘籍</a></li><li><a href="https://github.com/waylau/github-help" target="_blank" rel="external nofollow noreferrer noopener">Github帮助文档</a></li><li><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" target="_blank" rel="external nofollow noreferrer noopener">git-flow 备忘清单</a></li><li><a href="http://svnbook.red-bean.com/nightly/zh/index.html" target="_blank" rel="external nofollow noreferrer noopener">svn 手册</a></li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li><a href="http://www.redisbook.com" target="_blank" rel="external nofollow noreferrer noopener">Redis 设计与实现</a></li><li><a href="https://github.com/justinyhuang/the-little-mongodb-book-cn" target="_blank" rel="external nofollow noreferrer noopener">The Little MongoDB Book 中文版</a></li></ul><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><ul><li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external nofollow noreferrer noopener">正则表达式30分钟入门教程</a></li></ul><h3 id="智能系统"><a href="#智能系统" class="headerlink" title="智能系统"></a>智能系统</h3><ul><li><a href="https://github.com/gmszone/designiot" target="_blank" rel="external nofollow noreferrer noopener">一步步搭建物联网系统</a></li></ul><h3 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h3><ul><li><a href="http://dcaoyuan.github.io/papers/pdfs/Scalability.pdf" target="_blank" rel="external nofollow noreferrer noopener">走向分布式</a> (PDF)</li></ul><h3 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h3><ul><li><a href="https://github.com/DeathKing/Learning-SICP" target="_blank" rel="external nofollow noreferrer noopener">《计算机程序的结构和解释》公开课 翻译项目</a></li></ul><h3 id="函数式概念"><a href="#函数式概念" class="headerlink" title="函数式概念"></a>函数式概念</h3><ul><li><a href="https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn" target="_blank" rel="external nofollow noreferrer noopener">傻瓜函数编程</a></li></ul><h3 id="计算机图形学"><a href="#计算机图形学" class="headerlink" title="计算机图形学"></a>计算机图形学</h3><ul><li><a href="https://github.com/zilongshanren/opengl-tutorials" target="_blank" rel="external nofollow noreferrer noopener">OpenGL 教程</a></li></ul><h3 id="WEB服务器"><a href="#WEB服务器" class="headerlink" title="WEB服务器"></a>WEB服务器</h3><ul><li><a href="http://tengine.taobao.org/book/index.html" target="_blank" rel="external nofollow noreferrer noopener">Nginx开发从入门到精通</a> (淘宝团队出品)</li><li><a href="http://www.ttlsa.com/nginx/nginx-stu-pdf/" target="_blank" rel="external nofollow noreferrer noopener">Nginx教程从入门到精通</a> (PDF版本，运维生存时间出品)</li><li><a href="http://works.jinbuguo.com/apache/menu22/index.html" target="_blank" rel="external nofollow noreferrer noopener">Apache 中文手册</a></li></ul><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><ul><li><a href="http://exvim.github.io/docs-zh/intro/" target="_blank" rel="external nofollow noreferrer noopener">exvim–vim 改良成IDE项目</a></li><li><a href="http://learnvimscriptthehardway.onefloweroneworld.com" target="_blank" rel="external nofollow noreferrer noopener">笨方法学Vimscript 中译本</a></li><li><a href="https://github.com/vimcn/vimcdoc" target="_blank" rel="external nofollow noreferrer noopener">Vim中文文档</a></li><li><a href="https://github.com/yangyangwithgnu/use_vim_as_ide" target="_blank" rel="external nofollow noreferrer noopener">所需即所获：像 IDE 一样使用 vim</a></li><li><a href="https://github.com/aqua7regia/tmux-Productive-Mouse-Free-Development_zh" target="_blank" rel="external nofollow noreferrer noopener">tmux:高效的全键盘开发工具</a></li></ul><h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><ul><li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html" target="_blank" rel="external nofollow noreferrer noopener">NoSQL数据库笔谈</a> (<a href="http://yankaycom-wordpress.stor.sinaapp.com/uploads/2012/12/NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%B0%88v2.pdf" target="_blank" rel="external nofollow noreferrer noopener">PDF</a>)</li><li><a href="http://redisbook.com" target="_blank" rel="external nofollow noreferrer noopener">Redis 设计与实现</a></li><li><a href="http://www.redisdoc.com" target="_blank" rel="external nofollow noreferrer noopener">Redis 命令参考</a></li><li><a href="https://github.com/huangz1990/redis-3.0-annotated" target="_blank" rel="external nofollow noreferrer noopener">带有详细注释的 Redis 3.0 代码</a></li><li><a href="https://github.com/huangz1990/annotated_redis_source" target="_blank" rel="external nofollow noreferrer noopener">带有详细注释的 Redis 2.6 代码</a></li><li><a href="https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md" target="_blank" rel="external nofollow noreferrer noopener">The Little MongoDB Book</a></li><li><a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md" target="_blank" rel="external nofollow noreferrer noopener">The Little Redis Book</a></li><li><a href="http://docs.neo4j.org.cn" target="_blank" rel="external nofollow noreferrer noopener">Neo4j 简体中文手册 v1.8</a></li><li><a href="http://neo4j.tw" target="_blank" rel="external nofollow noreferrer noopener">Neo4j .rb 中文資源</a></li><li><a href="http://disquebook.com" target="_blank" rel="external nofollow noreferrer noopener">Disque 使用教程</a></li></ul><h3 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3><ul><li><a href="http://works.jinbuguo.com/postgresql/menu823/index.html" target="_blank" rel="external nofollow noreferrer noopener">PostgreSQL 8.2.3 中文文档</a></li><li><a href="http://www.postgres.cn/docs/9.3/index.html" target="_blank" rel="external nofollow noreferrer noopener">PostgreSQL 9.3.1 中文文档</a></li></ul><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ul><li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="external nofollow noreferrer noopener">MySQL索引背后的数据结构及算法原理</a></li><li><a href="http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html" target="_blank" rel="external nofollow noreferrer noopener">21分钟MySQL入门教程</a></li></ul><h3 id="管理和监控"><a href="#管理和监控" class="headerlink" title="管理和监控"></a>管理和监控</h3><ul><li><a href="http://kibana.logstash.es" target="_blank" rel="external nofollow noreferrer noopener">ELKstack 中文指南</a></li><li><a href="http://udn.yyuap.com/doc/mastering-elasticsearch/" target="_blank" rel="external nofollow noreferrer noopener">Mastering Elasticsearch(中文版)</a></li><li><a href="https://www.gitbook.com/book/fuxiaopang/learnelasticsearch/details" target="_blank" rel="external nofollow noreferrer noopener">ElasticSearch 权威指南</a></li><li><a href="http://es.xiaoleilu.com" target="_blank" rel="external nofollow noreferrer noopener">Elasticsearch 权威指南（中文版）</a></li><li><a href="https://github.com/chenryn/logstash-best-practice-cn" target="_blank" rel="external nofollow noreferrer noopener">Logstash 最佳实践</a></li><li><a href="http://bbs.konotes.org/workdoc/puppet-27/" target="_blank" rel="external nofollow noreferrer noopener">Puppet 2.7 Cookbook 中文版</a></li></ul><h3 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h3><ul><li><a href="http://article.yeeyan.org/view/2251/94882" target="_blank" rel="external nofollow noreferrer noopener">持续集成（第二版）</a> (译言网)</li><li><a href="http://www.ibm.com/developerworks/cn/java/j-ap/" target="_blank" rel="external nofollow noreferrer noopener">让开发自动化系列专栏</a></li><li><a href="http://www.ibm.com/developerworks/cn/java/j-cq/" target="_blank" rel="external nofollow noreferrer noopener">追求代码质量</a></li><li><a href="https://github.com/fool2fish/selenium-doc" target="_blank" rel="external nofollow noreferrer noopener">selenium 中文文档</a></li><li><a href="http://local.joelonsoftware.com/wiki/Chinese_(Simplified)" target="_blank" rel="external nofollow noreferrer noopener">Joel谈软件</a></li><li><a href="http://local.joelonsoftware.com/wiki/%E9%A6%96%E9%A0%81" target="_blank" rel="external nofollow noreferrer noopener">約耳談軟體(Joel on Software)</a></li><li><a href="https://github.com/waylau/Gradle-2-User-Guide" target="_blank" rel="external nofollow noreferrer noopener">Gradle 2 用户指南</a></li><li><a href="http://yuedu.baidu.com/ebook/f23af265998fcc22bcd10da2" target="_blank" rel="external nofollow noreferrer noopener">Gradle 中文使用文档</a></li><li><a href="https://github.com/ecomfe/spec" target="_blank" rel="external nofollow noreferrer noopener">编码规范</a></li><li><a href="http://www.ituring.com.cn/book/1143" target="_blank" rel="external nofollow noreferrer noopener">开源软件架构</a></li><li><a href="http://docs.huihoo.com/gnu/linux/gmake.html" target="_blank" rel="external nofollow noreferrer noopener">GNU make 指南</a></li></ul><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul><li><a href="https://github.com/me115/design_patterns" target="_blank" rel="external nofollow noreferrer noopener">图说设计模式</a></li><li><a href="http://blog.csdn.net/lovelion/article/details/17517213" target="_blank" rel="external nofollow noreferrer noopener">史上最全设计模式导学目录</a></li></ul><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><ul><li><a href="http://www.20thingsilearned.com/zh-CN/home" target="_blank" rel="external nofollow noreferrer noopener">关于浏览器和网络的 20 项须知</a></li><li><a href="http://jinlong.github.io/2013/08/29/devtoolsecrets/" target="_blank" rel="external nofollow noreferrer noopener">浏览器开发工具的秘密</a></li><li><a href="https://github.com/CN-Chrome-DevTools/CN-Chrome-DevTools" target="_blank" rel="external nofollow noreferrer noopener">Chrome 开发者工具中文手册</a></li><li><a href="http://open.chrome.360.cn/extension_dev/overview.html" target="_blank" rel="external nofollow noreferrer noopener">Chrome扩展开发文档</a></li><li><a href="http://www.gruntjs.net" target="_blank" rel="external nofollow noreferrer noopener">Grunt中文文档</a></li><li><a href="http://www.gulpjs.com.cn/docs/" target="_blank" rel="external nofollow noreferrer noopener">gulp中文文档</a></li><li><a href="https://github.com/nimojs/gulp-book" target="_blank" rel="external nofollow noreferrer noopener">Gulp 入门指南</a></li><li><a href="http://yeomanjs.org" target="_blank" rel="external nofollow noreferrer noopener">Yeoman中文文档</a></li><li><a href="https://github.com/AlloyTeam/Mars" target="_blank" rel="external nofollow noreferrer noopener">移动Web前端知识库</a></li><li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external nofollow noreferrer noopener">正则表达式30分钟入门教程</a></li><li><a href="https://github.com/fouber/blog/issues/2" target="_blank" rel="external nofollow noreferrer noopener">前端开发体系建设日记</a></li><li><a href="https://github.com/hoosin/mobile-web-favorites" target="_blank" rel="external nofollow noreferrer noopener">移动前端开发收藏夹</a></li><li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="external nofollow noreferrer noopener">JSON风格指南</a></li><li><a href="https://github.com/bolasblack/http-api-guide" target="_blank" rel="external nofollow noreferrer noopener">HTTP 接口设计指北</a></li><li><a href="https://github.com/hacke2/hacke2.github.io/issues/1" target="_blank" rel="external nofollow noreferrer noopener">前端资源分享（一）</a></li><li><a href="https://github.com/hacke2/hacke2.github.io/issues/3" target="_blank" rel="external nofollow noreferrer noopener">前端资源分享（二）</a></li><li><a href="http://coderlmn.github.io/code-standards/" target="_blank" rel="external nofollow noreferrer noopener">前端代码规范 及 最佳实践</a></li><li><a href="http://man.lupaworld.com/content/network/wireshark/index.html" target="_blank" rel="external nofollow noreferrer noopener">Wireshark用户手册</a></li><li><a href="https://community.emc.com/thread/194901" target="_blank" rel="external nofollow noreferrer noopener">一站式学习Wireshark</a></li><li><a href="http://happypeter.github.io/tealeaf-http/" target="_blank" rel="external nofollow noreferrer noopener">HTTP 下午茶</a></li><li><a href="http://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99?pn=1" target="_blank" rel="external nofollow noreferrer noopener">HTTP/2.0 中文翻译</a></li><li><a href="https://www.gitbook.com/book/ye11ow/http2-explained/details" target="_blank" rel="external nofollow noreferrer noopener">http2讲解</a></li><li><a href="https://www.gitbook.com/book/juntao/3-web-designs-in-3-weeks/details" target="_blank" rel="external nofollow noreferrer noopener">3 Web Designs in 3 Weeks</a></li></ul><h3 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h3><ul><li><a href="https://github.com/Flowerowl/Big-Data-Resources" target="_blank" rel="external nofollow noreferrer noopener">大数据/数据挖掘/推荐系统/机器学习相关资源</a></li><li><a href="https://github.com/jizhang/guidetodatamining" target="_blank" rel="external nofollow noreferrer noopener">面向程序员的数据挖掘指南</a></li><li><a href="https://code.csdn.net/CODE_Translation/spark_matei_phd" target="_blank" rel="external nofollow noreferrer noopener">大型集群上的快速和通用数据处理架构</a></li><li><a href="https://github.com/linyiqun/DataMiningAlgorithm" target="_blank" rel="external nofollow noreferrer noopener">数据挖掘中经典的算法实现和详细的注释</a></li><li><a href="https://aiyanbo.gitbooks.io/spark-programming-guide-zh-cn/content/" target="_blank" rel="external nofollow noreferrer noopener">Spark 编程指南简体中文版</a></li></ul><h3 id="编程艺术"><a href="#编程艺术" class="headerlink" title="编程艺术"></a>编程艺术</h3><ul><li><a href="http://huyuefeng.me/intro-to-prog/" target="_blank" rel="external nofollow noreferrer noopener">编程入门指南</a></li><li><a href="https://github.com/julycoding/The-Art-Of-Programming-by-July" target="_blank" rel="external nofollow noreferrer noopener">程序员编程艺术</a></li><li><a href="http://www.oschina.net/translate/what-every-programmer-should-know-about-memory-part1?print" target="_blank" rel="external nofollow noreferrer noopener">每个程序员都应该了解的内存知识(译)</a>【第一部分】</li><li><a href="http://read.douban.com/ebook/4972883/" target="_blank" rel="external nofollow noreferrer noopener">取悦的工序：如何理解游戏</a> (豆瓣阅读，免费书籍)</li><li><a href="http://xiaobeicn.gitbooks.io/programming-skills-summary/" target="_blank" rel="external nofollow noreferrer noopener">编程技巧总汇</a></li></ul><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ul><li><a href="http://softwaredownload.gitbooks.io/openwrt-fanqiang/" target="_blank" rel="external nofollow noreferrer noopener">OpenWrt智能、自动、透明翻墙路由器教程</a></li><li><a href="https://community.emc.com/docs/DOC-16067" target="_blank" rel="external nofollow noreferrer noopener">SAN 管理入门系列</a></li><li><a href="http://sketchcn.com/sketch-chinese-user-manual.html#introduce" target="_blank" rel="external nofollow noreferrer noopener">Sketch 中文手册</a></li><li><a href="http://ifeve.com/perfbook/" target="_blank" rel="external nofollow noreferrer noopener">深入理解并行编程</a></li></ul><h2 id="语言相关"><a href="#语言相关" class="headerlink" title="语言相关"></a>语言相关</h2><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><ul><li><a href="http://www.apkbus.com/design/index.html" target="_blank" rel="external nofollow noreferrer noopener">Android Design(中文版)</a></li><li>Google Material Design 正體中文版 (<a href="http://wcc723.gitbooks.io/google_design_translate/content/style-icons.html" target="_blank" rel="external nofollow noreferrer noopener">译本一</a> <a href="https://github.com/1sters/material_design_zh" target="_blank" rel="external nofollow noreferrer noopener">译本二</a>)</li><li><a href="http://wiki.jikexueyuan.com/project/material-design/" target="_blank" rel="external nofollow noreferrer noopener">Material Design 中文版</a></li><li><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external nofollow noreferrer noopener">Google Android官方培训课程中文版</a></li><li><a href="http://stormzhang.github.io/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="external nofollow noreferrer noopener">Android学习之路</a></li><li><a href="https://github.com/bboyfeiyu/android-tech-frontier" target="_blank" rel="external nofollow noreferrer noopener">Android开发技术前线(android-tech-frontier)</a></li><li><a href="https://github.com/FX-Max/Point-of-Android" target="_blank" rel="external nofollow noreferrer noopener">Point-of-Android</a> Android 一些重要知识点解析整理</li><li><a href="http://leanote.com/blog/post/561658f938f41126b2000298?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external nofollow noreferrer noopener">Android6.0新特性详解</a></li></ul><h3 id="AWK"><a href="#AWK" class="headerlink" title="AWK"></a>AWK</h3><ul><li><a href="https://github.com/wuzhouhui/awk" target="_blank" rel="external nofollow noreferrer noopener">awk程序设计语言</a></li><li><a href="http://awk.readthedocs.org/en/latest/index.html" target="_blank" rel="external nofollow noreferrer noopener">awk中文指南</a></li></ul><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><ul><li><a href="http://c-faq-chn.sourceforge.net/ccfaq/ccfaq.html" target="_blank" rel="external nofollow noreferrer noopener">C 语言常见问题集</a></li><li><a href="http://doc.lellansin.com" target="_blank" rel="external nofollow noreferrer noopener">C/C++ 学习教程</a></li><li><a href="https://github.com/limingth/NCCL" target="_blank" rel="external nofollow noreferrer noopener">新概念 C 语言教程</a></li><li><a href="http://docs.linuxtone.org/ebooks/C&amp;CPP/c/" target="_blank" rel="external nofollow noreferrer noopener">Linux C 编程一站式学习</a></li></ul><h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><ul><li><a href="https://github.com/wuye9036/CppTemplateTutorial" target="_blank" rel="external nofollow noreferrer noopener">C++ Template 进阶指南</a></li><li><a href="http://www.prglab.com/cms/" target="_blank" rel="external nofollow noreferrer noopener">C++ 基础教程</a></li><li><a href="https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial" target="_blank" rel="external nofollow noreferrer noopener">C++ 并发编程指南</a></li><li><a href="http://www.ituring.com.cn/book/1203" target="_blank" rel="external nofollow noreferrer noopener">像计算机科学家一样思考（C++版)</a> (《How To Think Like a Computer Scientist: C++ Version》中文版)</li><li><a href="http://tinylab.gitbooks.io/cbook" target="_blank" rel="external nofollow noreferrer noopener">C 语言编程透视</a></li><li><a href="https://github.com/leeyiw/cgdb-manual-in-chinese" target="_blank" rel="external nofollow noreferrer noopener">CGDB中文手册</a></li><li><a href="https://github.com/hellogcc/100-gdb-tips/blob/master/src/index.md" target="_blank" rel="external nofollow noreferrer noopener">100个gdb小技巧</a></li><li><a href="https://github.com/hellogcc/100-gcc-tips/blob/master/src/index.md" target="_blank" rel="external nofollow noreferrer noopener">100个gcc小技巧</a></li><li><a href="https://github.com/anjuke/zguide-cn" target="_blank" rel="external nofollow noreferrer noopener">ZMQ 指南</a></li><li><a href="http://scc.qibebt.cas.cn/docs/linux/base/%B8%FA%CE%D2%D2%BB%C6%F0%D0%B4Makefile-%B3%C2%F0%A9.pdf" target="_blank" rel="external nofollow noreferrer noopener">跟我一起写Makefile(PDF)</a> (PDF)</li><li><a href="http://docs.huihoo.com/gnu/linux/gmake.html" target="_blank" rel="external nofollow noreferrer noopener">GNU make 指南</a></li><li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/contents/" target="_blank" rel="external nofollow noreferrer noopener">Google C++ 风格指南</a></li><li><a href="https://github.com/andycai/cprimer" target="_blank" rel="external nofollow noreferrer noopener">C/C++ Primer</a> (by @andycai)</li><li><a href="http://www.nowamagic.net/librarys/books/contents/c" target="_blank" rel="external nofollow noreferrer noopener">简单易懂的C魔法</a></li><li><a href="http://sewm.pku.edu.cn/src/paradise/reference/CMake%20Practice.pdf" target="_blank" rel="external nofollow noreferrer noopener">Cmake 实践</a> (PDF版)</li><li><a href="http://www.sunistudio.com/cppfaq/" target="_blank" rel="external nofollow noreferrer noopener">C++ FAQ LITE(中文版)</a></li><li><a href="https://github.com/Mooophy/Cpp-Primer" target="_blank" rel="external nofollow noreferrer noopener">C++ Primer 5th Answers</a></li><li><a href="http://chenxiaowei.gitbooks.io/cpp_concurrency_in_action/" target="_blank" rel="external nofollow noreferrer noopener">C++ 并发编程(基于C++11)</a></li><li><a href="http://www.kuqin.com/qtdocument/tutorial.html" target="_blank" rel="external nofollow noreferrer noopener">QT 教程</a></li></ul><h3 id="CoffeeScript"><a href="#CoffeeScript" class="headerlink" title="CoffeeScript"></a>CoffeeScript</h3><ul><li><a href="http://coffee-script.org" target="_blank" rel="external nofollow noreferrer noopener">CoffeeScript 中文</a></li><li><a href="https://github.com/elrrrrrrr/coffeescript-style-guide/blob/master/README-ZH.md" target="_blank" rel="external nofollow noreferrer noopener">CoffeeScript 编程风格指南</a></li></ul><h3 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h3><ul><li><a href="http://dart.lidian.info/wiki/Language_Tour" target="_blank" rel="external nofollow noreferrer noopener">Dart 语言导览</a></li></ul><h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><ul><li><a href="https://github.com/looly/elasticsearch-definitive-guide-cn" target="_blank" rel="external nofollow noreferrer noopener">Elasticsearch 权威指南</a> （《Elasticsearch the definitive guide》中文版）</li><li><a href="http://kibana.logstash.es" target="_blank" rel="external nofollow noreferrer noopener">ELKstack 中文指南</a></li><li><a href="http://udn.yyuap.com/doc/mastering-elasticsearch/" target="_blank" rel="external nofollow noreferrer noopener">Mastering Elasticsearch(中文版)</a></li></ul><h3 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h3><ul><li><a href="https://github.com/liancheng/cpie-cn" target="_blank" rel="external nofollow noreferrer noopener">Erlang 并发编程</a> (《Concurrent Programming in Erlang (Part I)》中文版)</li></ul><h3 id="Fortran"><a href="#Fortran" class="headerlink" title="Fortran"></a>Fortran</h3><ul><li><a href="http://micro.ustc.edu.cn/Fortran/ZJDing/" target="_blank" rel="external nofollow noreferrer noopener">Fortran77和90/95编程入门</a></li></ul><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><ul><li><a href="https://github.com/astaxie/build-web-application-with-golang" target="_blank" rel="external nofollow noreferrer noopener">Go Web 编程</a></li><li><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN" target="_blank" rel="external nofollow noreferrer noopener">Go 入门指南</a> (《The Way to Go》中文版)</li><li><a href="http://go-tour-zh.appsp0t.com" target="_blank" rel="external nofollow noreferrer noopener">Go 指南</a> (《A Tour of Go》中文版)</li><li><a href="https://github.com/Unknwon/go-fundamental-programming" target="_blank" rel="external nofollow noreferrer noopener">Go 编程基础</a></li><li><a href="http://mikespook.com/learning-go/" target="_blank" rel="external nofollow noreferrer noopener">学习Go语言</a></li><li><a href="https://github.com/astaxie/Go-in-Action" target="_blank" rel="external nofollow noreferrer noopener">Go实战开发</a> (当我收录此项目时，作者已经写完第三章，如果读完前面章节觉得有帮助，可以给作者<a href="https://me.alipay.com/astaxie" target="_blank" rel="external nofollow noreferrer noopener">捐赠</a>，以鼓励作者的继续创作)</li><li><a href="https://github.com/astaxie/NPWG_zh" target="_blank" rel="external nofollow noreferrer noopener">Network programming with Go 中文翻译版本</a></li><li><a href="http://www.hellogcc.org/effective_go.html" target="_blank" rel="external nofollow noreferrer noopener">Effective Go</a></li><li><a href="https://github.com/polaris1119/The-Golang-Standard-Library-by-Example" target="_blank" rel="external nofollow noreferrer noopener">Go 语言标准库</a></li><li><a href="http://gorevel.cn/docs/manual/index.html" target="_blank" rel="external nofollow noreferrer noopener">Revel 框架手册</a></li><li><a href="http://blog.csdn.net/dc_726/article/details/46565241" target="_blank" rel="external nofollow noreferrer noopener">Java程序员的Golang入门指南</a></li><li><a href="https://github.com/hyper-carrot/go_command_tutorial" target="_blank" rel="external nofollow noreferrer noopener">Go命令教程</a></li><li><a href="https://github.com/achun/Go-Blog-In-Action" target="_blank" rel="external nofollow noreferrer noopener">Go语言博客实践</a></li><li><a href="https://github.com/golang-china/golangdoc.translations" target="_blank" rel="external nofollow noreferrer noopener">Go 官方文档翻译</a></li></ul><h3 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h3><ul><li><a href="http://www.ibm.com/developerworks/cn/java/j-pg/" target="_blank" rel="external nofollow noreferrer noopener">实战 Groovy 系列</a></li></ul><h3 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h3><ul><li><a href="http://learnyouahaskell-zh-tw.csie.org" target="_blank" rel="external nofollow noreferrer noopener">Haskell 趣学指南</a></li><li><a href="http://rwh.readthedocs.org/en/latest/" target="_blank" rel="external nofollow noreferrer noopener">Real World Haskell 中文版</a></li></ul><h3 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML / CSS"></a>HTML / CSS</h3><ul><li><a href="http://zh.learnlayout.com" target="_blank" rel="external nofollow noreferrer noopener">学习CSS布局</a></li><li><a href="https://github.com/chadluo/CSS-Guidelines/blob/master/README.md" target="_blank" rel="external nofollow noreferrer noopener">通用 CSS 笔记、建议与指导</a></li><li><a href="http://css.doyoe.com" target="_blank" rel="external nofollow noreferrer noopener">CSS参考手册</a></li><li><a href="https://github.com/waylau/css3-tutorial" target="_blank" rel="external nofollow noreferrer noopener">CSS3 Tutorial 《CSS3 教程》</a></li><li><a href="http://yanxyz.github.io/emmet-docs/" target="_blank" rel="external nofollow noreferrer noopener">Emmet 文档</a></li><li><a href="http://alloyteam.github.io/CodeGuide/" target="_blank" rel="external nofollow noreferrer noopener">前端代码规范</a> (腾讯 AlloyTeam 团队)</li><li><a href="http://codeguide.bootcss.com" target="_blank" rel="external nofollow noreferrer noopener">HTML和CSS编码规范</a></li><li><a href="http://www.w3school.com.cn/html5/" target="_blank" rel="external nofollow noreferrer noopener">HTML5 教程</a></li><li><a href="http://sass-guidelin.es/zh/" target="_blank" rel="external nofollow noreferrer noopener">Sass Guidelines 中文</a></li></ul><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><ul><li><a href="http://happypeter.github.io/tealeaf-http" target="_blank" rel="external nofollow noreferrer noopener">HTTP 下午茶</a></li></ul><h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><ul><li><a href="https://github.com/qinjx/30min_guides/blob/master/ios.md" target="_blank" rel="external nofollow noreferrer noopener">iOS开发60分钟入门</a></li><li><a href="http://isux.tencent.com/ios-human-interface-guidelines-ui-design-basics-ios7.html" target="_blank" rel="external nofollow noreferrer noopener">iOS7人机界面指南</a></li><li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-objc-styleguide/" target="_blank" rel="external nofollow noreferrer noopener">Google Objective-C Style Guide 中文版</a></li><li><a href="http://wileam.com/iphone-6-screen-cn/" target="_blank" rel="external nofollow noreferrer noopener">iPhone 6 屏幕揭秘</a></li><li><a href="http://nilsun.github.io/apple-watch/" target="_blank" rel="external nofollow noreferrer noopener">Apple Watch开发初探</a></li><li><a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOSCh/index.html" target="_blank" rel="external nofollow noreferrer noopener">马上着手开发 iOS 应用程序</a></li><li><a href="https://github.com/jkyin/Subtitle" target="_blank" rel="external nofollow noreferrer noopener">网易斯坦福大学公开课：iOS 7应用开发字幕文件</a></li></ul><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul><li><a href="https://github.com/waylau/apache-shiro-1.2.x-reference" target="_blank" rel="external nofollow noreferrer noopener">Apache Shiro 用户指南</a></li><li><a href="https://github.com/waylau/Jersey-2.x-User-Guide" target="_blank" rel="external nofollow noreferrer noopener">Jersey 2.x 用户指南</a></li><li><a href="https://github.com/waylau/spring-framework-4-reference" target="_blank" rel="external nofollow noreferrer noopener">Spring Framework 4.x参考文档</a></li><li><a href="https://github.com/qibaoguang/Spring-Boot-Reference-Guide" target="_blank" rel="external nofollow noreferrer noopener">Spring Boot参考指南</a> (翻译中)</li><li><a href="http://mybatis.github.io/mybatis-3/zh/index.html" target="_blank" rel="external nofollow noreferrer noopener">MyBatis中文文档</a></li><li><a href="https://github.com/waylau/RestDemo" target="_blank" rel="external nofollow noreferrer noopener">用jersey构建REST服务</a></li><li><a href="https://github.com/waylau/activiti-5.x-user-guide" target="_blank" rel="external nofollow noreferrer noopener">Activiti 5.x 用户指南</a></li><li><a href="http://www.hawstein.com/posts/google-java-style.html" target="_blank" rel="external nofollow noreferrer noopener">Google Java编程风格指南</a></li><li><a href="https://github.com/waylau/netty-4-user-guide" target="_blank" rel="external nofollow noreferrer noopener">Netty 4.x 用户指南</a></li><li><a href="https://github.com/waylau/essential-netty-in-action" target="_blank" rel="external nofollow noreferrer noopener">Netty 实战(精髓)</a></li><li><a href="https://github.com/waylau/rest-in-action" target="_blank" rel="external nofollow noreferrer noopener">REST 实战</a></li><li><a href="https://github.com/waylau/java-code-conventions" target="_blank" rel="external nofollow noreferrer noopener">Java 编码规范</a></li><li><a href="https://github.com/waylau/apache-mina-2.x-user-guide" target="_blank" rel="external nofollow noreferrer noopener">Apache MINA 2 用户指南</a></li><li><a href="https://github.com/waylau/h2-database-doc" target="_blank" rel="external nofollow noreferrer noopener">H2 Database 教程</a></li><li><a href="https://github.com/waylau/servlet-3.1-specification" target="_blank" rel="external nofollow noreferrer noopener">Java Servlet 3.1 规范</a></li><li><a href="https://github.com/waylau/jsse-reference-guide" target="_blank" rel="external nofollow noreferrer noopener">JSSE 参考指南</a></li></ul><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><ul><li><a href="http://typeof.net/s/jsmech/" target="_blank" rel="external nofollow noreferrer noopener">Javascript 原理</a></li><li><a href="http://bq69.com/blog/articles/script/868/google-javascript-style-guide.html" target="_blank" rel="external nofollow noreferrer noopener">Google JavaScript 代码风格指南</a></li><li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="external nofollow noreferrer noopener">Google JSON 风格指南</a></li><li><a href="https://github.com/adamlu/javascript-style-guide" target="_blank" rel="external nofollow noreferrer noopener">Airbnb JavaScript 规范</a></li><li><a href="http://javascript.ruanyifeng.com" target="_blank" rel="external nofollow noreferrer noopener">JavaScript 标准参考教程（alpha）</a></li><li><a href="http://pij.robinqu.me" target="_blank" rel="external nofollow noreferrer noopener">Javascript编程指南</a> (<a href="https://github.com/RobinQu/Programing-In-Javascript" target="_blank" rel="external nofollow noreferrer noopener">源码</a>)</li><li><a href="https://github.com/justjavac/12-javascript-quirks" target="_blank" rel="external nofollow noreferrer noopener">javascript 的 12 个怪癖</a></li><li><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="external nofollow noreferrer noopener">JavaScript 秘密花园</a></li><li><a href="http://icodeit.org/jsccp/" target="_blank" rel="external nofollow noreferrer noopener">JavaScript核心概念及实践</a> (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者)</li><li><a href="https://github.com/jayli/javascript-patterns" target="_blank" rel="external nofollow noreferrer noopener">《JavaScript 模式》</a> “JavaScript patterns”中译本</li><li><a href="http://justjavac.com/named-function-expressions-demystified.html" target="_blank" rel="external nofollow noreferrer noopener">命名函数表达式探秘</a>  (注:原文由<a href="http://www.cn-cuckoo.com" target="_blank" rel="external nofollow noreferrer noopener">为之漫笔</a>翻译，原始地址无法打开，所以此处地址为我博客上的备份)</li><li><a href="http://www.oschina.net/translate/learning-javascript-design-patterns" target="_blank" rel="external nofollow noreferrer noopener">学用 JavaScript 设计模式</a> (开源中国)</li><li><a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" target="_blank" rel="external nofollow noreferrer noopener">深入理解JavaScript系列</a></li><li><a href="http://es6.ruanyifeng.com" target="_blank" rel="external nofollow noreferrer noopener">ECMAScript 6 入门</a> (作者：阮一峰)</li><li><a href="http://liubin.github.io/promises-book/" target="_blank" rel="external nofollow noreferrer noopener">JavaScript Promise迷你书</a></li><li><a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external nofollow noreferrer noopener">You-Dont-Know-JS</a> (深入JavaScript语言核心机制的系列图书)</li><li>jQuery<ul><li><a href="http://www.nowamagic.net/librarys/books/contents/jquery" target="_blank" rel="external nofollow noreferrer noopener">简单易懂的JQuery魔法</a></li><li><a href="http://i5ting.github.io/How-to-write-jQuery-plugin/build/jquery.plugin.html" target="_blank" rel="external nofollow noreferrer noopener">How to write jQuery plugin</a></li></ul></li><li>Node.js<ul><li><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="external nofollow noreferrer noopener">Node入门</a></li><li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external nofollow noreferrer noopener">七天学会NodeJS</a></li><li><a href="https://github.com/nodejs-tw/nodejs-wiki-book" target="_blank" rel="external nofollow noreferrer noopener">Nodejs Wiki Book</a> (繁体中文)</li><li><a href="http://expressjs.jser.us" target="_blank" rel="external nofollow noreferrer noopener">express.js 中文文档</a></li><li><a href="https://github.com/turingou/koa-guide" target="_blank" rel="external nofollow noreferrer noopener">koa 中文文档</a></li><li><a href="https://github.com/nswbmw/N-blog" target="_blank" rel="external nofollow noreferrer noopener">使用 Express + MongoDB 搭建多人博客</a></li><li><a href="http://javascript.ruanyifeng.com/nodejs/express.html" target="_blank" rel="external nofollow noreferrer noopener">Express框架</a></li><li><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="external nofollow noreferrer noopener">Node.js 包教不包会</a></li><li><a href="https://www.npmjs.org/package/learnyounode-zh-cn" target="_blank" rel="external nofollow noreferrer noopener">Learn You The Node.js For Much Win! (中文版)</a></li><li><a href="http://i5ting.github.io/node-debug-tutorial/" target="_blank" rel="external nofollow noreferrer noopener">Node debug 三法三例</a></li><li><a href="https://www.gitbook.com/book/0532/nodejs/details" target="_blank" rel="external nofollow noreferrer noopener">nodejs中文文档</a></li></ul></li><li>underscore.js<ul><li><a href="http://learningcn.com/underscore/" target="_blank" rel="external nofollow noreferrer noopener">Underscore.js中文文档</a></li></ul></li><li>backbone.js<ul><li><a href="http://www.css88.com/doc/backbone/" target="_blank" rel="external nofollow noreferrer noopener">backbone.js中文文档</a></li><li><a href="http://www.the5fire.com/backbone-js-tutorials-pdf-download.html" target="_blank" rel="external nofollow noreferrer noopener">backbone.js入门教程</a> (PDF)</li><li><a href="https://github.com/the5fire/backbonejs-learning-note" target="_blank" rel="external nofollow noreferrer noopener">Backbone.js入门教程第二版</a></li><li><a href="http://feliving.github.io/developing-backbone-applications" target="_blank" rel="external nofollow noreferrer noopener">Developing Backbone.js Applications(中文版)</a></li></ul></li><li>AngularJS<ul><li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-zh-cn.md" target="_blank" rel="external nofollow noreferrer noopener">AngularJS最佳实践和风格指南</a></li><li><a href="https://github.com/peiransun/angularjs-cn" target="_blank" rel="external nofollow noreferrer noopener">AngularJS中译本</a></li><li><a href="https://github.com/zensh/AngularjsTutorial_cn" target="_blank" rel="external nofollow noreferrer noopener">AngularJS入门教程</a></li><li><a href="https://github.com/xufei/Make-Your-Own-AngularJS/blob/master/01.md" target="_blank" rel="external nofollow noreferrer noopener">构建自己的AngularJS</a></li><li><a href="http://www.waylau.com/build-angularjs-app-with-yeoman-in-windows/" target="_blank" rel="external nofollow noreferrer noopener">在Windows环境下用Yeoman构建AngularJS项目</a></li></ul></li><li>Zepto.js<ul><li><a href="http://mweb.baidu.com/zeptoapi/" target="_blank" rel="external nofollow noreferrer noopener">Zepto.js 中文文档</a></li></ul></li><li>React.js<ul><li><a href="http://reactjs.cn" target="_blank" rel="external nofollow noreferrer noopener">React.js 中文文档</a></li><li><a href="https://github.com/fakefish/react-webpack-cookbook" target="_blank" rel="external nofollow noreferrer noopener">React webpack-cookbook</a></li><li><a href="http://fraserxu.me/intro-to-react/" target="_blank" rel="external nofollow noreferrer noopener">React 入门教程</a></li><li><a href="http://wiki.jikexueyuan.com/project/react-native/" target="_blank" rel="external nofollow noreferrer noopener">React Native 中文文档(含最新Android内容)</a></li></ul></li><li>impress.js<ul><li><a href="https://github.com/kokdemo/impress.js-tutorial-in-Chinese" target="_blank" rel="external nofollow noreferrer noopener">impress.js的中文教程</a></li></ul></li><li>CoffeeScript<ul><li><a href="https://github.com/geekplux/coffeescript-style-guide" target="_blank" rel="external nofollow noreferrer noopener">CoffeeScript 编码风格指南</a></li></ul></li><li>ExtJS<ul><li><a href="http://extjs-doc-cn.github.io/ext4api/" target="_blank" rel="external nofollow noreferrer noopener">Ext4.1.0 中文文档</a></li></ul></li><li>Meteor<ul><li><a href="http://zh.discovermeteor.com" target="_blank" rel="external nofollow noreferrer noopener">Discover Meteor</a></li></ul></li><li>D3.js<ul><li><a href="https://github.com/mbostock/d3/wiki/API--%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C" target="_blank" rel="external nofollow noreferrer noopener">官方API文档</a></li><li><a href="http://www.pkuwwt.tk/d3-tutorial-cn/about.html" target="_blank" rel="external nofollow noreferrer noopener">pkuwwt的D3教程</a></li><li><a href="http://blog.csdn.net/zhang__tianxu/article/category/1623437" target="_blank" rel="external nofollow noreferrer noopener">张天旭的D3教程</a></li><li><a href="http://www.cnblogs.com/winleisure/tag/D3.js/" target="_blank" rel="external nofollow noreferrer noopener">楚狂人的D3教程</a></li><li><a href="http://www.ourd3js.com/wordpress/?cat=2" target="_blank" rel="external nofollow noreferrer noopener">D3.js 入门系列</a> (还有进阶、高级等系列)</li></ul></li><li><a href="http://www.ituring.com.cn/minibook/950" target="_blank" rel="external nofollow noreferrer noopener">Chrome扩展及应用开发</a></li></ul><h3 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX"></a>LaTeX</h3><ul><li><a href="http://www.dralpha.com/zh/tech/tech.htm" target="_blank" rel="external nofollow noreferrer noopener">LaTeX 笔记</a></li><li><a href="http://ctan.org/pkg/lshort-zh-cn" target="_blank" rel="external nofollow noreferrer noopener">一份不太简短的 LaTeX2ε 介绍</a></li><li><a href="http://web.math.isu.edu.tw/yeh/HowTo/HowToTex/latex123.pdf" target="_blank" rel="external nofollow noreferrer noopener">大家來學 LaTeX</a> (PDF)</li></ul><h3 id="LISP"><a href="#LISP" class="headerlink" title="LISP"></a>LISP</h3><ul><li><a href="http://acl.readthedocs.org/en/latest/" target="_blank" rel="external nofollow noreferrer noopener">ANSI Common Lisp 中文翻译版</a></li><li><a href="http://www.ituring.com.cn/minibook/862" target="_blank" rel="external nofollow noreferrer noopener">Common Lisp 高级编程技术</a> (《On Lisp》中文版)</li></ul><h3 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h3><ul><li><a href="http://www.w3cschool.cc/manual/lua53doc/contents.html" target="_blank" rel="external nofollow noreferrer noopener">Lua 5.3 参考手册</a></li></ul><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><ul><li><a href="http://wowubuntu.com/markdown/basic.html" target="_blank" rel="external nofollow noreferrer noopener">Markdown 快速入门</a></li><li><a href="http://jianshu.io/p/7bd23251da0a" target="_blank" rel="external nofollow noreferrer noopener">Markdown 简明教程</a></li><li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external nofollow noreferrer noopener">Markdown 语法说明</a></li><li><a href="http://jianshu.io/p/q81RER" target="_blank" rel="external nofollow noreferrer noopener">献给写作者的 Markdown 新手指南</a></li></ul><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><ul><li><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="external nofollow noreferrer noopener">Node 入门</a></li><li><a href="https://www.gitbook.com/book/0532/nodejs/details" target="_blank" rel="external nofollow noreferrer noopener">The NodeJS 中文文档</a>（社区翻译）</li><li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external nofollow noreferrer noopener">七天学会NodeJS</a> 阿里出品，很好的入门资料</li></ul><h3 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h3><ul><li><a href="https://github.com/fayland/chinese-perl-book" target="_blank" rel="external nofollow noreferrer noopener">Master Perl Today</a></li><li><a href="http://www.cbi.pku.edu.cn/chinese/documents/perl/index.htm" target="_blank" rel="external nofollow noreferrer noopener">Perl 5 教程</a></li><li><a href="http://www.yiibai.com/perl" target="_blank" rel="external nofollow noreferrer noopener">Perl 教程</a></li><li><a href="https://github.com/horus/modern_perl_book" target="_blank" rel="external nofollow noreferrer noopener">《Modern Perl》中文版</a></li></ul><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><ul><li><a href="http://www.php-internals.com/book/" target="_blank" rel="external nofollow noreferrer noopener">深入理解 PHP 内核</a></li><li><a href="http://php.net/manual/zh/" target="_blank" rel="external nofollow noreferrer noopener">PHP5中文手册</a></li><li><a href="http://www.walu.cc/phpbook/preface.md" target="_blank" rel="external nofollow noreferrer noopener">PHP扩展开发及内核应用</a></li><li><a href="http://wusuopu.gitbooks.io/symfony2_tutorial/content" target="_blank" rel="external nofollow noreferrer noopener">Symfony2 实例教程</a></li><li><a href="http://wulijun.github.io/php-the-right-way/" target="_blank" rel="external nofollow noreferrer noopener">PHP 之道</a></li></ul><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ul><li><a href="http://djangobook.py3k.cn/2.0/" target="_blank" rel="external nofollow noreferrer noopener">Django book 2.0</a></li><li><a href="http://docspy3zh.readthedocs.org/en/latest/" target="_blank" rel="external nofollow noreferrer noopener">Python 3 文档(简体中文) 3.2.2 documentation</a></li><li><a href="http://www.pythondoc.com" target="_blank" rel="external nofollow noreferrer noopener">Python 中文学习大本营</a></li><li><a href="http://woodpecker.org.cn/diveintopython/" target="_blank" rel="external nofollow noreferrer noopener">深入 Python</a></li><li><a href="http://woodpecker.org.cn/diveintopython3/" target="_blank" rel="external nofollow noreferrer noopener">深入 Python 3</a></li><li><a href="http://sebug.net/paper/books/LearnPythonTheHardWay/" target="_blank" rel="external nofollow noreferrer noopener">笨办法学 Python</a></li><li><a href="http://woodpecker.org.cn/abyteofpython_cn/chinese/" target="_blank" rel="external nofollow noreferrer noopener">简明 Python 教程</a> (《A Byte of Python》中文版)</li></ul><h3 id="R"><a href="#R" class="headerlink" title="R"></a>R</h3><ul><li><a href="http://cran.r-project.org/doc/contrib/Ding-R-intro_cn.pdf" target="_blank" rel="external nofollow noreferrer noopener">R 导论</a> (《An Introduction to R》中文版) (PDF)</li><li><a href="http://cran.r-project.org/doc/contrib/Liu-FAQ.pdf" target="_blank" rel="external nofollow noreferrer noopener">153分钟学会 R</a> (PDF)</li><li><a href="http://www.biosino.org/R/R-doc/files/R4beg_cn_2.0.pdf" target="_blank" rel="external nofollow noreferrer noopener">《R for beginners》中文版</a> (PDF)</li><li><a href="http://yanping.me/shiny-tutorial/" target="_blank" rel="external nofollow noreferrer noopener">用 R 构建 Shiny 应用程序</a> (《Building ‘Shiny’ Applications with R》中文版)</li><li><a href="http://cran.r-project.org/doc/contrib/Xu-Statistics_and_R.pdf" target="_blank" rel="external nofollow noreferrer noopener">统计学与 R 读书笔记</a> (PDF)</li></ul><h3 id="reStructuredText"><a href="#reStructuredText" class="headerlink" title="reStructuredText"></a>reStructuredText</h3><ul><li><a href="http://www.pythondoc.com/sphinx/rest.html" target="_blank" rel="external nofollow noreferrer noopener">reStructuredText 入门</a></li><li><a href="http://jwch.sdut.edu.cn/book/rst.html" target="_blank" rel="external nofollow noreferrer noopener">reStructuredText 简明教程</a></li></ul><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><ul><li><a href="https://github.com/JuanitoFatas/rails-style-guide/blob/master/README-zhCN.md" target="_blank" rel="external nofollow noreferrer noopener">Rails 风格指南</a></li><li><a href="http://railstutorial-china.org" target="_blank" rel="external nofollow noreferrer noopener">Ruby on Rails Tutorial 原书第 2 版</a></li><li><a href="http://ihower.tw/rails4/" target="_blank" rel="external nofollow noreferrer noopener">Ruby on Rails 实战圣经</a></li><li><a href="https://github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhCN.md" target="_blank" rel="external nofollow noreferrer noopener">Ruby 风格指南</a></li><li><a href="http://lrthw.github.io" target="_blank" rel="external nofollow noreferrer noopener">笨方法学 Ruby</a></li></ul><h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><ul><li><a href="http://twitter.github.io/effectivescala/index-cn.html" target="_blank" rel="external nofollow noreferrer noopener">Effective Scala</a></li><li><a href="http://twitter.github.io/scala_school/zh_cn/index.html" target="_blank" rel="external nofollow noreferrer noopener">Scala 课堂</a> (Twitter的Scala中文教程)</li><li><a href="https://www.gitbook.com/book/windor/beginners-guide-to-scala/details" target="_blank" rel="external nofollow noreferrer noopener">Scala 初学者指南</a> (The Neophyte’s Guide to Scala)</li></ul><h3 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h3><ul><li><a href="http://deathking.github.io/yast-cn/" target="_blank" rel="external nofollow noreferrer noopener">Scheme 入门教程</a> (《Yet Another Scheme Tutorial》中文版)</li><li><a href="http://r6rs.mrliu.org" target="_blank" rel="external nofollow noreferrer noopener">算法语言Scheme修订<sup>6</sup>报告</a>（R<sup>6</sup>RS简体中文翻译）</li></ul><h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><ul><li><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80" target="_blank" rel="external nofollow noreferrer noopener">Shell 编程基础</a></li><li><a href="https://github.com/qinjx/30min_guides/blob/master/shell.md" target="_blank" rel="external nofollow noreferrer noopener">Shell 脚本编程30分钟入门</a></li><li><a href="http://billie66.github.io/TLCL/book/zh" target="_blank" rel="external nofollow noreferrer noopener">The Linux Command Line 中文版</a></li></ul><h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><ul><li><a href="https://www.gitbook.io/book/numbbbbb/-the-swift-programming-language-" target="_blank" rel="external nofollow noreferrer noopener">《The Swift Programming Language》中文版</a></li></ul><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><ul><li><a href="http://www.study-area.org/tips/vim/index.html" target="_blank" rel="external nofollow noreferrer noopener">大家來學 VIM</a></li><li><a href="http://man.chinaunix.net/newsoft/vi/doc/help.html" target="_blank" rel="external nofollow noreferrer noopener">Vim Manual(中文版)</a></li></ul><h3 id="Visual-Prolog"><a href="#Visual-Prolog" class="headerlink" title="Visual Prolog"></a>Visual Prolog</h3><ul><li><a href="http://wiki.visual-prolog.com/index.php?title=A_Beginners_Guide_to_Visual_Prolog_in_Chinese" target="_blank" rel="external nofollow noreferrer noopener">Visual Prolog 7初学指南</a></li><li><a href="http://wiki.visual-prolog.com/index.php?title=Visual_Prolog_for_Tyros_in_Chinese" target="_blank" rel="external nofollow noreferrer noopener">Visual Prolog 7边练边学</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#语言无关&quot;&gt;语言无关&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#在线教育&quot;&gt;在线教育&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#软件开发方法&quot;&gt;软件开发方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#操作系统&quot;&gt;操作系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#版本控制&quot;&gt;版本控制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#数据库&quot;&gt;数据库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#正则表达式&quot;&gt;正则表达式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#智能系统&quot;&gt;智能系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#分布式系统&quot;&gt;分布式系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#编译原理&quot;&gt;编译原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#函数式概念&quot;&gt;函数式概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#计算机图形学&quot;&gt;计算机图形学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#web服务器&quot;&gt;WEB服务器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#编辑器&quot;&gt;编辑器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#nosql&quot;&gt;NoSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#postgresql&quot;&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#mysql&quot;&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#管理和监控&quot;&gt;管理和监控&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#项目相关&quot;&gt;项目相关&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#设计模式&quot;&gt;设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#web&quot;&gt;Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#大数据&quot;&gt;大数据&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#编程艺术&quot;&gt;编程艺术&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#其它&quot;&gt;其它&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#语言相关&quot;&gt;语言相关&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#android&quot;&gt;Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#awk&quot;&gt;AWK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cc&quot;&gt;C/C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#coffeescript&quot;&gt;CoffeeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#dart&quot;&gt;Dart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#elasticsearch&quot;&gt;Elasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#erlang&quot;&gt;Erlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#fortran&quot;&gt;Fortran&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#golang&quot;&gt;Golang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#haskell&quot;&gt;Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#html--css&quot;&gt;HTML / CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#http&quot;&gt;HTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ios&quot;&gt;iOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#java&quot;&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#latex&quot;&gt;LaTeX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#lisp&quot;&gt;LISP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#lua&quot;&gt;Lua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#markdown&quot;&gt;Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#nodejs&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#perl&quot;&gt;Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#php&quot;&gt;PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#python&quot;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#r&quot;&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#restructuredtext&quot;&gt;reStructuredText&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ruby&quot;&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#scala&quot;&gt;Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#scheme&quot;&gt;Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#shell&quot;&gt;Shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#swift&quot;&gt;Swift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vim&quot;&gt;Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#visual-prolog&quot;&gt;Visual Prolog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Books" scheme="http://notes.seirhsiao.com/categories/Books/"/>
    
    
      <category term="资源" scheme="http://notes.seirhsiao.com/tags/%E8%B5%84%E6%BA%90/"/>
    
      <category term="book" scheme="http://notes.seirhsiao.com/tags/book/"/>
    
      <category term="书籍" scheme="http://notes.seirhsiao.com/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>免费的编程中文书籍索引</title>
    <link href="http://notes.seirhsiao.com/posts/62b712b2/"/>
    <id>http://notes.seirhsiao.com/posts/62b712b2/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-07T02:40:11.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="免费的编程中文书籍索引"><a href="#免费的编程中文书籍索引" class="headerlink" title="免费的编程中文书籍索引"></a>免费的编程中文书籍索引</h1><p><a href="https://travis-ci.org/justjavac/free-programming-books-zh_CN" target="_blank" rel="external nofollow noreferrer noopener"><img alt="Build Status" data-src="https://travis-ci.org/justjavac/free-programming-books-zh_CN.svg?branch=master" class="lazyload"></a></p><p>免费的编程中文书籍索引，欢迎投稿。</p><ul><li>国外程序员在 <a href="http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read/1713%231713" target="_blank" rel="external nofollow noreferrer noopener">stackoverflow</a> 推荐的程序员必读书籍，<a href="http://justjavac.com/other/2012/05/15/qualified-programmer-should-read-what-books.html" target="_blank" rel="external nofollow noreferrer noopener" title="一个合格的程序员应该读过哪些书">中文版</a>。</li><li><a href="http://stackoverflow.com/questions/38210/what-non-programming-books-should-programmers-read" target="_blank" rel="external nofollow noreferrer noopener">stackoverflow</a> 上的程序员应该阅读的非编程类书籍有哪些？ <a href="what-non-programming-books-should-programmers-read.md">中文版</a></li><li><a href="https://github.com/vhf/free-programming-books" target="_blank" rel="external nofollow noreferrer noopener">github</a> 上的一个流行的编程书籍索引  <a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md" target="_blank" rel="external nofollow noreferrer noopener">中文版</a></li></ul><p>感谢 <a href="https://github.com/siberiawolf" target="_blank" rel="external nofollow noreferrer noopener">@siberiawolf</a> 使用 Bootstrap 开发了网页版，地址：<a href="http://siberiawolf.com/free_programming/index.html" target="_blank" rel="external nofollow noreferrer noopener">http://siberiawolf.com/free_programming/index.html</a></p><a id="more"></a><h2 id="参与交流"><a href="#参与交流" class="headerlink" title="参与交流"></a>参与交流</h2><p>欢迎大家将珍藏已久的经典免费书籍共享出来，您可以：</p><ul><li>使用 <a href="https://github.com/justjavac/free-programming-books-zh_CN/issues" target="_blank" rel="external nofollow noreferrer noopener">Issues</a> 以及 Pull Request</li></ul><p>贡献者名单: <a href="https://github.com/justjavac/free-programming-books-zh_CN/graphs/contributors" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/justjavac/free-programming-books-zh_CN/graphs/contributors</a></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p><a href="#语言无关类">语言无关类</a></p><ul><li><a href="#操作系统">操作系统</a></li><li><a href="#智能系统">智能系统</a></li><li><a href="#分布式系统">分布式系统</a></li><li><a href="#编译原理">编译原理</a></li><li><a href="#函数式概念">函数式概念</a></li><li><a href="#计算机图形学">计算机图形学</a></li><li><a href="#web服务器">WEB服务器</a></li><li><a href="#版本控制">版本控制</a></li><li><a href="#编辑器">编辑器</a></li><li><a href="#nosql">NoSQL</a></li><li><a href="#postgresql">PostgreSQL</a></li><li><a href="#mysql">MySQL</a></li><li><a href="#管理和监控">管理和监控</a></li><li><a href="#项目相关">项目相关</a></li><li><a href="#设计模式">设计模式</a></li><li><a href="#web">Web</a></li><li><a href="#大数据">大数据</a></li><li><a href="#编程艺术">编程艺术</a></li><li><a href="#其它">其它</a></li></ul></li><li><p><a href="#语言相关类">语言相关类</a></p><ul><li><a href="#android">Android</a></li><li><a href="#awk">AWK</a></li><li><a href="#cc">C/C++</a></li><li><a href="#clojure">Clojure</a></li><li><a href="#css">CSS/HTML</a></li><li><a href="#dart">Dart</a></li><li><a href="#erlang">Erlang</a></li><li><a href="#fortran">Fortran</a></li><li><a href="#go">Go</a></li><li><a href="#groovy">Groovy</a></li><li><a href="#haskell">Haskell</a></li><li><a href="#ios">iOS</a></li><li><a href="#java">Java</a></li><li><a href="#javascript">JavaScript</a></li><li><a href="#latex">LaTeX</a></li><li><a href="#lisp">LISP</a></li><li><a href="#lua">Lua</a></li><li><a href="#OCaml">OCaml</a></li><li><a href="#perl">Perl</a></li><li><a href="#php">PHP</a></li><li><a href="#prolog">Prolog</a></li><li><a href="#python">Python</a></li><li><a href="#r">R</a></li><li><a href="#ruby">Ruby</a></li><li><a href="#rust">Rust</a></li><li><a href="#scala">Scala</a></li><li><a href="#shell">Shell</a></li><li><a href="#swift">Swift</a></li></ul></li><li><p><a href="#读书笔记及其它">读书笔记及其它</a></p></li><li><p><a href="#测试相关">测试相关</a></p></li></ul><h2 id="语言无关类"><a href="#语言无关类" class="headerlink" title="语言无关类"></a>语言无关类</h2><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul><li><a href="http://i.linuxtoy.org/docs/guide/index.html" target="_blank" rel="external nofollow noreferrer noopener">开源世界旅行手册</a></li><li><a href="http://vbird.dic.ksu.edu.tw/" target="_blank" rel="external nofollow noreferrer noopener">鸟哥的Linux私房菜</a></li><li><a href="http://billie66.github.io/TLCL/index.html" target="_blank" rel="external nofollow noreferrer noopener">The Linux Command Line</a> (中英文版)</li><li><a href="http://oss.org.cn/kernel-book/ldd3/index.html" target="_blank" rel="external nofollow noreferrer noopener">Linux 设备驱动</a> (第三版)</li><li><a href="http://www.kerneltravel.net/kernel-book/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81.html" target="_blank" rel="external nofollow noreferrer noopener">深入分析Linux内核源码</a></li><li><a href="http://cb.vu/unixtoolbox_zh_CN.xhtml" target="_blank" rel="external nofollow noreferrer noopener">UNIX TOOLBOX</a></li><li><a href="https://github.com/widuu/chinese_docker" target="_blank" rel="external nofollow noreferrer noopener">Docker中文指南</a></li><li><a href="https://github.com/yeasy/docker_practice" target="_blank" rel="external nofollow noreferrer noopener">Docker —— 从入门到实践</a></li><li><a href="http://yuedu.baidu.com/ebook/d817967416fc700abb68fca1" target="_blank" rel="external nofollow noreferrer noopener">Docker入门实战</a></li><li><a href="http://freeradius.akagi201.org" target="_blank" rel="external nofollow noreferrer noopener">FreeRADIUS新手入门</a></li><li><a href="https://aaaaaashu.gitbooks.io/mac-dev-setup/content/" target="_blank" rel="external nofollow noreferrer noopener">Mac 开发配置手册</a></li><li><a href="https://www.freebsd.org/doc/zh_CN/books/handbook/index.html" target="_blank" rel="external nofollow noreferrer noopener">FreeBSD 使用手册</a></li><li><a href="http://billie66.github.io/TLCL/book/" target="_blank" rel="external nofollow noreferrer noopener">Linux 命令行(中文版)</a></li><li><a href="http://works.jinbuguo.com/lfs/lfs62/index.html" target="_blank" rel="external nofollow noreferrer noopener">Linux 构建指南</a></li><li><a href="https://github.com/me115/linuxtools_rst" target="_blank" rel="external nofollow noreferrer noopener">Linux工具快速教程</a></li><li><a href="https://www.gitbook.com/book/tinylab/linux-doc/details" target="_blank" rel="external nofollow noreferrer noopener">Linux Documentation (中文版)</a></li><li><a href="https://www.gitbook.com/book/tinylab/elinux/details" target="_blank" rel="external nofollow noreferrer noopener">嵌入式 Linux 知识库 (eLinux.org 中文版)</a></li><li><a href="https://github.com/tobegit3hub/understand_linux_process" target="_blank" rel="external nofollow noreferrer noopener">理解Linux进程</a></li><li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md" target="_blank" rel="external nofollow noreferrer noopener">命令行的艺术</a></li></ul><h4 id="智能系统"><a href="#智能系统" class="headerlink" title="智能系统"></a>智能系统</h4><ul><li><a href="https://github.com/phodal/designiot" target="_blank" rel="external nofollow noreferrer noopener">一步步搭建物联网系统</a></li></ul><h3 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h3><ul><li><a href="http://dcaoyuan.github.io/papers/pdfs/Scalability.pdf" target="_blank" rel="external nofollow noreferrer noopener">走向分布式</a></li></ul><h3 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h3><ul><li><a href="https://github.com/DeathKing/Learning-SICP" target="_blank" rel="external nofollow noreferrer noopener">《计算机程序的结构和解释》公开课 翻译项目</a></li></ul><h3 id="函数式概念"><a href="#函数式概念" class="headerlink" title="函数式概念"></a>函数式概念</h3><ul><li><a href="https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn" target="_blank" rel="external nofollow noreferrer noopener">傻瓜函数编程</a></li></ul><h3 id="计算机图形学"><a href="#计算机图形学" class="headerlink" title="计算机图形学"></a>计算机图形学</h3><ul><li><a href="https://github.com/zilongshanren/opengl-tutorials" target="_blank" rel="external nofollow noreferrer noopener">OpenGL 教程</a></li></ul><h3 id="WEB服务器"><a href="#WEB服务器" class="headerlink" title="WEB服务器"></a>WEB服务器</h3><ul><li><a href="http://tengine.taobao.org/book/index.html" target="_blank" rel="external nofollow noreferrer noopener">Nginx开发从入门到精通</a> (淘宝团队出品)</li><li><a href="http://www.ttlsa.com/nginx/nginx-stu-pdf/" target="_blank" rel="external nofollow noreferrer noopener">Nginx教程从入门到精通</a>(PDF版本，运维生存时间出品)</li><li><a href="https://www.gitbook.com/book/moonbingbing/openresty-best-practices/details" target="_blank" rel="external nofollow noreferrer noopener">OpenResty最佳实践</a></li><li><a href="http://works.jinbuguo.com/apache/menu22/index.html" target="_blank" rel="external nofollow noreferrer noopener">Apache 中文手册</a></li></ul><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><ul><li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external nofollow noreferrer noopener">Git教程</a> （本文由 <a href="http://www.liaoxuefeng.com" target="_blank" rel="external nofollow noreferrer noopener">廖雪峰</a> 创作，如果觉得本教程对您有帮助，可以去 <a href="https://itunes.apple.com/cn/app/git-jiao-cheng/id876420437" target="_blank" rel="external nofollow noreferrer noopener">iTunes</a> 购买）</li><li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external nofollow noreferrer noopener">git - 简易指南</a></li><li><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="external nofollow noreferrer noopener">猴子都能懂的GIT入门</a></li><li><a href="http://gitref.justjavac.com" target="_blank" rel="external nofollow noreferrer noopener">Git 参考手册</a></li><li><a href="http://git-scm.com/book/zh/v2" target="_blank" rel="external nofollow noreferrer noopener">Pro Git</a></li><li><a href="https://www.gitbook.com/book/0532/progit/details" target="_blank" rel="external nofollow noreferrer noopener">Pro Git 中文版</a> (整理在gitbook上)</li><li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/" target="_blank" rel="external nofollow noreferrer noopener">Git Magic</a></li><li><a href="http://www.worldhello.net/gotgithub/index.html" target="_blank" rel="external nofollow noreferrer noopener">GotGitHub</a></li><li><a href="http://gitbook.liuhui998.com/index.html" target="_blank" rel="external nofollow noreferrer noopener">Git Community Book 中文版</a></li><li><a href="https://www.mercurial-scm.org/wiki/ChineseTutorial" target="_blank" rel="external nofollow noreferrer noopener">Mercurial 使用教程</a></li><li><a href="http://bucunzai.net/hginit/" target="_blank" rel="external nofollow noreferrer noopener">HgInit (中文版)</a></li><li><a href="http://igit.linuxtoy.org" target="_blank" rel="external nofollow noreferrer noopener">沉浸式学 Git</a></li><li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet" target="_blank" rel="external nofollow noreferrer noopener">Git-Cheat-Sheet</a> （感谢 @flyhigher139 翻译了中文版）</li><li><a href="https://snowdream86.gitbooks.io/github-cheat-sheet/content/zh/index.html" target="_blank" rel="external nofollow noreferrer noopener">GitHub秘籍</a></li><li><a href="https://github.com/waylau/github-help" target="_blank" rel="external nofollow noreferrer noopener">Github帮助文档</a></li><li><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" target="_blank" rel="external nofollow noreferrer noopener">git-flow 备忘清单</a></li><li><a href="http://svnbook.red-bean.com/nightly/zh/index.html" target="_blank" rel="external nofollow noreferrer noopener">svn 手册</a></li></ul><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><ul><li><a href="http://exvim.github.io/docs-zh/intro/" target="_blank" rel="external nofollow noreferrer noopener">exvim–vim 改良成IDE项目</a></li><li><a href="http://learnvimscriptthehardway.onefloweroneworld.com/" target="_blank" rel="external nofollow noreferrer noopener">笨方法学Vimscript 中译本</a></li><li><a href="https://github.com/vimcn/vimcdoc" target="_blank" rel="external nofollow noreferrer noopener">Vim中文文档</a></li><li><a href="https://github.com/yangyangwithgnu/use_vim_as_ide" target="_blank" rel="external nofollow noreferrer noopener">所需即所获：像 IDE 一样使用 vim</a></li><li><a href="https://github.com/aqua7regia/tmux-Productive-Mouse-Free-Development_zh" target="_blank" rel="external nofollow noreferrer noopener">tmux:高效的全键盘开发工具</a></li></ul><h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><ul><li><a href="http://yankaycom-wordpress.stor.sinaapp.com/NoSql_Database_Note.html?q=/wp-content/NoSql_Database_Note.html" target="_blank" rel="external nofollow noreferrer noopener">NoSQL数据库笔谈</a> (<a href="http://yankaycom-wordpress.stor.sinaapp.com/uploads/2012/12/NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%B0%88v2.pdf" target="_blank" rel="external nofollow noreferrer noopener">PDF</a>)</li><li><a href="http://redisbook.com/" target="_blank" rel="external nofollow noreferrer noopener">Redis 设计与实现</a></li><li><a href="http://redisdoc.com/" target="_blank" rel="external nofollow noreferrer noopener">Redis 命令参考</a></li><li><a href="https://github.com/huangz1990/redis-3.0-annotated" target="_blank" rel="external nofollow noreferrer noopener">带有详细注释的 Redis 3.0 代码</a></li><li><a href="https://github.com/huangz1990/annotated_redis_source" target="_blank" rel="external nofollow noreferrer noopener">带有详细注释的 Redis 2.6 代码</a></li><li><a href="https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md" target="_blank" rel="external nofollow noreferrer noopener">The Little MongoDB Book</a></li><li><a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md" target="_blank" rel="external nofollow noreferrer noopener">The Little Redis Book</a></li><li><a href="http://docs.neo4j.org.cn/" target="_blank" rel="external nofollow noreferrer noopener">Neo4j 简体中文手册 v1.8</a></li><li><a href="http://neo4j.tw/" target="_blank" rel="external nofollow noreferrer noopener">Neo4j .rb 中文資源</a></li><li><a href="http://disquebook.com" target="_blank" rel="external nofollow noreferrer noopener">Disque 使用教程</a></li></ul><h3 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3><ul><li><a href="http://works.jinbuguo.com/postgresql/menu823/index.html" target="_blank" rel="external nofollow noreferrer noopener">PostgreSQL 8.2.3 中文文档</a></li><li><a href="http://www.postgres.cn/docs/9.3/index.html" target="_blank" rel="external nofollow noreferrer noopener">PostgreSQL 9.3.1 中文文档</a></li></ul><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ul><li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="external nofollow noreferrer noopener">MySQL索引背后的数据结构及算法原理</a></li><li><a href="http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html" target="_blank" rel="external nofollow noreferrer noopener">21分钟MySQL入门教程</a></li></ul><h3 id="管理和监控"><a href="#管理和监控" class="headerlink" title="管理和监控"></a>管理和监控</h3><ul><li><a href="http://kibana.logstash.es" target="_blank" rel="external nofollow noreferrer noopener">ELKstack 中文指南</a></li><li><a href="http://udn.yyuap.com/doc/mastering-elasticsearch/" target="_blank" rel="external nofollow noreferrer noopener">Mastering Elasticsearch(中文版)</a></li><li><a href="https://www.gitbook.com/book/fuxiaopang/learnelasticsearch/details" target="_blank" rel="external nofollow noreferrer noopener">ElasticSearch 权威指南</a></li><li><a href="http://es.xiaoleilu.com" target="_blank" rel="external nofollow noreferrer noopener">Elasticsearch 权威指南（中文版）</a></li><li><a href="https://github.com/chenryn/logstash-best-practice-cn" target="_blank" rel="external nofollow noreferrer noopener">Logstash 最佳实践</a></li><li><a href="http://bbs.konotes.org/workdoc/puppet-27/" target="_blank" rel="external nofollow noreferrer noopener">Puppet 2.7 Cookbook 中文版</a></li></ul><h3 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h3><ul><li><a href="http://article.yeeyan.org/view/2251/94882" target="_blank" rel="external nofollow noreferrer noopener">持续集成（第二版）</a> (译言网)</li><li><a href="http://www.ibm.com/developerworks/cn/java/j-ap/" target="_blank" rel="external nofollow noreferrer noopener">让开发自动化系列专栏</a></li><li><a href="http://www.ibm.com/developerworks/cn/java/j-cq/" target="_blank" rel="external nofollow noreferrer noopener">追求代码质量</a></li><li><a href="https://github.com/fool2fish/selenium-doc" target="_blank" rel="external nofollow noreferrer noopener">selenium 中文文档</a></li><li><a href="http://local.joelonsoftware.com/wiki/Chinese(Simplified)" target="_blank" rel="external nofollow noreferrer noopener">Joel谈软件</a></li><li><a href="http://local.joelonsoftware.com/wiki/%E9%A6%96%E9%A0%81" target="_blank" rel="external nofollow noreferrer noopener">約耳談軟體(Joel on Software)</a></li><li><a href="https://github.com/waylau/Gradle-2-User-Guide" target="_blank" rel="external nofollow noreferrer noopener">Gradle 2 用户指南</a></li><li><a href="http://yuedu.baidu.com/ebook/f23af265998fcc22bcd10da2" target="_blank" rel="external nofollow noreferrer noopener">Gradle 中文使用文档</a></li><li><a href="https://github.com/ecomfe/spec" target="_blank" rel="external nofollow noreferrer noopener">编码规范</a></li><li><a href="http://www.ituring.com.cn/book/1143" target="_blank" rel="external nofollow noreferrer noopener">开源软件架构</a></li><li><a href="http://docs.huihoo.com/gnu/linux/gmake.html" target="_blank" rel="external nofollow noreferrer noopener">GNU make 指南</a></li><li><a href="http://www.yayu.org/book/gnu_make/" target="_blank" rel="external nofollow noreferrer noopener">GNU make 中文手册</a></li></ul><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul><li><a href="https://github.com/me115/design_patterns" target="_blank" rel="external nofollow noreferrer noopener">图说设计模式</a></li><li><a href="http://blog.csdn.net/lovelion/article/details/17517213" target="_blank" rel="external nofollow noreferrer noopener">史上最全设计模式导学目录</a></li></ul><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><ul><li><a href="http://www.20thingsilearned.com/zh-CN/home" target="_blank" rel="external nofollow noreferrer noopener">关于浏览器和网络的 20 项须知</a></li><li><a href="http://jinlong.github.io/2013/08/29/devtoolsecrets/" target="_blank" rel="external nofollow noreferrer noopener">浏览器开发工具的秘密</a></li><li><a href="https://github.com/CN-Chrome-DevTools/CN-Chrome-DevTools" target="_blank" rel="external nofollow noreferrer noopener">Chrome 开发者工具中文手册</a></li><li><a href="http://open.chrome.360.cn/extension_dev/overview.html" target="_blank" rel="external nofollow noreferrer noopener">Chrome扩展开发文档</a></li><li><a href="http://www.gruntjs.net/" target="_blank" rel="external nofollow noreferrer noopener">Grunt中文文档</a></li><li><a href="http://www.gulpjs.com.cn/docs/" target="_blank" rel="external nofollow noreferrer noopener">gulp中文文档</a></li><li><a href="https://github.com/nimojs/gulp-book" target="_blank" rel="external nofollow noreferrer noopener">Gulp 入门指南</a></li><li><a href="https://github.com/AlloyTeam/Mars" target="_blank" rel="external nofollow noreferrer noopener">移动Web前端知识库</a></li><li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external nofollow noreferrer noopener">正则表达式30分钟入门教程</a></li><li><a href="https://github.com/fouber/blog/issues/2" target="_blank" rel="external nofollow noreferrer noopener">前端开发体系建设日记</a></li><li><a href="https://github.com/hoosin/mobile-web-favorites" target="_blank" rel="external nofollow noreferrer noopener">移动前端开发收藏夹</a></li><li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="external nofollow noreferrer noopener">JSON风格指南</a></li><li><a href="https://github.com/bolasblack/http-api-guide" target="_blank" rel="external nofollow noreferrer noopener">HTTP 接口设计指北</a></li><li><a href="https://github.com/hacke2/hacke2.github.io/issues/1" target="_blank" rel="external nofollow noreferrer noopener">前端资源分享（一）</a></li><li><a href="https://github.com/hacke2/hacke2.github.io/issues/3" target="_blank" rel="external nofollow noreferrer noopener">前端资源分享（二）</a></li><li><a href="http://coderlmn.github.io/code-standards/" target="_blank" rel="external nofollow noreferrer noopener">前端代码规范 及 最佳实践</a></li><li><a href="http://www.flygon.net/archives/427" target="_blank" rel="external nofollow noreferrer noopener">w3school教程整理</a></li><li><a href="http://man.lupaworld.com/content/network/wireshark/index.html" target="_blank" rel="external nofollow noreferrer noopener">Wireshark用户手册</a></li><li><a href="https://community.emc.com/thread/194901" target="_blank" rel="external nofollow noreferrer noopener">一站式学习Wireshark</a></li><li><a href="http://happypeter.github.io/tealeaf-http/" target="_blank" rel="external nofollow noreferrer noopener">HTTP 下午茶</a></li><li><a href="http://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99?pn=1" target="_blank" rel="external nofollow noreferrer noopener">HTTP/2.0 中文翻译</a></li><li><a href="https://www.gitbook.com/book/ye11ow/http2-explained/details" target="_blank" rel="external nofollow noreferrer noopener">http2讲解</a></li><li><a href="https://www.gitbook.com/book/juntao/3-web-designs-in-3-weeks/details" target="_blank" rel="external nofollow noreferrer noopener">3 Web Designs in 3 Weeks</a></li></ul><h3 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h3><ul><li><a href="https://github.com/Flowerowl/Big-Data-Resources" target="_blank" rel="external nofollow noreferrer noopener">大数据/数据挖掘/推荐系统/机器学习相关资源</a></li><li><a href="https://github.com/jizhang/guidetodatamining" target="_blank" rel="external nofollow noreferrer noopener">面向程序员的数据挖掘指南</a></li><li><a href="https://code.csdn.net/CODE_Translation/spark_matei_phd" target="_blank" rel="external nofollow noreferrer noopener">大型集群上的快速和通用数据处理架构</a></li><li><a href="https://github.com/linyiqun/DataMiningAlgorithm" target="_blank" rel="external nofollow noreferrer noopener">数据挖掘中经典的算法实现和详细的注释</a></li><li><a href="https://aiyanbo.gitbooks.io/spark-programming-guide-zh-cn/content/" target="_blank" rel="external nofollow noreferrer noopener">Spark 编程指南简体中文版</a></li></ul><h2 id="编程艺术"><a href="#编程艺术" class="headerlink" title="编程艺术"></a>编程艺术</h2><ul><li><a href="https://github.com/julycoding/The-Art-Of-Programming-by-July" target="_blank" rel="external nofollow noreferrer noopener">程序员编程艺术</a></li><li><a href="http://www.oschina.net/translate/what-every-programmer-should-know-about-memory-part1?print" target="_blank" rel="external nofollow noreferrer noopener">每个程序员都应该了解的内存知识(译)</a>【第一部分】</li><li><a href="http://read.douban.com/ebook/4972883/" target="_blank" rel="external nofollow noreferrer noopener">取悦的工序：如何理解游戏</a> (豆瓣阅读，免费书籍)</li></ul><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul><li><a href="https://www.gitbook.com/book/softwaredownload/openwrt-fanqiang/details" target="_blank" rel="external nofollow noreferrer noopener">OpenWrt智能、自动、透明翻墙路由器教程</a></li><li><a href="https://community.emc.com/docs/DOC-16067" target="_blank" rel="external nofollow noreferrer noopener">SAN 管理入门系列</a></li><li><a href="http://sketchcn.com/sketch-chinese-user-manual.html#introduce" target="_blank" rel="external nofollow noreferrer noopener">Sketch 中文手册</a></li><li><a href="http://ifeve.com/perfbook/" target="_blank" rel="external nofollow noreferrer noopener">深入理解并行编程</a></li></ul><h2 id="语言相关类"><a href="#语言相关类" class="headerlink" title="语言相关类"></a>语言相关类</h2><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><ul><li><a href="http://www.apkbus.com/design/index.html" target="_blank" rel="external nofollow noreferrer noopener">Android Design(中文版)</a></li><li>Google Material Design 正體中文版 (<a href="https://wcc723.gitbooks.io/google_design_translate/content/style-icons.html" target="_blank" rel="external nofollow noreferrer noopener">译本一</a> <a href="https://github.com/1sters/material_design_zh" target="_blank" rel="external nofollow noreferrer noopener">译本二</a>)</li><li><a href="http://wiki.jikexueyuan.com/project/material-design/" target="_blank" rel="external nofollow noreferrer noopener">Material Design 中文版</a></li><li><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external nofollow noreferrer noopener">Google Android官方培训课程中文版</a></li><li><a href="http://www.stormzhang.com/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="external nofollow noreferrer noopener">Android学习之路</a></li><li><a href="https://github.com/bboyfeiyu/android-tech-frontier" target="_blank" rel="external nofollow noreferrer noopener">Android开发技术前线(android-tech-frontier)</a></li><li><a href="https://github.com/FX-Max/Point-of-Android" target="_blank" rel="external nofollow noreferrer noopener">Point-of-Android</a> Android 一些重要知识点解析整理</li><li><a href="http://leanote.com/blog/post/561658f938f41126b2000298?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external nofollow noreferrer noopener">Android6.0新特性详解</a></li></ul><h3 id="AWK"><a href="#AWK" class="headerlink" title="AWK"></a>AWK</h3><ul><li><a href="https://github.com/wuzhouhui/awk" target="_blank" rel="external nofollow noreferrer noopener">awk程序设计语言</a></li><li><a href="http://awk.readthedocs.org/en/latest/index.html" target="_blank" rel="external nofollow noreferrer noopener">awk中文指南</a></li></ul><h3 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h3><ul><li><a href="https://www.gitbook.com/book/tinylab/cbook/details" target="_blank" rel="external nofollow noreferrer noopener">C 语言编程透视</a></li><li><a href="https://github.com/forhappy/Cplusplus-Concurrency-In-Practice" target="_blank" rel="external nofollow noreferrer noopener">C++ 并发编程指南</a></li><li><a href="http://akaedu.github.io/book/" target="_blank" rel="external nofollow noreferrer noopener">Linux C编程一站式学习</a> (宋劲杉, 北京亚嵌教育研究中心)</li><li><a href="https://github.com/leeyiw/cgdb-manual-in-chinese" target="_blank" rel="external nofollow noreferrer noopener">CGDB中文手册</a></li><li><a href="https://github.com/hellogcc/100-gdb-tips/blob/master/src/index.md" target="_blank" rel="external nofollow noreferrer noopener">100个gdb小技巧</a></li><li><a href="https://github.com/hellogcc/100-gcc-tips/blob/master/src/index.md" target="_blank" rel="external nofollow noreferrer noopener">100个gcc小技巧</a></li><li><a href="https://github.com/anjuke/zguide-cn" target="_blank" rel="external nofollow noreferrer noopener">ZMQ 指南</a></li><li><a href="http://www.ituring.com.cn/book/1203" target="_blank" rel="external nofollow noreferrer noopener">How to Think Like a Computer Scientist</a> (中英文版)</li><li><a href="http://scc.qibebt.cas.cn/docs/linux/base/%B8%FA%CE%D2%D2%BB%C6%F0%D0%B4Makefile-%B3%C2%F0%A9.pdf" target="_blank" rel="external nofollow noreferrer noopener">跟我一起写Makefile(PDF)</a></li><li><a href="http://www.yayu.org/book/gnu_make/" target="_blank" rel="external nofollow noreferrer noopener">GNU make中文手册</a></li><li><a href="http://docs.huihoo.com/gnu/linux/gmake.html" target="_blank" rel="external nofollow noreferrer noopener">GNU make 指南</a></li><li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/contents/" target="_blank" rel="external nofollow noreferrer noopener">Google C++ 风格指南</a></li><li><a href="https://github.com/andycai/cprimer" target="_blank" rel="external nofollow noreferrer noopener">C/C++ Primer</a> (by @andycai)</li><li><a href="http://www.nowamagic.net/librarys/books/contents/c" target="_blank" rel="external nofollow noreferrer noopener">简单易懂的C魔法</a></li><li><a href="http://sewm.pku.edu.cn/src/paradise/reference/CMake%20Practice.pdf" target="_blank" rel="external nofollow noreferrer noopener">Cmake 实践</a> (PDF版)</li><li><a href="http://www.sunistudio.com/cppfaq/" target="_blank" rel="external nofollow noreferrer noopener">C++ FAQ LITE(中文版)</a></li><li><a href="https://github.com/Mooophy/Cpp-Primer" target="_blank" rel="external nofollow noreferrer noopener">C++ Primer 5th Answers</a></li><li><a href="https://www.gitbook.com/book/chenxiaowei/cpp_concurrency_in_action/details" target="_blank" rel="external nofollow noreferrer noopener">C++ 并发编程(基于C++11)</a></li><li><a href="http://www.kuqin.com/qtdocument/tutorial.html" target="_blank" rel="external nofollow noreferrer noopener">QT 教程</a></li><li><a href="https://github.com/wuye9036/CppTemplateTutorial" target="_blank" rel="external nofollow noreferrer noopener">C++ Template 进阶指南</a></li></ul><h3 id="Clojure"><a href="#Clojure" class="headerlink" title="Clojure"></a>Clojure</h3><ul><li><a href="http://xumingming.sinaapp.com/302/clojure-functional-programming-for-the-jvm-clojure-tutorial/" target="_blank" rel="external nofollow noreferrer noopener">Clojure入门教程</a></li></ul><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ul><li><a href="http://zh.learnlayout.com/" target="_blank" rel="external nofollow noreferrer noopener">学习CSS布局</a></li><li><a href="https://github.com/chadluo/CSS-Guidelines/blob/master/README.md" target="_blank" rel="external nofollow noreferrer noopener">通用 CSS 笔记、建议与指导</a></li><li><a href="http://css.doyoe.com/" target="_blank" rel="external nofollow noreferrer noopener">CSS参考手册</a></li><li><a href="http://yanxyz.github.io/emmet-docs/" target="_blank" rel="external nofollow noreferrer noopener">Emmet 文档</a></li><li><a href="http://alloyteam.github.io/CodeGuide/" target="_blank" rel="external nofollow noreferrer noopener">前端代码规范</a> (腾讯 AlloyTeam 团队)</li><li><a href="http://codeguide.bootcss.com/" target="_blank" rel="external nofollow noreferrer noopener">HTML和CSS编码规范</a></li><li><a href="http://sass-guidelin.es/zh/" target="_blank" rel="external nofollow noreferrer noopener">Sass Guidelines 中文</a></li><li><a href="https://github.com/waylau/css3-tutorial" target="_blank" rel="external nofollow noreferrer noopener">CSS3 Tutorial 《CSS3 教程》</a></li></ul><h3 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h3><ul><li><a href="http://dart.lidian.info/wiki/Language_Tour" target="_blank" rel="external nofollow noreferrer noopener">Dart 语言导览</a></li></ul><h3 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h3><ul><li><a href="http://xn--21erlang-p00o82pmp3o.github.io/" target="_blank" rel="external nofollow noreferrer noopener">21天学通Erlang</a></li></ul><h3 id="Fortran"><a href="#Fortran" class="headerlink" title="Fortran"></a>Fortran</h3><ul><li><a href="http://micro.ustc.edu.cn/Fortran/ZJDing/" target="_blank" rel="external nofollow noreferrer noopener">Fortran77和90/95编程入门</a></li></ul><h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><ul><li><a href="https://github.com/Unknwon/go-fundamental-programming" target="_blank" rel="external nofollow noreferrer noopener">Go编程基础</a></li><li><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN" target="_blank" rel="external nofollow noreferrer noopener">Go入门指南</a></li><li><a href="http://mikespook.com/learning-go/" target="_blank" rel="external nofollow noreferrer noopener">学习Go语言</a> (<a href="http://xxiyy.qiniudn.com/%E5%AD%A6%E4%B9%A0%20Go%20%E8%AF%AD%E8%A8%80(Golang).pdf?download" target="_blank" rel="external nofollow noreferrer noopener">PDF</a>)</li><li><a href="https://github.com/astaxie/build-web-application-with-golang" target="_blank" rel="external nofollow noreferrer noopener">Go Web 编程</a> (此书已经出版，希望开发者们去购买，支持作者的创作)</li><li><a href="https://github.com/astaxie/Go-in-Action" target="_blank" rel="external nofollow noreferrer noopener">Go实战开发</a> (当我收录此项目时，作者已经写完第三章，如果读完前面章节觉得有帮助，可以给作者<a href="https://me.alipay.com/astaxie" target="_blank" rel="external nofollow noreferrer noopener">捐赠</a>，以鼓励作者的继续创作)</li><li><a href="https://github.com/astaxie/NPWG_zh" target="_blank" rel="external nofollow noreferrer noopener">Network programming with Go 中文翻译版本</a></li><li><a href="http://www.hellogcc.org/effective_go.html" target="_blank" rel="external nofollow noreferrer noopener">Effective Go</a></li><li><a href="https://github.com/polaris1119/The-Golang-Standard-Library-by-Example" target="_blank" rel="external nofollow noreferrer noopener">Go 语言标准库</a></li><li><a href="http://gorevel.cn/docs/manual/index.html" target="_blank" rel="external nofollow noreferrer noopener">Revel 框架手册</a></li><li><a href="http://blog.csdn.net/dc_726/article/details/46565241" target="_blank" rel="external nofollow noreferrer noopener">Java程序员的Golang入门指南</a></li><li><a href="https://github.com/hyper-carrot/go_command_tutorial" target="_blank" rel="external nofollow noreferrer noopener">Go命令教程</a></li><li><a href="https://github.com/achun/Go-Blog-In-Action" target="_blank" rel="external nofollow noreferrer noopener">Go语言博客实践</a></li><li><a href="https://github.com/golang-china/golangdoc.translations" target="_blank" rel="external nofollow noreferrer noopener">Go 官方文档翻译</a></li></ul><h3 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h3><ul><li><a href="http://www.ibm.com/developerworks/cn/java/j-pg/" target="_blank" rel="external nofollow noreferrer noopener">实战 Groovy 系列</a></li></ul><h3 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h3><ul><li><a href="http://rwh.readthedocs.org/en/latest/" target="_blank" rel="external nofollow noreferrer noopener">Real World Haskell 中文版</a></li><li><a href="http://fleurer-lee.com/lyah/" target="_blank" rel="external nofollow noreferrer noopener">Haskell趣学指南</a></li></ul><h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><ul><li><a href="https://github.com/qinjx/30min_guides/blob/master/ios.md" target="_blank" rel="external nofollow noreferrer noopener">iOS开发60分钟入门</a></li><li><a href="http://isux.tencent.com/ios-human-interface-guidelines-ui-design-basics-ios7.html" target="_blank" rel="external nofollow noreferrer noopener">iOS7人机界面指南</a></li><li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-objc-styleguide/" target="_blank" rel="external nofollow noreferrer noopener">Google Objective-C Style Guide 中文版</a></li><li><a href="http://wileam.com/iphone-6-screen-cn/" target="_blank" rel="external nofollow noreferrer noopener">iPhone 6 屏幕揭秘</a></li><li><a href="http://nilsun.github.io/apple-watch/" target="_blank" rel="external nofollow noreferrer noopener">Apple Watch开发初探</a></li><li><a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOSCh/index.html" target="_blank" rel="external nofollow noreferrer noopener">马上着手开发 iOS 应用程序</a></li><li><a href="https://github.com/jkyin/Subtitle" target="_blank" rel="external nofollow noreferrer noopener">网易斯坦福大学公开课：iOS 7应用开发字幕文件</a></li></ul><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul><li><a href="https://github.com/waylau/apache-shiro-1.2.x-reference" target="_blank" rel="external nofollow noreferrer noopener">Apache Shiro 用户指南</a></li><li><a href="https://github.com/waylau/Jersey-2.x-User-Guide" target="_blank" rel="external nofollow noreferrer noopener">Jersey 2.x 用户指南</a></li><li><a href="https://github.com/waylau/spring-framework-4-reference" target="_blank" rel="external nofollow noreferrer noopener">Spring Framework 4.x参考文档</a></li><li><a href="https://github.com/qibaoguang/Spring-Boot-Reference-Guide" target="_blank" rel="external nofollow noreferrer noopener">Spring Boot参考指南</a> (翻译中)</li><li><a href="http://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="external nofollow noreferrer noopener">MyBatis中文文档</a></li><li><a href="https://github.com/waylau/RestDemo" target="_blank" rel="external nofollow noreferrer noopener">用jersey构建REST服务</a></li><li><a href="https://github.com/waylau/activiti-5.x-user-guide" target="_blank" rel="external nofollow noreferrer noopener">Activiti 5.x 用户指南</a></li><li><a href="http://www.hawstein.com/posts/google-java-style.html" target="_blank" rel="external nofollow noreferrer noopener">Google Java编程风格指南</a></li><li><a href="https://github.com/waylau/netty-4-user-guide" target="_blank" rel="external nofollow noreferrer noopener">Netty 4.x 用户指南</a></li><li><a href="https://github.com/waylau/essential-netty-in-action" target="_blank" rel="external nofollow noreferrer noopener">Netty 实战(精髓)</a></li><li><a href="https://github.com/waylau/rest-in-action" target="_blank" rel="external nofollow noreferrer noopener">REST 实战</a></li><li><a href="https://github.com/waylau/java-code-conventions" target="_blank" rel="external nofollow noreferrer noopener">Java 编码规范</a></li><li><a href="https://github.com/waylau/apache-mina-2.x-user-guide" target="_blank" rel="external nofollow noreferrer noopener">Apache MINA 2 用户指南</a></li><li><a href="https://github.com/waylau/h2-database-doc" target="_blank" rel="external nofollow noreferrer noopener">H2 Database 教程</a></li><li><a href="https://github.com/waylau/servlet-3.1-specification" target="_blank" rel="external nofollow noreferrer noopener">Java Servlet 3.1 规范</a></li><li><a href="https://github.com/waylau/jsse-reference-guide" target="_blank" rel="external nofollow noreferrer noopener">JSSE 参考指南</a></li></ul><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ul><li><a href="http://bq69.com/blog/articles/script/868/google-javascript-style-guide.html" target="_blank" rel="external nofollow noreferrer noopener">Google JavaScript 代码风格指南</a></li><li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="external nofollow noreferrer noopener">Google JSON 风格指南</a></li><li><a href="https://github.com/adamlu/javascript-style-guide" target="_blank" rel="external nofollow noreferrer noopener">Airbnb JavaScript 规范</a></li><li><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="external nofollow noreferrer noopener">JavaScript 标准参考教程（alpha）</a></li><li><a href="http://pij.robinqu.me/" target="_blank" rel="external nofollow noreferrer noopener">Javascript编程指南</a> (<a href="https://github.com/RobinQu/Programing-In-Javascript" target="_blank" rel="external nofollow noreferrer noopener">源码</a>)</li><li><a href="https://github.com/justjavac/12-javascript-quirks" target="_blank" rel="external nofollow noreferrer noopener">javascript 的 12 个怪癖</a></li><li><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="external nofollow noreferrer noopener">JavaScript 秘密花园</a></li><li><a href="http://icodeit.org/jsccp/" target="_blank" rel="external nofollow noreferrer noopener">JavaScript核心概念及实践</a> (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者)</li><li><a href="https://github.com/jayli/javascript-patterns" target="_blank" rel="external nofollow noreferrer noopener">《JavaScript 模式》</a> “JavaScript patterns”中译本</li><li><a href="http://justjavac.com/named-function-expressions-demystified.html" target="_blank" rel="external nofollow noreferrer noopener">命名函数表达式探秘</a>  (注:原文由<a href="http://www.cn-cuckoo.com" target="_blank" rel="external nofollow noreferrer noopener">为之漫笔</a>翻译，原始地址无法打开，所以此处地址为我博客上的备份)</li><li><a href="http://www.oschina.net/translate/learning-javascript-design-patterns" target="_blank" rel="external nofollow noreferrer noopener">学用 JavaScript 设计模式</a> (开源中国)</li><li><a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" target="_blank" rel="external nofollow noreferrer noopener">深入理解JavaScript系列</a></li><li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external nofollow noreferrer noopener">ECMAScript 6 入门</a> (作者：阮一峰)</li><li><a href="http://liubin.github.io/promises-book/" target="_blank" rel="external nofollow noreferrer noopener">JavaScript Promise迷你书</a></li><li><a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external nofollow noreferrer noopener">You-Dont-Know-JS</a> (深入JavaScript语言核心机制的系列图书)</li><li>jQuery<ul><li><a href="http://www.cn-cuckoo.com/deconstructed/jquery.html" target="_blank" rel="external nofollow noreferrer noopener">jQuery 解构</a></li><li><a href="http://www.nowamagic.net/librarys/books/contents/jquery" target="_blank" rel="external nofollow noreferrer noopener">简单易懂的JQuery魔法</a></li><li><a href="http://i5ting.github.io/How-to-write-jQuery-plugin/build/jquery.plugin.html" target="_blank" rel="external nofollow noreferrer noopener">How to write jQuery plugin</a></li></ul></li><li>Node.js<ul><li><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="external nofollow noreferrer noopener">Node入门</a></li><li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external nofollow noreferrer noopener">七天学会NodeJS</a></li><li><a href="https://github.com/nodejs-tw/nodejs-wiki-book" target="_blank" rel="external nofollow noreferrer noopener">Nodejs Wiki Book</a> (繁体中文)</li><li><a href="http://expressjs.jser.us/" target="_blank" rel="external nofollow noreferrer noopener">express.js 中文文档</a></li><li><a href="https://github.com/guo-yu/koa-guide" target="_blank" rel="external nofollow noreferrer noopener">koa 中文文档</a></li><li><a href="https://github.com/nswbmw/N-blog" target="_blank" rel="external nofollow noreferrer noopener">使用 Express + MongoDB 搭建多人博客</a></li><li><a href="http://javascript.ruanyifeng.com/nodejs/express.html" target="_blank" rel="external nofollow noreferrer noopener">Express框架</a></li><li><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="external nofollow noreferrer noopener">Node.js 包教不包会</a></li><li><a href="https://www.npmjs.com/package/learnyounode-zh-cn" target="_blank" rel="external nofollow noreferrer noopener">Learn You The Node.js For Much Win! (中文版)</a></li><li><a href="http://i5ting.github.io/node-debug-tutorial/" target="_blank" rel="external nofollow noreferrer noopener">Node debug 三法三例</a></li><li><a href="https://www.gitbook.com/book/0532/nodejs/details" target="_blank" rel="external nofollow noreferrer noopener">nodejs中文文档</a></li></ul></li><li>underscore.js<ul><li><a href="http://learningcn.com/underscore/" target="_blank" rel="external nofollow noreferrer noopener">Underscore.js中文文档</a></li></ul></li><li>backbone.js<ul><li><a href="http://www.css88.com/doc/backbone/" target="_blank" rel="external nofollow noreferrer noopener">backbone.js中文文档</a></li><li><a href="http://www.the5fire.com/backbone-js-tutorials-pdf-download.html" target="_blank" rel="external nofollow noreferrer noopener">backbone.js入门教程</a> (PDF)</li><li><a href="https://github.com/the5fire/backbonejs-learning-note" target="_blank" rel="external nofollow noreferrer noopener">Backbone.js入门教程第二版</a></li><li><a href="http://feliving.github.io/developing-backbone-applications/" target="_blank" rel="external nofollow noreferrer noopener">Developing Backbone.js Applications(中文版)</a></li></ul></li><li>AngularJS<ul><li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-zh-cn.md" target="_blank" rel="external nofollow noreferrer noopener">AngularJS最佳实践和风格指南</a></li><li><a href="https://github.com/peiransun/angularjs-cn" target="_blank" rel="external nofollow noreferrer noopener">AngularJS中译本</a></li><li><a href="https://github.com/zensh/AngularjsTutorial_cn" target="_blank" rel="external nofollow noreferrer noopener">AngularJS入门教程</a></li><li><a href="https://github.com/xufei/Make-Your-Own-AngularJS/blob/master/01.md" target="_blank" rel="external nofollow noreferrer noopener">构建自己的AngularJS</a></li><li><a href="http://www.waylau.com/build-angularjs-app-with-yeoman-in-windows/" target="_blank" rel="external nofollow noreferrer noopener">在Windows环境下用Yeoman构建AngularJS项目</a></li></ul></li><li>Zepto.js<ul><li><a href="http://mweb.baidu.com/zeptoapi/" target="_blank" rel="external nofollow noreferrer noopener">Zepto.js 中文文档</a></li></ul></li><li>Sea.js<ul><li><a href="http://island205.com/HelloSea.js/" target="_blank" rel="external nofollow noreferrer noopener">Hello Sea.js</a></li></ul></li><li>React.js<ul><li><a href="http://reactjs.cn/" target="_blank" rel="external nofollow noreferrer noopener">React.js 中文文档</a></li><li><a href="https://github.com/fakefish/react-webpack-cookbook" target="_blank" rel="external nofollow noreferrer noopener">React webpack-cookbook</a></li><li><a href="http://fraserxu.me/intro-to-react/" target="_blank" rel="external nofollow noreferrer noopener">React 入门教程</a></li><li><a href="http://wiki.jikexueyuan.com/project/react-native/" target="_blank" rel="external nofollow noreferrer noopener">React Native 中文文档(含最新Android内容)</a></li></ul></li><li>impress.js<ul><li><a href="https://github.com/kokdemo/impress.js-tutorial-in-Chinese" target="_blank" rel="external nofollow noreferrer noopener">impress.js的中文教程</a></li></ul></li><li>CoffeeScript<ul><li><a href="http://island205.com/coffeescript-cookbook.github.com/" target="_blank" rel="external nofollow noreferrer noopener">CoffeeScript Cookbook</a></li><li><a href="http://island205.com/tlboc/" target="_blank" rel="external nofollow noreferrer noopener">The Little Book on CoffeeScript中文版</a></li><li><a href="https://github.com/geekplux/coffeescript-style-guide" target="_blank" rel="external nofollow noreferrer noopener">CoffeeScript 编码风格指南</a></li></ul></li><li>ExtJS<ul><li><a href="http://extjs-doc-cn.github.io/ext4api/" target="_blank" rel="external nofollow noreferrer noopener">Ext4.1.0 中文文档</a></li></ul></li><li>Meteor<ul><li><a href="http://zh.discovermeteor.com/" target="_blank" rel="external nofollow noreferrer noopener">Discover Meteor</a></li></ul></li><li><a href="http://www.ituring.com.cn/minibook/950" target="_blank" rel="external nofollow noreferrer noopener">Chrome扩展及应用开发</a></li></ul><h3 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX"></a>LaTeX</h3><ul><li><a href="http://liam0205.me/2014/09/08/latex-introduction/" target="_blank" rel="external nofollow noreferrer noopener">一份其实很短的 LaTeX 入门文档</a></li><li><a href="http://www.mohu.org/info/lshort-cn.pdf" target="_blank" rel="external nofollow noreferrer noopener">一份不太简短的 LATEX 2ε 介绍</a> （PDF版）</li></ul><h3 id="LISP"><a href="#LISP" class="headerlink" title="LISP"></a>LISP</h3><ul><li>Common Lisp<ul><li><a href="http://acl.readthedocs.org/en/latest/" target="_blank" rel="external nofollow noreferrer noopener">ANSI Common Lisp 中文翻譯版</a></li><li><a href="http://www.ituring.com.cn/minibook/862" target="_blank" rel="external nofollow noreferrer noopener">On Lisp 中文翻译版本</a></li></ul></li><li>Scheme<ul><li><a href="http://deathking.github.io/yast-cn/" target="_blank" rel="external nofollow noreferrer noopener">Yet Another Scheme Tutorial Scheme入门教程</a></li><li><a href="http://songjinghe.github.io/TYS-zh-translation/" target="_blank" rel="external nofollow noreferrer noopener">Scheme语言简明教程</a></li><li>Racket<ul><li><a href="https://github.com/tyrchen/racket-book" target="_blank" rel="external nofollow noreferrer noopener">Racket book</a></li></ul></li></ul></li></ul><h3 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h3><ul><li><a href="https://github.com/andycai/luaprimer" target="_blank" rel="external nofollow noreferrer noopener">Lua编程入门</a></li><li><a href="http://www.codingnow.com/2000/download/lua_manual.html" target="_blank" rel="external nofollow noreferrer noopener">Lua 5.1 参考手册 中文翻译</a></li><li><a href="http://cloudwu.github.io/lua53doc/" target="_blank" rel="external nofollow noreferrer noopener">Lua 5.3 参考手册 中文翻译</a></li><li><a href="http://www.codingnow.com/temp/readinglua.pdf" target="_blank" rel="external nofollow noreferrer noopener">Lua源码欣赏</a></li></ul><h3 id="OCaml"><a href="#OCaml" class="headerlink" title="OCaml"></a>OCaml</h3><ul><li><a href="https://github.com/zforget/translation/tree/master/real_world_ocaml" target="_blank" rel="external nofollow noreferrer noopener">Real World OCaml</a></li></ul><h3 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h3><ul><li><a href="https://github.com/horus/modern_perl_book" target="_blank" rel="external nofollow noreferrer noopener">Modern Perl 中文版</a></li><li><a href="http://perl.linuxtoy.org/" target="_blank" rel="external nofollow noreferrer noopener">Perl 程序员应该知道的事</a></li></ul><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><ul><li><a href="http://php.net/manual/zh/" target="_blank" rel="external nofollow noreferrer noopener">PHP 官方手册</a></li><li><a href="http://www.laruence.com/2010/06/21/1608.html" target="_blank" rel="external nofollow noreferrer noopener">PHP调试技术手册</a>(PDF)</li><li>PHP之道：php-the-right-way (<a href="http://wulijun.github.io/php-the-right-way/" target="_blank" rel="external nofollow noreferrer noopener">@wulijun版</a> <a href="http://laravel-china.github.io/php-the-right-way/" target="_blank" rel="external nofollow noreferrer noopener">PHPHub版</a>)</li><li><a href="https://github.com/justjavac/PHP-Best-Practices-zh_CN" target="_blank" rel="external nofollow noreferrer noopener">PHP 最佳实践</a></li><li><a href="https://ryancao.gitbooks.io/php-developer-prepares/content/" target="_blank" rel="external nofollow noreferrer noopener">PHP 开发者实践</a></li><li><a href="https://github.com/reeze/tipi" target="_blank" rel="external nofollow noreferrer noopener">深入理解PHP内核</a></li><li><a href="http://www.walu.cc/phpbook/" target="_blank" rel="external nofollow noreferrer noopener">PHP扩展开发及内核应用</a></li><li><a href="http://www.golaravel.com/laravel/docs/5.0/" target="_blank" rel="external nofollow noreferrer noopener">Laravel5 中文文档</a></li><li><a href="https://github.com/huanghua581/laravel-getting-started" target="_blank" rel="external nofollow noreferrer noopener">Laravel 入门</a></li><li><a href="http://wiki.jikexueyuan.com/project/symfony-cookbook/" target="_blank" rel="external nofollow noreferrer noopener">Symfony2 Cookbook 中文版</a>(版本 2.7.0 LTS)</li><li><a href="http://symfony-docs-chs.readthedocs.org/en/latest/" target="_blank" rel="external nofollow noreferrer noopener">Symfony2中文文档</a> (未译完)</li><li><a href="http://yiibook.com//doc" target="_blank" rel="external nofollow noreferrer noopener">YiiBook几本Yii框架的在线教程</a></li><li><a href="http://www.digpage.com/" target="_blank" rel="external nofollow noreferrer noopener">深入理解 Yii 2.0</a></li><li><a href="http://www.yiichina.com/" target="_blank" rel="external nofollow noreferrer noopener">Yii 框架中文文檔</a></li><li><a href="http://www.nowamagic.net/librarys/books/contents/php" target="_blank" rel="external nofollow noreferrer noopener">简单易懂的PHP魔法</a></li><li><a href="https://github.com/LinkedDestiny/swoole-doc" target="_blank" rel="external nofollow noreferrer noopener">swoole文档及入门教程</a></li><li><a href="http://www.phpcomposer.com" target="_blank" rel="external nofollow noreferrer noopener">Composer 中文网</a></li><li><a href="http://ww1.minimee.org/php/slim" target="_blank" rel="external nofollow noreferrer noopener">Slim 中文文档</a></li><li><a href="http://lumen.laravel-china.org/" target="_blank" rel="external nofollow noreferrer noopener">Lumen 中文文档</a></li></ul><h3 id="Prolog"><a href="#Prolog" class="headerlink" title="Prolog"></a>Prolog</h3><ul><li><a href="http://fengdidi.github.io/blog/2011/11/15/qian-yan/" target="_blank" rel="external nofollow noreferrer noopener">笨办法学Prolog</a></li></ul><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ul><li><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" target="_blank" rel="external nofollow noreferrer noopener">小白的Python教程</a></li><li><a href="http://woodpecker.org.cn/abyteofpython_cn/chinese/" target="_blank" rel="external nofollow noreferrer noopener">简明Python教程</a></li><li><a href="https://www.gitbook.com/book/looly/python-basic/details" target="_blank" rel="external nofollow noreferrer noopener">零基础学Python</a></li><li><a href="http://lovelypython.readthedocs.org/en/latest/" target="_blank" rel="external nofollow noreferrer noopener">可爱的 Python </a></li><li><a href="http://www.pythondoc.com/pythontutorial27/index.html" target="_blank" rel="external nofollow noreferrer noopener">Python 2.7 官方教程中文版</a></li><li><a href="http://www.pythondoc.com/pythontutorial3/index.html" target="_blank" rel="external nofollow noreferrer noopener">Python 3.3 官方教程中文版</a></li><li><a href="https://github.com/yidao620c/python3-cookbook" target="_blank" rel="external nofollow noreferrer noopener">《Python Cookbook》 3rd Edition 翻译</a></li><li><a href="http://old.sebug.net/paper/books/dive-into-python3/" target="_blank" rel="external nofollow noreferrer noopener">深入 Python 3</a></li><li><a href="https://code.google.com/p/zhong-wiki/wiki/PEP8" target="_blank" rel="external nofollow noreferrer noopener">PEP8 Python代码风格规范</a></li><li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-python-styleguide/" target="_blank" rel="external nofollow noreferrer noopener">Google Python 风格指南 中文版</a></li><li><a href="http://liam0205.me/2013/11/02/Python-tutorial-zh_cn/" target="_blank" rel="external nofollow noreferrer noopener">Python入门教程</a> (<a href="http://liam0205.me/attachment/Python/The_Python_Tutorial_zh-cn.pdf" target="_blank" rel="external nofollow noreferrer noopener">PDF</a>)</li><li><a href="http://article.yeeyan.org/view/311527/287706" target="_blank" rel="external nofollow noreferrer noopener">Python的神奇方法指南</a></li><li><a href="http://old.sebug.net/paper/books/LearnPythonTheHardWay/" target="_blank" rel="external nofollow noreferrer noopener">笨办法学 Python</a> （<a href="http://liam0205.me/attachment/Python/PyHardWay/Learn_Python_The_Hard_Way_zh-cn.pdf" target="_blank" rel="external nofollow noreferrer noopener">PDF</a>版下载）</li><li><a href="http://django-chinese-docs.readthedocs.org/en/latest/" target="_blank" rel="external nofollow noreferrer noopener">Django 1.5 文档中文版</a> 正在翻译中</li><li><a href="http://django-1-7-doc.coding.io/" target="_blank" rel="external nofollow noreferrer noopener">Diango 1.7 文档中文版</a>  正在翻译中，目前只翻译了目录</li><li><a href="http://python.usyiyi.cn/django/index.html" target="_blank" rel="external nofollow noreferrer noopener">Django 1.8.2 文档中文版</a><br>正在翻译中</li><li><a href="https://github.com/yangyubo/zh-django-best-practices" target="_blank" rel="external nofollow noreferrer noopener">Django 最佳实践</a></li><li><a href="https://www.gitbook.com/book/andrew-liu/django-blog/details" target="_blank" rel="external nofollow noreferrer noopener">Django搭建简易博客教程</a></li><li><a href="http://djangobook.py3k.cn/2.0/" target="_blank" rel="external nofollow noreferrer noopener">The Django Book 中文版</a></li><li><a href="http://webpy.org/tutorial3.zh-cn" target="_blank" rel="external nofollow noreferrer noopener">web.py 0.3 新手指南</a></li><li><a href="http://webpy.org/cookbook/index.zh-cn" target="_blank" rel="external nofollow noreferrer noopener">Web.py Cookbook 简体中文版</a></li><li><a href="http://woodpecker.org.cn/diveintopython/" target="_blank" rel="external nofollow noreferrer noopener">Dive Into Python 中文版</a></li><li><a href="http://docs.jinkan.org/docs/flask/" target="_blank" rel="external nofollow noreferrer noopener">Flask 文档中文版</a></li><li><a href="http://docs.jinkan.org/docs/jinja2/" target="_blank" rel="external nofollow noreferrer noopener">Jinja2 文档中文版</a></li><li><a href="http://werkzeug-docs-cn.readthedocs.org/zh_CN/latest/" target="_blank" rel="external nofollow noreferrer noopener">Werkzeug 文档中文版</a></li><li><a href="http://spacewander.github.io/explore-flask-zh/" target="_blank" rel="external nofollow noreferrer noopener">Flask之旅</a></li><li><a href="http://demo.pythoner.com/itt2zh/index.html" target="_blank" rel="external nofollow noreferrer noopener">Introduction to Tornado 中文翻译</a></li><li><a href="http://pan.baidu.com/s/1qW4pvnY" target="_blank" rel="external nofollow noreferrer noopener">Python自然语言处理中文版</a> （感谢陈涛同学的翻译，也谢谢 <a href="https://github.com/shwley" target="_blank" rel="external nofollow noreferrer noopener">@shwley</a> 联系了作者）</li><li><a href="http://liam0205.me/2014/09/11/matplotlib-tutorial-zh-cn/" target="_blank" rel="external nofollow noreferrer noopener">Python 绘图库 matplotlib 官方指南中文翻译</a></li><li><a href="http://scrapy-chs.readthedocs.org/zh_CN/latest/" target="_blank" rel="external nofollow noreferrer noopener">Scrapy 0.25 文档</a></li><li><a href="https://github.com/carfly/thinkpython-cn" target="_blank" rel="external nofollow noreferrer noopener">ThinkPython</a></li><li><a href="http://www.cnblogs.com/vamei/archive/2012/09/13/2682778.html" target="_blank" rel="external nofollow noreferrer noopener">Python快速教程</a></li><li><a href="http://wiki.ubuntu.org.cn/Python正则表达式操作指南" target="_blank" rel="external nofollow noreferrer noopener">Python 正则表达式操作指南</a></li><li><a href="http://www.crifan.com/files/doc/docbook/python_beginner_tutorial/release/html/python_beginner_tutorial.html" target="_blank" rel="external nofollow noreferrer noopener">python初级教程：入门详解</a></li><li><a href="https://www.gitbook.com/book/likebeta/twisted-intro-cn/details" target="_blank" rel="external nofollow noreferrer noopener">Twisted 与异步编程入门</a></li><li><a href="http://textgrocery.readthedocs.org/zh/latest/index.html" target="_blank" rel="external nofollow noreferrer noopener">TextGrocery 中文 API</a> ( 基于svm算法的一个短文本分类 Python 库 )</li><li><a href="http://requests-docs-cn.readthedocs.org/zh_CN/latest/" target="_blank" rel="external nofollow noreferrer noopener">Requests: HTTP for Humans</a></li><li><a href="http://pillow-cn.readthedocs.org/en/latest/#" target="_blank" rel="external nofollow noreferrer noopener">Pillow 中文文档</a></li><li><a href="http://pymotwcn.readthedocs.org/en/latest/index.html" target="_blank" rel="external nofollow noreferrer noopener">PyMOTW 中文版</a></li><li><a href="http://data.digitser.net/zh-CN/python_index.html" target="_blank" rel="external nofollow noreferrer noopener">Python 官方文档中文版</a></li><li><a href="http://fabric-chs.readthedocs.org" target="_blank" rel="external nofollow noreferrer noopener">Fabric 中文文档</a></li><li><a href="http://www.oschina.net/translate/the-flask-mega-tutorial-part-i-hello-world" target="_blank" rel="external nofollow noreferrer noopener">The Flask Mega-Tutorial 中文</a></li><li><a href="http://www.nowamagic.net/academy/detail/13321002" target="_blank" rel="external nofollow noreferrer noopener">Tornado源码解析</a></li></ul><h3 id="R"><a href="#R" class="headerlink" title="R"></a>R</h3><ul><li><a href="https://github.com/yihui/r-ninja" target="_blank" rel="external nofollow noreferrer noopener">R语言忍者秘笈</a></li></ul><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><ul><li><a href="https://github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhCN.md" target="_blank" rel="external nofollow noreferrer noopener">Ruby 风格指南</a></li><li><a href="https://github.com/JuanitoFatas/rails-style-guide/blob/master/README-zhCN.md" target="_blank" rel="external nofollow noreferrer noopener">Rails 风格指南</a></li><li><a href="http://lrthw.github.io/" target="_blank" rel="external nofollow noreferrer noopener">笨方法學 Ruby</a></li><li><a href="http://guides.ruby-china.org/" target="_blank" rel="external nofollow noreferrer noopener">Ruby on Rails 指南</a></li><li><a href="https://ihower.tw/rails4/index.html" target="_blank" rel="external nofollow noreferrer noopener">Ruby on Rails 實戰聖經</a></li><li><a href="http://railstutorial-china.org/" target="_blank" rel="external nofollow noreferrer noopener">Ruby on Rails Tutorial 原书第 3 版</a> (本书网页版免费提供，电子版以 PDF、EPub 和 Mobi 格式提供购买，仅售 9.9 美元)</li><li><a href="http://rails-practice.com/content/index.html" target="_blank" rel="external nofollow noreferrer noopener">Rails 实践</a></li><li><a href="https://wusuopu.gitbooks.io/write-ruby-extension-with-c/content/" target="_blank" rel="external nofollow noreferrer noopener">编写Ruby的C拓展</a></li><li><a href="https://ruby-china.org/topics/22386" target="_blank" rel="external nofollow noreferrer noopener">Ruby 源码解读</a></li><li><a href="http://deathking.github.io/metaprogramming-in-ruby/" target="_blank" rel="external nofollow noreferrer noopener">Ruby中的元编程</a></li></ul><h3 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h3><ul><li><a href="https://www.gitbook.com/book/kaisery/rust-book-chinese/details" target="_blank" rel="external nofollow noreferrer noopener">rust book 中文翻译</a></li></ul><h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><ul><li><a href="http://twitter.github.io/scala_school/zh_cn/index.html" target="_blank" rel="external nofollow noreferrer noopener">Scala课堂</a> (Twitter的Scala中文教程)</li><li><a href="http://twitter.github.io/effectivescala/index-cn.html" target="_blank" rel="external nofollow noreferrer noopener">Effective Scala</a>(Twitter的Scala最佳实践的中文翻译)</li><li><a href="http://zh.scala-tour.com/" target="_blank" rel="external nofollow noreferrer noopener">Scala指南</a></li></ul><h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><ul><li><a href="https://github.com/qinjx/30min_guides/blob/master/shell.md" target="_blank" rel="external nofollow noreferrer noopener">Shell脚本编程30分钟入门</a></li><li><a href="http://blog.sae.sina.com.cn/archives/3606" target="_blank" rel="external nofollow noreferrer noopener">Bash脚本15分钟进阶教程</a></li><li><a href="https://github.com/me115/linuxtools_rst" target="_blank" rel="external nofollow noreferrer noopener">Linux工具快速教程</a></li><li><a href="https://github.com/wzb56/13_questions_of_shell" target="_blank" rel="external nofollow noreferrer noopener">shell十三问</a></li><li><a href="https://www.gitbook.com/book/tinylab/shellbook/details" target="_blank" rel="external nofollow noreferrer noopener">Shell编程范例</a></li></ul><h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><ul><li><a href="http://numbbbbb.github.io/the-swift-programming-language-in-chinese/" target="_blank" rel="external nofollow noreferrer noopener">The Swift Programming Language 中文版</a></li><li><a href="http://dev.swiftguide.cn" target="_blank" rel="external nofollow noreferrer noopener">Swift 语言指南</a></li><li><a href="https://github.com/x140yu/Developing_iOS_8_Apps_With_Swift" target="_blank" rel="external nofollow noreferrer noopener">Stanford 公开课，Developing iOS 8 Apps with Swift 字幕翻译文件</a></li></ul><h3 id="读书笔记及其它"><a href="#读书笔记及其它" class="headerlink" title="读书笔记及其它"></a>读书笔记及其它</h3><ul><li><a href="https://github.com/fool2fish/dragon-book-exercise-answers" target="_blank" rel="external nofollow noreferrer noopener">编译原理（紫龙书）中文第2版习题答案</a></li><li><a href="http://www.hawstein.com/posts/make-thiner-programming-pearls.html" target="_blank" rel="external nofollow noreferrer noopener">把《编程珠玑》读薄</a></li><li><a href="https://github.com/XiaolongJason/ReadingNote/blob/master/Effective%20C%2B%2B/Effective%20C%2B%2B.md" target="_blank" rel="external nofollow noreferrer noopener">Effective C++读书笔记</a></li><li><a href="https://github.com/qyuhen/book" target="_blank" rel="external nofollow noreferrer noopener">Golang 学习笔记、Python 学习笔记、C 学习笔记</a> (PDF)</li><li><a href="https://github.com/code4craft/jsoup-learning" target="_blank" rel="external nofollow noreferrer noopener">Jsoup 学习笔记</a></li><li><a href="https://github.com/lzjun567/note" target="_blank" rel="external nofollow noreferrer noopener">学习笔记: Vim、Python、memcached</a></li><li><a href="http://www.ituring.com.cn/activity/details/2004" target="_blank" rel="external nofollow noreferrer noopener">图灵开放书翻译计划–C++、Python、Java等</a></li><li><a href="http://g.yeeyan.org/books/2095" target="_blank" rel="external nofollow noreferrer noopener">蒂姆·奥莱利随笔</a> （由译言网翻译，电子版免费）</li><li><a href="http://sicp.readthedocs.org/en/latest/" target="_blank" rel="external nofollow noreferrer noopener">SICP 解题集</a></li><li><a href="https://github.com/hacke2/hacke2.github.io/issues/2" target="_blank" rel="external nofollow noreferrer noopener">精彩博客集合</a></li><li><a href="http://www.xiaoleilu.com/regex-guide/" target="_blank" rel="external nofollow noreferrer noopener">正则表达式简明参考</a></li><li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines" target="_blank" rel="external nofollow noreferrer noopener">中文文案排版指北</a></li><li><a href="http://ganquan.info/standard-c/" target="_blank" rel="external nofollow noreferrer noopener">Standard C 语言标准函数库速查 (Cheat Sheet)</a></li><li><a href="http://gh.amio.us/git-cheatsheet-chs/" target="_blank" rel="external nofollow noreferrer noopener">Git Cheatsheet Chs</a></li><li><a href="https://github.com/qibaoguang/Study-Step-by-Step/blob/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/javascript_the_good_parts.md" target="_blank" rel="external nofollow noreferrer noopener">JavaScript语言精粹</a></li><li><a href="http://producingoss.com/zh/" target="_blank" rel="external nofollow noreferrer noopener">制造开源软件</a></li><li><a href="http://www.dianbo.org/9238/stone/tiwendezhihui.htm" target="_blank" rel="external nofollow noreferrer noopener">提问的智慧</a></li><li><a href="https://github.com/LearnShare/Learning-Markdown" target="_blank" rel="external nofollow noreferrer noopener">Markdown 入门参考</a></li><li><a href="https://github.com/stanzgy/wiki/blob/master/markup/asciidoc-guide.asciidoc" target="_blank" rel="external nofollow noreferrer noopener">AsciiDoc简明指南</a></li><li><a href="http://love-oriented.com/pack/" target="_blank" rel="external nofollow noreferrer noopener">背包问题九讲</a></li><li><a href="https://github.com/qiwsir/ITArticles" target="_blank" rel="external nofollow noreferrer noopener">老齐的技术资料</a></li><li><a href="https://github.com/JacksonTian/fks" target="_blank" rel="external nofollow noreferrer noopener">前端技能汇总</a></li><li><a href="https://github.com/zhuangbiaowei/learn-with-open-source" target="_blank" rel="external nofollow noreferrer noopener">借助开源项目，学习软件开发</a></li><li><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese" target="_blank" rel="external nofollow noreferrer noopener">前端工作面试问题</a></li><li><a href="https://www.gitbook.com/book/yuanbin/algorithm/details" target="_blank" rel="external nofollow noreferrer noopener">leetcode/lintcode题解/算法学习笔记</a></li><li><a href="https://github.com/li-xinyang/FEND_Note" target="_blank" rel="external nofollow noreferrer noopener">前端开发笔记本</a></li></ul><h3 id="测试相关"><a href="#测试相关" class="headerlink" title="测试相关"></a>测试相关</h3><ul><li><a href="http://appium.io/slate/cn/v1.2.0/" target="_blank" rel="external nofollow noreferrer noopener">移动APP自动化测试优秀框架Appium API Reference V1.2.0 CN</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;免费的编程中文书籍索引&quot;&gt;&lt;a href=&quot;#免费的编程中文书籍索引&quot; class=&quot;headerlink&quot; title=&quot;免费的编程中文书籍索引&quot;&gt;&lt;/a&gt;免费的编程中文书籍索引&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/justjavac/free-programming-books-zh_CN&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;&lt;img src=&quot;https://travis-ci.org/justjavac/free-programming-books-zh_CN.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;免费的编程中文书籍索引，欢迎投稿。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;国外程序员在 &lt;a href=&quot;http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read/1713%231713&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;stackoverflow&lt;/a&gt; 推荐的程序员必读书籍，&lt;a href=&quot;http://justjavac.com/other/2012/05/15/qualified-programmer-should-read-what-books.html&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot; title=&quot;一个合格的程序员应该读过哪些书&quot;&gt;中文版&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/38210/what-non-programming-books-should-programmers-read&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;stackoverflow&lt;/a&gt; 上的程序员应该阅读的非编程类书籍有哪些？ &lt;a href=&quot;what-non-programming-books-should-programmers-read.md&quot;&gt;中文版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vhf/free-programming-books&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;github&lt;/a&gt; 上的一个流行的编程书籍索引  &lt;a href=&quot;https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;中文版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/siberiawolf&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;@siberiawolf&lt;/a&gt; 使用 Bootstrap 开发了网页版，地址：&lt;a href=&quot;http://siberiawolf.com/free_programming/index.html&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;http://siberiawolf.com/free_programming/index.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Books" scheme="http://notes.seirhsiao.com/categories/Books/"/>
    
    
      <category term="资源" scheme="http://notes.seirhsiao.com/tags/%E8%B5%84%E6%BA%90/"/>
    
      <category term="book" scheme="http://notes.seirhsiao.com/tags/book/"/>
    
      <category term="书籍" scheme="http://notes.seirhsiao.com/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>vi编辑器使用指南</title>
    <link href="http://notes.seirhsiao.com/posts/4672282/"/>
    <id>http://notes.seirhsiao.com/posts/4672282/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:34:09.748Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Unix编辑器概述"><a href="#一、Unix编辑器概述" class="headerlink" title="一、Unix编辑器概述"></a>一、Unix编辑器概述</h2><p>编辑器是使用计算机的重要工具之一，在各种操作系统中，编辑器都是必不可少的部件。Unix及其相似的ix操作系统系列中，为方便各种用户在各个不同的环境中使用，提供了一系列的ex编辑器，包括 ex, edit,ed 和vi.其中ex,edit,ed都是行编辑器，现在已很少有人使用，Unix提供他们的原因是考虑到满足各种用户特别是某些终端用户的需要。</p><p>值得庆幸的是，Unix提供了全屏幕的Vi编辑器，这使我们的工作轻松不少。不少DOS用户抱怨Vi编辑器不象DOS下的编辑器如edit那么好用，这是因为Vi考虑到各种用户的需要，没有使用某些通用的编辑键（在各个不同的终端机上他们的定义是不同的，在某些终端机上甚至没有这些键）。而是采用状态切换的方法，但这只是习惯的问题，一旦你熟练的使用上了vi你就会觉得它其实也很好用。虽然 Vi采用了状态切换的方法，但电脑的硬件及操作系统多种多样，某些电脑的键盘上没有特定的几个功能键！那麽不就有某些功能不能用了？这个问题在 Unix 系统上也一样，几乎各大电脑厂商都有自己的Unix 系统，而 vi 的操作方法也会随之有点出入。这里我们采用 PC 的键盘来说明 vi 的操作，但在具体的环境中还要参考相应的资料，这一点是值得注意的。</p><a id="more"></a><h2 id="二、Vi入门"><a href="#二、Vi入门" class="headerlink" title="二、Vi入门"></a>二、Vi入门</h2><h3 id="（一）、进入vi"><a href="#（一）、进入vi" class="headerlink" title="（一）、进入vi"></a>（一）、进入vi</h3><p>在系统提示字符(如$、#)下敲入vi ＜档案名称＞，vi 可以自动帮你载入所要编辑的文件或是开启一个新文件（如果该文件不存在或缺少文件名）。进入 vi 后萤幕左方会出现波浪符号，凡是列首有该符号就代表此列目前是空的。</p><h3 id="（二）、两种模式"><a href="#（二）、两种模式" class="headerlink" title="（二）、两种模式"></a>（二）、两种模式</h3><p>如上所述，vi存在两种模式：指令模式和输入模式。在指令模式下输入的按键将做为指令来处理：如输入a，vi即认为是在当前位置插入字符。而在输入模式下，vi则把输入的按键当作插入的字符来处理。指令模式切换到输入模式只需键入相应的输入命令即可（如a,A），而要从输入模式切换到指令模式，则需在输入模式下键入ESC键，如果不晓得现在是处於什麽模式，可以多按几次 [ESC]，系统如发出哔哔声就表示已处于指令模式下了。</p><p>付：有指令模式进入输入模式的指令：</p><ul><li>新增 (append)</li></ul><p><code>a</code>：从光标所在位置後面开始新增资料，光标後的资料随新增资料向後移动。</p><p><code>A</code>： 从光标所在列最後面的地方开始新增资料。</p><ul><li>插入 (insert)</li></ul><p><code>i</code>： 从光标所在位置前面开始插入资料，光标後的资料随新增资料向後移动。</p><p><code>I</code>：从光标所在列的第一个非空白字元前面开始插入资料。</p><ul><li>开始 (open)</li></ul><p><code>o</code>：在光标所在列下新增一列并进入输入模式。</p><p><code>O</code>: 在光标所在列上方新增一列并进入输入模式。</p><h3 id="（三）、退出vi"><a href="#（三）、退出vi" class="headerlink" title="（三）、退出vi"></a>（三）、退出vi</h3><p>在指令模式下键入:q,:q!,:wq或:x(注意:号），就会退出vi。其中:wq和:x是存盘退出，而:q是直接退出，如果文件已有新的变化，vi会提示你保存文件而:q命令也会失效，这时你可以用:w命令保存文件后再用:q退出，或用:wq或:x命令退出，如果你不想保存改变后的文件，你就需要用:q!命令，这个命令将不保存文件而直接退出vi。</p><h3 id="（四）、基本编辑"><a href="#（四）、基本编辑" class="headerlink" title="（四）、基本编辑"></a>（四）、基本编辑</h3><p>配合一般键盘上的功能键，像是方向键、[Insert] 、[Delete] 等等，现在你应该已经可以利用 vi 来编辑文件了。当然 vi 还提供其他许许多多功能让文字的处理更为方便。</p><p>何谓编辑？一般认为是文字的新增、修改以及删除，甚至包括文字区块的搬移、复制等等。先这里介绍 vi的如何做删除与修改。（注意：在 vi 的原始观念里，输入跟编辑是两码子事。编辑是在指令模式下操作的，先利用指令移动光标来定位要进行编辑的地方，然後才下指令做编辑。）</p><p>删除与修改文件的命令：</p><p><code>x</code>： 删除光标所在字符。</p><p><code>dd</code>：删除光标所在的列。</p><p><code>r</code>：修改光标所在字元，r 後接著要修正的字符。</p><p><code>R</code>： 进入取替换状态，新增文字会覆盖原先文字，直到按 [ESC] 回到指令模式下为止。</p><p><code>s</code>： 删除光标所在字元，并进入输入模式。</p><p><code>S</code>： 删除光标所在的列，并进入输入模式。</p><p>其实呢，在PC上根本没有这麽麻烦！输入跟编辑都可以在输入模式下完成。例如要删除字元，直接按[Delete] 不就得了。而插入状态与取代状态可以直接用 [Insert] 切换，犯不著用什麽指令模式的编辑指令。不过就如前面所提到的，这些指令几乎是每台终端机都能用，而不是仅仅在 PC 上。<br>在指令模式下移动光标的基本指令是 h, j, k, l 。想来各位现在也应该能猜到只要直接用 PC 的方向键就可以了，而且无论在指令模式或输入模式下都可以。多容易不是。<br>当然 PC 键盘也有不足之处。有个很好用的指令 u 可以恢复被删除的文字，而 U 指令则可以恢复光标所在列的所有改变。这与某些电脑上的 [Undo] 按键功能相同。  </p><h2 id="三、附件：vi详细指令表"><a href="#三、附件：vi详细指令表" class="headerlink" title="三、附件：vi详细指令表"></a>三、附件：vi详细指令表</h2><h3 id="（一）、基本编辑指令："><a href="#（一）、基本编辑指令：" class="headerlink" title="（一）、基本编辑指令："></a>（一）、基本编辑指令：</h3><ul><li>新增 (append)</li></ul><p><code>a</code>：从光标所在位置後面开始新增资料，光标後的资料随新增资料向後移动。</p><p><code>A</code>： 从光标所在列最後面的地方开始新增资料。</p><ul><li>插入 (insert)</li></ul><p><code>i</code>： 从光标所在位置前面开始插入资料，光标後的资料随新增资料向後移动。</p><p><code>I</code>：从光标所在列的第一个非空白字元前面开始插入资料。</p><ul><li>开始 (open)</li></ul><p><code>o</code>：在光标所在列下新增一列并进入输入模式。</p><p><code>O</code>: 在光标所在列上方新增一列并进入输入模式。</p><p><code>x</code>： 删除光标所在字符。</p><p><code>dd</code>：删除光标所在的列。</p><p><code>r</code>：修改光标所在字元，r 後接著要修正的字符。</p><p><code>R</code>： 进入取替换状态，新增文字会覆盖原先文字，直到按 [ESC] 回到指令模式下为止。</p><p><code>s</code>： 删除光标所在字元，并进入输入模式。</p><p><code>S</code>： 删除光标所在的列，并进入输入模式。</p><h3 id="（二）、光标移动指令："><a href="#（二）、光标移动指令：" class="headerlink" title="（二）、光标移动指令："></a>（二）、光标移动指令：</h3><p>由於许多编辑工作是藉由光标来定位，所以 vi 提供许多移动光标的方式，这个我们列<br>几张简表来说明（这些当然是指令模式下的指令）：</p><table><thead><tr><th>指令</th><th align="center">说明</th><th align="right">功能键</th></tr></thead><tbody><tr><td>0</td><td align="center">移动到光标所在列的最前面</td><td align="right">[Home]</td></tr><tr><td>$</td><td align="center">移动到光标所在列的最後面</td><td align="right">[End]</td></tr><tr><td>[CTRL][d]</td><td align="center">向下半页</td><td align="right"></td></tr><tr><td>[CTRL][f]</td><td align="center">向下一页</td><td align="right"></td></tr><tr><td>[CTRL][u]</td><td align="center">向上半页</td><td align="right"></td></tr><tr><td>[CTRL][b]</td><td align="center">向上一页</td><td align="right">[PageUP]</td></tr></tbody></table><table><thead><tr><th>指令</th><th align="center">说明</th></tr></thead><tbody><tr><td>H</td><td align="center">移动到视窗的第一列</td></tr><tr><td>M</td><td align="center">移动到视窗的中间列</td></tr><tr><td>L</td><td align="center">移动到视窗的最後列</td></tr><tr><td>b</td><td align="center">移动到上个字的第一个字母</td></tr><tr><td>w</td><td align="center">移动到下个字的第一个字母</td></tr><tr><td>e</td><td align="center">移动到下个字的最後一个字母</td></tr><tr><td>^</td><td align="center">移动到光标所在列的第一个非空白字元</td></tr></tbody></table><table><thead><tr><th>指令</th><th align="center">说明</th></tr></thead><tbody><tr><td>n-</td><td align="center">减号移动到上一列的第一个非空白字元前面加上数字可以指定移动到以上 n 列</td></tr><tr><td>n+</td><td align="center">加号移动到下一列的第一个非空白字元前面加上数字可以指定移动到以下 n 列</td></tr><tr><td>nG</td><td align="center">直接用数字 n 加上大写 G 移动到第 n 列</td></tr></tbody></table><table><thead><tr><th>指令</th><th align="center">说明</th></tr></thead><tbody><tr><td>fx</td><td align="center">往右移动到 x 字元上</td></tr><tr><td>Fx</td><td align="center">往左移动到 x 字元上</td></tr><tr><td>tx</td><td align="center">往右移动到 x 字元前</td></tr><tr><td>Tx</td><td align="center">往左移动到 x 字元前</td></tr></tbody></table><table><thead><tr><th>指令</th><th align="center">说明</th></tr></thead><tbody><tr><td>;</td><td align="center">配合f&amp;t使用      重复一次</td></tr><tr><td>,</td><td align="center">配合f&amp;t使用反方向重复一次</td></tr><tr><td>/</td><td align="center">往右移动到有字符的地方</td></tr><tr><td>？</td><td align="center">往左移动到有字符的地方</td></tr><tr><td>n</td><td align="center">配合/&amp;?使用重复一次</td></tr><tr><td>N</td><td align="center">配合/&amp;?使用反方向重复一次</td></tr></tbody></table><table><thead><tr><th>指令</th><th align="center">说明</th><th align="right">备注</th></tr></thead><tbody><tr><td>n(</td><td align="center">左括号移动到句子的最前面</td><td align="right">句子是以前面加上数字可以指定往前移动n个句子! . ? 三种符号来界定</td></tr><tr><td>n)</td><td align="center">右括号移动到下个句子的最前面</td><td align="right">句子是以前面加上数字可以指定往後移动n个句子! . ? 三种符号来界定</td></tr><tr><td>n{</td><td align="center">左括弧移动到段落的最前面</td><td align="right">前面加上数字可以指定往前移动n个段落,段落是以段落间的空白列界定</td></tr><tr><td>n}</td><td align="center">右括弧移动到下个段落的最前面</td><td align="right">前面加上数字可以指定往後移动n个段落,段落是以段落间的空白列界定</td></tr></tbody></table><h3 id="（三）、更多的编辑指令"><a href="#（三）、更多的编辑指令" class="headerlink" title="（三）、更多的编辑指令"></a>（三）、更多的编辑指令</h3><p>这些编辑指令非常有弹性，基本上可以说是由指令与范围所构成。例如 dw 怯缮境噶?nbsp;d 与范围 w 所组成，代表删除一个字 d(elete) w(ord) 。<br>指令列表如下：<br><code>d</code> 删除(delete)<br><code>y</code> 复制(yank)<br><code>p</code> 放置(put)<br><code>c</code> 修改(change)<br>范围可以是下列几个：<br><code>e</code> 光标所在位置到下一个单词的结尾<br><code>w</code> 光标所在位置到下个字的第一个字母<br><code>b</code> 光标所在位置到上个字的第一个字母<br><code>$</code> 光标所在位置到该列的最後一个字母<br><code>0</code> 光标所在位置到该列的第一个字母<br><code>)</code> 光标所在位置到下个句子的第一个字母<br><code>(</code> 光标所在位置到该句子的第一个字母<br><code>}</code> 光标所在位置到该段落的最後一个字母<br><code>{</code> 光标所在位置到该段落的第一个字母<br>说实在的，组合这些指令来编辑文件有一点点艺术气息。不管怎麽样，它们提供更多编辑文字的能力。值得注意的一点是删除与复制都会将指定范围的内容放到暂存区里，然後就可以用指令 p 贴到其它地方去，这是 vi 用来处理区段拷贝与搬移的办法。<br>某些 vi 版本，例如 Linux 所用的 elvis 可以大幅简化这一坨指令。如果稍微观察一下这些编辑指令就会发现问题其实是定范围的方式有点杂，实际上只有四个指令罢了。指令 v 非常好用，只要按下 v 键，光标所在的位置就会反白，然後就可以移动光标来设定范围，接著再直接下指令进行编辑即可。对於整列操作， vi 另外提供了更方便的编辑指令。前面曾经提到过删除整列文字的指令 dd 就是其中一个；cc 可以修改整列文字；而 yy 则是复制整列文字；指令 D 则可以删除光标到该列结束为止所有的文字。  </p><h3 id="（四）、文件操作指令"><a href="#（四）、文件操作指令" class="headerlink" title="（四）、文件操作指令"></a>（四）、文件操作指令</h3><p>文件操作指令多以 : 开头，这跟编辑指令有点区别。<br><code>:q</code> 结束编辑(quit)<br><code>:q!</code> 不存档而要放弃编辑过的文件。<br><code>:w</code> 保存文件(write)其後可加所要存档的档名。<br><code>:wq</code> 即存档後离开。<br><code>zz</code> 功能与 :wq 相同。<br><code>:x</code> 与:wq相同</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Unix编辑器概述&quot;&gt;&lt;a href=&quot;#一、Unix编辑器概述&quot; class=&quot;headerlink&quot; title=&quot;一、Unix编辑器概述&quot;&gt;&lt;/a&gt;一、Unix编辑器概述&lt;/h2&gt;&lt;p&gt;编辑器是使用计算机的重要工具之一，在各种操作系统中，编辑器都是必不可少的部件。Unix及其相似的ix操作系统系列中，为方便各种用户在各个不同的环境中使用，提供了一系列的ex编辑器，包括 ex, edit,ed 和vi.其中ex,edit,ed都是行编辑器，现在已很少有人使用，Unix提供他们的原因是考虑到满足各种用户特别是某些终端用户的需要。&lt;/p&gt;
&lt;p&gt;值得庆幸的是，Unix提供了全屏幕的Vi编辑器，这使我们的工作轻松不少。不少DOS用户抱怨Vi编辑器不象DOS下的编辑器如edit那么好用，这是因为Vi考虑到各种用户的需要，没有使用某些通用的编辑键（在各个不同的终端机上他们的定义是不同的，在某些终端机上甚至没有这些键）。而是采用状态切换的方法，但这只是习惯的问题，一旦你熟练的使用上了vi你就会觉得它其实也很好用。虽然 Vi采用了状态切换的方法，但电脑的硬件及操作系统多种多样，某些电脑的键盘上没有特定的几个功能键！那麽不就有某些功能不能用了？这个问题在 Unix 系统上也一样，几乎各大电脑厂商都有自己的Unix 系统，而 vi 的操作方法也会随之有点出入。这里我们采用 PC 的键盘来说明 vi 的操作，但在具体的环境中还要参考相应的资料，这一点是值得注意的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://notes.seirhsiao.com/categories/Linux/"/>
    
    
      <category term="vi" scheme="http://notes.seirhsiao.com/tags/vi/"/>
    
      <category term="linux" scheme="http://notes.seirhsiao.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 秘籍</title>
    <link href="http://notes.seirhsiao.com/posts/2d68febb/"/>
    <id>http://notes.seirhsiao.com/posts/2d68febb/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:34:05.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitHub秘籍"><a href="#GitHub秘籍" class="headerlink" title="GitHub秘籍 "></a>GitHub秘籍 <a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external nofollow noreferrer noopener"><img alt="Awesome" data-src="https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg" class="lazyload"></a></h1><p>Git 和 Github 秘籍，灵感来自于 <a href="https://github.com/holman" target="_blank" rel="external nofollow noreferrer noopener">Zach Holman</a> 在 2012 年 Aloha Ruby Conference 和 2013 年 WDCNZ 上所做的演讲：<a href="http://www.confreaks.com/videos/1229-aloharuby2012-git-and-github-secrets" target="_blank" rel="external nofollow noreferrer noopener">Git and GitHub Secrets</a>(<a href="https://speakerdeck.com/holman/git-and-github-secrets" target="_blank" rel="external nofollow noreferrer noopener">slides</a>) 和 <a href="https://vimeo.com/72955426" target="_blank" rel="external nofollow noreferrer noopener">More Git and GitHub Secrets</a>(<a href="https://speakerdeck.com/holman/more-git-and-github-secrets" target="_blank" rel="external nofollow noreferrer noopener">slides</a>)。</p><p><em>其他语言版本: <a href="README.md">English</a>, <a href="README.ko.md">한국어</a>, <a href="README.ja.md">日本語</a>, <a href="README.zh-cn.md">简体中文</a>, <a href="README.zh-tw.md">正體中文</a>.</em></p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#github">GitHub</a><ul><li><a href="#不比较空白字符">不比较空白字符</a></li><li><a href="#调整-tab-字符所代表的空格数">调整 Tab 字符所代表的空格数</a></li><li><a href="#查看某个用户的-commit-历史">查看某个用户的 Commit 历史</a></li><li><a href="#仓库克隆">仓库克隆</a></li><li><a href="#分支">分支</a><ul><li><a href="#将某个分支与其他所有分支进行对比">将某个分支与其他所有分支进行对比</a></li><li><a href="#比较分支">比较分支</a></li><li><a href="#比较不同派生库的分支">比较不同派生库的分支</a></li></ul></li><li><a href="#gists">Gists</a></li><li><a href="#gitio">Git.io</a></li><li><a href="#键盘快捷键">键盘快捷键</a></li><li><a href="#整行高亮">整行高亮</a></li><li><a href="#用-commit-信息关闭-issue">用 Commit 信息关闭 Issue</a></li><li><a href="#链接其他仓库的-issue">链接其他仓库的 Issue</a></li><li><a href="#锁定项目对话功能">锁定项目对话功能</a></li><li><a href="#设置-ci-对每条-pull-request-都进行构建">设置 CI 对每条 Pull Request 都进行构建</a></li><li><a href="#markdown-文件语法高亮">Markdown 文件语法高亮</a></li><li><a href="#表情符">表情符</a></li><li><a href="#图片--gif-动画">图片 / GIF 动画</a><ul><li><a href="#在-github-wiki-中引用图片">在 GitHub Wiki 中引用图片</a></li></ul></li><li><a href="#快速引用">快速引用</a></li><li><a href="#粘贴剪贴板中的图片到评论">粘贴剪贴板中的图片到评论</a></li><li><a href="#快速添加许可证文件">快速添加许可证文件</a></li><li><a href="#任务列表">任务列表</a><ul><li><a href="#markdown-文件中的任务列表">Markdown 文件中的任务列表</a></li></ul></li><li><a href="#相对链接">相对链接</a></li><li><a href="#github-pages-的元数据与插件支持">GitHub Pages 的元数据与插件支持</a></li><li><a href="#查看-yaml-格式的元数据">查看 YAML 格式的元数据</a></li><li><a href="#渲染表格数据">渲染表格数据</a></li><li><a href="#撤销-pull-request">撤销 Pull Request</a></li><li><a href="#diffs">Diffs</a><ul><li><a href="#可渲染文档的diffs">可渲染文档的Diffs</a></li><li><a href="#可比较的地图数据">可比较的地图数据</a></li><li><a href="#在-diff-中展开查看更多的上下文">在 Diff 中展开查看更多的上下文</a></li><li><a href="#获取-pull-request-的-diff-或-patch-文件">获取 Pull Request 的 diff 或 patch 文件</a></li><li><a href="#显示图片以及比较图片">显示图片以及比较图片</a></li></ul></li><li><a href="#hub">Hub</a></li><li><a href="#贡献者指南">贡献者指南</a></li><li><a href="#octicons">Octicons</a></li><li><a href="#github-资源">GitHub 资源</a><ul><li><a href="#github-相关演讲视频">GitHub 相关演讲视频</a></li></ul></li></ul></li><li><a href="#git">Git</a><ul><li><a href="#从工作区去除大量已删除文件">从工作区去除大量已删除文件</a></li><li><a href="#上一个分支">上一个分支</a></li><li><a href="#去除空白">去除空白</a></li><li><a href="#检出-pull-requests">检出 Pull Requests</a></li><li><a href="#没有任何改动的提交">没有任何改动的提交</a></li><li><a href="#美化-git-status">美化 Git Status</a></li><li><a href="#美化-git-log">美化 Git Log</a></li><li><a href="#git-查询">Git 查询</a></li><li><a href="#合并分支">合并分支</a></li><li><a href="#修复有问题的提交以及自动合并">修复有问题的提交以及自动合并</a></li><li><a href="#以网站方式查看本地仓库">以网站方式查看本地仓库</a></li><li><a href="#git-配置">Git 配置</a><ul><li><a href="#git-命令自定义别名">Git 命令自定义别名</a></li><li><a href="#自动更正">自动更正</a></li><li><a href="#颜色输出">颜色输出</a></li></ul></li><li><a href="#git-资源">Git 资源</a><ul><li><a href="#git-参考书籍">Git 参考书籍</a></li></ul></li></ul></li></ul><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><h3 id="不比较空白字符"><a href="#不比较空白字符" class="headerlink" title="不比较空白字符"></a>不比较空白字符</h3><p>在任意 diff 页面的 UR L后加上 <code>?w=1</code>，可以去掉那些只是空白字符的改动，使你能更专注于代码改动。</p><p><img alt="Diff without whitespace" data-src="https://camo.githubusercontent.com/797184940defadec00393e6559b835358a863eeb/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f626c6f672f323031312f736563726574732f776869746573706163652e706e67" class="lazyload"></p><p><a href="https://github.com/blog/967-github-secrets" target="_blank" rel="external nofollow noreferrer noopener"><em>详见 GitHub secrets.</em></a></p><h3 id="调整-Tab-字符所代表的空格数"><a href="#调整-Tab-字符所代表的空格数" class="headerlink" title="调整 Tab 字符所代表的空格数"></a>调整 Tab 字符所代表的空格数</h3><p>在 diff 或文件的 URL 后面加上 <code>?ts=4</code> ，这样当显示 tab 字符的长度时就会是 4 个空格的长度，不再是默认的 8 个空格。 <code>ts</code> 后面的数字还可以根据你个人的偏好进行修改。这个技巧不适用于 Gists，或者以 Raw 格式查看文件， 但有浏览器扩展插件可以帮你自动调整: <a href="https://chrome.google.com/webstore/detail/github-tab-size/ofjbgncegkdemndciafljngjbdpfmbkn" target="_blank" rel="external nofollow noreferrer noopener">Chrome 扩展</a>。</p><p>下面以一个 Go 语言源文件为例，看看在 URL 里添加 <code>?ts=4</code> 参数的效果。添加前：</p><p><img alt="Before, tab space example" data-src="http://i.imgur.com/GIT1Fr0.png" class="lazyload"></p><p>… 添加后的样子：</p><p><img alt="After, tab space example" data-src="http://i.imgur.com/70FL4H9.png" class="lazyload"></p><h3 id="查看用户的全部-Commit-历史"><a href="#查看用户的全部-Commit-历史" class="headerlink" title="查看用户的全部 Commit 历史"></a>查看用户的全部 Commit 历史</h3><p>在 Commits 页面 URL 后加上 <code>?author={user}</code> 查看用户全部的提交。</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/rails/</span>rails<span class="regexp">/commits/m</span>aster?author=dhh</span></pre></td></tr></tbody></table></figure><p><img alt="DHH commit history" data-src="http://i.imgur.com/S7AE29b.png" class="lazyload"></p><p><a href="https://help.github.com/articles/differences-between-commit-views" target="_blank" rel="external nofollow noreferrer noopener"><em>深入了解提交视图之间的区别</em></a></p><h3 id="仓库克隆"><a href="#仓库克隆" class="headerlink" title="仓库克隆"></a>仓库克隆</h3><p>当克隆仓库时可以不要那个<code>.git</code>后缀。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/tiimgreen/github-cheat-sheet</span></pre></td></tr></tbody></table></figure><p><a href="http://git-scm.com/docs/git-clone" target="_blank" rel="external nofollow noreferrer noopener"><em>更多对 Git <code>clone</code> 命令的介绍.</em></a></p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><h4 id="将某个分支与其他所有分支进行对比"><a href="#将某个分支与其他所有分支进行对比" class="headerlink" title="将某个分支与其他所有分支进行对比"></a>将某个分支与其他所有分支进行对比</h4><p>当你查看某个仓库的分支（Branches）页面（紧挨着 Commits 链接）时</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/{user}/</span>{repo}<span class="regexp">/branches</span></span></pre></td></tr></tbody></table></figure><p>你会看到一个包含所有未合并的分支的列表。</p><p>在这里你可以访问分支比较页面或删除某个分支。</p><p><img alt="Compare branches not merged into master in rails/rails repo - https://github.com/rails/rails/branches" data-src="http://i.imgur.com/0FEe30z.png" class="lazyload"></p><h4 id="比较分支"><a href="#比较分支" class="headerlink" title="比较分支"></a>比较分支</h4><p>如果要在 GitHub 上直接比较两个分支，可以使用如下形式的 URL ：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/{user}/</span>{repo}<span class="regexp">/compare/</span>{range}</span></pre></td></tr></tbody></table></figure><p>其中 <code>{range} = master...4-1-stable</code></p><p>例如：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/rails/</span>rails<span class="regexp">/compare/m</span>aster...<span class="number">4</span>-<span class="number">1</span>-stable</span></pre></td></tr></tbody></table></figure><p><img alt="Rails branch compare example" data-src="http://i.imgur.com/tIRCOsK.png" class="lazyload"></p><p><code>{range}</code> 参数还可以使用下面的形式:</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/rails/</span>rails<span class="regexp">/compare/m</span>aster@{<span class="number">1</span>.day.ago}...master</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/rails/</span>rails<span class="regexp">/compare/m</span>aster@{<span class="number">2014</span>-<span class="number">10</span>-<span class="number">04</span>}...master</span></pre></td></tr></tbody></table></figure><p><em>日期格式 <code>YYYY-MM-DD</code></em></p><p><img alt="Another compare example" data-src="http://i.imgur.com/5dtzESz.png" class="lazyload"></p><p>在 <code>diff</code> 和 <code>patch</code> 页面里也可以比较分支：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/rails/</span>rails<span class="regexp">/compare/m</span>aster...<span class="number">4</span>-<span class="number">1</span>-stable.diff</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/rails/</span>rails<span class="regexp">/compare/m</span>aster...<span class="number">4</span>-<span class="number">1</span>-stable.patch</span></pre></td></tr></tbody></table></figure><p><a href="https://help.github.com/articles/comparing-commits-across-time" target="_blank" rel="external nofollow noreferrer noopener"><em>了解更多关于基于时间的 Commit 比较.</em></a></p><h4 id="比较不同派生库的分支"><a href="#比较不同派生库的分支" class="headerlink" title="比较不同派生库的分支"></a>比较不同派生库的分支</h4><p>想要对派生仓库（Forked Repository）之间的分支进行比较，可以使用如下的 URL：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/user/</span>repo<span class="regexp">/compare/</span>{foreign-user}:{branch}...{own-branch}</span></pre></td></tr></tbody></table></figure><p>例如：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/rails/</span>rails<span class="regexp">/compare/</span>byroot:master...master</span></pre></td></tr></tbody></table></figure><p><img alt="Forked branch compare" data-src="http://i.imgur.com/Q1W6qcB.png" class="lazyload"></p><h3 id="Gists"><a href="#Gists" class="headerlink" title="Gists"></a>Gists</h3><p><a href="https://gist.github.com/" target="_blank" rel="external nofollow noreferrer noopener">Gists</a> 方便我们管理代码片段，不必使用功能齐全的仓库。</p><p><img alt="Gist" data-src="http://i.imgur.com/VkKI1LC.png?1" class="lazyload"></p><p>Gist 的 URL 后加上 <code>.pibb</code>（<a href="https://gist.github.com/tiimgreen/10545817.pibb" target="_blank" rel="external nofollow noreferrer noopener">像这样</a>）可以得到便于嵌入到其他网站 的 HTML 代码。</p><p>Gists 可以像任何标准仓库一样被克隆。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://gist.github.com/tiimgreen/10545817</span></pre></td></tr></tbody></table></figure><p><img alt="Gists" data-src="http://i.imgur.com/BcFzabp.png" class="lazyload"></p><p>这意味着你可以像 Github 仓库一样修改和更新 Gists :</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git commit</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ git push</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Username <span class="keyword">for</span> <span class="string">'https://gist.github.com'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">Password <span class="keyword">for</span> <span class="string">'https://tiimgreen@gist.github.com'</span>:</span></pre></td></tr></tbody></table></figure><p>但是， Gists 不支持目录。所有文件都必须添加在仓库的根目录下。<br><a href="https://help.github.com/articles/creating-gists" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解如何创建 Gists.</em></a></p><h3 id="Git-io"><a href="#Git-io" class="headerlink" title="Git.io"></a>Git.io</h3><p><a href="http://git.io" target="_blank" rel="external nofollow noreferrer noopener">Git.io</a>是 Github 的短网址服务。</p><p><img alt="Git.io" data-src="http://i.imgur.com/6JUfbcG.png?1" class="lazyload"></p><p>你可以通过 Curl 命令以普通 HTTP 协议使用它：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ curl -i http://git.io -F <span class="string">"url=https://github.com/..."</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">HTTP/1.1 201 Created</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Location: http://git.io/abc123</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">$ curl -i http://git.io/abc123</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">HTTP/1.1 302 Found</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">Location: https://github.com/...</span></pre></td></tr></tbody></table></figure><p><a href="https://github.com/blog/985-git-io-github-url-shortener" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解 Git.io.</em></a></p><h3 id="键盘快捷键"><a href="#键盘快捷键" class="headerlink" title="键盘快捷键"></a>键盘快捷键</h3><p>在仓库页面上提供了快捷键方便快速导航。</p><ul><li>按 <code>t</code> 键打开一个文件浏览器。</li><li>按 <code>w</code> 键打开分支选择菜单。</li><li>按 <code>s</code> 键聚焦光标到当前仓库的搜索框。此时按退格键就会从搜索当前仓库切换到搜索整个 Github 网站。</li><li>按 <code>l</code> 键编辑 Issue 列表页的标签。</li><li><strong>查看文件内容时</strong>（如：<code>https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.md</code>），按 <code>y</code> 键将会冻结这个页面，这样就算代码被修改了也不会影响你当前看到的。</li></ul><p>按<code>?</code>查看当前页面支持的快捷键列表：</p><p><img alt="Keyboard shortcuts" data-src="http://i.imgur.com/y5ZfNEm.png" class="lazyload"></p><p><a href="https://help.github.com/articles/search-syntax/" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解可用的搜索语法.</em></a></p><h3 id="整行高亮"><a href="#整行高亮" class="headerlink" title="整行高亮"></a>整行高亮</h3><p>在代码文件地址 URL 后加上<code>#L52</code>或者单击行号 52 都会将第 52 行代码高亮显示。</p><p>多行高亮也可以，比如用<code>#L53-L60</code>选择范围，或者按住 <code>shift</code> 键，然后再点击选择的两行。</p><figure class="highlight crystal"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span>/<span class="regexp">/github.com/rails</span><span class="regexp">/rails/blob</span><span class="regexp">/master/activemodel</span><span class="regexp">/lib/active</span>_model.rb<span class="comment">#L53-L60</span></span></pre></td></tr></tbody></table></figure><p><img alt="整行高亮" data-src="http://i.imgur.com/8AhjrCz.png" class="lazyload"></p><h3 id="用-Commit-信息关闭-Issue"><a href="#用-Commit-信息关闭-Issue" class="headerlink" title="用 Commit 信息关闭 Issue"></a>用 Commit 信息关闭 Issue</h3><p>如果某个提交修复了一个 Issue，当提交到 master 分支时，提交信息里可以使用 <code>fix/fixes/fixed</code>, <code>close/closes/closed</code> 或者 <code>resolve/resolves/resolved</code> 等关键词，后面再跟上 Issue 号，这样就会关闭这个 Issue 。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"Fix screwup, fixes #12"</span></span></pre></td></tr></tbody></table></figure><p>这将会关闭 Issue #12，并且在 Issue 讨论列表里关联引用这次提交。</p><p><img alt="Closing Repo" data-src="http://i.imgur.com/Uh1gZdx.png" class="lazyload"></p><p><a href="https://help.github.com/articles/closing-issues-via-commit-messages" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解通过提交信息关闭 Issue.</em></a></p><h3 id="链接其他仓库的-Issue"><a href="#链接其他仓库的-Issue" class="headerlink" title="链接其他仓库的 Issue"></a>链接其他仓库的 Issue</h3><p>如果你想引用到同一个仓库中的一个 Issue，只需使用井号 <code>#</code> 加上 Issue 号，这样就会自动创建到此 Issue 的链接。</p><p>要链接到其他仓库的 Issue ，就使用<code>{user}/{repo}#ISSUE_NUMBER</code>的方式，例如<code>tiimgreen/toc#12</code>。</p><p><img alt="Cross-Link Issues" data-src="https://camo.githubusercontent.com/447e39ab8d96b553cadc8d31799100190df230a8/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f626c6f672f323031312f736563726574732f7265666572656e6365732e706e67" class="lazyload"></p><h3 id="锁定项目对话功能"><a href="#锁定项目对话功能" class="headerlink" title="锁定项目对话功能"></a>锁定项目对话功能</h3><p>现在仓库的管理员和合作者可以将 Pull Requests 和 Issue 的评论功能关闭。</p><p><img alt="Lock conversation" data-src="https://cloud.githubusercontent.com/assets/2723/3221693/bf54dd44-f00d-11e3-8eb6-bb51e825bc2c.png" class="lazyload"></p><p>这样，不是项目合作者的用户就不能在这个项目上使用评论功能。</p><p><img alt="Comments locked" data-src="https://cloud.githubusercontent.com/assets/2723/3221775/d6e513b0-f00e-11e3-9721-2131cb37c906.png" class="lazyload"></p><p><a href="https://github.com/blog/1847-locking-conversations" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解对话锁定功能.</em></a></p><h3 id="设置-CI-对每条-Pull-Request-都进行构建"><a href="#设置-CI-对每条-Pull-Request-都进行构建" class="headerlink" title="设置 CI 对每条 Pull Request 都进行构建"></a>设置 CI 对每条 Pull Request 都进行构建</h3><p>如果配置正确，<a href="https://travis-ci.org/" target="_blank" rel="external nofollow noreferrer noopener">Travis CI</a> 会为每个你收到的 Pull Request 执行构建，就像每次提交也会触发构建一样。想了解更多关于 Travis CI 的信息，请参考 <a href="http://docs.travis-ci.com/user/getting-started/" target="_blank" rel="external nofollow noreferrer noopener">Travis CI入门</a>。</p><p><a href="https://github.com/octokit/octokit.rb/pull/452" target="_blank" rel="external nofollow noreferrer noopener"><img alt="Travis CI status" data-src="https://cloud.githubusercontent.com/assets/1687642/2700187/3a88838c-c410-11e3-9a46-e65e2a0458cd.png" class="lazyload"></a></p><p><a href="https://github.com/blog/1227-commit-status-api" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解提交状态 API.</em></a></p><h3 id="Markdown-文件语法高亮"><a href="#Markdown-文件语法高亮" class="headerlink" title="Markdown 文件语法高亮"></a>Markdown 文件语法高亮</h3><p>例如，可以像下面这样在你的 Markdown 文件里为 Ruby 代码添加语法高亮：</p><pre><code><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'tabbit'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">table = Tabbit.new(<span class="string">'Name'</span>, <span class="string">'Email'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">table.add_row(<span class="string">'Tim Green'</span>, <span class="string">'tiimgreen@gmail.com'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">puts table.to_s</span></pre></td></tr></tbody></table></figure></code></pre><p>效果如下：</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'tabbit'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">table = Tabbit.new(<span class="string">'Name'</span>, <span class="string">'Email'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">table.add_row(<span class="string">'Tim Green'</span>, <span class="string">'tiimgreen@gmail.com'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">puts table.to_s</span></pre></td></tr></tbody></table></figure><p>Github使用 <a href="https://github.com/github/linguist" target="_blank" rel="external nofollow noreferrer noopener">Linguist</a> 做语言识别和语法高亮。你可以仔细阅读 <a href="https://github.com/github/linguist/blob/master/lib/linguist/languages.yml" target="_blank" rel="external nofollow noreferrer noopener">languages YAML file</a>，了解有哪些可用的关键字。</p><p><a href="https://help.github.com/articles/github-flavored-markdown" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解 GitHub Flavored Markdown.</em></a></p><h3 id="表情符"><a href="#表情符" class="headerlink" title="表情符"></a>表情符</h3><p>可以在 Pull Requests, Issues, 提交消息, Markdown 文件里加入表情符。使用方法 <code>:name_of_emoji:</code></p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">:smile:</span></span></pre></td></tr></tbody></table></figure><p>将输出一个笑脸：</p><p><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p><p>Github 支持的完整表情符号列表详见<a href="http://www.emoji-cheat-sheet.com/" target="_blank" rel="external nofollow noreferrer noopener">emoji-cheat-sheet.com</a> 或 <a href="https://github.com/scotch-io/All-Github-Emoji-Icons" target="_blank" rel="external nofollow noreferrer noopener">scotch-io/All-Github-Emoji-Icons</a>。</p><p>Github 上使用最多的5个表情符号是：</p><ol><li><code>:shipit:</code></li><li><code>:sparkles:</code></li><li><code>:-1:</code></li><li><code>:+1:</code></li><li><code>:clap:</code></li></ol><h3 id="图片-GIF-动画"><a href="#图片-GIF-动画" class="headerlink" title="图片 / GIF 动画"></a>图片 / GIF 动画</h3><p>注释和README等文件里也可以使用图片和 GIF 动画：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">![<span class="string">Alt Text</span>](<span class="link">http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif</span>)</span></pre></td></tr></tbody></table></figure><p>仓库中的图片可以被直接引用：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">![<span class="string">Alt Text</span>](<span class="link">https://github.com/{user}/{repo}/raw/master/path/to/image.gif</span>)</span></pre></td></tr></tbody></table></figure><p><img alt="Peter don't care" data-src="http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif" class="lazyload"></p><p>所有图片都缓存在 Github，不用担心你的站点不能访问时就看不到图片了。</p><h4 id="在-GitHub-Wiki-中引用图片"><a href="#在-GitHub-Wiki-中引用图片" class="headerlink" title="在 GitHub Wiki 中引用图片"></a>在 GitHub Wiki 中引用图片</h4><p>有多种方法可以在 Wiki 页面里嵌入图片。既可以像上一条里那样使用标准的 Markdown 语法，也可以像下面这样指定图片的高度或宽度：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[[ http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif | height = 100px ]]</span></pre></td></tr></tbody></table></figure><p>结果：</p><p><img alt="Just a screenshot" data-src="http://i.imgur.com/J5bMf7S.png" class="lazyload"></p><h3 id="快速引用"><a href="#快速引用" class="headerlink" title="快速引用"></a>快速引用</h3><p>在主题评论中引用之前某个人所说的，只需选中文本，然后按 <code>r</code> 键，想要的就会以引用的形式复制到你的输入框里。</p><p><img alt="Quick Quote" data-src="https://f.cloud.github.com/assets/296432/124483/b0fa6204-6ef0-11e2-83c3-256c37fa7abc.gif" class="lazyload"></p><p><a href="https://github.com/blog/1399-quick-quotes" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解快速引用.</em></a></p><h3 id="粘贴剪贴板中的图片到评论"><a href="#粘贴剪贴板中的图片到评论" class="headerlink" title="粘贴剪贴板中的图片到评论"></a>粘贴剪贴板中的图片到评论</h3><p><em>（仅适用于 Chrome 浏览器）</em></p><p>当截屏图片复制到剪贴板后（mac 上用 <code>cmd-ctrl-shift-4</code>），你可以用(<code>cmd-v / ctrl-v</code>)把图片粘贴到评论框里，然后它就会自动上传到 Github。</p><p><img alt="Pasting Clipboard Image to Comments" data-src="https://cloud.githubusercontent.com/assets/39191/5794265/39c9b65a-9f1b-11e4-9bc7-04e41f59ea5f.png" class="lazyload"></p><p><a href="https://help.github.com/articles/issue-attachments" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解在 issue 中使用附件</em></a></p><h3 id="快速添加许可证文件"><a href="#快速添加许可证文件" class="headerlink" title="快速添加许可证文件"></a>快速添加许可证文件</h3><p>创建一个仓库时，Github会为你提供一个预置的软件许可列表：</p><p><img alt="License" data-src="http://i.imgur.com/Chqj4Fg.png" class="lazyload"></p><p>对于已有的仓库，可以通过 web 界面创建文件来添加软件许可。输入<code>LICENSE</code>作为文件名后，同样可以从预置的列表中选择一个作为模板。</p><p><img alt="License" data-src="http://i.imgur.com/fTjQict.png" class="lazyload"></p><p>这个技巧也适用于 <code>.gitignore</code> 文件。</p><p><a href="https://help.github.com/articles/open-source-licensing" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解开源许可证</em></a></p><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><p>Issues 和 Pull requests 里可以添加复选框，语法如下（注意空白符）：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span> <span class="selector-attr">[ ]</span> <span class="selector-tag">Be</span> <span class="selector-tag">awesome</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span> <span class="selector-attr">[ ]</span> <span class="selector-tag">Prepare</span> <span class="selector-tag">dinner</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="selector-tag">-</span> <span class="selector-attr">[ ]</span> <span class="selector-tag">Research</span> <span class="selector-tag">recipe</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="selector-tag">-</span> <span class="selector-attr">[ ]</span> <span class="selector-tag">Buy</span> <span class="selector-tag">ingredients</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="selector-tag">-</span> <span class="selector-attr">[ ]</span> <span class="selector-tag">Cook</span> <span class="selector-tag">recipe</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span> <span class="selector-attr">[ ]</span> <span class="selector-tag">Sleep</span></span></pre></td></tr></tbody></table></figure><p><img alt="Task List" data-src="http://i.imgur.com/jJBXhsY.png" class="lazyload"></p><p>当项目被选中时，它对应的 Markdown 源码也被更新了：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span> <span class="selector-attr">[x]</span> <span class="selector-tag">Be</span> <span class="selector-tag">awesome</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span> <span class="selector-attr">[ ]</span> <span class="selector-tag">Prepare</span> <span class="selector-tag">dinner</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="selector-tag">-</span> <span class="selector-attr">[x]</span> <span class="selector-tag">Research</span> <span class="selector-tag">recipe</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="selector-tag">-</span> <span class="selector-attr">[x]</span> <span class="selector-tag">Buy</span> <span class="selector-tag">ingredients</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="selector-tag">-</span> <span class="selector-attr">[ ]</span> <span class="selector-tag">Cook</span> <span class="selector-tag">recipe</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span> <span class="selector-attr">[ ]</span> <span class="selector-tag">Sleep</span></span></pre></td></tr></tbody></table></figure><p><a href="https://help.github.com/articles/writing-on-github#task-lists" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解任务列表.</em></a></p><h4 id="Markdown-文件中的任务列表"><a href="#Markdown-文件中的任务列表" class="headerlink" title="Markdown 文件中的任务列表"></a>Markdown 文件中的任务列表</h4><p>在完全适配Markdown语法的文件中可以使用以下语法加入一个<strong>只读</strong>的任务列表</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span> <span class="selector-attr">[ ]</span> <span class="selector-tag">Mercury</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span> <span class="selector-attr">[x]</span> <span class="selector-tag">Venus</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span> <span class="selector-attr">[x]</span> <span class="selector-tag">Earth</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="selector-tag">-</span> <span class="selector-attr">[x]</span> <span class="selector-tag">Moon</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span> <span class="selector-attr">[x]</span> <span class="selector-tag">Mars</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="selector-tag">-</span> <span class="selector-attr">[ ]</span> <span class="selector-tag">Deimos</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="selector-tag">-</span> <span class="selector-attr">[ ]</span> <span class="selector-tag">Phobos</span></span></pre></td></tr></tbody></table></figure><ul><li><input disabled type="checkbox"> Mercury</li><li><input checked disabled type="checkbox"> Venus</li><li><input checked disabled type="checkbox"> Earth<ul><li><input checked disabled type="checkbox"> Moon</li></ul></li><li><input checked disabled type="checkbox"> Mars<ul><li><input disabled type="checkbox"> Deimos</li><li><input disabled type="checkbox"> Phobos</li></ul></li></ul><p><a href="https://github.com/blog/1825-task-lists-in-all-markdown-documents" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解 Markdown 文件中的任务列表</em></a></p><h3 id="相对链接"><a href="#相对链接" class="headerlink" title="相对链接"></a>相对链接</h3><p>Markdown文件里链接到内部内容时推荐使用相对链接。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[<span class="string">Link to a header</span>](<span class="link">#awesome-section</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[<span class="string">Link to a file</span>](<span class="link">docs/readme</span>)</span></pre></td></tr></tbody></table></figure><p>绝对链接会在 URL 改变时（例如重命名仓库、用户名改变，建立分支项目）被更新。使用相对链接能够保证你的文档不受此影响。</p><p><a href="https://help.github.com/articles/relative-links-in-readmes" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解相对链接.</em></a></p><h3 id="GitHub-Pages-的元数据与插件支持"><a href="#GitHub-Pages-的元数据与插件支持" class="headerlink" title="GitHub Pages 的元数据与插件支持"></a>GitHub Pages 的元数据与插件支持</h3><p>在 Jekyll 页面和文章里，仓库信息可在 <code>site.github</code> 命名空间下找到，也可以显示出来，例如，使用 <code></code>显示项目标题。</p><p>Jemoji 和 jekyll-mentions 插件为你的 Jekyll 文章和页面增加了<a href="#emojis">emoji</a>和<a href="https://github.com/blog/821" target="_blank" rel="external nofollow noreferrer noopener">@mentions</a>功能。</p><p><a href="https://github.com/blog/1797-repository-metadata-and-plugin-support-for-github-pages" target="_blank" rel="external nofollow noreferrer noopener"><em>了解更多 GitHub Pages 的元数据和插件支持.</em></a></p><h3 id="查看-YAML-格式的元数据"><a href="#查看-YAML-格式的元数据" class="headerlink" title="查看 YAML 格式的元数据"></a>查看 YAML 格式的元数据</h3><p>许多博客站点，比如基于 <a href="http://jekyllrb.com/" target="_blank" rel="external nofollow noreferrer noopener">Jekyll</a>的<a href="http://pages.github.com/" target="_blank" rel="external nofollow noreferrer noopener">GitHub Pages</a> ，都依赖于一些文章头部的 YAML 格式的元数据。 Github 会将其渲染成一个水平表格，方便阅读。</p><p><img alt="YAML metadata" data-src="https://camo.githubusercontent.com/47245aa16728e242f74a9a324ce0d24c0b916075/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f36343035302f313232383236372f65303439643063362d323761302d313165332d396464382d6131636432323539393334342e706e67" class="lazyload"></p><p><a href="https://github.com/blog/1647-viewing-yaml-metadata-in-your-documents" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解 在文档里查看 YAML 元数据.</em></a></p><h3 id="渲染表格数据"><a href="#渲染表格数据" class="headerlink" title="渲染表格数据"></a>渲染表格数据</h3><p>GitHub 支持将 <code>.csv</code> (逗号分隔)和 <code>.tsv</code> (制表符分隔)格式的文件渲染成表格数据。</p><p><img alt="Tabular data" data-src="https://camo.githubusercontent.com/1b6dd0157ffb45d9939abf14233a0cb13b3b4dfe/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f3238323735392f3937363436322f33323038336463652d303638642d313165332d393262322d3566323863313061353035392e706e67" class="lazyload"></p><p><a href="https://github.com/blog/1601-see-your-csvs" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解渲染表格数据.</em></a></p><h3 id="撤销-Pull-Request"><a href="#撤销-Pull-Request" class="headerlink" title="撤销 Pull Request"></a>撤销 Pull Request</h3><p>合并一个 Pull Request 之后，你可能会反悔：要么是这次 Pull Request 没什么用处，要么是还不到合并的时候。</p><p>此时可以通过 Pull Request 中的 Revert 按钮来撤销一个已合并的 Pull Request 中的 commit。按下按钮后将自动生成一个进行逆操作的 Pull Request。</p><p><img alt="Revert button" data-src="https://camo.githubusercontent.com/0d3350caf2bb1cba53123ffeafc00ca702b1b164/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f68656c702f70756c6c5f72657175657374732f7265766572742d70756c6c2d726571756573742d6c696e6b2e706e67" class="lazyload"></p><p><a href="https://github.com/blog/1857-introducing-the-revert-button" target="_blank" rel="external nofollow noreferrer noopener">*进一步了解“撤销”按钮</a></p><h3 id="Diffs"><a href="#Diffs" class="headerlink" title="Diffs"></a>Diffs</h3><h4 id="可渲染文档的Diffs"><a href="#可渲染文档的Diffs" class="headerlink" title="可渲染文档的Diffs"></a>可渲染文档的Diffs</h4><p>Commit 和 Pull Request 里包含有 Github 支持的可渲染文档（比如 Markdown）会提供<em>source</em> 和 <em>rendered</em> 两个视图功能。</p><p><img alt="Source / Rendered view" data-src="https://github-images.s3.amazonaws.com/help/repository/rendered_prose_diff.png" class="lazyload"></p><p>点击 “rendered” 按钮，看看改动在渲染后的显示效果。当你添加、删除或修改文本时，渲染纯文本视图非常方便。</p><p><img alt="Rendered Prose Diffs" data-src="https://f.cloud.github.com/assets/17715/2003056/3997edb4-862b-11e3-90be-5e9586edecd7.png" class="lazyload"></p><p><a href="https://github.com/blog/1784-rendered-prose-diffs" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解渲染纯文本视图Diffs.</em></a></p><h4 id="可比较的地图数据"><a href="#可比较的地图数据" class="headerlink" title="可比较的地图数据"></a>可比较的地图数据</h4><p>当你在GitHub上查看一个包含地理数据的 commit 或 pull request时，Github 将以可视化的方式对比版本之间的差异。</p><p><a href="https://github.com/benbalter/congressional-districts/commit/2233c76ca5bb059582d796f053775d8859198ec5" target="_blank" rel="external nofollow noreferrer noopener"><img alt="Diffable Maps" data-src="https://f.cloud.github.com/assets/282759/2090660/63f2e45a-8e97-11e3-9d8b-d4c8078b004e.gif" class="lazyload"></a></p><p><a href="https://github.com/blog/1772-diffable-more-customizable-maps" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解可比较的地图数据.</em></a></p><h4 id="在-Diff-中展开查看更多的上下文"><a href="#在-Diff-中展开查看更多的上下文" class="headerlink" title="在 Diff 中展开查看更多的上下文"></a>在 Diff 中展开查看更多的上下文</h4><p>你可以通过点击 diff 边栏里的 <em>unfold</em> 按钮来多显示几行上下文。你可以一直点击 <em>unfold</em> 按钮直到显示了文件的全部内容。这个功能在所有 GitHub 的 diff 功能中都可以使用。</p><p><img alt="Expanding Context in Diffs" data-src="https://f.cloud.github.com/assets/22635/1610539/863c1f64-5584-11e3-82bf-151b406a272f.gif" class="lazyload"></p><p><a href="https://github.com/blog/1705-expanding-context-in-diffs" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解展开 Diff 上下文.</em></a></p><h4 id="获取-Pull-Request-的-diff-或-patch-文件"><a href="#获取-Pull-Request-的-diff-或-patch-文件" class="headerlink" title="获取 Pull Request 的 diff 或 patch 文件"></a>获取 Pull Request 的 diff 或 patch 文件</h4><p>在 Pull Request 的 URL 后面加上 <code>.diff</code> 或 <code>.patch</code> 的扩展名就可以得到它的 diff 或 patch 文件，例如：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/tiimgreen/gi</span>thub-cheat-sheet<span class="regexp">/pull/</span><span class="number">15</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/tiimgreen/gi</span>thub-cheat-sheet<span class="regexp">/pull/</span><span class="number">15</span>.diff</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/tiimgreen/gi</span>thub-cheat-sheet<span class="regexp">/pull/</span><span class="number">15</span>.patch</span></pre></td></tr></tbody></table></figure><p><code>.diff</code> 扩展会使用普通文本格式显示如下内容：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">diff --git a/README.md b/README.md</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">index 88fcf69..8614873 100644</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">--- a/README.md</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">+++ b/README.md</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">@@ -28,6 +28,7 @@ All the hidden and not hidden features of Git and GitHub. This cheat sheet was i</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="bullet"> - </span>[<span class="string">Merged Branches</span>](<span class="link">#merged-branches</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="bullet"> - </span>[<span class="string">Quick Licensing</span>](<span class="link">#quick-licensing</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="bullet"> - </span>[<span class="string">TODO Lists</span>](<span class="link">#todo-lists</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">+- [<span class="string">Relative Links</span>](<span class="link">#relative-links</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="bullet"> - </span>[<span class="string">.gitconfig Recommendations</span>](<span class="link">#gitconfig-recommendations</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="bullet">     - </span>[<span class="string">Aliases</span>](<span class="link">#aliases</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="bullet">     - </span>[<span class="string">Auto-correct</span>](<span class="link">#auto-correct</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">@@ -381,6 +382,19 @@ When they are clicked, they will be updated in the pure Markdown:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="bullet"> - </span>[ ] Sleep</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">(...)</span></pre></td></tr></tbody></table></figure><h4 id="显示图片以及比较图片"><a href="#显示图片以及比较图片" class="headerlink" title="显示图片以及比较图片"></a>显示图片以及比较图片</h4><p>GitHub 可以显示包括 PNG、JPG、GIF、PSD 在内的多种图片格式并提供了几种方式来比较这些格式的图片文件版本间的不同。</p><p><a href="https://github.com/blog/1845-psd-viewing-diffing" target="_blank" rel="external nofollow noreferrer noopener"><img alt="Diffable PSD" data-src="https://cloud.githubusercontent.com/assets/2546/3165594/55f2798a-eb56-11e3-92e7-b79ad791a697.gif" class="lazyload"></a></p><p><a href="https://help.github.com/articles/rendering-and-diffing-images" target="_blank" rel="external nofollow noreferrer noopener"><em>查看更多关于图片显示和比较</em></a></p><h3 id="Hub"><a href="#Hub" class="headerlink" title="Hub"></a>Hub</h3><p><a href="https://github.com/github/hub" target="_blank" rel="external nofollow noreferrer noopener">Hub</a> 是一个对 Git 进行了封装的命令行工具，可以帮助你更方便的使用 Github。</p><p>例如可以像下面这样进行克隆：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hub <span class="built_in">clone</span> tiimgreen/toc</span></pre></td></tr></tbody></table></figure><p><a href="https://github.com/github/hub#commands" target="_blank" rel="external nofollow noreferrer noopener"><em>查看更多 Hub 提供的超酷命令.</em></a></p><h3 id="贡献者指南"><a href="#贡献者指南" class="headerlink" title="贡献者指南"></a>贡献者指南</h3><p>在仓库的根目录添加一个名为 <code>CONTRIBUTING</code> 的文件后，贡献者在新建 Issue 或 Pull Request 时会看到一个指向这个文件的链接。</p><p><img alt="Contributing Guidelines" data-src="https://camo.githubusercontent.com/71995d6b0e620a9ef1ded00a04498241c69dd1bf/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f736b697463682f6973737565732d32303132303931332d3136323533392e6a7067" class="lazyload"></p><p><a href="https://github.com/blog/1184-contributing-guidelines" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解贡献者指南.</em></a></p><h3 id="Octicons"><a href="#Octicons" class="headerlink" title="Octicons"></a>Octicons</h3><p>GitHubs 图标库 (Octicons) 现已开源。</p><p><img alt="Octicons" data-src="https://og.github.com/octicons/octicons@1200x630.png" class="lazyload"></p><p><a href="https://octicons.github.com" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解 GitHub 图标库</em></a></p><h3 id="GitHub-资源"><a href="#GitHub-资源" class="headerlink" title="GitHub 资源"></a>GitHub 资源</h3><table><thead><tr><th>内容</th><th>链接</th></tr></thead><tbody><tr><td>探索 GitHub</td><td><a href="https://github.com/explore" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/explore</a></td></tr><tr><td>GitHub 博客</td><td><a href="https://github.com/blog" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/blog</a></td></tr><tr><td>GitHub 帮助</td><td><a href="https://help.github.com/" target="_blank" rel="external nofollow noreferrer noopener">https://help.github.com/</a></td></tr><tr><td>GitHub 培训</td><td><a href="http://training.github.com/" target="_blank" rel="external nofollow noreferrer noopener">http://training.github.com/</a></td></tr><tr><td>GitHub 开发者</td><td><a href="https://developer.github.com/" target="_blank" rel="external nofollow noreferrer noopener">https://developer.github.com/</a></td></tr></tbody></table><h4 id="GitHub-相关演讲视频"><a href="#GitHub-相关演讲视频" class="headerlink" title="GitHub 相关演讲视频"></a>GitHub 相关演讲视频</h4><table><thead><tr><th>内容</th><th>链接</th></tr></thead><tbody><tr><td>How GitHub Uses GitHub to Build GitHub</td><td><a href="https://www.youtube.com/watch?v=qyz3jkOBbQY" target="_blank" rel="external nofollow noreferrer noopener">https://www.youtube.com/watch?v=qyz3jkOBbQY</a></td></tr><tr><td>Introduction to Git with Scott Chacon of GitHub</td><td><a href="https://www.youtube.com/watch?v=ZDR433b0HJY" target="_blank" rel="external nofollow noreferrer noopener">https://www.youtube.com/watch?v=ZDR433b0HJY</a></td></tr><tr><td>How GitHub No Longer Works</td><td><a href="https://www.youtube.com/watch?v=gXD1ITW7iZI" target="_blank" rel="external nofollow noreferrer noopener">https://www.youtube.com/watch?v=gXD1ITW7iZI</a></td></tr><tr><td>Git and GitHub Secrets</td><td><a href="https://www.youtube.com/watch?v=Foz9yvMkvlA" target="_blank" rel="external nofollow noreferrer noopener">https://www.youtube.com/watch?v=Foz9yvMkvlA</a></td></tr><tr><td>More Git and GitHub Secrets</td><td><a href="https://www.youtube.com/watch?v=p50xsL-iVgU" target="_blank" rel="external nofollow noreferrer noopener">https://www.youtube.com/watch?v=p50xsL-iVgU</a></td></tr></tbody></table><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="从工作区去除大量已删除文件"><a href="#从工作区去除大量已删除文件" class="headerlink" title="从工作区去除大量已删除文件"></a>从工作区去除大量已删除文件</h3><p>当用 <code>/bin/rm</code> 命令删除了大量文件之后，你可以用下面一条命令从工作区和索引中去除这些文件，以免一个一个的删除：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git rm $(git ls-files -d)</span></pre></td></tr></tbody></table></figure><p>例如:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git status</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">On branch master</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Changes not staged <span class="keyword">for</span> commit:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    deleted:    a</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    deleted:    c</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">$ git rm $(git ls-files -d)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">rm <span class="string">'a'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">rm <span class="string">'c'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">$ git status</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">On branch master</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">Changes to be committed:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    deleted:    a</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    deleted:    c</span></pre></td></tr></tbody></table></figure><h3 id="上一个分支"><a href="#上一个分支" class="headerlink" title="上一个分支"></a>上一个分支</h3><p>快速检出上一个分支：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git checkout -</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Switched to branch 'master'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">$ git checkout -</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Switched to branch 'next'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">$ git checkout -</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Switched to branch 'master'</span></span></pre></td></tr></tbody></table></figure><p><a href="http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解 Git 分支.</em></a></p><h3 id="去除空白"><a href="#去除空白" class="headerlink" title="去除空白"></a>去除空白</h3><p>Git Stripspace 命令可以:</p><ul><li>去掉行尾空白符</li><li>多个空行压缩成一行</li><li>必要时在文件末尾增加一个空行</li></ul><p>使用此命令时必须传入一个文件，像这样：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git stripspace &lt; README.md</span></pre></td></tr></tbody></table></figure><p><a href="http://git-scm.com/docs/git-stripspace" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解 Git <code>stripspace</code> 命令.</em></a></p><h3 id="检出-Pull-Requests"><a href="#检出-Pull-Requests" class="headerlink" title="检出 Pull Requests"></a>检出 Pull Requests</h3><p>对 Github 仓库来说，Pull Request 是种特殊分支， 可以通过以下多种方式取到本地：</p><p>取出某个特定的 Pull Request 并临时作为本地的 <code>FETCH_HEAD</code> 中以便进行快速查看更改( diff )以及合并( merge )：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git fetch origin refs/pull/[PR-Number]/head</span></pre></td></tr></tbody></table></figure><p>通过 refspec 获取所有的 Pull Request 为本地分支：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git fetch origin <span class="string">'+refs/pull/*/head:refs/remotes/origin/pr/*'</span></span></pre></td></tr></tbody></table></figure><p>或在仓库的 <code>.git/config</code> 中加入下列设置来自动获取远程仓库中的 Pull Request</p><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[remote <span class="string">"origin"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    fetch = +refs/heads/*<span class="symbol">:refs/remotes/origin/*</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    url = git<span class="variable">@github</span>.<span class="symbol">com:</span>tiimgreen/github-cheat-sheet.git</span></pre></td></tr></tbody></table></figure><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[remote <span class="string">"origin"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    fetch = +refs/heads/*<span class="symbol">:refs/remotes/origin/*</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    url = git<span class="variable">@github</span>.<span class="symbol">com:</span>tiimgreen/github-cheat-sheet.git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    fetch = +refs/pull/*<span class="regexp">/head:refs/remotes</span><span class="regexp">/origin/pr</span><span class="regexp">/*</span></span></pre></td></tr></tbody></table></figure><p>对基于派生库的 Pull Request，可以通过先 <code>checkout</code> 代表此 Pull Request 的远端分支再由此分支建立一个本地分支：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git checkout pr/42 pr-42</span></pre></td></tr></tbody></table></figure><p>操作多个仓库的时候，可以在 Git 中设置获取 Pull Request 的全局选项。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git config --global --add remote.origin.fetch <span class="string">"+refs/pull/*/head:refs/remotes/origin/pr/*"</span></span></pre></td></tr></tbody></table></figure><p>此时可以在任意仓库中使用以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git fetch origin</span></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git checkout pr/42</span></pre></td></tr></tbody></table></figure><p><a href="https://help.github.com/articles/checking-out-pull-requests-locally" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解如何本地检出 pull request.</em></a></p><h3 id="没有任何改动的提交"><a href="#没有任何改动的提交" class="headerlink" title="没有任何改动的提交"></a>没有任何改动的提交</h3><p>可以使用<code>--allow-empty</code>选项强制创建一个没有任何改动的提交：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"Big-ass commit"</span> --allow-empty</span></pre></td></tr></tbody></table></figure><p>这样做在如下几种情况下是有意义的：</p><ul><li>标记新的工作或一个新功能的开始。</li><li>记录对项目的跟代码无关的改动。</li><li>跟使用你仓库的其他人交流。</li><li>作为仓库的第一次提交，因为第一次提交后不能被 rebase： <code>git commit -m "init repo" --allow-empty</code>.</li></ul><h3 id="美化-Git-Status"><a href="#美化-Git-Status" class="headerlink" title="美化 Git Status"></a>美化 Git Status</h3><p>在命令行输入如下命令:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git status</span></pre></td></tr></tbody></table></figure><p>可以看到:</p><p><img alt="git status" data-src="http://i.imgur.com/qjPyvXb.png" class="lazyload"></p><p>加上<code>-sb</code>选项:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git status -sb</span></pre></td></tr></tbody></table></figure><p>这会得到:</p><p><img alt="git status -sb" data-src="http://i.imgur.com/K0OY3nm.png" class="lazyload"></p><p><a href="http://git-scm.com/docs/git-status" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解 Git <code>status</code> 命令.</em></a></p><h3 id="美化-Git-Log"><a href="#美化-Git-Log" class="headerlink" title="美化 Git Log"></a>美化 Git Log</h3><p>输入如下命令:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --all --graph --pretty=format:<span class="string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit --date=relative</span></pre></td></tr></tbody></table></figure><p>可以看到:</p><p><img alt="git log --all --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative" data-src="http://i.imgur.com/58eOtkW.png" class="lazyload"></p><p>这要归功于 <a href="http://stackoverflow.com/users/88355/palesz" target="_blank" rel="external nofollow noreferrer noopener">Palesz</a> 在 stackoverflow 的回答。</p><p><em>这个命令可以被用作别名，详细做法见<a href="#git%E5%91%BD%E4%BB%A4%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%AB%E5%90%8D">这里</a>。</em></p><p><a href="http://git-scm.com/docs/git-log" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解 Git <code>log</code> 命令.</em></a></p><h3 id="Git-查询"><a href="#Git-查询" class="headerlink" title="Git 查询"></a>Git 查询</h3><p>Git 查询运行你在之前的所有提交信息里进行搜索，找到其中和搜索条件相匹配的最近的一条。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git show :/query</span></pre></td></tr></tbody></table></figure><p>这里 <code>query</code> （区别大小写）是你想要搜索的词语， 这条命令会找到包含这个词语的最后那个提交并显示变动详情。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git show :/typo</span></pre></td></tr></tbody></table></figure><p><img alt="git show :/query" data-src="http://i.imgur.com/icaGiNt.png" class="lazyload"></p><ul><li>按 <code>q</code> 键退出命令。*</li></ul><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>输入命令:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git branch --merged</span></pre></td></tr></tbody></table></figure><p>这会显示所有已经合并到你当前分支的分支列表。</p><p>相反地：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git branch --no-merged</span></pre></td></tr></tbody></table></figure><p>会显示所有还没有合并到你当前分支的分支列表。</p><p><a href="http://git-scm.com/docs/git-branch" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解 Git <code>branch</code> 命令.</em></a></p><h3 id="修复有问题的提交以及自动合并"><a href="#修复有问题的提交以及自动合并" class="headerlink" title="修复有问题的提交以及自动合并"></a>修复有问题的提交以及自动合并</h3><p>如果上一个或多个提交包含了错误，可以在你修复问题后使用下列命令处理（假设要修复的提交版本是<code>abcde</code>）：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git commit --fixup=abcde</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ git rebase abcde^ --autosquash -i</span></pre></td></tr></tbody></table></figure><p><a href="http://git-scm.com/docs/git-commit" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解 Git <code>commit</code> 命令.</em></a><br><a href="http://git-scm.com/docs/git-rebase" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解 Git <code>rebase</code> 命令.</em></a></p><h3 id="以网站方式查看本地仓库"><a href="#以网站方式查看本地仓库" class="headerlink" title="以网站方式查看本地仓库"></a>以网站方式查看本地仓库</h3><p>使用 Git 的 <code>instaweb</code> 可以立即在 <code>gitweb</code> 中浏览你的工作仓库。这个命令是个简单的脚本，配置了 <code>gitweb</code> 和用来浏览本地仓库的Web服务器。<em>（译者注：默认需要lighttpd支持）</em></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git instaweb</span></pre></td></tr></tbody></table></figure><p>执行后打开：</p><p><img alt="Git instaweb" data-src="http://i.imgur.com/Dxekmqc.png" class="lazyload"></p><p><a href="http://git-scm.com/docs/git-instaweb" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解 Git <code>instaweb</code> 命令.</em></a></p><h3 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h3><p>所有 Git 配置都保存在你的 <code>.gitconfig</code> 文件中。</p><h4 id="Git-命令自定义别名"><a href="#Git-命令自定义别名" class="headerlink" title="Git 命令自定义别名"></a>Git 命令自定义别名</h4><p>别名用来帮助你定义自己的 git 命令。比如你可以定义 <code>git a</code> 来运行 <code>git add --all</code>。</p><p>要添加一个别名， 一种方法是打开 <code>~/.gitconfig</code> 文件并添加如下内容：</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[alias]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">co</span> = checkout</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">cm</span> = commit</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">p</span> = push</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># Show verbose output about tags, branches or remotes</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">tags</span> = tag -l</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">branches</span> = branch -a</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">remotes</span> = remote -v</span></pre></td></tr></tbody></table></figure><p>…或者在命令行里键入：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git config --global alias.new_alias git_function</span></pre></td></tr></tbody></table></figure><p>例如：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git config --global alias.cm commit</span></pre></td></tr></tbody></table></figure><p>指向多个命令的别名可以用引号来定义：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git config --global alias.ac <span class="string">'add -A . &amp;&amp; commit'</span></span></pre></td></tr></tbody></table></figure><p>下面列出了一些有用的别名：</p><table><thead><tr><th>别名 Alias</th><th>命令 Command</th><th>如何设置 What to Type</th></tr></thead><tbody><tr><td><code>git cm</code></td><td><code>git commit</code></td><td><code>git config --global alias.cm commit</code></td></tr><tr><td><code>git co</code></td><td><code>git checkout</code></td><td><code>git config --global alias.co checkout</code></td></tr><tr><td><code>git ac</code></td><td><code>git add . -A</code> <code>git commit</code></td><td><code>git config --global alias.ac '!git add -A &amp;&amp; git commit'</code></td></tr><tr><td><code>git st</code></td><td><code>git status -sb</code></td><td><code>git config --global alias.st 'status -sb'</code></td></tr><tr><td><code>git tags</code></td><td><code>git tag -l</code></td><td><code>git config --global alias.tags 'tag -l'</code></td></tr><tr><td><code>git branches</code></td><td><code>git branch -a</code></td><td><code>git config --global alias.branches 'branch -a'</code></td></tr><tr><td><code>git cleanup</code></td><td><code>git branch --merged | grep -v '*' | xargs git branch -d</code></td><td><code>git config --global alias.cleanup "!git branch --merged | grep -v '*' | xargs git branch -d"</code></td></tr><tr><td><code>git remotes</code></td><td><code>git remote -v</code></td><td><code>git config --global alias.remotes 'remote -v'</code></td></tr><tr><td><code>git lg</code></td><td><code>git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --</code></td><td><code>git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --"</code></td></tr></tbody></table><h4 id="自动更正"><a href="#自动更正" class="headerlink" title="自动更正"></a>自动更正</h4><p>如果键入 <code>git comit</code> 你会看到如下输出：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git comit -m <span class="string">"Message"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># git: 'comit' is not a git command. See 'git --help'.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Did you mean this?</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#   commit</span></span></pre></td></tr></tbody></table></figure><p>为了在键入 <code>comit</code> 调用 <code>commit</code>命令，只需启用自动纠错功能：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git config --global help.autocorrect 1</span></pre></td></tr></tbody></table></figure><p>现在你就会看到：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git comit -m <span class="string">"Message"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># WARNING: You called a Git command named 'comit', which does not exist.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Continuing under the assumption that you meant 'commit'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># in 0.1 seconds automatically...</span></span></pre></td></tr></tbody></table></figure><h4 id="颜色输出"><a href="#颜色输出" class="headerlink" title="颜色输出"></a>颜色输出</h4><p>要在你的 Git 命令输出里加上颜色的话，可以用如下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git config --global color.ui 1</span></pre></td></tr></tbody></table></figure><p><a href="http://git-scm.com/docs/git-config" target="_blank" rel="external nofollow noreferrer noopener"><em>进一步了解 Git <code>config</code> 命令.</em></a></p><h3 id="Git-资源"><a href="#Git-资源" class="headerlink" title="Git 资源"></a>Git 资源</h3><table><thead><tr><th>Title</th><th>Link</th></tr></thead><tbody><tr><td>Official Git Site</td><td><a href="http://git-scm.com/" target="_blank" rel="external nofollow noreferrer noopener">http://git-scm.com/</a></td></tr><tr><td>Official Git Video Tutorials</td><td><a href="http://git-scm.com/videos" target="_blank" rel="external nofollow noreferrer noopener">http://git-scm.com/videos</a></td></tr><tr><td>Code School Try Git</td><td><a href="http://try.github.com/" target="_blank" rel="external nofollow noreferrer noopener">http://try.github.com/</a></td></tr><tr><td>Introductory Reference &amp; Tutorial for Git</td><td><a href="http://gitref.org/" target="_blank" rel="external nofollow noreferrer noopener">http://gitref.org/</a></td></tr><tr><td>Official Git Tutorial</td><td><a href="http://git-scm.com/docs/gittutorial" target="_blank" rel="external nofollow noreferrer noopener">http://git-scm.com/docs/gittutorial</a></td></tr><tr><td>Everyday Git</td><td><a href="http://git-scm.com/docs/everyday" target="_blank" rel="external nofollow noreferrer noopener">http://git-scm.com/docs/everyday</a></td></tr><tr><td>Git Immersion</td><td><a href="http://gitimmersion.com/" target="_blank" rel="external nofollow noreferrer noopener">http://gitimmersion.com/</a></td></tr><tr><td>Git for Computer Scientists</td><td><a href="http://eagain.net/articles/git-for-computer-scientists/" target="_blank" rel="external nofollow noreferrer noopener">http://eagain.net/articles/git-for-computer-scientists/</a></td></tr><tr><td>Git Magic</td><td><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/" target="_blank" rel="external nofollow noreferrer noopener">http://www-cs-students.stanford.edu/~blynn/gitmagic/</a></td></tr><tr><td>GitHub Training Kit</td><td><a href="http://training.github.com/kit" target="_blank" rel="external nofollow noreferrer noopener">http://training.github.com/kit</a></td></tr><tr><td>Git Visualization Playground</td><td><a href="http://onlywei.github.io/explain-git-with-d3/#freeplay" target="_blank" rel="external nofollow noreferrer noopener">http://onlywei.github.io/explain-git-with-d3/#freeplay</a></td></tr></tbody></table><h4 id="Git-参考书籍"><a href="#Git-参考书籍" class="headerlink" title="Git 参考书籍"></a>Git 参考书籍</h4><table><thead><tr><th>Title</th><th>Link</th></tr></thead><tbody><tr><td>Pragmatic Version Control Using Git</td><td><a href="http://www.pragprog.com/titles/tsgit/pragmatic-version-control-using-git" target="_blank" rel="external nofollow noreferrer noopener">http://www.pragprog.com/titles/tsgit/pragmatic-version-control-using-git</a></td></tr><tr><td>Pro Git</td><td><a href="http://git-scm.com/book" target="_blank" rel="external nofollow noreferrer noopener">http://git-scm.com/book</a></td></tr><tr><td>Git Internals Pluralsight</td><td><a href="https://github.com/pluralsight/git-internals-pdf" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/pluralsight/git-internals-pdf</a></td></tr><tr><td>Git in the Trenches</td><td><a href="http://cbx33.github.com/gitt/" target="_blank" rel="external nofollow noreferrer noopener">http://cbx33.github.com/gitt/</a></td></tr><tr><td>Version Control with Git</td><td><a href="http://www.amazon.com/Version-Control-Git-collaborative-development/dp/1449316387" target="_blank" rel="external nofollow noreferrer noopener">http://www.amazon.com/Version-Control-Git-collaborative-development/dp/1449316387</a></td></tr><tr><td>Pragmatic Guide to Git</td><td><a href="http://www.pragprog.com/titles/pg_git/pragmatic-guide-to-git" target="_blank" rel="external nofollow noreferrer noopener">http://www.pragprog.com/titles/pg_git/pragmatic-guide-to-git</a></td></tr><tr><td>Git: Version Control for Everyone</td><td><a href="http://www.packtpub.com/git-version-control-for-everyone/book" target="_blank" rel="external nofollow noreferrer noopener">http://www.packtpub.com/git-version-control-for-everyone/book</a></td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GitHub秘籍&quot;&gt;&lt;a href=&quot;#GitHub秘籍&quot; class=&quot;headerlink&quot; title=&quot;GitHub秘籍 &quot;&gt;&lt;/a&gt;GitHub秘籍 &lt;a href=&quot;https://github.com/sindresorhus/awesome&quot; ta
      
    
    </summary>
    
    
      <category term="GitHub" scheme="http://notes.seirhsiao.com/categories/GitHub/"/>
    
    
      <category term="指南" scheme="http://notes.seirhsiao.com/tags/%E6%8C%87%E5%8D%97/"/>
    
      <category term="git" scheme="http://notes.seirhsiao.com/tags/git/"/>
    
      <category term="翻译" scheme="http://notes.seirhsiao.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="github" scheme="http://notes.seirhsiao.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Clojure学习 —— 安装与配置</title>
    <link href="http://notes.seirhsiao.com/posts/9f994d38/"/>
    <id>http://notes.seirhsiao.com/posts/9f994d38/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:35:32.990Z</updated>
    
    <content type="html"><![CDATA[<p>Clojure（发音类似”closure”，[‘kləʊʒə(r)]）是一套现代的Lisp语言的动态语言版，它是一个函数式多用途的语言，其语法和其他的Lisp一样，都是建立在 S-expression 上，即”全是括号，前缀表达式”的语言。</p><p>Clojure可以执行于Java虚拟机（JVM）、通用语言运行时（CLR），以及JavaScript引擎之上。与其他Lisp一样，Clojure认为代码即数据，同时有复杂的宏系统。</p><p>Clojure 是完全的，真正意义上的神圣的lisp语言的一个方言。Clojure高速、干净、具有优先能力和优雅的特征. 但是没有改变lisp中 “代码也是数据” 的哲学.</p><a id="more"></a><h2 id="一、clojure下载及安装"><a href="#一、clojure下载及安装" class="headerlink" title="一、clojure下载及安装"></a>一、clojure下载及安装</h2><ul><li><strong>官方的入门指南：</strong><br><a href="http://clojure.org/getting_started" target="_blank" rel="external nofollow noreferrer noopener">http://clojure.org/getting_started</a></li><li>下<strong>载clojure：</strong><br>（注：由于clojure运行在jvm之上，并且需要jdk1.5以上的版本）</li></ul><p>稳定版下载地址（1.5.1）：<br><a href="http://repo1.maven.org/maven2/org/clojure/clojure/1.5.1/clojure-1.5.1.zip" target="_blank" rel="external nofollow noreferrer noopener">http://repo1.maven.org/maven2/org/clojure/clojure/1.5.1/clojure-1.5.1.zip</a></p><p>低版本下载地址：<br><a href="http://clojure.org/downloads_older" target="_blank" rel="external nofollow noreferrer noopener">http://clojure.org/downloads_older</a></p><p>Cloure在Ubuntu下安装，只要简单的一条命令：  </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo apt-get install clojure</span></pre></td></tr></tbody></table></figure><p>Clojure启动： clojure 或 /usr/bin/clojure  （Ctrl + D 退出）</p><ul><li><strong>运行环境：</strong><br>将下载的zip文件解压，放到某个指定目录，如D:/work/clojure<br>cd进入这个目录，执行以下命令即可</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">java -cp clojure-1.5.1.jar clojure.main</span></pre></td></tr></tbody></table></figure><p>如：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">D:\work\clojure&gt;java -cp clojure-1.5.0.jar clojure.main  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Clojure 1.5.1 </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">user=&gt; (+ 1 2 3)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">6  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">user=&gt;</span></pre></td></tr></tbody></table></figure><h2 id="二、项目构建工具lein安装"><a href="#二、项目构建工具lein安装" class="headerlink" title="二、项目构建工具lein安装"></a>二、项目构建工具lein安装</h2><p>Leiningen是一个用于自动化（构建）clojure项目的工具。<br>它可以做到：</p><ul><li>创建新项目</li><li>管理你的项目的依赖关系</li><li>运行测试</li><li>运行一个REPL(读取-求值-打印循环:read-eval-print loop)</li><li>编译java源码</li><li>运行项目</li><li>为项目产生一个Maven风格的POM文件</li><li>为了部署，编译和打包项目</li><li>发布类库到Maven仓库，例如Clojars</li><li>运行Clojure编写的自定义的自动化任务（称为Leiningen插件）</li></ul><p>具体可以查看国内的大牛(killme2008)翻译的<a href="http://wiki.fnil.net/index.php?title=Leiningen_tutorial%E4%B8%AD%E6%96%87%E7%89%88" target="_blank" rel="external nofollow noreferrer noopener">Leiningen教程中文版</a>的详细介绍。  </p><p>1.第一种方式，手工配置</p><ul><li><p>下载 <a href="http://leiningen.org/" target="_blank" rel="external nofollow noreferrer noopener">leiningen</a> 的 依赖jar<br>从 <a href="https://github.com/technomancy/leiningen/downloads" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/technomancy/leiningen/downloads</a> 下载 leiningen-2.5.1-standalone.jar</p></li><li><p>下载windows下启动lein的脚本<br><a href="https://raw.github.com/technomancy/leiningen/preview/bin/lein.bat" target="_blank" rel="external nofollow noreferrer noopener">https://raw.github.com/technomancy/leiningen/preview/bin/lein.bat</a></p></li><li><p>更改配置信息<br>把前两步骤下载的文件分别放入：D:\work\leiningen目录，并修改lein的脚本，增加配置信息：</p></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> LEIN_HOME=D:\work\leiningen</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> LEIN_JAR=D:\work\leiningen\leiningen-2.5.1-standalone.jar</span></pre></td></tr></tbody></table></figure><p>(或者在环境变量中配置这两个属性)</p><ul><li><p>执行脚本<br>打开cmd，进入到leiningen目录，执行lein.bat</p></li><li><p>环境变量配置</p></li></ul><p>修改环境变量，把leiningen目录添加到path属性中。<br>重新开启cmd，执行lein version，如果能看到lein的版本号，表示安装成功。接着可以打开clojure的repl环境，执行命令：lein repl即可。</p><p>验证下安装成果： 在命令窗口中输入lein repl ，会自动连上nREPL server，进入repl模式，如下所示：</p><figure class="highlight clojure-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;lein repl</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">nREPL server started on port 21515</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">REPL-y 0.2.0</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">Clojure 1.5.1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    Docs: (doc function-name-here)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">          (find-doc "part-of-name-here")</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  Source: (source function-name-here)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"> Javadoc: (javadoc java-object-or-class-here)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    Exit: Control+D or (exit) or (quit)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="meta">user=&gt;</span></span></pre></td></tr></tbody></table></figure><p>2.第二种方式，self installs </p><ul><li>下载lein script (或Windows上 lein.bat)</li><li>把lein加入下当前的$path下（eg. ~/bin）</li><li>unix/linux下需赋可执行权限 （chmod 755 ~/bin/lein）</li><li>接下来，打开命令窗口，输入命令：lein self-install。<br>它会自动去github项目中，下载lein依赖，并创建和放置到与lein script同级 self-install目录中。</li></ul><p>3.第三种方式，下载打包好的安装包<br>windows：</p><ul><li>可以直接下载打包好的文件，地址是：Leiningen for windows[<a href="http://leiningen-win-installer.djpowell.net/]" target="_blank" rel="external nofollow noreferrer noopener">http://leiningen-win-installer.djpowell.net/]</a></li><li>点击下载好的*.exe文件进行安装</li><li>安装好后，可以查看环境变量中会有相应的变量被设置好了：</li></ul><p>其他系统：<br>参考leiningen github上的<a href="https://github.com/technomancy/leiningen/wiki/Packaging" target="_blank" rel="external nofollow noreferrer noopener">wiki</a></p><h2 id="三、相关开发工具"><a href="#三、相关开发工具" class="headerlink" title="三、相关开发工具"></a>三、相关开发工具</h2><p>1.<a href="http://updatesite.ccw-ide.org/stable/" target="_blank" rel="external nofollow noreferrer noopener">CounterClockwise</a>（Eclipse插件）<br>下载地址：<a href="http://ccw.cgrand.net/updatesite/" target="_blank" rel="external nofollow noreferrer noopener">http://ccw.cgrand.net/updatesite/</a><br>2.<a href="https://github.com/arthuredelstein/clooj/" target="_blank" rel="external nofollow noreferrer noopener">Clooj</a><br>下载地址：<a href="https://github.com/arthuredelstein/clooj/downloads" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/arthuredelstein/clooj/downloads</a><br>下载后，直接右键选择打开方式为java platform se binary即可<br>3.<a href="https://www.gnu.org/software/emacs/" target="_blank" rel="external nofollow noreferrer noopener">Emacs</a><br>下载地址：<a href="https://code.google.com/p/emacs-for-windows/updates/list" target="_blank" rel="external nofollow noreferrer noopener">https://code.google.com/p/emacs-for-windows/updates/list</a><br>压缩包解压到本地路径。<br>安装Clojure插件<a href="https://github.com/jochu/clojure-mode" target="_blank" rel="external nofollow noreferrer noopener">clojure-mode</a><br>下载地址：<a href="https://github.com/jochu/clojure-mode" target="_blank" rel="external nofollow noreferrer noopener">https://github.com/jochu/clojure-mode</a></p><h2 id="四、参考指南"><a href="#四、参考指南" class="headerlink" title="四、参考指南"></a>四、参考指南</h2><p><a href="http://clojure.org/getting_started" target="_blank" rel="external nofollow noreferrer noopener">Clojure Quick Start</a></p><p><a href="http://clojure.org/" target="_blank" rel="external nofollow noreferrer noopener">Clojure 官方</a></p><p><a href="https://github.com/clojure/clojure" target="_blank" rel="external nofollow noreferrer noopener">Clojure 源码（github）</a></p><p><a href="http://leiningen.org/" target="_blank" rel="external nofollow noreferrer noopener">Leiningen 官方</a></p><p><a href="https://github.com/technomancy/leiningen" target="_blank" rel="external nofollow noreferrer noopener">Leiningen 源码（github）</a></p><p><a href="http://dead-knight.iteye.com/blog/1827059" target="_blank" rel="external nofollow noreferrer noopener">clojure-运行环境安装</a></p><p><a href="http://www.blogjava.net/javalinjx/archive/2013/07/03/401170.html" target="_blank" rel="external nofollow noreferrer noopener">使用leiningen搭建clojure开发环境</a></p><p><a href="http://www.cnblogs.com/darkluck99/archive/2012/02/20/2360216.html" target="_blank" rel="external nofollow noreferrer noopener">Window7下配置Clojure+Emacs</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Clojure（发音类似”closure”，[‘kləʊʒə(r)]）是一套现代的Lisp语言的动态语言版，它是一个函数式多用途的语言，其语法和其他的Lisp一样，都是建立在 S-expression 上，即”全是括号，前缀表达式”的语言。&lt;/p&gt;
&lt;p&gt;Clojure可以执行于Java虚拟机（JVM）、通用语言运行时（CLR），以及JavaScript引擎之上。与其他Lisp一样，Clojure认为代码即数据，同时有复杂的宏系统。&lt;/p&gt;
&lt;p&gt;Clojure 是完全的，真正意义上的神圣的lisp语言的一个方言。Clojure高速、干净、具有优先能力和优雅的特征. 但是没有改变lisp中 “代码也是数据” 的哲学.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="leigingen" scheme="http://notes.seirhsiao.com/tags/leigingen/"/>
    
  </entry>
  
  <entry>
    <title>SSH 学习</title>
    <link href="http://notes.seirhsiao.com/posts/24b791e0/"/>
    <id>http://notes.seirhsiao.com/posts/24b791e0/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-08T14:11:06.171Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、SSH简介"><a href="#一、SSH简介" class="headerlink" title="一、SSH简介"></a>一、SSH简介</h3><p>SSH是一个专为远程登录会话和其他网络服务提供安全性的协议。<br>默认状态下SSH链接是需要密码认证的，可以通过添加系统认证（即公钥-私钥）的修改，修改后系统间切换可以避免密码输入和SSH认证。</p><p>SSH 密钥对可以让用户无需输入密码即可登录到 SSH 服务器中。由于登录的过程不需要密码，因此可以防止由于密码被拦截、破解造成的账户密码泄露。再加上密码短语(<code>passphrase</code>)的使用，使得 SSH 的安全性更高一层。</p><p>SSH 密钥对总是一把公钥、一把私钥的成对出现；公钥可以自由的添加到远程 SSH 服务器中用来验证用户是否合法；私钥相当于自己的身份认证，需要妥善保存不能泄露。</p><a id="more"></a><h3 id="二、公钥认证的基本思想："><a href="#二、公钥认证的基本思想：" class="headerlink" title="二、公钥认证的基本思想："></a>二、公钥认证的基本思想：</h3><p>对信息的加密和解密采用不同的key，这对key分别称作private key和public key，其中，public key存放在欲登录的服务器上，而private key为特定的客户机所持有。</p><p>当客户机向服务器发出建立安全连接的请求时，首先发送自己的public key，如果这个public key是被服务器所允许的，服务器就发送一个经过public key加密的随机数据给客户机，这个数据只能通过private key解密，客户机将解密后的信息发还给服务器，服务器验证正确后即确认客户机是可信任的，从而建立起一条安全的信息通道。</p><p>通过这种方式，客户机不需要向外发送自己的身份标志“private key”即可达到校验的目的，并且private key是不能通过public key反向推断出来的。这避免了网络窃听可能造成的密码泄露。客户机需要小心的保存自己的private key，以免被其他人窃取，一旦这样的事情发生，就需要各服务器更换受信的public key列表。</p><p>SSH 密钥的其使用原理很简单：用户将公钥添加到远程主机中，登录的时候，远程主机会向用户发送一段随即字符串，用户使用自己的私钥加密后，再发送到远程主机。远程主机使用本地存储的公钥进行解密，如果成功，证明用户时可信的，直接允许登录 shell ，不再要求密码。这样就保证了整个登录过程的安全，防止了中间人攻击。</p><h3 id="三、实验网络拓扑图和实验目的"><a href="#三、实验网络拓扑图和实验目的" class="headerlink" title="三、实验网络拓扑图和实验目的"></a>三、实验网络拓扑图和实验目的</h3><ul><li><p>1、网络拓扑图<br>如下所示：<br><img alt="ssh" data-src="/static/images/linux/ssh.jpg" class="lazyload"></p></li><li><p>2、实现目的<br>服务器1，服务器2，服务器3能实现彼此无密码登录。</p></li><li><p>3、补充说明<br>Linux下修改主机名的完整步骤如下：</p></li></ul><blockquote><ul><li>第一步：</li></ul></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hostname Server1</span></pre></td></tr></tbody></table></figure><blockquote><ul><li>第二步：</li></ul></blockquote><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">修改<span class="regexp">/etc/</span>sysconfig<span class="regexp">/network中的hostname</span></span></pre></td></tr></tbody></table></figure><blockquote><ul><li>第三步：</li></ul></blockquote><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">修改<span class="regexp">/etc/</span>hosts文件</span></pre></td></tr></tbody></table></figure><h3 id="四、无密码登录实现方式"><a href="#四、无密码登录实现方式" class="headerlink" title="四、无密码登录实现方式"></a>四、无密码登录实现方式</h3><h4 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h4><h5 id="ssh-keygen-命令"><a href="#ssh-keygen-命令" class="headerlink" title="ssh-keygen 命令"></a>ssh-keygen 命令</h5><p>我们可以使用 <em>ssh-keygen</em> 命令来生成密钥对：</p><pre><code>$ ssh-keygen -t ecdsa -b 521 -C "$(whoami)@$(hostname)-$(date -I)"Generating public/private ecdsa key pair.Enter file in which to save the key (/home/username/.ssh/id_ecdsa):Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /home/username/.ssh/id_ecdsa.Your public key has been saved in /home/username/.ssh/id_ecdsa.pub.The key fingerprint is:dd:15:ee:24:20:14:11:01:b8:72:a2:0f:99:4c:79:7f username@localhost-2015-03-08The key's randomart image is:+--[ECDSA  521]---+|     ..oB=.   .  ||    .    . . . . ||  .  .      . +  || oo.o    . . =   ||o+.+.   S . . .  ||=.   . E         || o    .          ||  .              ||                 |+-----------------+</code></pre><p>其中可使用 <em>-t</em> 指定加密算法，使用 <em>-b</em> 自定生成密钥长度，使用 <em>-C</em> 添加密钥对的说明comment。生成的密钥对默认存储在用户目录下的 <em>.ssh</em> 目录中，私钥默认名称为 <em>id_**** (即 id_ + 加密算法名称)。还可以使用 *-f</em> 指定生成的私钥存储的文件全路径名称；也可以不使用 <em>-f</em> 指定密钥文件路径，在密钥的创建过程中还会提示用户输入密钥文件全路径名称。私钥对应的公钥文件为<em>私钥文件全名称 + .pub</em>。</p><p>上面例子中创建了一对长度为512位的椭圆加密算法(ECDSA)加密的密钥对。创建 SSH 密钥对可选择多种加密算法，例如 <em>RSA</em> 、 <em>DSA</em> 、 <em>ECDSA</em> 等。</p><p>1.用ssh-keygen创建公钥</p><ul><li><p>（1）在服务器1上执行下面的命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[root@Server1 ~]<span class="comment"># ssh-keygen -t rsa  -c "email@gmail.com"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key(/root/.ssh/id_rsa):  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">Created directory <span class="string">'/root/.ssh'</span>.  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">Enter same passphrase again:  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span>/root/.ssh/id_rsa.  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">Your public key has been saved <span class="keyword">in</span>/root/.ssh/id_rsa.pub.  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">The key fingerprint is:  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">7b:aa:08:a0:99:<span class="built_in">fc</span>:d9:cc:d8:2e:4b:1a:c0:6b:da:e4root@Server1  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">The key<span class="string">'s randomart image is:  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="string">+--[ RSA 2048]----+  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="string">| |  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="string">| |  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="string">| |  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="string">|. |  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="string">|o. S |  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="string">|++. . |  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="string">|+=o. . . |  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="string">|o+=oB. o |  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="string">|..E==*... |  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="string">+-----------------+</span></span></pre></td></tr></tbody></table></figure><p>输入后，会提示创建.ssh/id_rsa、id_rsa.pub的文件，其中第一个为密钥，第二个为公钥。过程中会要求输入密码，为了ssh访问过程无须密码，可以直接回车 。</p></li><li><p>（2）补充说明：<br>ssh-keygen:生成秘钥<br>其中：<br>-t指定算法<br>-f 指定生成秘钥路径<br>-N 指定密码</p></li></ul><p>2.查看钥匙</p><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>Server1 ~]# ls -l .ssh  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">总用量 <span class="number">8</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">1675</span> <span class="number">12</span>月 <span class="number">10</span> <span class="number">22</span>:<span class="number">20</span> id_rsa  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">394</span> <span class="number">12</span>月 <span class="number">10</span> <span class="number">22</span>:<span class="number">20</span> id_rsa.pub</span></pre></td></tr></tbody></table></figure><p>   可以发现 ssh目录下的两枚钥匙。</p><p>3.将公钥复制到被管理机器Server2和Server3下的.ssh目录下（先确保存在这个目录）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[root@server1 .ssh]<span class="comment"># scp id_rsa.pubroot@192.168.1.3:~/.ssh/  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'192.168.1.3(192.168.1.3)'</span> can<span class="string">'t be established.  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="string">RSA key fingerprint is93:eb:f9:47:b1:f6:3f:b4:2e:21:c3:d5:ab:1d:ae:65.  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="string">Are you sure you want to continueconnecting (yes/no)? yes  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="string">Warning: Permanently added '</span>192.168.1.3<span class="string">'(RSA) to the list of known hosts.  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="string">root@192.168.1.3'</span>s password:  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">id_rsa.pub   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">[root@server1 .ssh]<span class="comment"># scp id_rsa.pubroot@192.168.1.4:~/.ssh/authorized_keys  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'192.168.1.4(192.168.1.4)'</span> can<span class="string">'t be established.  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="string">RSA key fingerprint is93:eb:f9:47:b1:f6:3f:b4:2e:21:c3:d5:ab:1d:ae:65.  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="string">Are you sure you want to continueconnecting (yes/no)? yes  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="string">Warning: Permanently added '</span>192.168.1.4<span class="string">'(RSA) to the list of known hosts.  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="string">root@192.168.1.4'</span>s password:  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">id_rsa.pub</span></pre></td></tr></tbody></table></figure><p>到Server2和Server3目录下执行下面的命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cat id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</span></pre></td></tr></tbody></table></figure><p>4.设置文件和目录权限：<br>设置authorized_keys权限</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ chmod 600 authorized_keys</span></pre></td></tr></tbody></table></figure><p>设置.ssh目录权限</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ chmod 700 -R .ssh</span></pre></td></tr></tbody></table></figure><p>5.验证使用SSH IP地址的方式无密码访问</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[root@server1 .ssh]<span class="comment"># ssh 192.168.1.3  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Last login: Tue Dec 10 22:34:02 2013</span></pre></td></tr></tbody></table></figure><p>6.主机名的方式无密码访问<br>我们在Server1上将Server2和Server3的IP地址解析为主机名</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[root@server1 .ssh]<span class="comment"># cat /etc/hosts  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">192.168.1.2 Server1  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">192.168.1.3 Server2  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">192.168.1.4 Server3</span></pre></td></tr></tbody></table></figure><p>我们试试下面这种ssh登录方式：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[root@server1 .ssh]<span class="comment"># ssh Server3  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'server3(192.168.1.4)'</span> can<span class="string">'t be established.  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="string">RSA key fingerprint is93:eb:f9:47:b1:f6:3f:b4:2e:21:c3:d5:ab:1d:ae:65.  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="string">Are you sure you want to continueconnecting (yes/no)? yes  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="string">Warning: Permanently added '</span>server3<span class="string">' (RSA)to the list of known hosts.  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="string">Last login: Tue Dec 10 22:34:08 2013</span></span></pre></td></tr></tbody></table></figure><h4 id="密码短语-Passphras"><a href="#密码短语-Passphras" class="headerlink" title="密码短语(Passphras)"></a>密码短语(Passphras)</h4><p>密码短语(<code>passphras</code>)是一连串的单词或文本组成，用来控制对电脑系统的访问。它的用法类似于密码(Password)，但是通常会比密码长度更长，这样就增加了破解的复杂度。密码短语不同于密码，它可以是有实际意义的一段话，便于用户记忆。</p><p>密码短语默认可以不创建，但是这会导致不安全性。私钥是未经加密存储在电脑上的，电脑遗失或被窃取后，任何人拿到你的私钥后都可以随意访问 SSH 服务器；另外，电脑的 <em>root</em> 用户有权限访问电脑上的任意文件，这也包括你的私钥文件。因此，为了提高安全性还是建议用户设置自己的密码短语。</p><p>已经生成的密钥对也可以修改密码短语。假设使用的是 RSA 加密的密钥对，存储到默认路径，输入以下命令即可：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssh-keygen -f ~/.ssh/id_rsa -p</span></span></pre></td></tr></tbody></table></figure><h4 id="SSH-agent"><a href="#SSH-agent" class="headerlink" title="SSH agent"></a>SSH agent</h4><p><code>SSH agent</code> 是 <code>OpenSSH</code> 或其它 <code>SSH</code> 程序提供的一个程序，提供了存储私钥的安全方法。如果用户的私钥使用了密码短语来加密的话，那么每一次使用 SSH密钥进行登录时，都需要用户输入正确的的密钥短语。而 <code>SSH agent</code> 程序能够将已经解密的私钥缓存起来，在需要的时候提供给 <code>SSH</code> 客户端，这样用户只需要在将私钥加入 <code>SSH agent</code> 缓存的时候输入一次密码短语就可以了。</p><p>首先确保当前 <code>SSH agent</code> 可用：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># start the ssh-agent in the background</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Agent pid 29393</span></pre></td></tr></tbody></table></figure><h4 id="ssh-add"><a href="#ssh-add" class="headerlink" title="ssh-add"></a>ssh-add</h4><p>添加 SSH 密钥到 <code>SSH agent</code>：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Enter passphrase <span class="keyword">for</span> /home/username/.ssh/id_rsa:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Identity added: /home/username/.ssh/id_rsa (/home/username/.ssh/id_rsa)</span></pre></td></tr></tbody></table></figure><h4 id="查看-SSH-agent-缓存密钥列表："><a href="#查看-SSH-agent-缓存密钥列表：" class="headerlink" title="查看 SSH agent 缓存密钥列表："></a>查看 SSH agent 缓存密钥列表：</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ ssh-add -l</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">2048 b9:a7:f0:44:a5:47:79:a5:ff:9d:14:5c:d3:78:04:65 /home/username/.ssh/id_rsa (RSA)</span></pre></td></tr></tbody></table></figure><h4 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h4><p>将 SSH 公钥添加到 SSH 服务端后，就可以使用 SSH 来连接远程主机了。下面以 GitHub为例测试连接：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Hi username! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span></pre></td></tr></tbody></table></figure><p>这说明连接成功了。</p><h3 id="五、配置文件"><a href="#五、配置文件" class="headerlink" title="五、配置文件"></a>五、配置文件</h3><p><code>ssh</code>程序可以从以下途径获取配置参数：</p><ol><li>命令行选项</li><li>用户配置文件 (~/.ssh/config)</li><li>系统配置文件 (/etc/ssh/ssh_config)</li></ol><p>配置文件可分为多个配置区段，每个配置区段使用<code>Host</code>来区分。我们可以在命令行中输入不同的<code>host</code>来加载不同的配置段。</p><p>对每一个配置项来说，首次获取的参数值将被采用，因此通用的设置应该放到文件的后面，特定<code>host</code>相关的配置项应放到文件的前面。</p><h4 id="常用配置项"><a href="#常用配置项" class="headerlink" title="常用配置项"></a>常用配置项</h4><p>下面介绍一些常用的<code>SSH</code>配置项：</p><h4 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h4><p><code>Host</code>配置项标识了一个配置区段。</p><p><code>ssh</code>配置项参数值可以使用通配符：<code>*</code>代表0～n个非空白字符，<code>?</code>代表一个非空白字符，<code>!</code>表示例外通配。</p><p>我们可以在系统配置文件中看到一个匹配所有<code>host</code>的默认配置区段：</p><pre><code>$ cat /etc/ssh/ssh_config | grep '^Host'Host *</code></pre><p>这里有一些默认配置项，我们可以在用户配置文件中覆盖这些默认配置。</p><h4 id="GlobalKnownHostsFile"><a href="#GlobalKnownHostsFile" class="headerlink" title="GlobalKnownHostsFile"></a>GlobalKnownHostsFile</h4><p>指定一个或多个全局认证主机缓存文件，用来缓存通过认证的远程主机的密钥，多个文件用空格分隔。默认缓存文件为：/etc/ssh/ssh_known_hosts, /etc/ssh/ssh_known_hosts2.</p><h4 id="HostName"><a href="#HostName" class="headerlink" title="HostName"></a>HostName</h4><p>指定远程主机名，可以直接使用数字IP地址。如果主机名中包含 ‘%h’ ，则实际使用时会被命令行中的主机名替换。</p><h4 id="IdentityFile"><a href="#IdentityFile" class="headerlink" title="IdentityFile"></a>IdentityFile</h4><p>指定密钥认证使用的私钥文件路径。默认为 ~/.ssh/id_dsa, ~/.ssh/id_ecdsa, ~/.ssh/id_ed25519 或 ~/.ssh/id_rsa 中的一个。文件名称可以使用以下转义符：</p><pre><code>'%d' 本地用户目录'%u' 本地用户名称'%l' 本地主机名'%h' 远程主机名'%r' 远程用户名</code></pre><p>可以指定多个密钥文件，在连接的过程中会依次尝试这些密钥文件。</p><h4 id="Port"><a href="#Port" class="headerlink" title="Port"></a>Port</h4><p>指定远程主机端口号，默认为 22 。</p><h4 id="User"><a href="#User" class="headerlink" title="User"></a>User</h4><p>指定登录用户名。</p><h4 id="UserKnownHostsFile"><a href="#UserKnownHostsFile" class="headerlink" title="UserKnownHostsFile"></a>UserKnownHostsFile</h4><p>指定一个或多个用户认证主机缓存文件，用来缓存通过认证的远程主机的密钥，多个文件用空格分隔。默认缓存文件为： <code>~/.ssh/known_hosts</code>, <code>~/.ssh/known_hosts2</code>.</p><p>还有更多参数的介绍，可以参看用户手册：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ man ssh config</span></pre></td></tr></tbody></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>以下连接为例：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">SSH 服务器： ssh.test.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">端口号： 2200</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">账户： user</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">密钥文件： ~/.ssh/id_rsa_test</span></pre></td></tr></tbody></table></figure><h4 id="密码认证登录方式为："><a href="#密码认证登录方式为：" class="headerlink" title="密码认证登录方式为："></a>密码认证登录方式为：</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ ssh -p 2200 -i ~/.ssh/id_rsa_test user@ssh.test.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">user@ssh.test.com<span class="string">'s password:</span></span></pre></td></tr></tbody></table></figure><h4 id="密钥认证登录方式："><a href="#密钥认证登录方式：" class="headerlink" title="密钥认证登录方式："></a>密钥认证登录方式：</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id -i ~/.ssh/id_rsa_test user@ssh.test.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to <span class="built_in">log</span> <span class="keyword">in</span> with the new key(s), to filter out any that are already installed</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- <span class="keyword">if</span> you are prompted now it is to install the new keys</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">user@ssh.test.com<span class="string">'s password:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="string">Number of key(s) added: 1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="string">Now try logging into the machine, with:   "ssh '</span>user@ssh.test.com<span class="string">'"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="string">and check to make sure that only the key(s) you wanted were added.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="string">$ ssh user@ssh.test.com</span></span></pre></td></tr></tbody></table></figure><h4 id="使用配置文件方式"><a href="#使用配置文件方式" class="headerlink" title="使用配置文件方式"></a>使用配置文件方式</h4><p>有如下配置文件：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ vim ~/.ssh/config</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Host sshtest</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    HostName ssh.test.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    User user</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    Port 2200</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    IdentityFile ~/.ssh/id_rsa_test</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">Host ssttest2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    HostName ssh.test2.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    User user2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    Port 2345</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    IdentityFile ~/.ssh/id_rsa_test2</span></pre></td></tr></tbody></table></figure><p>使用配置文件登录：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ ssh sshtest</span></pre></td></tr></tbody></table></figure><h3 id="六、注意："><a href="#六、注意：" class="headerlink" title="六、注意："></a>六、注意：</h3><ul><li>1、文件和目录的权限千万别设置成chmod 777.这个权限太大了，不安全，数字签名也不支持。</li><li>2、生成的rsa/dsa签名的公钥是给对方机器使用的。这个公钥内容还要拷贝到authorized_keys</li><li>3、linux之间的访问直接 ssh 机器ip</li><li>4、某个机器生成自己的RSA或者DSA的数字签名，将公钥给目标机器，然后目标机器接收后设定相关权限（公钥和authorized_keys权限），这个目标机就能被生成数字签名的机器无密码访问了</li></ul><h3 id="七、参考："><a href="#七、参考：" class="headerlink" title="七、参考："></a>七、参考：</h3><p><a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external nofollow noreferrer noopener" title="generating ssh keys">Generating SSH keys</a><br>[Passphrase(维基百科)](<a href="http://en.wikipedia.org/wiki/Passphrase" target="_blank" rel="external nofollow noreferrer noopener">http://en.wikipedia.org/wiki/Passphrase</a> Passphrase)<br><a href https: wiki.archlinux.org index.php ssh_keys_(%e7%ae%80%e4%bd%93%e4%b8%ad%e6%96%87)"" title="SSH Keys(简体中文)">SSH Keys(简体中文)</a><br>[ssh-agent](<a href="http://en.wikipedia.org/wiki/Ssh-agent" target="_blank" rel="external nofollow noreferrer noopener">http://en.wikipedia.org/wiki/Ssh-agent</a> ssh-agent)<br>[Git多帐号配置](<a href="http://yeungeek.com/2014/06/26/Git%E5%A4%9A%E5%B8%90%E5%8F%B7%E9%85%8D%E7%BD%AE/" target="_blank" rel="external nofollow noreferrer noopener">http://yeungeek.com/2014/06/26/Git%E5%A4%9A%E5%B8%90%E5%8F%B7%E9%85%8D%E7%BD%AE/</a> Git多帐号配置)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、SSH简介&quot;&gt;&lt;a href=&quot;#一、SSH简介&quot; class=&quot;headerlink&quot; title=&quot;一、SSH简介&quot;&gt;&lt;/a&gt;一、SSH简介&lt;/h3&gt;&lt;p&gt;SSH是一个专为远程登录会话和其他网络服务提供安全性的协议。&lt;br&gt;默认状态下SSH链接是需要密码认证的，可以通过添加系统认证（即公钥-私钥）的修改，修改后系统间切换可以避免密码输入和SSH认证。&lt;/p&gt;
&lt;p&gt;SSH 密钥对可以让用户无需输入密码即可登录到 SSH 服务器中。由于登录的过程不需要密码，因此可以防止由于密码被拦截、破解造成的账户密码泄露。再加上密码短语(&lt;code&gt;passphrase&lt;/code&gt;)的使用，使得 SSH 的安全性更高一层。&lt;/p&gt;
&lt;p&gt;SSH 密钥对总是一把公钥、一把私钥的成对出现；公钥可以自由的添加到远程 SSH 服务器中用来验证用户是否合法；私钥相当于自己的身份认证，需要妥善保存不能泄露。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://notes.seirhsiao.com/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://notes.seirhsiao.com/tags/linux/"/>
    
      <category term="ssh" scheme="http://notes.seirhsiao.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>几分钟内学习 Clojure</title>
    <link href="http://notes.seirhsiao.com/posts/f1582a9d/"/>
    <id>http://notes.seirhsiao.com/posts/f1582a9d/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:35:22.460Z</updated>
    
    <content type="html"><![CDATA[<p>此处获取源码: <a href="http://learnxinyminutes.com/docs/files/learnclojure.clj" target="_blank" rel="external nofollow noreferrer noopener">learnclojure.clj</a></p><p>Clojure是JVM上的一个LISP语言变种。它比Common Lisp更强调纯<a href="https://en.wikipedia.org/wiki/Functional_programming" target="_blank" rel="external nofollow noreferrer noopener">函数式编程</a>，但提供了一些STM工具以处理它所引入的状态问题。</p><a id="more"></a><p>这个组合使并行处理更加简单，并且通常是自动的。</p><p>Clojure源码托管在：<a href="https://github.com/clojure/clojure" target="_blank" rel="external nofollow noreferrer noopener">clojure源码</a></p><p>在线练习编译环境： himera(<a href="http://himera.herokuapp.com/index.html" target="_blank" rel="external nofollow noreferrer noopener">http://himera.herokuapp.com/index.html</a>)</p><p>learnclojure.clj 示例：</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 分号作为注释的开始</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; Clojure 用一种把元素用括号括起来的像列表一样的方式来书写，元素之间用空格隔开</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; clojure 解释器会把第一个元素当做是函数或者宏调用，其他的都作为参数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 下面这个函数用于设置当前的命名空间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">ns</span></span> test)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 更多基本的例子：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; str 函数会用它所有的参数创造一个字符串</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">str</span></span> <span class="string">"Hello"</span> <span class="string">" "</span> <span class="string">"World"</span>) <span class="comment">; =&gt; "Hello World"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 数学运算很直观，不过是前缀表达式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">+</span></span> <span class="number">1</span> <span class="number">1</span>) <span class="comment">; =&gt; 2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">-</span></span> <span class="number">2</span> <span class="number">1</span>) <span class="comment">; =&gt; 1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">1</span> <span class="number">2</span>) <span class="comment">; =&gt; 2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">(/ <span class="number">2</span> <span class="number">1</span>) <span class="comment">; =&gt; 2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;  相等比较使用 “=”符号</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">=</span></span> <span class="number">1</span> <span class="number">1</span>) <span class="comment">; =&gt; true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">=</span></span> <span class="number">2</span> <span class="number">1</span>) <span class="comment">; =&gt; false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 你也不必担心逻辑运算</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">not</span></span> <span class="literal">true</span>) <span class="comment">; =&gt; false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 嵌套方式正如你预料的那样</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">+</span></span> <span class="number">1</span> (<span class="name"><span class="builtin-name">-</span></span> <span class="number">3</span> <span class="number">2</span>)) <span class="comment">; = 1 + (3 - 2) =&gt; 2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 类型系统</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;;;;;;;;;;;;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; Clojure 使用java对象类型来表示 布尔值、字符串和数字</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 使用 `class`函数来检测它们.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">class</span></span> <span class="number">1</span>) <span class="comment">; 整形字面值默认是java中的Long类型</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">class</span></span> <span class="number">1</span>.)<span class="comment">; 浮点字面值对应着java中的Double类型</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">class</span></span> <span class="string">""</span>)<span class="comment">; 字符串总是用双引号括起来,并且对应着java中的Sring类型</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">class</span></span> <span class="literal">false</span>) <span class="comment">;布尔值对应着java中的Boolean类型</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">class</span></span> <span class="literal">nil</span>)<span class="comment">; null值被称为 nil（英语含义：无、零点）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 如果你想创建一列数据字面值, 使用一个单引号 ' 来防表达式被解析执行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">'(+ 1 2) ; =&gt; (+ 1 2) ;这里没有返回3</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; (上面表达式和(quote (+ 1 2)) 等价，不过更简洁</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 你可以运算一个引用列表</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">eval</span></span> '(<span class="name"><span class="builtin-name">+</span></span> <span class="number">1</span> <span class="number">2</span>)) <span class="comment">; =&gt; 3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 集合和序列</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;;;;;;;;;;;;;;;;;;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 向量和列表也是java类哦！！</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">class</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>])<span class="comment">; =&gt; clojure.lang.PersistentVector</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">class</span></span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))<span class="comment">; =&gt; clojure.lang.PersistentList</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;书写一个列表形如(1 2 3)一样简单, 但是我们不得不把它“引”（前面加个单引号）起来</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;这样就能防止解释器把它当做一个函数来解析</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;另外，(list 1 2 3) 和 '(1 2 3) 等价</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;列表和向量都是集合:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">coll?</span></span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)) <span class="comment">; =&gt; true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">coll?</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]) <span class="comment">; =&gt; true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 只有列表是序列.（序列是有顺序的）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">seq?</span></span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)) <span class="comment">; =&gt; true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">seq?</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]) <span class="comment">; =&gt; false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 序列是列表一种逻辑上的接口,可以懒加载.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; "懒" 意味着可以定义无穷序列,就像下面一样:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">range</span></span> <span class="number">4</span>) <span class="comment">; =&gt; (0 1 2 3)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">range</span></span>) <span class="comment">; =&gt; (0 1 2 3 4 ...) (一个无穷序列)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">take</span></span> <span class="number">4</span> (<span class="name"><span class="builtin-name">range</span></span>)) <span class="comment">;  (0 1 2 3)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 使用cons 来追加一个元素到列表或者向量的头部</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">cons</span></span> <span class="number">4</span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]) <span class="comment">; =&gt; (4 1 2 3)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">cons</span></span> <span class="number">4</span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)) <span class="comment">; =&gt; (4 1 2 3)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 使用conj追加一个元素到列表的头部，或者向量的尾部,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">conj</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>] <span class="number">4</span>) <span class="comment">; =&gt; [1 2 3 4]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">conj</span></span> '(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>) <span class="number">4</span>) <span class="comment">; =&gt; (4 1 2 3)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 使用concat来连接列表和向量</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">concat</span></span> [<span class="number">1</span> <span class="number">2</span>] '(<span class="number">3</span> <span class="number">4</span>)) <span class="comment">; =&gt; (1 2 3 4)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 使用filter, map 来进行列表计算</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">map</span></span> inc [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]) <span class="comment">; =&gt; (2 3 4)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">filter</span></span> even? [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]) <span class="comment">; =&gt; (2)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 使用reduce 来进行化繁为简  （map/reduce 思想就来自于lisp）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">reduce</span></span> + [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; = (+ (+ (+ 1 2) 3) 4)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; =&gt; 10</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">93</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; Reduce 可以使用一个初始值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">94</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">reduce</span></span> conj [] '(<span class="number">3</span> <span class="number">2</span> <span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">95</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; = (conj (conj (conj [] 3) 2) 1)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">96</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; =&gt; [3 2 1]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">97</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">98</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">99</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;;;;;;;;;;;;;;;;;;;;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">100</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">101</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 使用fn来创建一个函数。所有的函数都有返回值，就是它的最后一个表达式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">102</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">fn</span></span> [] <span class="string">"Hello World"</span>) <span class="comment">; =&gt; fn</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">103</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">104</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; (你需要额外的括号去调用它)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">105</span></pre></td><td class="code"><pre><span class="line">((<span class="name"><span class="builtin-name">fn</span></span> [] <span class="string">"Hello World"</span>)) <span class="comment">; =&gt; "Hello World"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">106</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">107</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;你可以使用def来创建变量</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">108</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> x <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">109</span></pre></td><td class="code"><pre><span class="line">x ; =&gt; 1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">110</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">111</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 将函数赋值给一个变量</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">112</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> hello-world (<span class="name"><span class="builtin-name">fn</span></span> [] <span class="string">"Hello World"</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">113</span></pre></td><td class="code"><pre><span class="line">(<span class="name">hello-world</span>) <span class="comment">; =&gt; "Hello World"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">114</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">115</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 你可以使用defn来简化定义过程</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">116</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> hello-world [] <span class="string">"Hello World"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">117</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">118</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;[] 是函数的参数列表</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">119</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> hello [name]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">120</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"Hello "</span> name))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">121</span></pre></td><td class="code"><pre><span class="line">(<span class="name">hello</span> <span class="string">"Steve"</span>) <span class="comment">; =&gt; "Hello Steve"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">122</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">123</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 你也可以使用下面这种简写方式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">124</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> hello2 #(<span class="name"><span class="builtin-name">str</span></span> <span class="string">"Hello "</span> %<span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">125</span></pre></td><td class="code"><pre><span class="line">(<span class="name">hello2</span> <span class="string">"Fanny"</span>) <span class="comment">; =&gt; "Hello Fanny"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">126</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">127</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 你可以创建拥有可变参数的函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">128</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> hello3</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">129</span></pre></td><td class="code"><pre><span class="line">  ([] <span class="string">"Hello World"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">130</span></pre></td><td class="code"><pre><span class="line">  ([name] (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"Hello "</span> name)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">131</span></pre></td><td class="code"><pre><span class="line">(<span class="name">hello3</span> <span class="string">"Jake"</span>) <span class="comment">; =&gt; "Hello Jake"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">132</span></pre></td><td class="code"><pre><span class="line">(<span class="name">hello3</span>) <span class="comment">; =&gt; "Hello World"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">133</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">134</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 函数允许将参数打包成列表 （有点类似python中的*）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">135</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> count-args [&amp; args]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">136</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"You passed "</span> (<span class="name"><span class="builtin-name">count</span></span> args) <span class="string">" args: "</span> args))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">137</span></pre></td><td class="code"><pre><span class="line">(<span class="name">count-args</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>) <span class="comment">; =&gt; "You passed 3 args: (1 2 3)"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">138</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">139</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 你可以将普通参数和列表参数混合使用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">140</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> hello-count [name &amp; args]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">141</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"Hello "</span> name <span class="string">", you passed "</span> (<span class="name"><span class="builtin-name">count</span></span> args) <span class="string">" extra args"</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">142</span></pre></td><td class="code"><pre><span class="line">(<span class="name">hello-count</span> <span class="string">"Finn"</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">143</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; =&gt; "Hello Finn, you passed 3 extra args"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">144</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">145</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">146</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 哈希表</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">147</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;;;;;;;;;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">148</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">149</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">class</span></span> {<span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span> <span class="symbol">:c</span> <span class="number">3</span>}) <span class="comment">; =&gt; clojure.lang.PersistentArrayMap</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">150</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">151</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 关键字类似字符串，但是做了一些性能上的优化</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">152</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">class</span></span> <span class="symbol">:a</span>) <span class="comment">; =&gt; clojure.lang.Keyword</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">153</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">154</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; Maps 的键可以是任意类型，但是通常推荐使用keywords</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">155</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> stringmap (<span class="name"><span class="builtin-name">hash-map</span></span> <span class="string">"a"</span> <span class="number">1</span>, <span class="string">"b"</span> <span class="number">2</span>, <span class="string">"c"</span> <span class="number">3</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">156</span></pre></td><td class="code"><pre><span class="line">stringmap  ; =&gt; {"a" 1, "b" 2, "c" 3}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">157</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">158</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> keymap (<span class="name"><span class="builtin-name">hash-map</span></span> <span class="symbol">:a</span> <span class="number">1</span> <span class="symbol">:b</span> <span class="number">2</span> <span class="symbol">:c</span> <span class="number">3</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">159</span></pre></td><td class="code"><pre><span class="line">keymap ; =&gt; {:a 1, :c 3, :b 2} (不保证顺序)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">160</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">161</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 顺便说一下, 逗号只是为了看着更清晰，其他都和空格一样，什么都不做.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">162</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">163</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 从一个map中检索一个值，可以直接把这个map当做函数调用（这个NB）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">164</span></pre></td><td class="code"><pre><span class="line">(<span class="name">stringmap</span> <span class="string">"a"</span>) <span class="comment">; =&gt; 1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">165</span></pre></td><td class="code"><pre><span class="line">(<span class="name">keymap</span> <span class="symbol">:a</span>) <span class="comment">; =&gt; 1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">166</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">167</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 关键字也可以当做函数来调用，从一个map中检索值（这个更NB）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">168</span></pre></td><td class="code"><pre><span class="line">(<span class="symbol">:b</span> keymap) <span class="comment">; =&gt; 2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">169</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">170</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; stings 可没有这个功能，所以下面会抛出异常。（这也是为什么推荐使用keywords）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">171</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;("a" stringmap)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">172</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; =&gt; Exception: java.lang.String cannot be cast to clojure.lang.IFn</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">173</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">174</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 检索一个不存在的值会返回nil</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">175</span></pre></td><td class="code"><pre><span class="line">(<span class="name">stringmap</span> <span class="string">"d"</span>) <span class="comment">; =&gt; nil</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">176</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">177</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 使用assoc 向一个map中添加新的键值对。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">178</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">assoc</span></span> keymap <span class="symbol">:d</span> <span class="number">4</span>) <span class="comment">; =&gt; {:a 1, :b 2, :c 3, :d 4}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">179</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">180</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 请记住, clojure 类型是不可变的!</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">181</span></pre></td><td class="code"><pre><span class="line">keymap ; =&gt; {:a 1, :b 2, :c 3}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">182</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">183</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 使用dissoc 来删除key（可以删除多个）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">184</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">dissoc</span></span> keymap <span class="symbol">:a</span> <span class="symbol">:b</span>) <span class="comment">; =&gt; {:c 3}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">185</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">186</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 集合</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">187</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;;;;;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">188</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">189</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">class</span></span> #{<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>}) <span class="comment">; =&gt; clojure.lang.PersistentHashSet</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">190</span></pre></td><td class="code"><pre><span class="line">(<span class="name">set</span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span>]) <span class="comment">; =&gt; #{1 2 3}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">191</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">192</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 使用con来添加新值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">193</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">conj</span></span> #{<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>} <span class="number">4</span>) <span class="comment">; =&gt; #{1 2 3 4}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">194</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">195</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 使用disj删除原有值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">196</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">disj</span></span> #{<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>} <span class="number">1</span>) <span class="comment">; =&gt; #{2 3}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">197</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">198</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 直接将set当做函数来测试是否包含某个值（NB）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">199</span></pre></td><td class="code"><pre><span class="line">(<span class="name">#</span>{<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>} <span class="number">1</span>) <span class="comment">; =&gt; 1  (有就返回原有的值）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">200</span></pre></td><td class="code"><pre><span class="line">(<span class="name">#</span>{<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>} <span class="number">4</span>) <span class="comment">; =&gt; nil (没有就返回nil)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">201</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">202</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; clojure.sets 命名空间包含更多的函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">203</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">204</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 一些有用的形式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">205</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;;;;;;;;;;;;;;;;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">206</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">207</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; clojure中的逻辑结构都是宏, 看起来也没什么不同</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">208</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">if</span></span> <span class="literal">false</span> <span class="string">"a"</span> <span class="string">"b"</span>) <span class="comment">; =&gt; "b"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">209</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">if</span></span> <span class="literal">false</span> <span class="string">"a"</span>) <span class="comment">; =&gt; nil</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">210</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">211</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 使用let 来创建临时绑定</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">212</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [a <span class="number">1</span> b <span class="number">2</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">213</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">&gt;</span></span> a b)) <span class="comment">; =&gt; false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">214</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">215</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 执行多条语句，返回最后一条语句</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">216</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">do</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">217</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">print</span> <span class="string">"Hello"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">218</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"World"</span>) <span class="comment">; =&gt; "World" (prints "Hello")</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">219</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">220</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 所有的函数都包含一个隐式的do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">221</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> print-and-say-hello [name]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">222</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">print</span> <span class="string">"Saying hello to "</span> name)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">223</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"Hello "</span> name))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">224</span></pre></td><td class="code"><pre><span class="line">(<span class="name">print-and-say-hello</span> <span class="string">"Jeff"</span>) <span class="comment">;=&gt; "Hello Jeff" (prints "Saying hello to Jeff")</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">225</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">226</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; let绑定也是哦</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">227</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [name <span class="string">"Urkel"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">228</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">print</span> <span class="string">"Saying hello to "</span> name)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">229</span></pre></td><td class="code"><pre><span class="line">  (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"Hello "</span> name)) <span class="comment">; =&gt; "Hello Urkel" (prints "Saying hello to Urkel")</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">230</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">231</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 模块</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">232</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;;;;;;;;;;;;;;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">233</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">234</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 使用“use”来获得一个模块中所有的函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">235</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">use</span></span> 'clojure.set)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">236</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">237</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 现在我们可以使用集合操作</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">238</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">intersection</span></span> #{<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>} #{<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>}) <span class="comment">; =&gt; #{2 3}  求交集</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">239</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">difference</span></span> #{<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>} #{<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>}) <span class="comment">; =&gt; #{1}   求差集</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">240</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">241</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 你可以只导入一个函数子集（例如下面只包含交集函数）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">242</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">use</span></span> '[clojure.set <span class="symbol">:only</span> [intersection]])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">243</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">244</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 使用reqire来导入一个模块</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">245</span></pre></td><td class="code"><pre><span class="line">(<span class="name">require</span> 'clojure.string)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">246</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">247</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 使用/从一个模块中调用函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">248</span></pre></td><td class="code"><pre><span class="line">(<span class="name">clojure.string/blank?</span> <span class="string">""</span>) <span class="comment">; =&gt; true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">249</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">250</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 你可以在导入模块的时候自定义名称</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">251</span></pre></td><td class="code"><pre><span class="line">(<span class="name">require</span> '[clojure.string <span class="symbol">:as</span> str])  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">252</span></pre></td><td class="code"><pre><span class="line">(<span class="name">str/replace</span> <span class="string">"This is a test."</span> #<span class="string">"[a-o]"</span> str/upper-case) <span class="comment">; =&gt; "THIs Is A tEst."</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">253</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; (#"" denotes a regular expression literal)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">254</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">255</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 你可以使用":require" 从一个命名空间中引入模块（use也可以，但是别这么做）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">256</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 如果你使用:require的话，就没必要把模块“引”（前面加个单引号）起来了.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">257</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">ns</span></span> test</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">258</span></pre></td><td class="code"><pre><span class="line">  (<span class="symbol">:require</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">259</span></pre></td><td class="code"><pre><span class="line">    [clojure.string <span class="symbol">:as</span> str]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">260</span></pre></td><td class="code"><pre><span class="line">    [clojure.set <span class="symbol">:as</span> set]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">261</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">262</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; Java</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">263</span></pre></td><td class="code"><pre><span class="line"><span class="comment">;;;;;;;;;;;;;;;;;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">264</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">265</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; java 拥有一个庞大的各种用途的标准库,你一定迫不及待想学习如何在clojure中使用这些库</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">266</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">267</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 使用import类引入java模块（这个还好没变化）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">268</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">import</span></span> java.util.Date)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">269</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">270</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 你也可以从一个命名空间中引入</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">271</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">ns</span></span> test</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">272</span></pre></td><td class="code"><pre><span class="line">  (<span class="symbol">:import</span> java.util.Date</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">273</span></pre></td><td class="code"><pre><span class="line">           java.util.Calendar))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">274</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">275</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 类名字后加个”."用来创建一个对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">276</span></pre></td><td class="code"><pre><span class="line">(<span class="name">Date.</span>) <span class="comment">; &lt;a date object&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">277</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">278</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 使用. 来调用方法. 或者使用“.方法名"简写的方式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">279</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">.</span></span> (<span class="name">Date.</span>) getTime) <span class="comment">; &lt;a timestamp&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">280</span></pre></td><td class="code"><pre><span class="line">(<span class="name">.getTime</span> (<span class="name">Date.</span>)) <span class="comment">; 和上面一样哦</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">281</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">282</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 使用/ 来调用静态方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">283</span></pre></td><td class="code"><pre><span class="line">(<span class="name">System/currentTimeMillis</span>) <span class="comment">; &lt;a timestamp&gt; (system is always present)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">284</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">285</span></pre></td><td class="code"><pre><span class="line"><span class="comment">; 使用 doto 来处理可变的类&lt;span style="font-family:宋体;"&gt;，所有的函数始终用最初的那个对象值，最后还是返回最初的那个对象&lt;/span&gt;  (import java.util.Calendar)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">286</span></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">doto</span></span> (<span class="name">Calendar/getInstance</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">287</span></pre></td><td class="code"><pre><span class="line">  (<span class="name">.set</span> <span class="number">2000</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">288</span></pre></td><td class="code"><pre><span class="line">  .getTime) <span class="comment">; =&gt; A Date. set to 2000-01-01 00:00:00</span></span></pre></td></tr></tbody></table></figure><ul><li><p><a href="http://learnxinyminutes.com/docs/clojure/" target="_blank" rel="external nofollow noreferrer noopener">英文原文</a>：<a href="http://learnxinyminutes.com/docs/clojure/" target="_blank" rel="external nofollow noreferrer noopener">Learn Clojure in minutes</a></p></li><li><p><a href="http://www.oschina.net/translate/learn-clojure-in-minutes" target="_blank" rel="external nofollow noreferrer noopener">译文链接</a>：<a href="http://www.oschina.net/translate/learn-clojure-in-minutes" target="_blank" rel="external nofollow noreferrer noopener">http://www.oschina.net/translate/learn-clojure-in-minutes</a></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此处获取源码: &lt;a href=&quot;http://learnxinyminutes.com/docs/files/learnclojure.clj&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;learnclojure.clj&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Clojure是JVM上的一个LISP语言变种。它比Common Lisp更强调纯&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;函数式编程&lt;/a&gt;，但提供了一些STM工具以处理它所引入的状态问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Ruby 风格指南</title>
    <link href="http://notes.seirhsiao.com/posts/25353fe1/"/>
    <id>http://notes.seirhsiao.com/posts/25353fe1/</id>
    <published>2019-02-03T04:23:36.000Z</published>
    <updated>2019-12-05T14:30:24.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序幕"><a href="#序幕" class="headerlink" title="序幕"></a>序幕</h1><blockquote><p>榜样很重要。<br><br>——墨菲警官《机器战警》</p></blockquote><p>作为一名 Ruby 开发者，有件事一直困扰着我——Python 社区有一份优秀的编程风格参考文档（<a href="http://www.python.org/dev/peps/pep-0008/" target="_blank" rel="external nofollow noreferrer noopener">PEP-8</a>），而我们迄今还没有一本记录 Ruby 编程风格及最佳实践的官方指南。我确信编程风格很重要，我也相信像 Ruby 这样伟大的黑客社区能够写出这本众望所归的风格指南。</p><p>这份指南原本是我司内部的 Ruby 编程指南 (在下所写的)，后来，我决定要把这一成果贡献给广大的 Ruby 社区。这个世界再多一份公司内部文件并没有什么不同，然而，由社区推动并制定的一系列 Ruby 编程惯例、最佳实践及代码风格，却能让全世界的 Ruby 开发者都从中获益。</p><p>从编写这份指南开始，我收到了很多 Ruby 社区成员的反馈。感谢所有的建议及支持！只要同心协力，我们就能创造一个让每个 Ruby 开发者都从中受益的资源。</p><p>顺道一提，如果你对 Rails 感兴趣，你可以看看这份 <a href="https://github.com/bbatsov/rails-style-guide" target="_blank" rel="external nofollow noreferrer noopener">Ruby on Rails 风格指南</a> 作为补充。</p><h1 id="Ruby-风格指南"><a href="#Ruby-风格指南" class="headerlink" title="Ruby 风格指南"></a>Ruby 风格指南</h1><p>这份 Ruby 风格指南推荐的是 Ruby 的最佳实践，现实世界中的 Ruby 程序员据此可以写出可维护的高质量代码。我们只说实际使用中的用法。指南再好，但里面说的过于理想化结果大家拒绝使用或者可能根本没人用，又有何意义。</p><p>本指南分为几个小节，每一小节由几条相关的规则构成。我尽力在每条规则后面说明理由（如果省略了说明，那是因为其理由显而易见）。</p><p>这些规则不是我凭空想象出来的——它们中的绝大部分来自我多年以来作为职业软件工程师的经验，来自 Ruby 社区成员的反馈和建议，以及几个评价甚高的 Ruby 编程资源，像 <a href="http://pragprog.com/book/ruby4/programming-ruby-1-9-2-0" target="_blank" rel="external nofollow noreferrer noopener">《Programming Ruby 1.9》</a> 以及 <a href="http://www.amazon.com/Ruby-Programming-Language-David-Flanagan/dp/0596516177" target="_blank" rel="external nofollow noreferrer noopener">《The Ruby Programming Language》</a>。</p><p>Ruby 社区尚未就某些规则达成明显的共识，例如字符串字面量的引号、hash 字面量两端是否应该有空格、多行方法链式调用中点运算符的位置。对于这种情况，本指南列出了所有可选的流行风格，你可以任选其一并坚持使用。</p><p>本指南会一直更新，随着 Ruby 本身的发展，新的规则会添加进来，过时的规则会被剔除。</p><p>许多项目有其自己的编码风格指南（往往是源于本指南而创建）。当项目的风格指南与本指南发生冲突时，应以项目级的指南为准。</p><p>你可以使用 <a href="https://github.com/TechnoGate/transmuter" target="_blank" rel="external nofollow noreferrer noopener">Transmuter</a> 生成本指南的 PDF 或 HTML 版本。</p><p><a href="https://github.com/bbatsov/rubocop" target="_blank" rel="external nofollow noreferrer noopener">RuboCop</a> 项目会自动检查你的 Ruby 代码是否符合这份 Ruby 风格指南。</p><p>本指南有以下翻译版本：</p><ul><li><a href="https://github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhCN.md" target="_blank" rel="external nofollow noreferrer noopener">简体中文</a></li><li><a href="https://github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhTW.md" target="_blank" rel="external nofollow noreferrer noopener">繁體中文</a></li><li><a href="https://github.com/porecreat/ruby-style-guide/blob/master/README-frFR.md" target="_blank" rel="external nofollow noreferrer noopener">法文</a></li><li><a href="https://github.com/arbox/de-ruby-style-guide/blob/master/README-deDE.md" target="_blank" rel="external nofollow noreferrer noopener">德文</a></li><li><a href="https://github.com/fortissimo1997/ruby-style-guide/blob/japanese/README.ja.md" target="_blank" rel="external nofollow noreferrer noopener">日文</a></li><li><a href="https://github.com/dalzony/ruby-style-guide/blob/master/README-koKR.md" target="_blank" rel="external nofollow noreferrer noopener">韩文</a></li><li><a href="https://github.com/rubensmabueno/ruby-style-guide/blob/master/README-PT-BR.md" target="_blank" rel="external nofollow noreferrer noopener">葡萄牙文</a></li><li><a href="https://github.com/arbox/ruby-style-guide/blob/master/README-ruRU.md" target="_blank" rel="external nofollow noreferrer noopener">俄文</a></li><li><a href="https://github.com/alemohamad/ruby-style-guide/blob/master/README-esLA.md" target="_blank" rel="external nofollow noreferrer noopener">西班牙文</a></li><li><a href="https://github.com/scrum2b/ruby-style-guide/blob/master/README-viVN.md" target="_blank" rel="external nofollow noreferrer noopener">越南文</a></li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#源代码排版">源代码排版</a></li><li><a href="#语法">语法</a></li><li><a href="#命名">命名</a></li><li><a href="#注释">注释</a><ul><li><a href="#注解">注解</a></li></ul></li><li><a href="#类与模块">类与模块</a></li><li><a href="#异常">异常</a></li><li><a href="#集合">集合</a></li><li><a href="#字符串">字符串</a></li><li><a href="#正则表达式">正则表达式</a></li><li><a href="#百分号字面量">百分号字面量</a></li><li><a href="#元编程">元编程</a></li><li><a href="#其它">其它</a></li><li><a href="#工具">工具</a><a id="more"></a><h2 id="源代码排版"><a href="#源代码排版" class="headerlink" title="源代码排版"></a>源代码排版</h2></li></ul><blockquote><p>所有风格都又丑又难读，自己的除外。几乎人人都这样想。把“自己的除外”拿掉，他们或许是对的…<br><br>——Jerry Coffin（论缩排）</p></blockquote><ul><li><p>使用 <code>UTF-8</code> 作为源文件的编码。</p></li><li><p>每个缩排层级使用两个<strong>空格</strong>。不要使用硬 tab。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差 - 四个空格</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    do_something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  do_something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>使用 Unix 风格的换行符。（BSD/Solaris/Linux/OSX 的用户不用担心，Windows 用户要格外小心。）</p><ul><li><p>如果你使用 Git ，可用下面这个配置，来保护你的项目不被 Windows 的换行符干扰：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git config --global core.autocrlf <span class="literal">true</span></span></pre></td></tr></tbody></table></figure></li></ul></li><li><p>不要使用 <code>;</code> 分隔语句或表达式。推论——每个表达式应独占一行。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">puts <span class="string">'foobar'</span>; <span class="comment"># 不必要的分号</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">puts <span class="string">'foo'</span>; puts <span class="string">'bar'</span> <span class="comment"># 一行里有两个表达式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">puts <span class="string">'foobar'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">puts <span class="string">'foo'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">puts <span class="string">'bar'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">puts <span class="string">'foo'</span>, <span class="string">'bar'</span> <span class="comment"># 仅对 puts 适用</span></span></pre></td></tr></tbody></table></figure></li><li><p>没有内容的类定义语句，应优先采用单行格式。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooError</span> &lt; StandardError</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 勉强可以</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooError</span> &lt; StandardError;</span> <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">FooError = Class.new(StandardError)</span></pre></td></tr></tbody></table></figure></li><li><p>定义方法时应避免单行写法。尽管有些人喜欢这么用，但是单行定义的语法有些古怪，应此绝不是一个好的实践。无论如何——一个单行方法里的表达式不应该多于 1 个。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">too_much</span>;</span> something; something_else; <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 勉强可以——注意第一个 ; 是必需的</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">no_braces_method</span>;</span> body <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 勉强可以——注意第二个 ; 是可选的</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">no_braces_method</span>;</span> body; <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 勉强可以——语法上正确，但是没有 ; 让它有些难读</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method</span><span class="params">()</span></span> body <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  body</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure><p>  这个规则的一个例外是空方法。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">no_op</span>;</span> <span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>操作符前后应添加空格：在逗号 <code>,</code> 、冒号 <code>:</code> 及分号 <code>;</code> 之后，在 <code>{</code> 前后，在 <code>}</code> 之前。<br>一般情况下，Ruby 解释器会忽略空格。但要写出可读性高的代码，合理使用空格是关键。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sum = <span class="number">1</span> + <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">1</span>, <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].each { <span class="params">|e|</span> puts e }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooError</span> &lt; StandardError;</span> <span class="keyword">end</span></span></pre></td></tr></tbody></table></figure><p>  （针对操作符）唯一的例外是使用指数操作符时：</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">e = M * c ** <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">e = M * c**<span class="number">2</span></span></pre></td></tr></tbody></table></figure><p>  <code>{</code> 和 <code>}</code> 需要额外说明，因为他们可以用在块（block）、<br>  哈希字面量（hash literals）以及字符串插值中。<br>  对于哈希字面量来说，以下两种风格都是可接受的：</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好——`{` 之后和 `}` 之前有空格</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{ <span class="symbol">one:</span> <span class="number">1</span>, <span class="symbol">two:</span> <span class="number">2</span> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好——`{` 之后和 `}` 之前没有空格</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">{<span class="symbol">one:</span> <span class="number">1</span>, <span class="symbol">two:</span> <span class="number">2</span>}</span></pre></td></tr></tbody></table></figure><p>  第一种风格可读性更好一些（而且无疑在 Ruby 社区更受欢迎）,<br>  第二种风格的优点是可以在视觉上区分块和哈希字面量。<br>  无论你选哪一种，重要的是保持一致。</p></li></ul><ul><li><p><code>(</code> 、 <code>[</code> 之后， <code>]</code> 、 <code>)</code> 之前，不要有空格。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">some( arg ).other</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ].size</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">some(arg).other</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].size</span></pre></td></tr></tbody></table></figure></li></ul><ul><li><p><code>!</code> 后面不要有空格。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">! something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">!something</span></pre></td></tr></tbody></table></figure></li><li><p>范围字面量中间不要有空格。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> .. <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="string">'a'</span> ... <span class="string">'z'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>..<span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="string">'a'</span>...<span class="string">'z'</span></span></pre></td></tr></tbody></table></figure></li><li><p>把 <code>when</code> 跟 <code>case</code> 缩排在同一层。这是《The Ruby Programming Language》及《Programming Ruby》所使用的风格。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">when</span> song.name == <span class="string">'Misty'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    puts <span class="string">'Not again!'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">when</span> song.duration &gt; <span class="number">120</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    puts <span class="string">'Too long!'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">when</span> Time.now.hour &gt; <span class="number">21</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    puts <span class="string">"It's too late"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    song.play</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> song.name == <span class="string">'Misty'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  puts <span class="string">'Not again!'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> song.duration &gt; <span class="number">120</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  puts <span class="string">'Too long!'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> Time.now.hour &gt; <span class="number">21</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  puts <span class="string">"It's too late"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  song.play</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>把一个条件表达式的结果赋给变量时，应保持条件表达式的缩进层级。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差 - 非常复杂</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">kind = <span class="keyword">case</span> year</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> <span class="number">1850</span>..<span class="number">1889</span> <span class="keyword">then</span> <span class="string">'Blues'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> <span class="number">1890</span>..<span class="number">1909</span> <span class="keyword">then</span> <span class="string">'Ragtime'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> <span class="number">1910</span>..<span class="number">1929</span> <span class="keyword">then</span> <span class="string">'New Orleans Jazz'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> <span class="number">1930</span>..<span class="number">1939</span> <span class="keyword">then</span> <span class="string">'Swing'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> <span class="number">1940</span>..<span class="number">1950</span> <span class="keyword">then</span> <span class="string">'Bebop'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="string">'Jazz'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">result = <span class="keyword">if</span> some_cond</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  calc_something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  calc_something_else</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好 - 结构很清晰</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">kind = <span class="keyword">case</span> year</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">       <span class="keyword">when</span> <span class="number">1850</span>..<span class="number">1889</span> <span class="keyword">then</span> <span class="string">'Blues'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">       <span class="keyword">when</span> <span class="number">1890</span>..<span class="number">1909</span> <span class="keyword">then</span> <span class="string">'Ragtime'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">       <span class="keyword">when</span> <span class="number">1910</span>..<span class="number">1929</span> <span class="keyword">then</span> <span class="string">'New Orleans Jazz'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">       <span class="keyword">when</span> <span class="number">1930</span>..<span class="number">1939</span> <span class="keyword">then</span> <span class="string">'Swing'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">       <span class="keyword">when</span> <span class="number">1940</span>..<span class="number">1950</span> <span class="keyword">then</span> <span class="string">'Bebop'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">       <span class="keyword">else</span> <span class="string">'Jazz'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">       <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">result = <span class="keyword">if</span> some_cond</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">           calc_something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">         <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">           calc_something_else</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">         <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好 ( 避免代码让行宽过长 )</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">kind =</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">case</span> year</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">when</span> <span class="number">1850</span>..<span class="number">1889</span> <span class="keyword">then</span> <span class="string">'Blues'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">when</span> <span class="number">1890</span>..<span class="number">1909</span> <span class="keyword">then</span> <span class="string">'Ragtime'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">when</span> <span class="number">1910</span>..<span class="number">1929</span> <span class="keyword">then</span> <span class="string">'New Orleans Jazz'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">when</span> <span class="number">1930</span>..<span class="number">1939</span> <span class="keyword">then</span> <span class="string">'Swing'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">when</span> <span class="number">1940</span>..<span class="number">1950</span> <span class="keyword">then</span> <span class="string">'Bebop'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">else</span> <span class="string">'Jazz'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">result =</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> some_cond</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">    calc_something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">    calc_something_else</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>在 <code>def</code> 之间使用空行，并且用空行把方法分成合乎逻辑的段落。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  data = initialize(options)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  data.manipulate!</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  data.result</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  result</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>调用方法时最后一个参数后面不要加逗号，特别是参数都在同一行的时候。</p> <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差 - 虽然移动和增删参数的时候会很简单，但仍不推荐</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">some_method(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">             size,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">             count,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">             color,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">           )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">some_method(size, count, color, )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">some_method(size, count, color)</span></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>当给方法的参数赋默认值时，在 <code>=</code> 两边使用空格：</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method</span><span class="params">(arg1=<span class="symbol">:default</span>, arg2=<span class="literal">nil</span>, arg3=[])</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 做一些任务...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method</span><span class="params">(arg1 = <span class="symbol">:default</span>, arg2 = <span class="literal">nil</span>, arg3 = [])</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 做一些任务...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure><p>  虽然几本 Ruby 书建议用第一个风格，不过第二个风格在实践中更为常见（而且可读性无疑更高一些）。</p></li><li><p>避免在不必要的时候使用续行符 <code>\</code> 。实际编码时，除了字符串拼接, 应避免在任何情况下使用续行符。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">result = <span class="number">1</span> - \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">         <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好 (但是仍然丑到爆)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">result = <span class="number">1</span> \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">         - <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">long_string = <span class="string">'First part of the long string'</span> \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">              <span class="string">' and second part of the long string'</span></span></pre></td></tr></tbody></table></figure></li><li><p>使用链式方法调用时风格应保持一致。Ruby 社区认为前引点号和末端点号都是好的风格。</p><ul><li><p>（可选风格 A）当一个链式方法调用需要在另一行继续时，将 <code>.</code> 放在第二行。</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差 - 为了理解第二行需要去查阅第一行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">one.two.three.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  four</span></pre></td></tr></tbody></table></figure><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好 - 第二行在做什么立刻变得很清晰</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">one.two.three</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  .four</span></pre></td></tr></tbody></table></figure></li><li><p>（可选风格 B）首行末尾用点号表示表达式还未结束</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差 - 需要读到第二行才能确定表达式没有结束</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">one.two.three</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  .four</span></pre></td></tr></tbody></table></figure><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好 - 从第一行就可以立即明白表达式没有结束</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">one.two.three.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  four</span></pre></td></tr></tbody></table></figure></li></ul><p>关于两种方法各自优点的讨论，可以参阅<a href="https://github.com/bbatsov/ruby-style-guide/pull/176" target="_blank" rel="external nofollow noreferrer noopener">这里</a>。</p></li><li><p>方法参数过长时，将它对齐排列在多行。当对齐的参数由于线宽不适合对齐时, 简单的在第一行之后缩进也是可以接受的。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始（行太长了）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(source)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  Mailer.deliver(<span class="symbol">to:</span> <span class="string">'bob@example.com'</span>, <span class="symbol">from:</span> <span class="string">'us@example.com'</span>, <span class="symbol">subject:</span> <span class="string">'Important message'</span>, <span class="symbol">body:</span> source.text)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差（两倍缩排）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(source)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  Mailer.deliver(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      <span class="symbol">to:</span> <span class="string">'bob@example.com'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      <span class="symbol">from:</span> <span class="string">'us@example.com'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      <span class="symbol">subject:</span> <span class="string">'Important message'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">      <span class="symbol">body:</span> source.text)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(source)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  Mailer.deliver(<span class="symbol">to:</span> <span class="string">'bob@example.com'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                 <span class="symbol">from:</span> <span class="string">'us@example.com'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                 <span class="symbol">subject:</span> <span class="string">'Important message'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                 <span class="symbol">body:</span> source.text)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好（普通缩排）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(source)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  Mailer.deliver(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="symbol">to:</span> <span class="string">'bob@example.com'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="symbol">from:</span> <span class="string">'us@example.com'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="symbol">subject:</span> <span class="string">'Important message'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="symbol">body:</span> source.text)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>跨行的数组字面量，应按项对齐。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差 - 未对齐</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">menu_item = [<span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="string">'Baked beans'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">menu_item = [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="string">'Baked beans'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">menu_item =</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  [<span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">   <span class="string">'Baked beans'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>, <span class="string">'Spam'</span>]</span></pre></td></tr></tbody></table></figure></li><li><p>应该为大数添加下划线，以增强可读性。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差 - 有几个零？</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">num = <span class="number">1000000</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好 - 更容易被人脑解析。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">num = <span class="number">1_000_000</span></span></pre></td></tr></tbody></table></figure></li><li><p>使用 RDoc 及其惯例来撰写 API 文档。不要用空行分隔注解区块及 <code>def</code>语句。</p></li><li><p>每一行限制在 80 个字符内。</p></li><li><p>避免行尾出现多余空格。</p></li><li><p>文件应以空白行结尾。</p></li><li><p>不要使用区块注释。它们不能由空白引导（<code>=begin</code> 必须顶头开始），并且不如普通注释容易辨认。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">=begin</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">一行注释</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">另一行注释</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">=end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一行注释</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 另一行注释</span></span></pre></td></tr></tbody></table></figure></li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li><p><code>::</code> 应该只用来引用常量（包括类和模块）和构造器 (比如 <code>Array()</code> 或者 <code>Nokogiri::HTML()</code>)。永远不要使用 <code>::</code> 来调用常规方法。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">SomeClass::some_method</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">some_object::some_method</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">SomeClass.some_method</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">some_object.some_method</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">SomeModule::SomeClass::SOME_CONST</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">SomeModule::SomeClass()</span></pre></td></tr></tbody></table></figure></li><li><p>使用 <code>def</code> 定义方法时，有参数时应该使用括号。当方法不接受参数时，省略括号。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 此处省略方法体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 此处省略方法体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method_with_parameters</span> <span class="title">param1</span>, <span class="title">param2</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 此处省略方法体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method_with_parameters</span><span class="params">(param1, param2)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 此处省略方法体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>定义参数默认值时候，有默认值的参数应该在参数列表的后面。如果有默认值的参数应该在参数列表的前面，Ruby调用时会发生不可预料的结果。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># bad</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method</span><span class="params">(a = <span class="number">1</span>, b = <span class="number">2</span>, c, d)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">puts <span class="string">"<span class="subst">#{a}</span>, <span class="subst">#{b}</span>, <span class="subst">#{c}</span>, <span class="subst">#{d}</span>"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">some_method(<span class="string">'w'</span>, <span class="string">'x'</span>) <span class="comment"># =&gt; '1, 2, w, x'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">some_method(<span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>) <span class="comment"># =&gt; 'w, 2, x, y'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">some_method(<span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>) <span class="comment"># =&gt; 'w, x, y, z'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># good</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method</span><span class="params">(a, b, c = <span class="number">1</span>, d = <span class="number">2</span>)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  puts <span class="string">"<span class="subst">#{a}</span>, <span class="subst">#{b}</span>, <span class="subst">#{c}</span>, <span class="subst">#{d}</span>"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">some_method(<span class="string">'w'</span>, <span class="string">'x'</span>) <span class="comment"># =&gt; 'w, x, 1, 2'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">some_method(<span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>) <span class="comment"># =&gt; 'w, x, y, 2'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">some_method(<span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>) <span class="comment"># =&gt; 'w, x, y, z'</span></span></pre></td></tr></tbody></table></figure></li><li><p>避免使用并行赋值来初始化变量。当使用方法返回值，变量带星号，交换赋值时，可以使用并行赋值。给每个变量单独赋值比并行赋值可读性更高。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># bad</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">a, b, c, d = <span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'baz'</span>, <span class="string">'foobar'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># good</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">a = <span class="string">'foo'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">b = <span class="string">'bar'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">c = <span class="string">'baz'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">d = <span class="string">'foobar'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># good - swapping variable assignment</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Swapping variable assignment is a special case because it will allow you to</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># swap the values that are assigned to each variable.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">a = <span class="string">'foo'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">b = <span class="string">'bar'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">a, b = b, a</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">puts a <span class="comment"># =&gt; 'bar'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">puts b <span class="comment"># =&gt; 'foo'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># good - method return</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_return</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  [<span class="number">1</span>, <span class="number">2</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">first, second = multi_return</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># good - 带`*`其实就是把变量当成数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">first, *list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">hello_array = *<span class="string">"Hello"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">a = *(<span class="number">1</span>..<span class="number">3</span>)</span></pre></td></tr></tbody></table></figure></li><li><p>并行赋值时避免在最右边使用不必要的下划线变量。当左边的变量带<code>*</code>时才使用下划线变量。避免<code>*_</code>这个用法。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># bad</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">a, b, <span class="number">_</span> = *foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">a, <span class="number">_</span>, <span class="number">_</span> = *foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">a, *<span class="number">_</span> = *foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># good</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">*a, <span class="number">_</span> = *foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">*a, b, <span class="number">_</span> = *foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">a, = *foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">a, b, = *foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">a, _b = *foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">a, _b, = *foo</span></pre></td></tr></tbody></table></figure></li><li><p>永远不要使用 <code>for</code> ，除非你很清楚为什么。大部分情况应该使用迭代器。<code>for</code> 是由 <code>each</code> 实现的，所以你绕弯了。另外，<code>for</code> 没有包含一个新的作用域 (<code>each</code> 有），因此在它区块中定义的变量在外部是可见的。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> arr <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  puts elem</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意 elem 可在 for 循环外部被访问</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">elem <span class="comment">#=&gt; 3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">arr.each { <span class="params">|elem|</span> puts elem }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># elem 不能够在 each 块外部被访问</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">elem <span class="comment">#=&gt; NameError: undefined local variable or method `elem'</span></span></pre></td></tr></tbody></table></figure></li><li><p>永远不要在多行的 <code>if/unless</code> 中使用 <code>then</code>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> some_condition <span class="keyword">then</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 此处省略语句体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> some_condition</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 此处省略语句体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>总是在多行的 <code>if/unless</code> 中把条件语句放在同一行。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  some_condition</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  do_something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  do_something_else</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> some_condition</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  do_something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  do_something_else</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>三元操作符 <code>? :</code> 比 <code>if/then/else/end</code> 结构更常见也更简洁。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">result = <span class="keyword">if</span> some_condition <span class="keyword">then</span> something <span class="keyword">else</span> something_else <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">result = some_condition ? something : something_else</span></pre></td></tr></tbody></table></figure></li><li><p>三元操作符的每个分支只写一个表达式。即不要嵌套三元操作符。嵌套情况应使用 <code>if/else</code> 结构。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">some_condition ? (nested_condition ? nested_something : nested_something_else) : something_else</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> some_condition</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  nested_condition ? nested_something : nested_something_else</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  something_else</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>永远不要使用 <code>if x; ...</code>——使用三元操作符。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">result = <span class="keyword">if</span> <span class="symbol">some_condition:</span> something <span class="keyword">else</span> something_else <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">result = some_condition ? something : something_else</span></pre></td></tr></tbody></table></figure></li><li><p>充分利用 if 和 case 是表达式的特性，它们有返回值。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  result = x</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  result = y</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">result =</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> condition</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    x</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    y</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>单行情况使用 <code>when x then ...</code>。另一种语法 <code>when x: ...</code> 已经在 Ruby 1.9 被移除了。</p></li><li><p>永远不要使用 <code>when x; ...</code>。参考前一个规则。</p></li><li><p>使用 <code>!</code> 替代 <code>not</code>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差 - 因为操作符有优先级，需要用括号。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">x = (<span class="keyword">not</span> something)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">x = !something</span></pre></td></tr></tbody></table></figure></li><li><p>避免使用 <code>!!</code>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">x = <span class="string">'test'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 令人疑惑的空值检查</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> !!x</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 此处省略语句体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">x = <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对布尔值进行双重否定是不必要的</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">!!x <span class="comment"># =&gt; false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">x = <span class="string">'test'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">unless</span> x.<span class="literal">nil</span>?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 此处省略语句体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>绝不要使用 <code>and</code> 和 <code>or</code> 这两个关键字，总是使用 <code>&amp;&amp;</code> 和 <code>||</code> 来替代它们。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 布尔表达式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> some_condition <span class="keyword">and</span> some_other_condition</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  do_something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 控制流程</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">document.saved? <span class="keyword">or</span> document.save!</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 布尔表达式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> some_condition &amp;&amp; some_other_condition</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  do_something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 控制流程</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">document.saved? <span class="params">||</span> document.save!</span></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>避免多行的 <code>? :</code>（三元操作符）；使用 <code>if/unless</code> 来取代。</p></li><li><p>单行主体用 <code>if/unless</code> 修饰符。另一个好的方法是使用 <code>&amp;&amp;/||</code> 控制流程。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> some_condition</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  do_something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">do_something <span class="keyword">if</span> some_condition</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 另一个好方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">some_condition &amp;&amp; do_something</span></pre></td></tr></tbody></table></figure></li><li><p>避免在多行区块后使用 <code>if</code> 或 <code>unless</code>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>.times <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 此处省略多行语句体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span> <span class="keyword">if</span> some_condition</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> some_condition</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="number">10</span>.times <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 此处省略多行语句体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>否定判断时，<code>unless</code>（或控制流程的 <code>||</code>）优于 <code>if</code>（或使用 <code>||</code> 控制流程）。</p> <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">do_something <span class="keyword">if</span> !some_condition</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">do_something <span class="keyword">if</span> <span class="keyword">not</span> some_condition</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">do_something <span class="keyword">unless</span> some_condition</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 另一个好方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">some_condition <span class="params">||</span> do_something</span></pre></td></tr></tbody></table></figure></li><li><p>永远不要使用 <code>unless</code> 和 <code>else</code> 组合。改写成肯定条件。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">unless</span> success?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  puts <span class="string">'failure'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  puts <span class="string">'success'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> success?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  puts <span class="string">'success'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  puts <span class="string">'failure'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>不要使用括号围绕 <code>if/unless/while</code> 的条件表达式。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">10</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 此处省略语句体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x &gt; <span class="number">10</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 此处省略语句体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>在多行 <code>while/until</code> 中不要使用 <code>while/until condition do</code> 。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> x &gt; <span class="number">5</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 此处省略语句体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">until</span> x &gt; <span class="number">5</span> <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 此处省略语句体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> x &gt; <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 此处省略语句体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">until</span> x &gt; <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 此处省略语句体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>单行主体时尽量使用 <code>while/until</code> 修饰符。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> some_condition</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  do_something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">do_something <span class="keyword">while</span> some_condition</span></pre></td></tr></tbody></table></figure></li><li><p>否定条件判断尽量使用 <code>until</code> 而不是 <code>while</code> 。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">do_something <span class="keyword">while</span> !some_condition</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">do_something <span class="keyword">until</span> some_condition</span></pre></td></tr></tbody></table></figure></li><li><p>无限循环用 <code>Kernel#loop</code>，不用 <code>while/until</code> 。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  do_something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">until</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  do_something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">loop <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  do_something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>循环后条件判断使用 <code>Kernel#loop</code> 和 <code>break</code>，而不是 <code>begin/end/until</code> 或者 <code>begin/end/while</code>。</p> <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  puts val</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  val += <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span> <span class="keyword">while</span> val &lt; <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">loop <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  puts val</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  val += <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">break</span> <span class="keyword">unless</span> val &lt; <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>忽略围绕方法参数的括号，如内部 DSL (如：Rake, Rails, RSpec)，Ruby 中带有“关键字”状态的方法（如：<code>attr_reader</code>，<code>puts</code>）以及属性存取方法。所有其它的方法调用使用括号围绕参数。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:name</span>, <span class="symbol">:age</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 忽略</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">temperance = Person.new(<span class="string">'Temperance'</span>, <span class="number">30</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">temperance.name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">puts temperance.age</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">x = Math.sin(y)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">array.delete(e)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">bowling.score.should == <span class="number">0</span></span></pre></td></tr></tbody></table></figure></li><li><p>当哈希作为可选参数使用时，省略该哈希的外部花括号。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">user.set({ <span class="symbol">name:</span> <span class="string">'John'</span>, <span class="symbol">age:</span> <span class="number">45</span>, <span class="symbol">permissions:</span> { <span class="symbol">read:</span> <span class="literal">true</span> } })</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">User.set(<span class="symbol">name:</span> <span class="string">'John'</span>, <span class="symbol">age:</span> <span class="number">45</span>, <span class="symbol">permissions:</span> { <span class="symbol">read:</span> <span class="literal">true</span> })</span></pre></td></tr></tbody></table></figure></li><li><p>如果方法是内部 DSL 的一部分，那么省略外层的花括号和圆括号。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ActiveRecord::Base</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  validates(<span class="symbol">:name</span>, { <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> { <span class="symbol">within:</span> <span class="number">1</span>..<span class="number">10</span> } })</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  validates <span class="symbol">:name</span>, <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> { <span class="symbol">within:</span> <span class="number">1</span>..<span class="number">10</span> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>如果方法调用不需要参数，那么省略圆括号。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Kernel.exit!()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>.even?()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">fork()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="string">'test'</span>.upcase()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">Kernel.exit!</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>.even?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">fork</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="string">'test'</span>.upcase</span></pre></td></tr></tbody></table></figure></li><li><p>当被调用的方法是只有一个操作的块时，使用更简短的 <code>proc</code> 调用。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">names.map { <span class="params">|name|</span> name.upcase }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">names.map(&amp;<span class="symbol">:upcase</span>)</span></pre></td></tr></tbody></table></figure></li><li><p>单行块倾向使用 <code>{...}</code> 而不是 <code>do...end</code>。多行块避免使用 <code>{...}</code>（多行链式调用总是更丑陋）。在 <code>do...end</code> 、 “控制流程”及“方法定义”，永远使用 <code>do...end</code> （如 Rakefile 及某些 DSL）。方法链式调用时避免使用 <code>do...end</code>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">names = <span class="string">%w(Bozhidar Steve Sarah)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">names.each <span class="keyword">do</span> <span class="params">|name|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  puts name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">names.each { <span class="params">|name|</span> puts name }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">names.select <span class="keyword">do</span> <span class="params">|name|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  name.start_with?(<span class="string">'S'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span>.map { <span class="params">|name|</span> name.upcase }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">names.select { <span class="params">|name|</span> name.start_with?(<span class="string">'S'</span>) }.map(&amp;<span class="symbol">:upcase</span>)</span></pre></td></tr></tbody></table></figure><p>  某些人会争论多行串连时，使用 <code>{...}</code> 看起来还可以，但他们应该扪心自问——这样代码真的可读吗？难道不能把区块内容取出来放到小巧的方法里吗？</p></li><li><p>显性使用区块参数而不是用创建区块字面量的方式传递参数给区块。此规则对性能有所影响，因为区块先被转化为 <code>Proc</code>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'tempfile'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_tmp_dir</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  Dir.mktmpdir <span class="keyword">do</span> <span class="params">|tmp_dir|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    Dir.chdir(tmp_dir) { <span class="params">|dir|</span> <span class="keyword">yield</span> dir }  <span class="comment"># block just passes arguments</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_tmp_dir</span><span class="params">(&amp;block)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  Dir.mktmpdir <span class="keyword">do</span> <span class="params">|tmp_dir|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    Dir.chdir(tmp_dir, &amp;block)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">with_tmp_dir <span class="keyword">do</span> <span class="params">|dir|</span> <span class="comment"># 使用上面的方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  puts <span class="string">"dir is accessible as a parameter and pwd is set: <span class="subst">#{dir}</span>"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>避免在不需要控制流程的场合时使用 <code>return</code> 。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method</span><span class="params">(some_arr)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> some_arr.size</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method</span><span class="params">(some_arr)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  some_arr.size</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>避免在不需要的情况使用 <code>self</code> 。（只有在调用一个 self write 访问器时会需要用到。）</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ready?</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> <span class="keyword">self</span>.last_reviewed_at &gt; <span class="keyword">self</span>.last_updated_at</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">self</span>.worker.update(<span class="keyword">self</span>.content, <span class="keyword">self</span>.options)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">self</span>.status = <span class="symbol">:in_progress</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">self</span>.status == <span class="symbol">:verified</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ready?</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> last_reviewed_at &gt; last_updated_at</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    worker.update(content, options)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">self</span>.status = <span class="symbol">:in_progress</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  status == <span class="symbol">:verified</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>避免局部变量遮蔽方法调用，除非它们有相同的效果。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:options</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 勉强可以</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(options)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">self</span>.options = options</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 此处 options 和 self.options 都是等价的</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">do_something</span><span class="params">(options = {})</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">unless</span> options[<span class="symbol">:when</span>] == <span class="symbol">:later</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      output(<span class="keyword">self</span>.options[<span class="symbol">:message</span>])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">do_something</span><span class="params">(params = {})</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">unless</span> params[<span class="symbol">:when</span>] == <span class="symbol">:later</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      output(options[<span class="symbol">:message</span>])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>不要在条件表达式里使用 <code>=</code> （赋值）的返回值，除非条件表达式在圆括号内被赋值。这是一个相当流行的 Ruby 惯用技巧，有时被称为<em>safe assignment in condition</em>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差 (会触发一个警告提示)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> v = array.grep(<span class="regexp">/foo/</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  do_something(v)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好 (MRI 仍会抱怨, 但 RuboCop 不会)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (v = array.grep(<span class="regexp">/foo/</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  do_something(v)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">v = array.grep(<span class="regexp">/foo/</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> v</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  do_something(v)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>变量自赋值用简写方式。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">x = x + y</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">x = x * y</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">x = x**y</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">x = x / y</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">x = x <span class="params">||</span> y</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">x = x &amp;&amp; y</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">x += y</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">x *= y</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">x **= y</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">x /= y</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">x <span class="params">||</span>= y</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">x &amp;&amp;= y</span></pre></td></tr></tbody></table></figure></li><li><p>只有当变量未初始化时，才用 <code>||=</code> 来初始化变量并为它赋值。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">name = name ? name : <span class="string">'Bozhidar'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">name = <span class="string">'Bozhidar'</span> <span class="keyword">unless</span> name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好 仅在 name 为 nil 或 false 时，把名字设为 Bozhidar。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">name <span class="params">||</span>= <span class="string">'Bozhidar'</span></span></pre></td></tr></tbody></table></figure></li><li><p>不要使用 <code>||=</code> 来初始化布尔变量。 （想看看如果现在的值刚好是 <code>false</code> 时会发生什么。）</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差——会把 `enabled` 设成真，即便它本来是假。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">enabled <span class="params">||</span>= <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">enabled = <span class="literal">true</span> <span class="keyword">if</span> enabled.<span class="literal">nil</span>?</span></pre></td></tr></tbody></table></figure></li><li><p>使用 &amp;&amp;= 可先检查是否存在变量，如果存在则做相应动作。这样就无需用 <code>if</code> 检查变量是否存在了。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  something = something.downcase</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">something = something ? something.downcase : <span class="literal">nil</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">something = something.downcase <span class="keyword">if</span> something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">something = something &amp;&amp; something.downcase</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">something &amp;&amp;= something.downcase</span></pre></td></tr></tbody></table></figure></li><li><p>避免使用 case 语句等价操作符 <code>===</code> 。从名称可知，这是 <code>case</code> 表达式隐式使用的操作符，在 <code>case</code> 语句外的场合使用，会产生难以理解的代码。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Array === something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>..<span class="number">100</span>) === <span class="number">7</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">/something/ === some_string</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">something.is_a?(Array)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>..<span class="number">100</span>).<span class="keyword">include</span>?(<span class="number">7</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">some_string =~ <span class="regexp">/something/</span></span></pre></td></tr></tbody></table></figure></li><li><p>能使用 <code>==</code> 时，就不要使用 <code>eql?</code>。提供更加严格比较的 <code>eql?</code> 在实践中极少使用。</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差，对于字符串，eql? 和 == 作用相同</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">"ruby"</span>.eql? some_str</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="string">"ruby"</span> == some_str</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="number">1.0</span>.eql? x <span class="comment"># 当需要区别 Fixnum 1 与 Float 1.0 时，eql? 是具有意义的</span></span></pre></td></tr></tbody></table></figure></li><li><p>避免使用 Perl 风格的特殊变量（像是 <code>$:</code>、<code>$;</code> 等）。它们看起来非常神秘，除非用于单行脚本，否则不鼓励使用。使用 <code>English</code> 库提供的友好别名。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$:.unshift File.dirname(__FILE_<span class="number">_</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'English'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">$LOAD_PATH.unshift File.dirname(__FILE_<span class="number">_</span>)</span></pre></td></tr></tbody></table></figure></li><li><p>永远不要在方法名与左括号之间放一个空格。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">f (<span class="number">3</span> + <span class="number">2</span>) + <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">f(<span class="number">3</span> + <span class="number">2</span>) + <span class="number">1</span></span></pre></td></tr></tbody></table></figure></li><li><p>如果方法的第一个参数由左括号开始的，则此方法调用应该使用括号，例如 <code>f((3 + 2) + 1)</code>。</p></li><li><p>总是使用 <code>-w</code> 来执行 Ruby 解释器，如果你忘了某个上述的规则，它就会警告你！</p></li><li><p>不要在方法中嵌套定义方法，使用 lambda 代替。<br>嵌套定义产生的方法，其实际上和外层方法处于同一作用域（比如类<br>作用域）。此外，“嵌套方法”会在定义它的外层方法每次调用时被重新定义。</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(y)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 此处省略方法体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  bar(x)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好，作用同前，但 bar 不会在 foo 每次调用时被重新定义</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(y)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 此处省略方法体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  bar(x)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  bar = -&gt;(y) { ... }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  bar.call(x)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>用新的 lambda 字面量语法定义单行区块，用 <code>lambda</code> 方法定义多行区块。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">lambda = lambda { <span class="params">|a, b|</span> a + b }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">lambda.call(<span class="number">1</span>, <span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确，但看着怪怪的</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">l = -&gt;(a, b) <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  tmp = a * <span class="number">7</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  tmp * b / <span class="number">50</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">l = -&gt;(a, b) { a + b }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">l.call(<span class="number">1</span>, <span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">l = lambda <span class="keyword">do</span> <span class="params">|a, b|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  tmp = a * <span class="number">7</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  tmp * b / <span class="number">50</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>当定义一个简短且没有参数的 lambda 时，省略参数的括号。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">l = -&gt;() { something }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">l = -&gt; { something }</span></pre></td></tr></tbody></table></figure></li><li><p>用 <code>proc</code> 而不是 <code>Proc.new</code>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">p = Proc.new { <span class="params">|n|</span> puts n }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">p = proc { <span class="params">|n|</span> puts n }</span></pre></td></tr></tbody></table></figure></li><li><p>用 <code>proc.call()</code> 而不是 <code>proc[]</code> 或 <code>proc.()</code>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差 - 看上去像枚举访问</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">l = -&gt;(v) { puts v }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">l[<span class="number">1</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 也不好 - 不常用的语法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">l = -&gt;(v) { puts v }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">l.(<span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">l = -&gt;(v) { puts v }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">l.call(<span class="number">1</span>)</span></pre></td></tr></tbody></table></figure></li><li><p>未使用的区块参数和局部变量使用 <code>_</code> 前缀或直接使用 <code>_</code>（虽然表意性差些） 。Ruby解释器和RuboCop都能辨认此规则，并会抑制相关地有变量未使用的警告。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">result = hash.map { <span class="params">|k, v|</span> v + <span class="number">1</span> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">something</span><span class="params">(x)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  unused_var, used_var = something_else(x)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">result = hash.map { <span class="params">|_k, v|</span> v + <span class="number">1</span> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">something</span><span class="params">(x)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  _unused_var, used_var = something_else(x)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">result = hash.map { <span class="params">|_, v|</span> v + <span class="number">1</span> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">something</span><span class="params">(x)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  <span class="number">_</span>, used_var = something_else(x)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>使用 <code>$stdout/$stderr/$stdin</code> 而不是 <code>STDOUT/STDERR/STDIN</code>。<code>STDOUT/STDERR/STDIN</code> 是常量，虽然在 Ruby 中是可以给常量重新赋值的（可能是重定向到某个流），但解释器会警告。</p></li><li><p>使用 <code>warn</code> 而不是 <code>$stderr.puts</code>。除了更加清晰简洁，如果你需要的话，<br><code>warn</code> 还允许你压制（suppress）警告（通过 <code>-W0</code> 将警告级别设为 <code>0</code>）。</p></li><li><p>倾向使用 <code>sprintf</code> 和它的别名 <code>format</code> 而不是相当隐晦的 <code>String#%</code> 方法.</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">'%d %d'</span> % [<span class="number">20</span>, <span class="number">10</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># =&gt; '20 10'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">sprintf(<span class="string">'%d %d'</span>, <span class="number">20</span>, <span class="number">10</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># =&gt; '20 10'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">sprintf(<span class="string">'%{first} %{second}'</span>, <span class="symbol">first:</span> <span class="number">20</span>, <span class="symbol">second:</span> <span class="number">10</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># =&gt; '20 10'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">format(<span class="string">'%d %d'</span>, <span class="number">20</span>, <span class="number">10</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># =&gt; '20 10'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">format(<span class="string">'%{first} %{second}'</span>, <span class="symbol">first:</span> <span class="number">20</span>, <span class="symbol">second:</span> <span class="number">10</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># =&gt; '20 10'</span></span></pre></td></tr></tbody></table></figure></li><li><p>倾向使用 <code>Array#join</code> 而不是相当隐晦的使用字符串作参数的 <code>Array#*</code>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">%w(one two three)</span> * <span class="string">', '</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># =&gt; 'one, two, three'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="string">%w(one two three)</span>.join(<span class="string">', '</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># =&gt; 'one, two, three'</span></span></pre></td></tr></tbody></table></figure></li><li><p>当处理你希望将变量作为数组使用，但不确定它是不是数组时，<br>使用 <code>[*var]</code> 或 <code>Array()</code> 而不是显式的 <code>Array</code> 检查。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">paths = [paths] <span class="keyword">unless</span> paths.is_a? Array</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">paths.each { <span class="params">|path|</span> do_something(path) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">[*paths].each { <span class="params">|path|</span> do_something(path) }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好（而且更具易读性一点）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">Array(paths).each { <span class="params">|path|</span> do_something(path) }</span></pre></td></tr></tbody></table></figure></li><li><p>尽量使用范围或 <code>Comparable#between?</code> 来替换复杂的逻辑比较。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">do_something <span class="keyword">if</span> x &gt;= <span class="number">1000</span> &amp;&amp; x &lt; <span class="number">2000</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">do_something <span class="keyword">if</span> (<span class="number">1000</span>...<span class="number">2000</span>).<span class="keyword">include</span>?(x)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">do_something <span class="keyword">if</span> x.between?(<span class="number">1000</span>, <span class="number">2000</span>)</span></pre></td></tr></tbody></table></figure></li><li><p>尽量用谓词方法而不是使用 <code>==</code> 。比较数字除外。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x == <span class="literal">nil</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x.even?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x.odd?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x.<span class="literal">nil</span>?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x.zero?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x == <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>除非是布尔值，不用显示检查它是否不是 <code>nil</code> 。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">do_something <span class="keyword">if</span> !something.<span class="literal">nil</span>?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">do_something <span class="keyword">if</span> something != <span class="literal">nil</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">do_something <span class="keyword">if</span> something</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好——检查的是布尔值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">value_set?</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  !@some_boolean.<span class="literal">nil</span>?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>避免使用 <code>BEGIN</code> 区块。</p></li><li><p>使用 <code>Kernel#at_exit</code> 。永远不要用 <code>END</code> 区块。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">END</span> { puts <span class="string">'Goodbye!'</span> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">at_exit { puts <span class="string">'Goodbye!'</span> }</span></pre></td></tr></tbody></table></figure></li><li><p>避免使用 flip-flops 。</p></li><li><p>避免使用嵌套的条件来控制流程。</p><p>当你可能断言不合法的数据，使用一个防御从句。一个防御从句是一个在函数顶部的条件声明，这样如果数据不合法就能尽快的跳出函数。</p></li></ul><pre><code><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_thing</span><span class="params">(thing)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> thing[<span class="symbol">:foo</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    update_with_bar(thing)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> thing[<span class="symbol">:foo</span>][<span class="symbol">:bar</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      partial_compute(thing)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      re_compute(thing)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_thing</span><span class="params">(thing)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="keyword">unless</span> thing[<span class="symbol">:foo</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  update_with_bar(thing[<span class="symbol">:foo</span>])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> re_compute(thing) <span class="keyword">unless</span> thing[<span class="symbol">:foo</span>][<span class="symbol">:bar</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  partial_compute(thing)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></code></pre><p>  使用 <code>next</code> 而不是条件区块。</p><pre><code><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].each <span class="keyword">do</span> <span class="params">|item|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> item &gt; <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    puts item</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].each <span class="keyword">do</span> <span class="params">|item|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">next</span> <span class="keyword">unless</span> item &gt; <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  puts item</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></code></pre><ul><li><p>倾向使用 <code>map</code> 而不是 <code>collect</code> ， <code>find</code> 而不是 <code>detect</code> ， <code>select</code> 而不是 <code>find_all</code> ， <code>reduce</code> 而不是 <code>inject</code> 以及 <code>size</code> 而不是 <code>length</code> 。这不是一个硬性要求；如果使用别名增加了可读性，使用它没关系。这些有押韵的方法名是从 Smalltalk 继承而来，在别的语言不通用。鼓励使用 <code>select</code> 而不是 <code>find_all</code> 的理由是它跟 <code>reject</code> 搭配起来是一目了然的。</p></li><li><p>不要用 <code>count</code> 代替 <code>size</code>。除了<code>Array</code>其它<code>Enumerable</code>对象都需要遍历整个集合才能得到大小。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">some_hash.count</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">some_hash.size</span></pre></td></tr></tbody></table></figure></li><li><p>倾向使用 <code>flat_map</code> 而不是 <code>map</code> + <code>flatten</code> 的组合。<br>这并不适用于深度大于 2 的数组，举个例子，如果 <code>users.first.songs == ['a', ['b', 'c']]</code> ，则使用 <code>map + flatten</code> 的组合，而不是使用 <code>flat_map</code>。<br><code>flat_map</code> 将数组变平坦一个层级，而 <code>flatten</code> 会将整个数组变平坦。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">all_songs = users.map(&amp;<span class="symbol">:songs</span>).flatten.uniq</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">all_songs = users.flat_map(&amp;<span class="symbol">:songs</span>).uniq</span></pre></td></tr></tbody></table></figure></li><li><p>使用 <code>reverse_each</code> ，不用 <code>reverse.each</code> 。 <code>reverse_each</code> 不会重新分配新数组。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">array.reverse.each { ... }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">array.reverse_each { ... }</span></pre></td></tr></tbody></table></figure></li></ul><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><blockquote><p>程序设计的真正难题是替事物命名及使缓存失效。<br><br>——Phil Karlton</p></blockquote><ul><li><p>标识符用英语命名。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差 - 变量名用非ascii字符</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">заплата = <span class="number">1_000</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差 - 变量名用带有拉丁文的保加利亚语写成。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">zaplata = <span class="number">1_000</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">salary = <span class="number">1_000</span></span></pre></td></tr></tbody></table></figure></li><li><p>符号、方法与变量使用蛇底式小写（snake_case）。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">:<span class="string">'some symbol'</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">:SomeSymbol</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">:someSymbol</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">someVar = <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">someMethod</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SomeMethod</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"> ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">:some_symbol</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>类与模块的命名应使用驼峰式大小写（CamelCase）。（HTTP、RFC、XML 这种首字母缩写应为大写。）</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Someclass</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Some_Class</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeXml</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeXML</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>文件名用蛇底式小写，如 <code>hello_world.rb</code>。</p></li><li><p>目录名用蛇底式小写，如 <code>lib/hello_world/hello_world.rb</code>。</p></li><li><p>尽量使一个源文件中只有一个类或模块。文件名就是类名或模块名，但采用蛇底式小写而不是驼峰式大小写。</p></li><li><p>其它常量的命名应使用尖叫蛇底式大写（SCREAMING_SNAKE_CASE）。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">SomeConst = <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">SOME_CONST = <span class="number">5</span></span></pre></td></tr></tbody></table></figure></li><li><p>谓词方法的名字（返回布尔值的方法）应以问号结尾。 (例如： <code>Array#empty?</code> )。不返回布尔值的方法不应以问号结尾。</p></li><li><p>有潜在<strong>危险性</strong>的方法，若此<strong>危险</strong>方法有安全版本存在时，应以安全版本名加上惊叹号结尾（例如：改动 <code>self</code> 或参数、 <code>exit!</code> （不会向 <code>exit</code> 那样运行 finalizers）, 等等方法）。</p></li><li><p>如果存在潜在的<strong>危险</strong>方法（即修改 <code>self</code> 或者参数的方法，不像 <code>exit</code> 那样运行 finalizers 的 <code>exit!</code>，等等）的安全版本，那么 <em>危险</em> 方法的名字应该以惊叹号结尾。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不好 - 没有对应的安全方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update!</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update!</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>如果可能的话，根据危险方法（bang）来定义对应的安全方法（non-bang）。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">flatten_once!</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    res = []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    each <span class="keyword">do</span> <span class="params">|e|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      [*e].each { <span class="params">|f|</span> res &lt;&lt; f }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    replace(res)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">flatten_once</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    dup.flatten_once!</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>在简短区块中使用 <code>reduce</code> 时，把参数命名为 <code>|a, e|</code> (累加器（<code>accumulator</code>），元素（<code>element</code>）)</p></li><li><p>在定义二元操作符时，把参数命名为 <code>other</code> （<code>&lt;&lt;</code> 与 <code>[]</code> 是这条规则的例外，因为它们的语义不同）。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">+</span><span class="params">(other)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 此处省略方法体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><blockquote><p>良好的代码自身就是最佳的文档。当你要添加一个注释时，扪心自问，“如何改善代码让它不需要注释？” 改善代码，再写相应文档使之更清楚。<br><br>——Steve McConnell</p></blockquote><ul><li><p>编写让人一目了然的代码然后忽略这一节的其它部分。我是认真的！</p></li><li><p>用英语写注释。</p></li><li><p><code>#</code> 与注释文本之间应有一个空格。</p></li><li><p>注释超过一个单词时句首字母应大写，并且在句子停顿或结尾处使用标点符号。句号后使用<a href="http://en.wikipedia.org/wiki/Sentence_spacing" target="_blank" rel="external nofollow noreferrer noopener">一个空格</a>。</p></li><li><p>避免肤浅的注释。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">counter += <span class="number">1</span> <span class="comment"># 计数器加一</span></span></pre></td></tr></tbody></table></figure></li><li><p>及时更新注释。过时的注时比没有注释还糟糕。</p></li></ul><blockquote><p>好代码就像是好的笑话 - 它不需要解释。<br><br>——Russ Olsen</p></blockquote><ul><li>避免替烂代码写注释。重构代码让它们看起来一目了然。（要么做，要么不做——不要只是试试看。——Yoda）</li></ul><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><ul><li><p>注解应该直接写在相关代码那行之前。</p></li><li><p>注解关键字后面，跟着一个冒号及空格，接着是描述问题的文字。</p></li><li><p>如果需要用多行来描述问题，后续行要放在 <code>#</code> 号后面并缩排两个空格。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># <span class="doctag">FIXME:</span> 这在 v3.2.1 版本之后会异常崩溃，或许与</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">#   BarBazUtil 的版本更新有关</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  baz(<span class="symbol">:quux</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>在问题是显而易见的情况下，任何的文档会是多余的，注解应放在有问题的那行的最后，并且不需更多说明。这个用法应该是例外而不是规则。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  sleep <span class="number">100</span> <span class="comment"># OPTIMIZE</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>使用 <code>TODO</code> 标记以后应加入的特征与功能。</p></li><li><p>使用 <code>FIXME</code> 标记需要修复的代码。</p></li><li><p>使用 <code>OPTIMIZE</code> 标记可能影响性能的缓慢或效率低下的代码。</p></li><li><p>使用 <code>HACK</code> 标记代码异味，即那些应该被重构的可疑编码习惯。</p></li><li><p>使用 <code>REVIEW</code> 标记需要确认其编码意图是否正确的代码。举例来说：<code>REVIEW: 我们确定用户现在是这么做的吗？</code></p></li><li><p>如果你觉得恰当的话，可以使用其他定制的注解关键字，但别忘记录在项目的 <code>README</code> 或类似文档中。</p></li></ul><h2 id="类与模块"><a href="#类与模块" class="headerlink" title="类与模块"></a>类与模块</h2><ul><li><p>在类定义语句中使用一致的结构。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 首先是 extend 与 include</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  extend SomeModule</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">include</span> AnotherModule</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 内部类</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  CustomErrorKlass = Class.new(StandaError)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 接着是常量</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  SOME_CONSTANT = <span class="number">20</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 接下来是属性宏</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:name</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 跟着是其它的宏（如果有的话）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  validates <span class="symbol">:name</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 公开的类别方法接在下一行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">some_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 初始化方法在类方法和实例方法之间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 跟着是公开的实例方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">some_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 受保护及私有的方法，一起放在接近结尾的地方</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  protected</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">some_protected_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">  private</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">some_private_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>如果某个类需要多行代码，则不要嵌套在其它类中。应将其独立写在文件中，存放以包含它的类的的名字命名的文件夹中。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># foo.rb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Bar</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 30个方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 20个方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 30个方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># foo.rb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 30个方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># foo/bar.rb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Bar</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 30个方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># foo/car.rb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 20个方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>定义类方法时，优先使用模块而不是类。只有当需要实例化时才使用类。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">some_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 省略函数体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">some_other_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">SomeClass</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  module_function</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">some_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 省略函数体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">some_other_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>当你想将模块的实例方法变成类方法时，优先使用 <code>module_function</code> 而不是 <code>extend self</code>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Utilities</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  extend <span class="keyword">self</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse_something</span><span class="params">(string)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 做一些事</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">other_utility_method</span><span class="params">(number, string)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 做另一些事</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Utilities</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  module_function</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse_something</span><span class="params">(string)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 做一些事</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">other_utility_method</span><span class="params">(number, string)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 做另一些事</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>当设计类的层次结构时，确认它们符合 <a href="http://en.wikipedia.org/wiki/Liskov_substitution_principle" target="_blank" rel="external nofollow noreferrer noopener">里式替换原则</a>。</p></li><li><p>让你的类尽可能 <a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)" target="_blank" rel="external nofollow noreferrer noopener">SOLID</a> 。</p></li><li><p>永远替那些用以表示领域模型的类提供一个适当的 <code>to_s</code> 方法。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:first_name</span>, <span class="symbol">:last_name</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(first_name, last_name)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    @first_name = first_name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    @last_name = last_name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">to_s</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"<span class="subst">#{@first_name}</span> <span class="subst">#{@last_name}</span>"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>使用 <code>attr</code> 系列函数来定义琐碎的访问器或修改器。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(first_name, last_name)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    @first_name = first_name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    @last_name = last_name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">first_name</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    @first_name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">last_name</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    @last_name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:first_name</span>, <span class="symbol">:last_name</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(first_name, last_name)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    @first_name = first_name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    @last_name = last_name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>不要使用 <code>attr</code>。使用 <code>attr_reader</code> 和 <code>attr_accessor</code>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差 - ruby 1.9 中就不推荐了</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">attr <span class="symbol">:something</span>, <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">attr <span class="symbol">:one</span>, <span class="symbol">:two</span>, <span class="symbol">:three</span> <span class="comment"># behaves as attr_reader</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">attr_accessor</span> <span class="symbol">:something</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">attr_reader</span> <span class="symbol">:one</span>, <span class="symbol">:two</span>, <span class="symbol">:three</span></span></pre></td></tr></tbody></table></figure></li><li><p>考虑使用 <code>Struct.new</code>，它替你定义了那些琐碎的访问器（accessors），构造器（constructor）以及比较操作符（comparison operators）。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:first_name</span>, <span class="symbol">:last_name</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(first_name, last_name)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    @first_name = first_name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    @last_name = last_name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">Person = Struct.new(<span class="symbol">:first_name</span>, <span class="symbol">:last_name</span>) <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>不要扩展 <code>Struct.new</code>。它已经是个类了。对它扩展不但引入了无意义的类的层次也会在该文件多次被 require 时出现奇怪的错误。</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; Struct.<span class="title">new</span>(:<span class="title">first_name</span>, :<span class="title">last_name</span>)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">Person = Struct.new(<span class="symbol">:first_name</span>, <span class="symbol">:last_name</span>)</span></pre></td></tr></tbody></table></figure></li><li><p>考虑加入工厂方法以提供附加的有意义的方式来生成一个特定的类实例。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">create</span><span class="params">(options_hash)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 此处省略方法体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>倾向使用<a href="http://en.wikipedia.org/wiki/Duck_typing" target="_blank" rel="external nofollow noreferrer noopener">鸭子类型</a> 而不是继承。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">## 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 抽象方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">speak</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继承超类</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span> &lt; Animal</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">speak</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    puts <span class="string">'Quack! Quack'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继承超类</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> &lt; Animal</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">speak</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    puts <span class="string">'Bau! Bau!'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="comment">## 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">speak</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    puts <span class="string">'Quack! Quack'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">speak</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    puts <span class="string">'Bau! Bau!'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>由于类变量在继承中产生的“讨厌的”行为，避免使用类变量（<code>@@</code>）。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  @@class_var = <span class="string">'parent'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">print_class_var</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    puts @@class_var</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> &lt; Parent</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  @@class_var = <span class="string">'child'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">Parent.print_class_var <span class="comment"># =&gt; will print "child"</span></span></pre></td></tr></tbody></table></figure><p>  如同你所看到的，在类型层级中的所有类其实都共享单独一个类变量。通常情况下应该倾向使用实例变量而不是类变量。</p></li><li><p>依据方法的目的用途指定适当的可见层级（<code>private</code>，<code>protected</code>）。别把所有方法都设为 <code>public</code>（方法的缺省值）。我们现在是在写“Ruby”，不是“Python”。</p></li><li><p>将 <code>public</code>，<code>protected</code>，<code>private</code> 和被应用的方法定义保持一致的缩排。在上下各留一行来强调这个可见性应用于之后的所有方法。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">public_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  private</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">private_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">another_private_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>使用 <code>def self.method</code> 来定义方法。在代码重构时如果修改类名也无需重复多次修改了。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">TestClass</span>.<span class="title">some_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 省略方法体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">some_other_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 省略方法体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 当你需要定义很多个类时，另一种便捷的方式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">class</span> &lt;&lt; self</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">first_method</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      <span class="comment"># 省略方法体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">second_method_etc</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      <span class="comment"># 省略方法体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>在类的语法作用域中定义别名时优先使用 <code>alias</code>，因为 <code>alias</code> 有词法作用域，<code>self</code> 对象是源代码被读取时候的值（不是运行时候的 <code>self</code>），她清楚地告诉使用程序员，除非明确说明，否则方法别名的引用不会在运行时被改变或者被任何子类改变。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Westerner</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">first_name</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    @names.first</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">alias</span> given_name first_name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure><p>因为 <code>alias</code> 和 <code>def</code> 一样，是关键词，相比字符串和符号，优先使用裸字（bareword）；也就是说，这样使用 <code>alias foo bar</code>， 不是 <code>alias :foo :bar</code>。<br>另外要知道 Ruby 怎么处理别名和继承，方法别名定义后，即使对应的方法在后面的代码中重新定义（即修改内部实现）后，<br>别名仍然可以调用到修改前的方法。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fugitive</span> &lt; Westerner</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">first_name</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'Nobody'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure><p>这个例子中，<code>Fugitive#given_name</code> 仍然调用原来的 <code>Westerner#first_name</code>方法，而不是 <code>Fugitive#first_name</code> 方法。<br>要想覆写 <code>Fugitive#given_name</code> 行为，必须在类中重新定义一次。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fugitive</span> &lt; Westerner</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">first_name</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'Nobody'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">alias</span> given_name first_name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>运行时定义模块方法，类方法和单件类方法别名，总是使用 <code>alias_method</code>。因为在上述情况下 <code>alias</code> 会导致不可预期的结果</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Mononymous</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">included</span><span class="params">(other)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    other.class_eval { alias_method <span class="symbol">:full_name</span>, <span class="symbol">:given_name</span> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sting</span> &lt; Westerner</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">include</span> Mononymous</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li><p>使用 <code>fail</code> 方法来抛出异常。仅在捕捉到异常时使用 <code>raise</code> 来重新抛出异常（因为没有失败，所以只是显式地有目的性地抛出一个异常）</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> fail <span class="string">'Oops'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">rescue</span> =&gt; error</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  raise <span class="keyword">if</span> error.message != <span class="string">'Oops'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>如果 <code>fail/raise</code> 只有两个参数，无需显性指定 <code>RuntimeError</code>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">fail RuntimeError, <span class="string">'message'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好——默认就是 RuntimeError</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">fail <span class="string">'message'</span></span></pre></td></tr></tbody></table></figure></li><li><p>将异常类和消息作为参数给 <code>fail/raise</code> ，而不是异常类的的实例。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">fail SomeException.new(<span class="string">'message'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无法使用 `fail SomeException.new('message'), backtrace`.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">fail SomeException, <span class="string">'message'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以使用 `fail SomeException, 'message', backtrace`.</span></span></pre></td></tr></tbody></table></figure></li><li><p>永远不要从 <code>ensure</code> 区块返回。如果你显式地从 <code>ensure</code> 区块中的一个方法返回，那么这方法会如同没有异常般的返回。实际上，异常会被默默丢掉。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  fail</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">ensure</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="string">'very bad idea'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>尽可能使用隐式的 <code>begin</code> 区块。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">begin</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 此处放主要逻辑</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">rescue</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 错误处理放在此处</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 此处放主要逻辑</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">rescue</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 错误处理放在此处</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>通过 <em>contingency</em> 方法 (一个由 Avdi Grimm 创造的词) 来减少 <code>begin</code> 区块的使用。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  something_that_might_fail</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">rescue</span> IOError</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 处理 IOError</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  something_else_that_might_fail</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">rescue</span> IOError</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 处理 IOError</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_io_error_handling</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">yield</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">rescue</span> IOError</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 处理 IOError</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">with_io_error_handling { something_that_might_fail }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">with_io_error_handling { something_else_that_might_fail }</span></pre></td></tr></tbody></table></figure></li><li><p>不要抑制异常。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 这里发生了一个异常</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">rescue</span> SomeError</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 拯救子句完全没有做事</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">do_something <span class="keyword">rescue</span> <span class="literal">nil</span></span></pre></td></tr></tbody></table></figure></li><li><p>避免使用 <code>rescue</code> 的修饰符形式。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差 - 这里将会捕捉 StandardError 及其所有子孙类的异常。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">read_file <span class="keyword">rescue</span> handle_error($!)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好 - 这里只会捕获 Errno::ENOENT 及其所有子孙类的异常</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  read_file</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">rescue</span> Errno::ENOENT =&gt; ex</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  handle_error(ex)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>不要为了控制流程而使用异常。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  n / d</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">rescue</span> ZeroDivisionError</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  puts <span class="string">'Cannot divide by 0!'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> d.zero?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  puts <span class="string">'Cannot divide by 0!'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  n / d</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>避免救援 <code>Exception</code> 类别。这会把信号困住，并呼叫 <code>exit</code>，导致你需要 <code>kill -9</code> 进程。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 呼叫 exit 及杀掉信号会被捕捉（除了 kill -9）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  exit</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">rescue</span> Exception</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  puts <span class="string">"you didn't really want to exit, right?"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 异常处理</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 一个不明确的 rescue 子句捕捉的是 StandardError，</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 而不是许多编程者所设想的 Exception。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">rescue</span> =&gt; e</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 异常处理</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 也好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 这里发生一个异常</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">rescue</span> StandardError =&gt; e</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 异常处理</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>把较具体的异常放在救援链的较上层，不然它们永远不会被拯救。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 一些代码</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">rescue</span> Exception =&gt; e</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 一些处理</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">rescue</span> StandardError =&gt; e</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 一些处理</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 一些代码</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">rescue</span> StandardError =&gt; e</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 一些处理</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">rescue</span> Exception =&gt; e</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 一些处理</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>在 <code>ensure</code> 区块中释放程序的外部资源。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">f = File.open(<span class="string">'testfile'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># .. 处理</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">rescue</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># .. 错误处理</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">ensure</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  f.close <span class="keyword">if</span> f</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>调用资源获取方法时，尽可能使用具备自动清理功能的版本。</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差，需要显式关闭文件描述符</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">f = File.open(<span class="string">'testfile'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">f.close</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好，文件描述符会被自动关闭</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">File.open(<span class="string">'testfile'</span>) <span class="keyword">do</span> <span class="params">|f|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>倾向使用标准库的异常类而不是导入新的异常类。</p></li></ul><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ul><li><p>倾向数组及哈希的字面表示法（除非你需要给构造器传入参数）。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">arr = Array.new</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">hash = Hash.new</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">arr = []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">hash = {}</span></pre></td></tr></tbody></table></figure></li><li><p>创建元素为单词（没有空格和特殊符号）的数组时，用 <code>%w</code> 而不是 [] 方法。仅当数组有两个及以上元素时才应用这个规则。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">STATES = [<span class="string">'draft'</span>, <span class="string">'open'</span>, <span class="string">'closed'</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">STATES = <span class="string">%w(draft open closed)</span></span></pre></td></tr></tbody></table></figure></li><li><p>当你需要一个符号的数组（并且不需要保持 Ruby 1.9 兼容性）时，使用 <code>%i</code>。仅当数组只有两个及以上元素时才应用这个规则。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">STATES = [<span class="symbol">:draft</span>, <span class="symbol">:open</span>, <span class="symbol">:closed</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">STATES = %i(draft open closed)</span></pre></td></tr></tbody></table></figure></li><li><p>避免在 <code>Array</code> 和 <code>Hash</code> 字面量中的最后一个元素后面使用逗号，特别是元素同一行的情况下。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差 - 方面移动、增加和修改参数，但仍不建议使用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">VALUES = [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">          <span class="number">1001</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">          <span class="number">2020</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">          <span class="number">3333</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">VALUES = [<span class="number">1001</span>, <span class="number">2020</span>, <span class="number">3333</span>, ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">VALUES = [<span class="number">1001</span>, <span class="number">2020</span>, <span class="number">3333</span>]</span></pre></td></tr></tbody></table></figure></li><li><p>避免在数组中创造巨大的间隔。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">arr = []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">arr[<span class="number">100</span>] = <span class="number">1</span> <span class="comment"># 现在你有一个很多 nil 的数组</span></span></pre></td></tr></tbody></table></figure></li><li><p>当访问数组的首元素或尾元素时，尽量使用 <code>first</code> 或 <code>last</code>， 而非 <code>[0]</code> 或 <code>[-1]</code>。</p></li><li><p>当处理的元素没有重复时，使用 <code>Set</code> 来替代 <code>Array</code> 。 <code>Set</code> 实现了无序、无重复值的集合。 <code>Set</code> 的方法同数组类一样直观，还可像哈希中那样快速查找元素。</p></li><li><p>尽量用符号来取代字符串作为哈希的键。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">hash = { <span class="string">'one'</span> =&gt; <span class="number">1</span>, <span class="string">'two'</span> =&gt; <span class="number">2</span>, <span class="string">'three'</span> =&gt; <span class="number">3</span> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">hash = { <span class="symbol">one:</span> <span class="number">1</span>, <span class="symbol">two:</span> <span class="number">2</span>, <span class="symbol">three:</span> <span class="number">3</span> }</span></pre></td></tr></tbody></table></figure></li><li><p>避免使用可变的对象作为哈希的键。</p></li><li><p>当哈希的键为符号时，使用 Ruby 1.9 的哈希的字面语法。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">hash = { <span class="symbol">:one</span> =&gt; <span class="number">1</span>, <span class="symbol">:two</span> =&gt; <span class="number">2</span>, <span class="symbol">:three</span> =&gt; <span class="number">3</span> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">hash = { <span class="symbol">one:</span> <span class="number">1</span>, <span class="symbol">two:</span> <span class="number">2</span>, <span class="symbol">three:</span> <span class="number">3</span> }</span></pre></td></tr></tbody></table></figure></li><li><p>但哈希的键有符号也有字符串时，不使用Ruby 1.9的字面量语法。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">{ <span class="symbol">a:</span> <span class="number">1</span>, <span class="string">'b'</span> =&gt; <span class="number">2</span> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">{ <span class="symbol">:a</span> =&gt; <span class="number">1</span>, <span class="string">'b'</span> =&gt; <span class="number">2</span> }</span></pre></td></tr></tbody></table></figure></li><li><p>用 <code>Hash#key?</code> 不用 <code>Hash#has_key?</code>；用 <code>Hash#value?</code> 不用 <code>Hash#has_value?</code>。Matz <a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-core/43765" target="_blank" rel="external nofollow noreferrer noopener">在此</a>提及，考虑废弃较长形式的方法。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">hash.has_key?(<span class="symbol">:test</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">hash.has_value?(value)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">hash.key?(<span class="symbol">:test</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">hash.value?(value)</span></pre></td></tr></tbody></table></figure></li><li><p>在处理应该存在的哈希键时，使用 <code>Hash#fetch</code>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">heroes = { <span class="symbol">batman:</span> <span class="string">'Bruce Wayne'</span>, <span class="symbol">superman:</span> <span class="string">'Clark Kent'</span> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差 - 如果我们打错字的话，我们就无法找到对的英雄了</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">heroes[<span class="symbol">:batman</span>] <span class="comment"># =&gt; "Bruce Wayne"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">heroes[<span class="symbol">:supermen</span>] <span class="comment"># =&gt; nil</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好 - fetch 会抛出一个 KeyError 来使这个问题明显</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">heroes.fetch(<span class="symbol">:supermen</span>)</span></pre></td></tr></tbody></table></figure></li><li><p>在使用 <code>Hash#fetch</code> 时，使用第二个参数设置默认值。</p> <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">batman = { <span class="symbol">name:</span> <span class="string">'Bruce Wayne'</span>, <span class="symbol">is_evil:</span> <span class="literal">false</span> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差 - 如果我们仅仅使用 || 操作符，那么当值为假时，我们不会得到预期的结果</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">batman[<span class="symbol">:is_evil</span>] <span class="params">||</span> <span class="literal">true</span> <span class="comment"># =&gt; true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好 - fetch 在遇到假值时依然正确</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">batman.fetch(<span class="symbol">:is_evil</span>, <span class="literal">true</span>) <span class="comment"># =&gt; false</span></span></pre></td></tr></tbody></table></figure></li><li><p>如果求值的代码有副作用或者开销大，尽量用 <code>Hash#fetch</code> 加区块而不是直接设定默认值。</p> <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">batman = { <span class="symbol">name:</span> <span class="string">'Bruce Wayne'</span> }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差 - 默认值是立即求值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">batman.fetch(<span class="symbol">:powers</span>, obtain_batman_powers) <span class="comment"># obtain_batman_powers 需要复杂的计算</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好 - 区块是惰性求值，只有当 KeyError 异常时才执行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">batman.fetch(<span class="symbol">:powers</span>) { obtain_batman_powers }</span></pre></td></tr></tbody></table></figure></li><li><p>当需要从哈希中同时获取多个键值时，使用 <code>Hash#values_at</code>。</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">email = data[<span class="string">'email'</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">username = data[<span class="string">'nickname'</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">email, username = data.values_at(<span class="string">'email'</span>, <span class="string">'nickname'</span>)</span></pre></td></tr></tbody></table></figure></li><li><p>Ruby 1.9 的哈希是有序的，利用这个特性。</p></li><li><p>在遍历一个集合时，不要改动它。</p></li><li><p>当访问集合中的元素时，避免通过 <code>[n]</code> 直接访问，尽量使用提供的方法。这样可以防止你对 <code>nil</code> 调用 <code>[]</code>。</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Regexp.last_match[<span class="number">1</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Regexp.last_match(<span class="number">1</span>)</span></pre></td></tr></tbody></table></figure></li><li><p>为集合提供存取器时，在访问元素之前采用一种替代的形式，从而防止用户访问的下标是 <code>nil</code>。</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">awesome_things</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  @awesome_things</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">awesome_things</span><span class="params">(index = <span class="literal">nil</span>)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> index &amp;&amp; @awesome_things</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    @awesome_things[index]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    @awesome_things</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li><p>尽量使用字符串插值（interpolation），而不是字符串连接（concatenation）。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">email_with_name = user.name + <span class="string">' &lt;'</span> + user.email + <span class="string">'&gt;'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">email_with_name = <span class="string">"<span class="subst">#{user.name}</span> &lt;<span class="subst">#{user.email}</span>&gt;"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">email_with_name = format(<span class="string">'%s &lt;%s&gt;'</span>, user.name, user.email)</span></pre></td></tr></tbody></table></figure></li><li><p>对于插值表达式, 括号内不应有留白（padded-spacing）。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">"From: <span class="subst">#{ user.first_name }</span>, <span class="subst">#{ user.last_name }</span>"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="string">"From: <span class="subst">#{user.first_name}</span>, <span class="subst">#{user.last_name}</span>"</span></span></pre></td></tr></tbody></table></figure></li><li><p>选定一个字符串字面量创建的风格。Ruby 社区认可两种分割，默认用单引号（风格 A）和默认用双引号（风格 B）</p><ul><li><p><strong>（风格 A）</strong>当你不需要插入特殊符号如 <code>\t</code>, <code>\n</code>, <code>'</code>, 等等时，尽量使用单引号的字符串。</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">name = <span class="string">"Bozhidar"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">name = <span class="string">'Bozhidar'</span></span></pre></td></tr></tbody></table></figure></li><li><p><strong>（风格 B）</strong> 用双引号。除非字符串中含有双引号，或者含有你希望抑制的转义字符。</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">name = <span class="string">'Bozhidar'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">name = <span class="string">"Bozhidar"</span></span></pre></td></tr></tbody></table></figure></li></ul><p>有争议的是，第二种风格在 Ruby 社区里更受欢迎一些。但是本指南中字符串采用第一种风格。</p></li><li><p>不要用 <code>?x</code>。从 Ruby 1.9 开始， <code>?x</code> 和 <code>'x'</code> 是等价的（只包括一个字符的字符串）。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">char = <span class="string">?c</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">char = <span class="string">'c'</span></span></pre></td></tr></tbody></table></figure></li><li><p>别忘了使用 <code>{}</code> 来围绕被插入字符串的实例与全局变量。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:first_name</span>, <span class="symbol">:last_name</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(first_name, last_name)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    @first_name = first_name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    @last_name = last_name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 差 - 有效，但难看</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">to_s</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"#@first_name #@last_name"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">to_s</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"<span class="subst">#{@first_name}</span> <span class="subst">#{@last_name}</span>"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">$global = <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">puts <span class="string">"$global = #$global"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">puts <span class="string">"$global = <span class="subst">#{$global}</span>"</span></span></pre></td></tr></tbody></table></figure></li><li><p>字符串插值不要用 <code>Object#to_s</code> 。Ruby 默认会调用该方法。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">message = <span class="string">"This is the <span class="subst">#{result.to_s}</span>."</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">message = <span class="string">"This is the <span class="subst">#{result}</span>."</span></span></pre></td></tr></tbody></table></figure></li><li><p>当你需要建构庞大的数据块（chunk）时，避免使用 <code>String#+</code> 。<br>使用 <code>String#&lt;&lt;</code> 来替代。<code>&lt;&lt;</code> 原位地改变字符串实例，因此比 <code>String#+</code> 来得快。<code>String#+</code> 创造了一堆新的字符串对象。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好也比较快</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">html = <span class="string">''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">html &lt;&lt; <span class="string">'&lt;h1&gt;Page title&lt;/h1&gt;'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">paragraphs.each <span class="keyword">do</span> <span class="params">|paragraph|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  html &lt;&lt; <span class="string">"&lt;p&gt;<span class="subst">#{paragraph}</span>&lt;/p&gt;"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>当你可以选择更快速、更专门的替代方法时，不要使用 <code>String#gsub</code>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">url = <span class="string">'http://example.com'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">str = <span class="string">'lisp-case-rules'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">url.gsub(<span class="string">"http://"</span>, <span class="string">"https://"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">str.gsub(<span class="string">"-"</span>, <span class="string">"_"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">url.sub(<span class="string">"http://"</span>, <span class="string">"https://"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">str.tr(<span class="string">"-"</span>, <span class="string">"_"</span>)</span></pre></td></tr></tbody></table></figure></li><li><p>heredocs 中的多行文字会保留前缀空白。因此做好如何缩进的规划。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">code = &lt;&lt;-<span class="keyword">END</span>.gsub(<span class="regexp">/^\s+\|/</span>, <span class="string">''</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="params">|def test</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="params">  |</span>  some_method</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="params">|  other_method</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="params">  |</span><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">END</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#=&gt; "def\n  some_method\n  \nother_method\nend"</span></span></pre></td></tr></tbody></table></figure></li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><blockquote><p>有些人在面对问题时，不经大脑便认为，「我知道，这里该用正则表达式」。现在他要面对两个问题了。<br><br>——Jamie Zawinski</p></blockquote><ul><li><p>如果只需要在字符串中简单的搜索文字，不要使用正则表达式：<code>string['text']</code>。</p></li><li><p>针对简单的字符串查询，可以直接在字符串索引中直接使用正则表达式。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">match = string[<span class="regexp">/regexp/</span>]             <span class="comment"># 获得匹配正则表达式的内容</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">first_group = string[<span class="regexp">/text(grp)/</span>, <span class="number">1</span>] <span class="comment"># 获得分组的内容</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">string[<span class="regexp">/text (grp)/</span>, <span class="number">1</span>] = <span class="string">'replace'</span>  <span class="comment"># string =&gt; 'text replace'</span></span></pre></td></tr></tbody></table></figure></li><li><p>当你不需要替分组结果时，使用非捕获组。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">/(first<span class="params">|second)/   # 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="params">/(?:first|</span>second)/ <span class="comment"># 好</span></span></pre></td></tr></tbody></table></figure></li><li><p>不要使用 Perl 遗风的变量来表示捕获的正则分组（如 <code>$1</code> 、 <code>$2</code> 等），它们看起来神神秘秘的。使用 <code>Regexp.last_match(n)</code>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">/(regexp)/ =~ string</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">process $1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">process Regexp.last_match(<span class="number">1</span>)</span></pre></td></tr></tbody></table></figure></li><li><p>避免使用数字来获取分组。因为很难明白它们代表的意思。应该使用命名分组来替代。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">/(regexp)/ =~ string</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">process Regexp.last_match(<span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">/(<span class="string">?&lt;</span>meaningful_var&gt;regexp)/ =~ string</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">process meaningful_var</span></pre></td></tr></tbody></table></figure></li><li><p>字符类别只有几个你需要关心的特殊字符：<code>^</code>、<code>-</code>、<code>\</code>、<code>]</code>，所以你不用转义 <code>[]</code> 中的 <code>.</code> 或中括号。</p></li><li><p>小心使用 <code>^</code> 与 <code>$</code> ，它们匹配的是一行的开始与结束，不是字符串的开始与结束。如果你想要匹配整个字符串，使用 <code>\A</code> 与 <code>\z</code>。(译注：<code>\Z</code> 实为 <code>/\n?\z/</code>，使用 <code>\z</code> 才能匹配到有含新行的字符串的结束)</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">string = <span class="string">"some injection\nusername"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">string[<span class="regexp">/^username$/</span>]   <span class="comment"># 匹配</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">string[<span class="regexp">/\Ausername\z/</span>] <span class="comment"># 不匹配</span></span></pre></td></tr></tbody></table></figure></li><li><p>针对复杂的正则表达式，使用 <code>x</code> 修饰符。可提高可读性并可以加入有用的注释。只是要注意空白字符会被忽略。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">regexp = <span class="regexp">/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">  start         # 一些文本</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">  \s            # 空白字符</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">  (group)       # 第一组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">  (?:alt1|alt2) # 一些替代方案</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">  end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">/x</span></span></pre></td></tr></tbody></table></figure></li><li><p>针对复杂的替换，<code>sub</code> 或 <code>gsub</code> 可以与区块或哈希结合使用。</p></li></ul><h2 id="百分号字面量"><a href="#百分号字面量" class="headerlink" title="百分号字面量"></a>百分号字面量</h2><ul><li><p>需要插值与嵌入双引号的单行字符串使用 <code>%()</code> （是 <code>%Q</code> 的简写）。多行字符串，最好用 heredocs 。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差（不需要插值）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">%(&lt;div class="text"&gt;Some text&lt;/div&gt;)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应该使用 '&lt;div class="text"&gt;Some text&lt;/div&gt;'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差（没有双引号）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="string">%(This is <span class="subst">#{quality}</span> style)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应该使用 "This is #{quality} style"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差（多行）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="string">%(&lt;div&gt;\n&lt;span class="big"&gt;<span class="subst">#{exclamation}</span>&lt;/span&gt;\n&lt;/div&gt;)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应该是一个 heredoc</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好（需要插值、有双引号以及单行）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="string">%(&lt;tr&gt;&lt;td class="name"&gt;<span class="subst">#{name}</span>&lt;/td&gt;)</span></span></pre></td></tr></tbody></table></figure></li><li><p>没有 <code>'</code> 和 <code>"</code> 的字符串不要使用 <code>%q</code>。除非需要插值，否则普通字符串可读性更好。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">name = <span class="string">%q(Bruce Wayne)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">time = <span class="string">%q(8 o'clock)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">question = <span class="string">%q("What did you say?")</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">name = <span class="string">'Bruce Wayne'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">time = <span class="string">"8 o'clock"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">question = <span class="string">'"What did you say?"'</span></span></pre></td></tr></tbody></table></figure></li><li><p>只有正则表达式要匹配多于一个的 <code>/</code> 字元时，使用 <code>%r</code>。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">%r{\s+}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">%r{^<span class="regexp">/(.*)$}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">%r{^/blog</span><span class="regexp">/2011/</span>(.*)$}</span></pre></td></tr></tbody></table></figure></li><li><p>除非调用的命令中用到了反引号（这种情况不常见），否则不要用 <code>%x</code> 。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">date = <span class="string">%x(date)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">date = <span class="string">`date`</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">echo = <span class="string">%x(echo `date`)</span></span></pre></td></tr></tbody></table></figure></li><li><p>不要用 <code>%s</code> 。社区倾向使用 <code>:"some string"</code> 来创建含有空白的符号。</p></li><li><p>用 <code>%</code> 表示字面量时使用 <code>()</code>，<code>%r</code> 除外。因为 <code>(</code> 在正则中比较常用。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">%w[one two three]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="string">%q{"Test's king!", John said.}</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="string">%w(one tho three)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="string">%q("Test's king!", John said.)</span></span></pre></td></tr></tbody></table></figure></li></ul><h2 id="元编程"><a href="#元编程" class="headerlink" title="元编程"></a>元编程</h2><ul><li><p>避免无谓的元编程。</p></li><li><p>写一个函数库时不要使核心类混乱（不要使用 monkey patch）。</p></li><li><p>倾向使用区块形式的 <code>class_eval</code> 而不是字符串插值（string-interpolated）的形式。</p><ul><li><p>当你使用字符串插值形式时，总是提供 <code>__FILE__</code> 及 <code>__LINE__</code>，使你的 backtrace 看起来有意义：</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">class_eval <span class="string">"def use_relative_model_naming?; true; end"</span>, __FILE_<span class="number">_</span>, __LINE_<span class="number">_</span></span></pre></td></tr></tbody></table></figure></li><li><p>倾向使用 <code>define_method</code> 而不是 <code>class_eval{ def ... }</code></p></li></ul></li><li><p>当使用 <code>class_eval</code> （或其它的 <code>eval</code>）搭配字符串插值时，添加一个注解区块，来演示如果做了插值的样子（我从 Rails 代码学来的一个实践）：</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># activesupport/lib/active_support/core_ext/string/output_safety.rb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">UNSAFE_STRING_METHODS.each <span class="keyword">do</span> <span class="params">|unsafe_method|</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> <span class="string">'String'</span>.respond_to?(unsafe_method)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    class_eval &lt;&lt;-EOT, __FILE_<span class="number">_</span>, __LINE_<span class="number">_</span> + <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      <span class="function"><span class="keyword">def</span> <span class="comment">#{unsafe_method}(*args, &amp;block)      # def capitalize(*args, &amp;block)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        to_str.<span class="comment">#{unsafe_method}(*args, &amp;block) #   to_str.capitalize(*args, &amp;block)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">end</span>                                      <span class="comment"># end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      <span class="function"><span class="keyword">def</span> <span class="comment">#{unsafe_method}!(*args) # def capitalize!(*args)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        @dirty = <span class="literal">true</span>              <span class="comment">#   <span class="doctag">@dirty</span> = true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">super</span>                      <span class="comment">#   super</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">end</span>                          <span class="comment"># end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    EOT</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></tbody></table></figure></li><li><p>元编程避免使用 <code>method_missing</code>。它会让 backtraces 变得很凌乱；行为不被罗列在 <code>#methods</code> 里；拼错的方法调用可能默默地工作（<code>nukes.launch_state = false</code>）。考虑使用委托、代理、或是 <code>define_method</code> 来取代。如果你必须使用 <code>method_missing</code>：</p><ul><li><p>确保 <a href="http://blog.marc-andre.ca/2010/11/methodmissing-politely.html" target="_blank" rel="external nofollow noreferrer noopener">也定义了 <code>respond_to_missing?</code></a></p></li><li><p>仅捕捉字首定义良好的方法，像是 <code>find_by_*</code>——让你的代码愈肯定（assertive） 愈好。</p></li><li><p>在语句的最后调用 <code>super</code></p></li><li><p>委托到确定的、非魔法方法中:</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method_missing?</span><span class="params">(meth, *args, &amp;block)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> /^find_by<span class="number">_</span>(<span class="string">?&lt;</span>prop&gt;.*)/ =~ meth</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># ... lots of code to do a find_by</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">super</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method_missing?</span><span class="params">(meth, *args, &amp;block)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> /^find_by<span class="number">_</span>(<span class="string">?&lt;</span>prop&gt;.*)/ =~ meth</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    find_by(prop, *args, &amp;block)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">super</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最好的方式，可能是每个可找到的属性被声明后，使用 define_method。</span></span></pre></td></tr></tbody></table></figure></li></ul></li><li><p>相比较 <code>send</code>，倾向于使用 <code>public_send</code>，因为 <code>send</code> 会无视 <code>private</code> / <code>protected</code> 的可见性。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># We have  an ActiveModel Organization that includes concern Activatable</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Activatable</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  extend ActiveSupport::Concern</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  included <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    before_create <span class="symbol">:create_token</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  private</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">reset_token</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">create_token</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">activate!</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Organization</span> &lt; ActiveRecord::Base</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">include</span> Activatable</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">linux_organization = Organization.find(...)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># BAD - violates privacy</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">linux_organization.send(<span class="symbol">:reset_token</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># GOOD - should throw an exception</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">linux_organization.public_send(<span class="symbol">:reset_token</span>)</span></pre></td></tr></tbody></table></figure></li><li><p>相比 <code>send</code>，优先使用 <code>__send__</code>，因为调用对象可能已经存在 <code>send</code> 方法。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'socket'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">u1 = UDPSocket.new</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">u1.bind(<span class="string">'127.0.0.1'</span>, <span class="number">4913</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">u2 = UDPSocket.new</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">u2.connect(<span class="string">'127.0.0.1'</span>, <span class="number">4913</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不会发送一个消息给接受者</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实际上通过 UDP socket 发送一个消息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">u2.send <span class="symbol">:sleep</span>, <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 发送一个消息给接受者，相当于 u2.sleep(0)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">u2.__send_<span class="number">_</span> <span class="symbol">:sleep</span>, <span class="number">0</span></span></pre></td></tr></tbody></table></figure></li></ul><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul><li><p><code>ruby -w</code> 写安全的代码。</p></li><li><p>避免使用哈希作为可选参数。这个方法是不是做太多事了？（对象初始器是本规则的例外）。</p></li><li><p>避免方法长于 10 行代码（LOC）。理想上，大部分的方法会小于 5 行。空行不算进 LOC 里。</p></li><li><p>避免参数列表长于三或四个参数。</p></li><li><p>如果你真的需要“全局”方法，把它们加到 Kernel 并设为私有的。</p></li><li><p>使用模块的实例变量代替全局变量。</p>  <figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$foo_bar = <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Foo</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">class</span> &lt;&lt; self</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">attr_accessor</span> <span class="symbol">:bar</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">Foo.bar = <span class="number">1</span></span></pre></td></tr></tbody></table></figure></li><li><p>使用 <code>OptionParser</code> 来解析复杂的命令行选项及 <code>ruby -s</code> 来处理琐碎的命令行选项。</p></li><li><p>使用 <code>Time.now</code> 而不是 <code>Time.new</code> 来获取系统时间。</p></li><li><p>用函数式的方法编程，在有意义的情况下避免副作用 (mutation)。</p></li><li><p>不要改变参数，除非那就是方法的目的。</p></li><li><p>避免超过三层的区块嵌套。</p></li><li><p>保持一致性。在理想的世界里，遵循这些准则。</p></li><li><p>使用常识。</p></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>以下是一些工具，让你自动检查 Ruby 代码是否符合本指南。</p><h3 id="RuboCop"><a href="#RuboCop" class="headerlink" title="RuboCop"></a>RuboCop</h3><p><a href="https://github.com/bbatsov/rubocop" target="_blank" rel="external nofollow noreferrer noopener">RuboCop</a> 是一个基于本指南的 Ruby 代码风格检查工具。 RuboCop 涵盖了本指南相当大的部分，支持 MRI 1.9 和 MRI 2.0，而且与 Emacs 整合良好。</p><h3 id="RubyMine"><a href="#RubyMine" class="headerlink" title="RubyMine"></a>RubyMine</h3><p><a href="http://www.jetbrains.com/ruby/" target="_blank" rel="external nofollow noreferrer noopener">RubyMine</a> 的代码检查<a href="http://confluence.jetbrains.com/display/RUBYDEV/RubyMine+Inspections" target="_blank" rel="external nofollow noreferrer noopener">部分基于</a>本指南。</p><h1 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h1><p>在本指南所写的每条规则都不是定案。这只是我渴望想与同样对 Ruby 编程风格有兴趣的大家一起工作，以致于最终我们可以替整个 Ruby 社区创造一个有益的资源。</p><p>欢迎 open tickets 或 push 一个带有改进的更新请求。在此提前感谢你的帮助！</p><h2 id="如何贡献？"><a href="#如何贡献？" class="headerlink" title="如何贡献？"></a>如何贡献？</h2><p>很简单，只需要参考 <a href="https://github.com/bbatsov/ruby-style-guide/blob/master/CONTRIBUTING.md" target="_blank" rel="external nofollow noreferrer noopener">贡献准则</a>。</p><h1 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h1><p><img alt="Creative Commons License" data-src="http://i.creativecommons.org/l/by/3.0/88x31.png" class="lazyload"><br>This work is licensed under a <a href="http://creativecommons.org/licenses/by/3.0/deed.zh" target="_blank" rel="external nofollow noreferrer noopener">Creative Commons Attribution 3.0 Unported License</a></p><h1 id="口耳相传"><a href="#口耳相传" class="headerlink" title="口耳相传"></a>口耳相传</h1><p>一份社区驱动的风格指南，如果没多少人知道，对一个社区来说就没有多少用处。微博转发这份指南，分享给你的朋友或同事。我们得到的每个评价、建议或意见都可以让这份指南变得更好一点。而我们想要拥有的是最好的指南，不是吗？</p><p>共勉之，<br><br><a href="https://twitter.com/bbatsov" target="_blank" rel="external nofollow noreferrer noopener">Bozhidar</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序幕&quot;&gt;&lt;a href=&quot;#序幕&quot; class=&quot;headerlink&quot; title=&quot;序幕&quot;&gt;&lt;/a&gt;序幕&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;榜样很重要。&lt;br&gt;&lt;br&gt;——墨菲警官《机器战警》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为一名 Ruby 开发者，有件事一直困扰着我——Python 社区有一份优秀的编程风格参考文档（&lt;a href=&quot;http://www.python.org/dev/peps/pep-0008/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;PEP-8&lt;/a&gt;），而我们迄今还没有一本记录 Ruby 编程风格及最佳实践的官方指南。我确信编程风格很重要，我也相信像 Ruby 这样伟大的黑客社区能够写出这本众望所归的风格指南。&lt;/p&gt;
&lt;p&gt;这份指南原本是我司内部的 Ruby 编程指南 (在下所写的)，后来，我决定要把这一成果贡献给广大的 Ruby 社区。这个世界再多一份公司内部文件并没有什么不同，然而，由社区推动并制定的一系列 Ruby 编程惯例、最佳实践及代码风格，却能让全世界的 Ruby 开发者都从中获益。&lt;/p&gt;
&lt;p&gt;从编写这份指南开始，我收到了很多 Ruby 社区成员的反馈。感谢所有的建议及支持！只要同心协力，我们就能创造一个让每个 Ruby 开发者都从中受益的资源。&lt;/p&gt;
&lt;p&gt;顺道一提，如果你对 Rails 感兴趣，你可以看看这份 &lt;a href=&quot;https://github.com/bbatsov/rails-style-guide&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;Ruby on Rails 风格指南&lt;/a&gt; 作为补充。&lt;/p&gt;
&lt;h1 id=&quot;Ruby-风格指南&quot;&gt;&lt;a href=&quot;#Ruby-风格指南&quot; class=&quot;headerlink&quot; title=&quot;Ruby 风格指南&quot;&gt;&lt;/a&gt;Ruby 风格指南&lt;/h1&gt;&lt;p&gt;这份 Ruby 风格指南推荐的是 Ruby 的最佳实践，现实世界中的 Ruby 程序员据此可以写出可维护的高质量代码。我们只说实际使用中的用法。指南再好，但里面说的过于理想化结果大家拒绝使用或者可能根本没人用，又有何意义。&lt;/p&gt;
&lt;p&gt;本指南分为几个小节，每一小节由几条相关的规则构成。我尽力在每条规则后面说明理由（如果省略了说明，那是因为其理由显而易见）。&lt;/p&gt;
&lt;p&gt;这些规则不是我凭空想象出来的——它们中的绝大部分来自我多年以来作为职业软件工程师的经验，来自 Ruby 社区成员的反馈和建议，以及几个评价甚高的 Ruby 编程资源，像 &lt;a href=&quot;http://pragprog.com/book/ruby4/programming-ruby-1-9-2-0&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;《Programming Ruby 1.9》&lt;/a&gt; 以及 &lt;a href=&quot;http://www.amazon.com/Ruby-Programming-Language-David-Flanagan/dp/0596516177&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;《The Ruby Programming Language》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Ruby 社区尚未就某些规则达成明显的共识，例如字符串字面量的引号、hash 字面量两端是否应该有空格、多行方法链式调用中点运算符的位置。对于这种情况，本指南列出了所有可选的流行风格，你可以任选其一并坚持使用。&lt;/p&gt;
&lt;p&gt;本指南会一直更新，随着 Ruby 本身的发展，新的规则会添加进来，过时的规则会被剔除。&lt;/p&gt;
&lt;p&gt;许多项目有其自己的编码风格指南（往往是源于本指南而创建）。当项目的风格指南与本指南发生冲突时，应以项目级的指南为准。&lt;/p&gt;
&lt;p&gt;你可以使用 &lt;a href=&quot;https://github.com/TechnoGate/transmuter&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;Transmuter&lt;/a&gt; 生成本指南的 PDF 或 HTML 版本。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/rubocop&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;RuboCop&lt;/a&gt; 项目会自动检查你的 Ruby 代码是否符合这份 Ruby 风格指南。&lt;/p&gt;
&lt;p&gt;本指南有以下翻译版本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhCN.md&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;简体中文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhTW.md&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;繁體中文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/porecreat/ruby-style-guide/blob/master/README-frFR.md&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;法文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/arbox/de-ruby-style-guide/blob/master/README-deDE.md&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;德文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fortissimo1997/ruby-style-guide/blob/japanese/README.ja.md&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;日文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dalzony/ruby-style-guide/blob/master/README-koKR.md&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;韩文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rubensmabueno/ruby-style-guide/blob/master/README-PT-BR.md&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;葡萄牙文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/arbox/ruby-style-guide/blob/master/README-ruRU.md&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;俄文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alemohamad/ruby-style-guide/blob/master/README-esLA.md&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;西班牙文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/scrum2b/ruby-style-guide/blob/master/README-viVN.md&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer noopener&quot;&gt;越南文&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#源代码排版&quot;&gt;源代码排版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#语法&quot;&gt;语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#命名&quot;&gt;命名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#注释&quot;&gt;注释&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#注解&quot;&gt;注解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#类与模块&quot;&gt;类与模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#异常&quot;&gt;异常&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#集合&quot;&gt;集合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#字符串&quot;&gt;字符串&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#正则表达式&quot;&gt;正则表达式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#百分号字面量&quot;&gt;百分号字面量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#元编程&quot;&gt;元编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#其它&quot;&gt;其它&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#工具&quot;&gt;工具&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Guide" scheme="http://notes.seirhsiao.com/categories/Guide/"/>
    
    
      <category term="指南" scheme="http://notes.seirhsiao.com/tags/%E6%8C%87%E5%8D%97/"/>
    
      <category term="风格" scheme="http://notes.seirhsiao.com/tags/%E9%A3%8E%E6%A0%BC/"/>
    
      <category term="翻译" scheme="http://notes.seirhsiao.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="ruby" scheme="http://notes.seirhsiao.com/tags/ruby/"/>
    
  </entry>
  
  <entry>
    <title>欢迎使用 Cmd Markdown 编辑阅读器</title>
    <link href="http://notes.seirhsiao.com/posts/41dbf9c2/"/>
    <id>http://notes.seirhsiao.com/posts/41dbf9c2/</id>
    <published>2019-02-03T04:12:06.000Z</published>
    <updated>2019-12-07T10:40:10.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欢迎使用-Cmd-Markdown-编辑阅读器"><a href="#欢迎使用-Cmd-Markdown-编辑阅读器" class="headerlink" title="欢迎使用 Cmd Markdown 编辑阅读器"></a>欢迎使用 Cmd Markdown 编辑阅读器</h1><hr><p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p><blockquote><ul><li>整理知识，学习笔记</li><li>发布日记，杂文，所见所想</li><li>撰写发布技术文稿（代码支持）</li><li>撰写发布学术论文（LaTeX 公式支持）</li></ul></blockquote><p><img alt="cmd-markdown-logo" data-src="https://www.zybuluo.com/static/img/logo.png" class="lazyload"></p><p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p><h3 id="Windows-Mac-Linux-全平台客户端"><a href="#Windows-Mac-Linux-全平台客户端" class="headerlink" title="Windows/Mac/Linux 全平台客户端"></a><a href="https://www.zybuluo.com/cmd/" target="_blank" rel="external nofollow noreferrer noopener">Windows/Mac/Linux 全平台客户端</a></h3><blockquote><p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class="icon-file"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p></blockquote><hr><h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p><h3 id="1-制作一份待办事宜-Todo-列表"><a href="#1-制作一份待办事宜-Todo-列表" class="headerlink" title="1. 制作一份待办事宜 Todo 列表"></a>1. 制作一份待办事宜 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表" target="_blank" rel="external nofollow noreferrer noopener">Todo 列表</a></h3><ul><li><input disabled type="checkbox"> 支持以 PDF 格式导出文稿</li><li><input disabled type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li><li><input checked disabled type="checkbox"> 新增 Todo 列表功能</li><li><input checked disabled type="checkbox"> 修复 LaTex 公式渲染问题</li><li><input checked disabled type="checkbox"> 新增 LaTex 公式编号功能</li></ul><h3 id="2-书写一个质能守恒公式-LaTeX"><a href="#2-书写一个质能守恒公式-LaTeX" class="headerlink" title="2. 书写一个质能守恒公式[^LaTeX]"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p><h3 id="3-高亮一段代码-code"><a href="#3-高亮一段代码-code" class="headerlink" title="3. 高亮一段代码[^code]"></a>3. 高亮一段代码[^code]</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">pass</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># A comment</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></span></pre></td></tr></tbody></table></figure><h3 id="4-高效绘制-流程图"><a href="#4-高效绘制-流程图" class="headerlink" title="4. 高效绘制 流程图"></a>4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="external nofollow noreferrer noopener">流程图</a></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">op=&gt;operation: Your Operation</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">cond=&gt;condition: Yes or No?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">e=&gt;end</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">st-&gt;op-&gt;cond</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">cond(yes)-&gt;e</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">cond(no)-&gt;op</span></pre></td></tr></tbody></table></figure><h3 id="5-高效绘制-序列图"><a href="#5-高效绘制-序列图" class="headerlink" title="5. 高效绘制 序列图"></a>5. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图" target="_blank" rel="external nofollow noreferrer noopener">序列图</a></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Note right of Bob: Bob thinks</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Bob--&gt;Alice: I am good thanks!</span></pre></td></tr></tbody></table></figure><h3 id="6-绘制表格"><a href="#6-绘制表格" class="headerlink" title="6. 绘制表格"></a>6. 绘制表格</h3><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table><h3 id="7-更详细语法说明"><a href="#7-更详细语法说明" class="headerlink" title="7. 更详细语法说明"></a>7. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="external nofollow noreferrer noopener">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册" target="_blank" rel="external nofollow noreferrer noopener">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p><p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p><hr><h2 id="什么是-Cmd-Markdown"><a href="#什么是-Cmd-Markdown" class="headerlink" title="什么是 Cmd Markdown"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p><h3 id="1-实时同步预览"><a href="#1-实时同步预览" class="headerlink" title="1. 实时同步预览"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p><h3 id="2-编辑工具栏"><a href="#2-编辑工具栏" class="headerlink" title="2. 编辑工具栏"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p><p><img alt="tool-editor" data-src="https://www.zybuluo.com/static/img/toolbar-editor.png" class="lazyload"></p><h3 id="3-编辑模式"><a href="#3-编辑模式" class="headerlink" title="3. 编辑模式"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右测的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p><h3 id="4-实时的云端文稿"><a href="#4-实时的云端文稿" class="headerlink" title="4. 实时的云端文稿"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p><h3 id="5-离线模式"><a href="#5-离线模式" class="headerlink" title="5. 离线模式"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p><h3 id="6-管理工具栏"><a href="#6-管理工具栏" class="headerlink" title="6. 管理工具栏"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p><p><img alt="tool-manager" data-src="https://www.zybuluo.com/static/img/toolbar-manager.jpg" class="lazyload"></p><p>通过管理工具栏可以：</p><p><i class="icon-share"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class="icon-file"></i> 新建：开始撰写一篇新的文稿<br><i class="icon-trash"></i> 删除：删除当前的文稿<br><i class="icon-cloud"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class="icon-reorder"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class="icon-pencil"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p><h3 id="7-阅读工具栏"><a href="#7-阅读工具栏" class="headerlink" title="7. 阅读工具栏"></a>7. 阅读工具栏</h3><p><img alt="tool-manager" data-src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" class="lazyload"></p><p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p><p>工具栏上的五个图标依次为：</p><p><i class="icon-list"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="icon-chevron-sign-left"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class="icon-adjust"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="icon-desktop"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="icon-fullscreen"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p><h3 id="8-阅读模式"><a href="#8-阅读模式" class="headerlink" title="8. 阅读模式"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class="icon-desktop"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p><h3 id="9-标签、分类和搜索"><a href="#9-标签、分类和搜索" class="headerlink" title="9. 标签、分类和搜索"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p><p>标签： 未分类</p><p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p><p><img alt="file-list" data-src="https://www.zybuluo.com/static/img/file-list.png" class="lazyload"></p><h3 id="10-文稿发布和分享"><a href="#10-文稿发布和分享" class="headerlink" title="10. 文稿发布和分享"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="icon-share"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p><hr><p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class="icon-file"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p><p>作者 <a href="http://weibo.com/ghosert" target="_blank" rel="external nofollow noreferrer noopener">@ghosert</a><br>2015 年 06月 15日    </p><p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external nofollow noreferrer noopener">MathJax</a> 参考更多使用方法。</p><p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;欢迎使用-Cmd-Markdown-编辑阅读器&quot;&gt;&lt;a href=&quot;#欢迎使用-Cmd-Markdown-编辑阅读器&quot; class=&quot;headerlink&quot; title=&quot;欢迎使用 Cmd Markdown 编辑阅读器&quot;&gt;&lt;/a&gt;欢迎使用 Cmd Markdown
      
    
    </summary>
    
    
      <category term="Editor" scheme="http://notes.seirhsiao.com/categories/Editor/"/>
    
    
      <category term="Markdown" scheme="http://notes.seirhsiao.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>重装系统后重新部署恢复 Hexo blog</title>
    <link href="http://notes.seirhsiao.com/posts/dda8c81b/"/>
    <id>http://notes.seirhsiao.com/posts/dda8c81b/</id>
    <published>2018-10-14T14:05:07.000Z</published>
    <updated>2019-12-07T01:18:10.269Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以下方法只适用于没有删除 hexo blog 文件夹</p></blockquote><p>因为重装系统后，Hexo 相关依赖插件/软件和在 C 盘的缓存资料都会被删除，以至于 Hexo 的相关命令都无法运行。所有，在重装系统后，都要重新部署 Hexo。但是重新部署并不难，只需要几个步骤就行。<br>因为我的 hexo blog 文件夹不存储于 C 盘，并没有因为重装系统被删掉。所有重新部署很容易。</p><h2 id="安装-git-和-node"><a href="#安装-git-和-node" class="headerlink" title="安装 git 和 node"></a>安装 git 和 node</h2><p>git for windows: <a href="https://git-scm.com/" target="_blank" rel="external nofollow noreferrer noopener">https://git-scm.com/</a><br>Node.js: <a href="https://nodejs.org/en/" target="_blank" rel="external nofollow noreferrer noopener">https://nodejs.org/en/</a></p><h2 id="生成-ssh-密钥"><a href="#生成-ssh-密钥" class="headerlink" title="生成 ssh 密钥"></a>生成 ssh 密钥</h2><p>配置 git 个人信息和生成 ssh 密钥<br>打开 git bash，输入</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"xxxxx"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">"xxxxxx@xx.com"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"xxxxxx@xx.com"</span></span></pre></td></tr></tbody></table></figure><p>把上面的 xxxx 换成自己的资料，然后一直 Enter 就行。</p><h2 id="设置-Github-的-ssh-密钥"><a href="#设置-Github-的-ssh-密钥" class="headerlink" title="设置 Github 的 ssh 密钥"></a>设置 Github 的 ssh 密钥</h2><p>当上面的运行完成后，会在 <code>C:\Users\主用户</code>里出现<code>.ssh</code>文件夹，里面有 id_rsa 和 id_rsa.pub 两个文件，复制 id_rsa.pub 的内容。</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Rebuild_hexo_when_reinstall_the_system/1.png" class="lazyload"></p><p>打开 Github 网页，依次是 <code>右上角Settings - SSH and GPG keys - New SSH key</code> 把复制的内容粘贴到 <code>Key</code>栏，然后保存。<br><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Rebuild_hexo_when_reinstall_the_system/2.png" class="lazyload"><br><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Rebuild_hexo_when_reinstall_the_system/3.png" class="lazyload"></p><p>PS：如果你有把 blog 同步到 coding 的，记得同样把 id_rsa.pub 的内容复制到 coding 的 ssh 公钥去，具体为<code>右上角个人设置 － SSH公钥 - 新增公钥</code><br><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Rebuild_hexo_when_reinstall_the_system/4.png" class="lazyload"></p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>git bash 上 输入 <code>npm install hexo-cli -g</code></p><h2 id="删掉原-blog-文件夹部分文件"><a href="#删掉原-blog-文件夹部分文件" class="headerlink" title="删掉原 blog 文件夹部分文件"></a>删掉原 blog 文件夹部分文件</h2><p>打开你原有的 blog 文件夹，只需保留_config.yml，theme/，source/，scaffolds/，package.json，.gitignore 这些项目，删除其他的文件。</p><h2 id="安装依赖文件"><a href="#安装依赖文件" class="headerlink" title="安装依赖文件"></a>安装依赖文件</h2><p>git bash 上 输入 <code>npm install</code></p><h2 id="安装部署插件"><a href="#安装部署插件" class="headerlink" title="安装部署插件"></a>安装部署插件</h2><p>git bash 上 输入 <code>npm install hexo-deployer-git --save</code></p><p>最后 运行 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 看看是否成功。</p><blockquote><p>本文章参考 <a href="https://helloqingfeng.github.io/2017/02/25/hexo-rebuilding/" target="_blank" rel="external nofollow noreferrer noopener">https://helloqingfeng.github.io/2017/02/25/hexo-rebuilding/</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;以下方法只适用于没有删除 hexo blog 文件夹&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为重装系统后，Hexo 相关依赖插件/软件和在 C 盘的缓存资料都会被删除，以至于 Hexo 的相关命令都无法运行。所有，在重装系统后，都要重新部署 
      
    
    </summary>
    
    
      <category term="教程" scheme="http://notes.seirhsiao.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Hexo" scheme="http://notes.seirhsiao.com/categories/%E6%95%99%E7%A8%8B/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://notes.seirhsiao.com/tags/Hexo/"/>
    
      <category term="教程" scheme="http://notes.seirhsiao.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="主题" scheme="http://notes.seirhsiao.com/tags/%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Windows上Java的环境变量配置</title>
    <link href="http://notes.seirhsiao.com/posts/aa98736e/"/>
    <id>http://notes.seirhsiao.com/posts/aa98736e/</id>
    <published>2018-10-14T10:17:13.000Z</published>
    <updated>2019-12-07T01:09:16.020Z</updated>
    
    <content type="html"><![CDATA[<p>对于开发者来说，Java是电脑上必备安装的软件。安装Java不单单只是安装jdk就可以，还要配置Java的环境变量。这篇文章主要是介绍如何配置Java的环境变量。</p><blockquote><p>电脑系统： Windows 10 1809<br>Java版本： 1.8.0_181</p></blockquote><h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><p>第一步当然是安装Java文件。Java现在已经发现到Java11了，不一定要安装最新的版本，可以根据自己的需要安装对应的版本。<br>本文安装的 Java SE 8u181<br>下载Java可以到oracle的官网：<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external nofollow noreferrer noopener">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><h2 id="新建Java-Home变量"><a href="#新建Java-Home变量" class="headerlink" title="新建Java_Home变量"></a>新建Java_Home变量</h2><p>右键This PC(即此电脑)，选择Properties(属性)选项。</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/setting_up_enviromental_variables_in_windows10/1.png" class="lazyload"></p><p>点击左边栏的Advanced sysyem settings(高级系统设置)，点击下面的Environment Variables(环境变量)</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/setting_up_enviromental_variables_in_windows10/2.png" class="lazyload"></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/setting_up_enviromental_variables_in_windows10/3.png" class="lazyload"></p><p>点击System variable(系统变量)下的New(新建)。</p><blockquote><p>Variable name(变量名) 填爲 Java_Home<br>Variable value(变量值) 爲Java的安装路径。例如我的是 C:\Program Files\Java\jdk1.8.0_181<br>然后点击OK(确定)</p></blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/setting_up_enviromental_variables_in_windows10/4.png" class="lazyload"></p><h2 id="编辑-Path变量"><a href="#编辑-Path变量" class="headerlink" title="编辑 Path变量"></a>编辑 Path变量</h2><p>在System variable(系统变量)下找到<code>Path</code>并双击。<br>在打开的窗口中点击右边的编辑文本。<br>把 <code>%Java_Home%\bin;%Java_Home%\jre\bin;</code> 複製到 Variable value(变量值) 的开头并保存。</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/setting_up_enviromental_variables_in_windows10/5.png" class="lazyload"></p><h2 id="新建-CLASSPATH"><a href="#新建-CLASSPATH" class="headerlink" title="新建 CLASSPATH"></a>新建 CLASSPATH</h2><p>点击System variable(系统变量)下的New(新建)。</p><blockquote><p>Variable name(变量名) 填爲 CLASSPATH<br>Variable value(变量值) 填爲  .;%Java_Home%\bin;%Java_Home%\lib\dt.jar;%Java_Home%\lib\tools.jar<br>然后点击OK(确定)</p></blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/setting_up_enviromental_variables_in_windows10/6.png" class="lazyload"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>上面已经把相关的环境变量给配置好了，接下来测试下是否配置正确。<br>打开CMD或者PowerShell</p><p>输入<code>Java</code></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/setting_up_enviromental_variables_in_windows10/7.png" class="lazyload"></p><p>接着输入 <code>java -version</code></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/setting_up_enviromental_variables_in_windows10/8.png" class="lazyload"></p><p>接着输入 <code>javac</code></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/setting_up_enviromental_variables_in_windows10/9.png" class="lazyload"></p><p>如果你的结果跟上面图片的结果一样或者相似的话，恭喜你，Java的环境变量配置已经成功了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于开发者来说，Java是电脑上必备安装的软件。安装Java不单单只是安装jdk就可以，还要配置Java的环境变量。这篇文章主要是介绍如何配置Java的环境变量。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;电脑系统： Windows 10 1809&lt;br&gt;Java版本： 1.
      
    
    </summary>
    
    
      <category term="教程" scheme="http://notes.seirhsiao.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Windows" scheme="http://notes.seirhsiao.com/categories/%E6%95%99%E7%A8%8B/Windows/"/>
    
    
      <category term="教程" scheme="http://notes.seirhsiao.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Windows" scheme="http://notes.seirhsiao.com/tags/Windows/"/>
    
      <category term="Java" scheme="http://notes.seirhsiao.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Adapter</title>
    <link href="http://notes.seirhsiao.com/posts/d6615de0/"/>
    <id>http://notes.seirhsiao.com/posts/d6615de0/</id>
    <published>2018-07-19T16:48:53.000Z</published>
    <updated>2019-12-07T01:09:30.057Z</updated>
    
    <content type="html"><![CDATA[<p>Adapter 只是一个接口，其派生了ListAdapter和SpinnerAdater两个子接口。<br>ListAdater为AbsListView提供列表项,SpinnerAdater为AbsSpinner提供列表项。<br>以下是Adapter相关类的关系图</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Adapter/1.png" class="lazyload"></p><p>Adapter常用的实现类:</p><ul><li>ArrayAdapter: 通常用于将数组或者List集合的多个值包装成多个列表项。</li><li>SimpleAdapter: 用于将List集合的多个对象包装成多个列表项。</li><li>SimpleCursorAdapter: 与SimpleAdapter基本相似,只是用于包装Cursor提供的数据。</li><li>BaseAdapter: 通常用于被扩展。扩展BaseAdapter可以对各列表项进行最大限度地定制。</li></ul><h2 id="使用ArrayAdapter创建ListView"><a href="#使用ArrayAdapter创建ListView" class="headerlink" title="使用ArrayAdapter创建ListView"></a>使用ArrayAdapter创建ListView</h2><p><strong>修改<code>activity_main.xml</code></strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    &gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/list1"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="tag">        <span class="attr">android:divider</span>=<span class="string">"#f00"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="tag">        <span class="attr">android:dividerHeight</span>=<span class="string">"2px"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="tag">        <span class="attr">android:headerDividersEnabled</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/list2"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="tag">        <span class="attr">android:divider</span>=<span class="string">"#0f0"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="tag">        <span class="attr">android:dividerHeight</span>=<span class="string">"2px"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="tag">        <span class="attr">android:headerDividersEnabled</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span></pre></td></tr></tbody></table></figure><p><code>android:divider:</code> 可以实现分割线,可以用图片或者颜色<br><code>android:dividerHeight</code> 设置分割线的高度<br><code>android:headerDividersEnabled</code> 是否显示头部的分割线，默认是true</p><p><strong>修改MainActivity.java</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        setContentView(R.layout.activity_main);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        ListView list1 = (ListView) findViewById(R.id.list1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        String [] arr1 = {<span class="string">"孙悟空"</span>,<span class="string">"猪八戒"</span>,<span class="string">"牛魔王"</span>};</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        ArrayAdapter&lt;String&gt; adapter1 = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>,R.layout.array_item,arr1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        list1.setAdapter(adapter1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        ListView list2 = (ListView) findViewById(R.id.list2);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        String[] arr2 = { <span class="string">"java"</span>,<span class="string">"hibernate"</span>,<span class="string">"spring"</span>,<span class="string">"android"</span>};</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        ArrayAdapter&lt;String&gt; adapter2 = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>,R.layout.checked_item,arr2);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        list2.setAdapter(adapter2);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p><code>ArrayAdapter&lt;String&gt; adapter1 = new ArrayAdapter&lt;String&gt;(this,R.layout.array_item,arr1);</code></p><p>ArrayAdapter传入了三个参数:</p><ul><li><p>Context: 代表了访问整个Android应用的接口。</p></li><li><p>textViewResourceId: 一个TextView的资源ID,该TextView组件将作为ArrayAdapter的列表项组件。</p></li><li><p>数组或者List: 提供数据。</p></li></ul><p>以上代码可以看到,该数组或List包含多少个元素，就将会生成多少个列表项，每个列表项都是TextView组件。<br>arr1有三个数据,则会生成一个包含三个列表项的ArrayAdapter,每个列表项的组件外观由R.layout.array_item布局文件(该布局文件只是一个TextView)控制。</p><p><strong>新建array_item.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/TextView"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">"24dp"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">"10px"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:shadowColor</span>=<span class="string">"#f0f"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:shadowDx</span>=<span class="string">"4"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:shadowDy</span>=<span class="string">"4"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:shadowRadius</span>=<span class="string">"2"</span>/&gt;</span></span></pre></td></tr></tbody></table></figure><p>TextView-shadow 阴影实现方式</p><ul><li><p>android:shadowColor：阴影的颜色</p></li><li><p>android:shadowDx：水平方向上的偏移量</p></li><li><p>android:shadowDy：垂直方向上的偏移量</p></li><li><p>android:shadowRadius：是阴影的的半径大小,值也大，阴影越大</p></li></ul><p><strong>新建 checked_item.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">CheckedTextView</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/checktextview"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">"24dp"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">"10px"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:checked</span>=<span class="string">"true"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:checkMark</span>=<span class="string">"?android:listChoiceIndicatorMultiple"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    /&gt;</span></span></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Adapter/2.png" class="lazyload"></p><h2 id="基于ListActivity实现列表"><a href="#基于ListActivity实现列表" class="headerlink" title="基于ListActivity实现列表"></a>基于ListActivity实现列表</h2><p>如果程序仅仅只是显示一个列表，那么可以无需通过设置xml来实现，而是直接让Activity继承ListActivity来实现。</p><p><strong>修改MainActivity.java</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main2Activity</span> <span class="keyword">extends</span> <span class="title">ListActivity</span> </span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        String[] atr = {<span class="string">"孙悟空"</span>,<span class="string">"猪八戒"</span>,<span class="string">"牛魔王"</span>};</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        ArrayAdapter &lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>,android.R.layout.simple_list_item_multiple_choice,atr);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        setListAdapter(adapter);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><p>可以看到,不用使用setContentView()去调用布局文件。</p><p>运行结果：</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Adapter/3.png" class="lazyload"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Adapter 只是一个接口，其派生了ListAdapter和SpinnerAdater两个子接口。&lt;br&gt;ListAdater为AbsListView提供列表项,SpinnerAdater为AbsSpinner提供列表项。&lt;br&gt;以下是Adapter相关类的关系图&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="Android" scheme="http://notes.seirhsiao.com/categories/Android/"/>
    
      <category term="第一行代码" scheme="http://notes.seirhsiao.com/categories/Android/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="Android" scheme="http://notes.seirhsiao.com/tags/Android/"/>
    
      <category term="第一行代码" scheme="http://notes.seirhsiao.com/tags/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81/"/>
    
      <category term="Adapter" scheme="http://notes.seirhsiao.com/tags/Adapter/"/>
    
  </entry>
  
  <entry>
    <title>9Patch 介绍</title>
    <link href="http://notes.seirhsiao.com/posts/777fb9e9/"/>
    <id>http://notes.seirhsiao.com/posts/777fb9e9/</id>
    <published>2018-07-19T11:19:28.000Z</published>
    <updated>2019-12-07T01:09:35.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9Patch图片介绍"><a href="#9Patch图片介绍" class="headerlink" title="9Patch图片介绍"></a>9Patch图片介绍</h1><p>9Patch图片是一种特殊的png图片,以.9.png结尾,它在原始的图片四周各添加一个宽度为1像素的像条,这4条线条决定了该图片的缩放规则、内容显示规则。</p><p>在Android Studio 上编辑<code>.9.png</code>,具体是在Android Studio上右键点击你要编辑的照片,选择<code>Create 9-Patch file</code>就可以进入编辑界面。</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/9png1.png" class="lazyload"></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/9png2.png" class="lazyload"></p><p>这就是9-Patch的编辑界面</p><p>Optional controls include:</p><ul><li>Zoom: Adjust the zoom level of the graphic in the drawing area.</li><li>Patch scale: Adjust the scale of the images in the preview area.</li><li>Show lock: Visualize the non-drawable area of the graphic on mouse-over.</li><li>Show patches: Preview the stretchable patches in the drawing area (pink is a stretchable patch), as shown in figure 2, above.</li><li>Show content: Highlight the content area in the preview images (purple is the area in which content is allowed), as shown in figure 2.</li><li>Show bad patches: Adds a red border around patch areas that may produce artifacts in the graphic when stretched, as shown in figure 2. Visual coherence of your stretched image will be maintained if you eliminate all bad patches.</li></ul><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/9png3.png" class="lazyload"></p><p>这3个从上到下依次是</p><ul><li>纵向拉伸的预览</li><li>横线拉伸的预览</li><li>纵横向一起拉伸的预览</li></ul><p>9Patch的规则：</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/9png4.png" class="lazyload"><br><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/9png5.png" class="lazyload"></p><ul><li><p>上侧和左侧的黑色线段共同决定了图片的缩放区域</p><ul><li>上侧的黑色线段为上边界绘制巨型,它覆蓋的区域可以水平缩放。</li><li>左侧的黑色线段为左边界绘制巨型,它覆蓋的区域可以纵向上缩放。</li><li>它们二者的交集区域可以在两个方向上缩放</li></ul></li><li><p>下侧和右侧的黑色线段共同决定了图片的内容显示区域</p><ul><li>以下侧的黑色线段为下边界绘制巨型</li><li>以右侧的黑色线段为右边界绘制巨型</li><li>它们二者的交集区域为内容显示区域</li></ul></li></ul><h1 id="9Patch-相关文章"><a href="#9Patch-相关文章" class="headerlink" title="9Patch 相关文章"></a>9Patch 相关文章</h1><h2 id="Android设计中如何切图-9-png（点9图）"><a href="#Android设计中如何切图-9-png（点9图）" class="headerlink" title="Android设计中如何切图.9.png（点9图）"></a>Android设计中如何切图.9.png（点9图）</h2><blockquote><p>转自: <a href="http://www.miued.com/2074/" target="_blank" rel="external nofollow noreferrer noopener">http://www.miued.com/2074/</a></p></blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/1.png" class="lazyload"></p><p>在Android的设计过程中,为了适配不同的手机分辨率,图片大多需要拉伸或者压缩,这样就出现了可以任意调整大小的一种图片格式“.9.png”。这种图片是用于Android开发的一种特殊的图片格式,它的好处在于可以用简单的方式把一张图片中哪些区域可以拉伸,哪些区域不可以拉伸设定好,同时可以把显示内容区域的位置标示清楚。<br>本文结合一些具体的例子来看下.9.png的具体用法。</p><p>首先看下普通的.png资源与.9.png的资源区别：</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/2.png" class="lazyload"></p><p>普通的png资源就不多介绍了,可以明显看到.9.png的外围是有一些黑色的线条的,那这些线条是用来做什么的呢？我们来看下放大的图像：</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/3.png" class="lazyload"></p><p>放大后可以比较明显的看到上下左右分别有一个像素的黑色线段,这里分别标注了序号。简单来说,序号1和2标识了可以拉伸的区域,序号3和4标识了内容区域。当设定了按钮实际应用的宽和高之后,横向会拉伸1区域的像素,纵向会拉伸2区域的像素。如下图：</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/5.png" class="lazyload"></p><p>拉伸的含义应该比较容易理解,但是内容区域的标注有什么意义呢？我们来看下图：</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/6.png" class="lazyload"></p><p>这里程序设置的文字垂直居中,水平居左的对齐方式。对齐方式是没有问题的,但是对于这种大圆角同时又有些不规则边框的的图形来说,错误的标注方式会让排版看起来很混乱。所以我们需要修正内容区域的线段位置和长度。</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/7.png" class="lazyload"></p><p>把横向的内容区域缩短到圆角以内,纵向的内容区域控制在输入框的高度以内,这样文字就可以正常显示了。</p><p>这里还有一种特殊情况,就是本身是.9.png的资源,但是在修改过程中你希望这张.9.png不能被拉伸（在做皮肤的情况中有可能会遇到）,那怎么办呢？只要把拉伸区域的点点在透明像素的地方就可以了,这样拉伸的时候会拉伸透明部分的像素,而不会拉伸图像本身。如下图:</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/8.png" class="lazyload"></p><p>大家可以看到拉伸区域的黑点是可以不连续的。</p><p>说了半天.9.png的用法,那.9.png如何输出呢？有很多种方式可以输出.9.png,比如说用draw9patch.bat这个工具,或者简单一点,用photoshop直接输出。输出的方式是先输出普通的png资源,然后扩大画布大小,上下左右各空出一个像素,再用一个像素的铅笔工具（颜色选择纯黑色）,上下左右分别画点就可以了,保存的时候注意把后缀修改为.9.png。<br>有两点需要特别注意下：<br>1.最外围的一圈像素必须要么是纯黑色,要么是透明,一点点的半透明的像素都不可以有,比如说99%的黑色或者是1%的投影都不可以有;<br>2.文件的后缀名必须是.9.png,不能是.png或者是.9.png.png,这样的命名都会导致编译失败。</p><h2 id="A-simple-guide-to-9-patch-for-Android-UI"><a href="#A-simple-guide-to-9-patch-for-Android-UI" class="headerlink" title="A simple guide to 9-patch for Android UI"></a>A simple guide to 9-patch for Android UI</h2><blockquote><p>转自:<a href="http://radleymarx.com/ux-dev/simple-guide-to-9-patch/" target="_blank" rel="external nofollow noreferrer noopener">http://radleymarx.com/ux-dev/simple-guide-to-9-patch/</a></p></blockquote><p>While I was working on my first Android app, I found 9-patch (aka 9.png) to be confusing and poorly documented. After a little while, I finally picked up on how it works and decided to throw together something to help others figure it out.</p><p>Basically, 9-patch uses png transparency to do an advanced form of 9-slice or scale9. The guides are straight, 1-pixel black lines drawn on the edge of your image that define the scaling and fill of your image. By naming your image file name.9.png, Android will recognize the 9.png format and use the black guides to scale and fill your bitmaps.</p><p>Here’s a basic guide map:</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/9.png" class="lazyload"></p><p>9-patch-guides</p><p>As you can see, you have guides on each side of your image. The TOP and LEFT guides are for scaling your image (i.e. 9-slice), while the RIGHT and BOTTOM guides define the fill area.</p><p>The black guide lines are cut-off/removed from your image - they won’t show in the app.  Guides must only be one pixel wide, so if you want a 48x48 button, your png will actually be 50x50. Anything thicker than one pixel will remain part of your image. (My examples have 4-pixel wide guides for better visibility. They should really be only 1-pixel).</p><p>Your guides must be solid black (#000000). Even a slight difference in color (#000001) or alpha will cause it to fail and stretch normally. This failure won’t be obvious either*, it fails silently! Yes. Really. Now you know.</p><p>Also you should keep in mind that remaining area of the one-pixel outline must be completely transparent. This includes the four corners of the image - those should always be clear. This can be a bigger problem than you realize. For example, if you scale an image in Photoshop it will add anti-aliased pixels which may include almost-invisible pixels which will also cause it to fail*. If you must scale in Photoshop, use the Nearest Neighbor setting in the Resample Image pulldown menu (at the bottom of the Image Size pop-up menu) to keep sharp edges on your guides.</p><p> This is actually a “fix” in the latest dev kit. Previously it would manifest itself as all of your other images and resources suddenly breaking, not the actually broken 9-patch image.</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/10.png" class="lazyload"></p><p>scalable-area</p><p>The TOP and LEFT guides are used to define the scalable portion of your image - LEFT for scaling height, TOP for scaling width. Using a button image as an example, this means the button can stretch horizontally and vertically within the black portion and everything else, such as the corners, will remain the same size. The allows you to have buttons that can scale to any size and maintain a uniform look.</p><p>It’s important to note that 9-patch images don’t scale down - they only scale up. So it’s best to start as small as possible.</p><p>Also, you can leave out portions in the middle of the scale line. So for example, if you have a button with a sharp glossy edge across the middle, you can leave out a few pixels in the middle of the LEFT guide. The center horizontal axis of your image won’t scale, just the parts above and below it, so your sharp gloss won’t get anti-aliased or fuzzy.</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/11.png" class="lazyload"></p><p>Fill area guides are optional and provide a way define the area for stuff like your text label. Fill determines how much room there is within your image to place text, or an icon, or other things. 9-patch isn’t just for buttons, it works for background images as well.</p><p>The above button &amp; label example is exaggerated simply to explain the idea of fill - the label isn’t completely accurate. To be honest, I haven’t experienced how Android does multi-line labels since a button label is usually a single row of text.</p><p>Finally, here’s a good demonstration of how scale and fill guides can vary, such as a LinearLayout with a background image &amp; fully rounded sides:</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/12.jpg" class="lazyload"></p><p>With this example, the LEFT guide isn’t used but we’re still required to have a guide. The background image don’t scale vertically; it just scales horizontally (based on the TOP guide). Looking at the fill guides, the RIGHT and BOTTOM guides extend beyond where they meet the image’s curved edges. This allows me to place my round buttons close to the edges of the background for a tight, fitted look.</p><p>So that’s it. 9-patch is super easy, once you get it. It’s not a perfect way to do scaling, but the fill-area and multi-line scale-guides does offer more flexibility than traditional 9-slice and scale9. Give it a try and you’ll figure it out quickly.</p><h2 id="其他资料"><a href="#其他资料" class="headerlink" title="其他资料"></a>其他资料</h2><ol><li><a href="https://developer.android.com/studio/write/draw9patch" target="_blank" rel="external nofollow noreferrer noopener">Create resizable bitmaps (9-Patch files)</a></li><li><a href="https://developer.android.com/guide/topics/graphics/drawables#nine-patch" target="_blank" rel="external nofollow noreferrer noopener">Drawables overview</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;9Patch图片介绍&quot;&gt;&lt;a href=&quot;#9Patch图片介绍&quot; class=&quot;headerlink&quot; title=&quot;9Patch图片介绍&quot;&gt;&lt;/a&gt;9Patch图片介绍&lt;/h1&gt;&lt;p&gt;9Patch图片是一种特殊的png图片,以.9.png结尾,它在原始的图片四
      
    
    </summary>
    
    
      <category term="Android" scheme="http://notes.seirhsiao.com/categories/Android/"/>
    
      <category term="第一行代码" scheme="http://notes.seirhsiao.com/categories/Android/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="9Patch" scheme="http://notes.seirhsiao.com/tags/9Patch/"/>
    
      <category term="Android" scheme="http://notes.seirhsiao.com/tags/Android/"/>
    
      <category term="UI" scheme="http://notes.seirhsiao.com/tags/UI/"/>
    
      <category term="第一行代码" scheme="http://notes.seirhsiao.com/tags/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>为Blog添加版权说明</title>
    <link href="http://notes.seirhsiao.com/posts/d87ce901/"/>
    <id>http://notes.seirhsiao.com/posts/d87ce901/</id>
    <published>2018-07-10T14:48:50.000Z</published>
    <updated>2019-12-07T01:06:42.313Z</updated>
    
    <content type="html"><![CDATA[<p>最近更换了新的Hexo主题<a href="https://github.com/iTimeTraveler/hexo-theme-hiker" target="_blank" rel="external nofollow noreferrer noopener">hexo-theme-hiker</a>,觉得挺好看的。文章底部没有版权说明,自己动手加上。</p><h2 id="新建文件-copyright-ejs"><a href="#新建文件-copyright-ejs" class="headerlink" title="新建文件 copyright.ejs"></a>新建文件 copyright.ejs</h2><p>在<code>themes\hiker\layout\_partial</code>新建文件<code>copyright.ejs</code></p><p>打开<code>copyright.ejs</code>,添加一下内容。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        &lt;ul class="post-copyright"&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">          &lt;li class="post-copyright-author"&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">          &lt;strong&gt;&lt;%= __('copyright.author') %&gt; &lt;/strong&gt;&lt;%= config.author%&gt;&lt;/a&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">          &lt;/li&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">          &lt;li class="post-copyright-link"&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">          &lt;strong&gt;&lt;%= __('copyright.link') %&gt; &lt;/strong&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">          &lt;a href="&lt;%- config.root %&gt;&lt;%- post.path %&gt;" target="_blank" title="&lt;%= post.title %&gt;"&gt;&lt;%- config.url %&gt;/&lt;%- post.path %&gt;&lt;/a&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">          &lt;/li&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">          &lt;li class="post-copyright-license"&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            &lt;strong&gt;&lt;%= __('copyright.license_title') %&gt;  &lt;/strong&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            &lt;%= __('copyright.left_license_content') %&gt;&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" title="Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"&gt;CC BY-NC-ND 4.0&lt;/a&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            &lt;%= __('copyright.right_license_content') %&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">          &lt;/li&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &lt;/ul&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">      &lt;div&gt;</span></pre></td></tr></tbody></table></figure><h2 id="修改article-ejs文件"><a href="#修改article-ejs文件" class="headerlink" title="修改article.ejs文件"></a>修改article.ejs文件</h2><p>打开<code>themes\hiker\layout\_partial\article.ejs</code>添加一下内容,位置介于donate和comment之间</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; theme.donate.enable){ %&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        &lt;%- partial('donate') %&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">      &lt;% } %&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">       &lt;!-- 要添加的内容 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      &lt;% if (!index &amp;&amp; theme.copyright.enable){ %&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      &lt;%- partial('copyright') %&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      &lt;% } %&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      &lt;!----&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      &lt;% if (!index &amp;&amp; post.comments &amp;&amp; (theme.gentie_productKey || theme.duoshuo_shortname || theme.disqus_shortname || theme.uyan_uid || theme.wumii || theme.livere_shortname)){ %&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &lt;%- partial('comment') %&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      &lt;% } %&gt;</span></pre></td></tr></tbody></table></figure><h2 id="修改-article-styl"><a href="#修改-article-styl" class="headerlink" title="修改 article.styl"></a>修改 article.styl</h2><p>修改<code>themes\hiker\source\css\_partial\article.styl</code>,在末端添加以下内容。</p><figure class="highlight styl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-copyright</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">margin</span>: <span class="number">2em</span> <span class="number">0</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1em</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">border-left</span>: <span class="number">3px</span> solid <span class="number">#FF1700</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F9F9F9</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">list-style</span>: none;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-copyright</span> <span class="selector-tag">li</span> {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h2 id="修改语言文件"><a href="#修改语言文件" class="headerlink" title="修改语言文件"></a>修改语言文件</h2><p>在themes\hiker\languages中,找到你应用的语言文件,例如zh-TW,打开并添加以下内容。</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">copyright:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">author:</span> <span class="string">"作者: "</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">link:</span> <span class="string">"文章连结: "</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">license_title:</span> <span class="string">"版权声明: "</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">left_license_content:</span> <span class="string">"本网志所有文章除特别声明外,均采用 "</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">right_license_content:</span> <span class="string">"许可协议。转载请注明出处!"</span></span></pre></td></tr></tbody></table></figure><h2 id="修改主题设置文件"><a href="#修改主题设置文件" class="headerlink" title="修改主题设置文件"></a>修改主题设置文件</h2><p>打开<code>themes\hiker\_config.yml</code>,添加以下内容。</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#版权信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">copyright:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><p>最后当然是 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 就可以看到结果了</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Add_a_copyright_notice_to_the_blog/COPYRIGHT.png" class="lazyload"></p><h2 id="资料参考"><a href="#资料参考" class="headerlink" title="资料参考"></a>资料参考</h2><p><a href="http://okbtm.com/archives/ead2b478.html" target="_blank" rel="external nofollow noreferrer noopener">为Hexo icarus添加版权说明</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      为Blog添加版权说明
    
    </summary>
    
    
      <category term="教程" scheme="http://notes.seirhsiao.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Hexo" scheme="http://notes.seirhsiao.com/categories/%E6%95%99%E7%A8%8B/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://notes.seirhsiao.com/tags/Hexo/"/>
    
      <category term="主题" scheme="http://notes.seirhsiao.com/tags/%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hexo和Next主题的相关设置（持续更新）</title>
    <link href="http://notes.seirhsiao.com/posts/31391d01/"/>
    <id>http://notes.seirhsiao.com/posts/31391d01/</id>
    <published>2018-06-09T14:00:56.000Z</published>
    <updated>2019-12-07T01:06:12.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字数统计和阅读时长-网站底部-文章内"><a href="#字数统计和阅读时长-网站底部-文章内" class="headerlink" title="字数统计和阅读时长(网站底部/文章内)"></a>字数统计和阅读时长(网站底部/文章内)</h1><p>效果如图</p><p>文章内</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Related_settings_for_Hexo_and_Next_theme/post-wordcount.png" class="lazyload"></p><p>网页顶部</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Related_settings_for_Hexo_and_Next_theme/page-wordcount.png" class="lazyload"></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-symbols-<span class="keyword">count</span>-<span class="built_in">time</span> <span class="comment">--save</span></span></pre></td></tr></tbody></table></figure><h2 id="修改-站点配置文件"><a href="#修改-站点配置文件" class="headerlink" title="修改 站点配置文件"></a>修改 <code>站点配置文件</code></h2><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> <span class="comment">#文章内是否显示</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 网页底部是否显示</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><h2 id="修改-主题配置文件"><a href="#修改-主题配置文件" class="headerlink" title="修改 主题配置文件"></a>修改 <code>主题配置文件</code></h2><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">#文章中的显示是否显示文字（本文字数|阅读时长）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">#网页底部的显示是否显示文字（站点总字数|站点阅读时长）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># Average Word Length (chars count in word)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># Words Per Minute</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span></pre></td></tr></tbody></table></figure><h1 id="文章底部添加版权信息"><a href="#文章底部添加版权信息" class="headerlink" title="文章底部添加版权信息"></a>文章底部添加版权信息</h1><p>效果如图</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Related_settings_for_Hexo_and_Next_theme/copyright.png" class="lazyload"></p><p>修改 <code>主题配置文件</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把 enable: 设为true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">license:</span> <span class="string">&lt;a</span> <span class="string">href="https://creativecommons.org/licenses/by-nc-sa/4.0/"</span> <span class="string">rel="external</span> <span class="string">nofollow"</span> <span class="string">target="_blank"&gt;CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span><span class="string">&lt;/a&gt;</span></span></pre></td></tr></tbody></table></figure><h1 id="网页底部信息隐藏"><a href="#网页底部信息隐藏" class="headerlink" title="网页底部信息隐藏"></a>网页底部信息隐藏</h1><p>只需要把 <code>主题配置文件</code>的相关资料改为<strong>false</strong>就行</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">since:</span> <span class="number">2018</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">icon:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">name:</span> <span class="string">user</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">animated:</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">color:</span> <span class="string">"#808080"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">powered:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># Hexo link (Powered by Hexo).</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># Version info of Hexo after Hexo link (vX.X.X).</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">version:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">version:</span> <span class="literal">false</span></span></pre></td></tr></tbody></table></figure><h1 id="给文章增加阴影效果"><a href="#给文章增加阴影效果" class="headerlink" title="给文章增加阴影效果"></a>给文章增加阴影效果</h1><p>效果如图  </p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Related_settings_for_Hexo_and_Next_theme/post-shadow.png" class="lazyload"></p><p>修改<code>custom.styl</code> 文件,具体为<code>themes/next/source/css/_custom/custom.styl</code></p><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为文章添加阴影效果</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">.post {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   margin-top: <span class="number">60</span>px;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   margin-bottom: <span class="number">60</span>px;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   padding: <span class="number">25</span>px;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   -webkit-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, <span class="number">.5</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">   -moz-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">.5</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure><h1 id="为博客添加宠物"><a href="#为博客添加宠物" class="headerlink" title="为博客添加宠物"></a>为博客添加宠物</h1><p>效果如图</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Related_settings_for_Hexo_and_Next_theme/live2d.png" class="lazyload"></p><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><p>在站点根目录,打开Git Bash,安装hexo-helper-live2d</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-helper-live2d</span></span></pre></td></tr></tbody></table></figure><h2 id="在站点配置文件或者主题配置文件添加以下内容"><a href="#在站点配置文件或者主题配置文件添加以下内容" class="headerlink" title="在站点配置文件或者主题配置文件添加以下内容"></a>在<code>站点配置文件</code>或者<code>主题配置文件</code>添加以下内容</h2><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">model:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-wanko</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">display:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">mobile:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span></pre></td></tr></tbody></table></figure><h2 id="安装需要的宠物文件"><a href="#安装需要的宠物文件" class="headerlink" title="安装需要的宠物文件"></a>安装需要的宠物文件</h2><figure class="highlight cmake"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> {packagename}</span></pre></td></tr></tbody></table></figure><p>如效果图所示的宠物名为haruto, 则为 <code>npm install live2d-widget-model-haruto</code>,其他宠物包点击<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="external nofollow noreferrer noopener">live2d-widget-models</a>。如果需要修改宠物的位置,可以在<code>display</code>下添加</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 水平位置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">hOffset:</span> <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 垂直位置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="attr">vOffset:</span> <span class="number">-20</span></span></pre></td></tr></tbody></table></figure><p>详细内容可参考<a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="external nofollow noreferrer noopener"><strong>hexo-helper-live2d</strong></a></p><h1 id="添加网站已运行时间"><a href="#添加网站已运行时间" class="headerlink" title="添加网站已运行时间"></a>添加网站已运行时间</h1><p>效果如图</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Related_settings_for_Hexo_and_Next_theme/counttime.png" class="lazyload"></p><p>在<code>themes/layout/_parrials/footer.swig</code> 中添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;span id="sitetime"&gt;&lt;/span&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;script language=javascript&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">function siteTime(){</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">window.setTimeout("siteTime()", 1000);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">var seconds = 1000;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">var minutes = seconds * 60;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">var hours = minutes * 60;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">var days = hours * 24;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">var years = days * 365;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">var today = new Date();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">var todayYear = today.getFullYear();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">var todayMonth = today.getMonth()+1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">var todayDate = today.getDate();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">var todayHour = today.getHours();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">var todayMinute = today.getMinutes();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">var todaySecond = today.getSeconds();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">var t1 = Date.UTC(2018,06,07,12,00,00); // 设置建立网站的时间</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">var t2 = Date.UTC(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">var diff = t2-t1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">var diffYears = Math.floor(diff/years);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">var diffDays = Math.floor((diff/days)-diffYears*365);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">var diffHours = Math.floor((diff-(diffYears*365+diffDays)*days)/hours);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">var diffMinutes = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours)/minutes);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">var diffSeconds = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours-diffMinutes*minutes)/seconds);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">document.getElementById("sitetime").innerHTML=" 已运行"+diffYears+" 年 "diffDays+" 天 "+diffHours+" 小时 "+diffMinutes+" 分钟 "+diffSeconds+" 秒";</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">siteTime();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&lt;/script&gt;</span></pre></td></tr></tbody></table></figure><p>把代码放在你想要的位置,插入位置不同,效果显示的位置也会不同。若想要显示为简体或者英文,只要把对应的文字修改就行。</p><h1 id="添加标签云"><a href="#添加标签云" class="headerlink" title="添加标签云"></a>添加标签云</h1><p>效果如图</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Related_settings_for_Hexo_and_Next_theme/tag-cloud.png" class="lazyload"></p><p>在<code>next/layout/page.swig</code>中,找到</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;div class="tag-cloud-tags"&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">              {{ tagcloud({min_font: 12, max_font: 30, amount: 300, color: true, start_color: '#ccc', end_color: '#111'}) }}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">            &lt;/div&gt;</span></pre></td></tr></tbody></table></figure><p>如果你想标签页先显示标签云,再显示基本的标签页,可以在这段代码之前添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{% if site.tags.length &gt; 1 %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;script type="text/javascript" charset="utf-8" src="/js/tagcloud.js"&gt;&lt;/script&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;script type="text/javascript" charset="utf-8" src="/js/tagcanvas.js"&gt;&lt;/script&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;div class="widget-wrap"&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &lt;h3 class="widget-title"&gt;Tag Cloud&lt;/h3&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &lt;div id="myCanvasContainer" class="widget tagcloud"&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        &lt;canvas width="250" height="250" id="resCanvas" style="width=100%"&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            {{ list_tags() }}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &lt;/canvas&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &lt;/div&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&lt;/div&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">{% endif %}</span></pre></td></tr></tbody></table></figure><p>如果是先显示预设的标签页,再显示标签云,则把上面代码添加到后面。</p><p>如果你只想显示标签云就行,可以把</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;div class="tag-cloud-tags"&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">              {{ tagcloud({min_font: 12, max_font: 30, amount: 300, color: true, start_color: '#ccc', end_color: '#111'}) }}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">            &lt;/div&gt;</span></pre></td></tr></tbody></table></figure><p>删掉就行。</p><h1 id="修改界面内容显示区域宽度"><a href="#修改界面内容显示区域宽度" class="headerlink" title="修改界面内容显示区域宽度"></a>修改界面内容显示区域宽度</h1><p>Next主题默认的设置,两边留白的区域很大。当然我们可以修改设置<br>在<code>themes\next\source\css\_custom</code>的<code>custom.styl</code>添加下面参数  </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">// 屏幕宽度小于1600px</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$content-desktop = 700px</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">// 屏幕宽度大于或等于 1600px</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">$content-desktop-large = 900px</span></pre></td></tr></tbody></table></figure><p>修改对应的参数就行,此方法不适用于Pisces主题。</p><h1 id="添加文章时-自动打开markdown编辑器"><a href="#添加文章时-自动打开markdown编辑器" class="headerlink" title="添加文章时,自动打开markdown编辑器"></a>添加文章时,自动打开markdown编辑器</h1><p>找到博客根目录,打开scripts文件夹(没有的话,自己创建一个)。  </p><p>创建一个JavaScript文件,可任意命名。  </p><p>打开所创建的JavaScript文件,输入以下内容</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据自己安装的hexo版本选择</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Hexo 2.x 复制这段</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">spawn(<span class="string">'start "" "markdown编辑器绝对路径" '</span> + path);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">});</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Hexo 3 复制这段</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  spawn(<span class="string">'start "" "markdown编辑器绝对路径" '</span> + data.path);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">});</span></pre></td></tr></tbody></table></figure><p>注意: markdown编辑器绝对路径 格式为(例如打开Typora)</p><figure class="highlight taggerscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">C:<span class="symbol">\\</span>Program Files<span class="symbol">\\</span>Typora<span class="symbol">\\</span>Typora.exe</span></pre></td></tr></tbody></table></figure><h1 id="添加在线联系功能"><a href="#添加在线联系功能" class="headerlink" title="添加在线联系功能"></a>添加在线联系功能</h1><p>一个在线的联系功能:<a href="http://www.daovoice.io/" target="_blank" rel="external nofollow noreferrer noopener">DaoVoice</a></p><h2 id="注册DaoVoice-获取app-id"><a href="#注册DaoVoice-获取app-id" class="headerlink" title="注册DaoVoice , 获取app_id"></a>注册DaoVoice , 获取app_id</h2><p>点击 <a href="http://www.daovoice.io/" target="_blank" rel="external nofollow noreferrer noopener">DaoVoice</a> ,并点击注册。可以填入邀请码：<code>98657237</code>  </p><p>得到 app_id</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Related_settings_for_Hexo_and_Next_theme/daovoice_id.png" class="lazyload"></p><h2 id="修改head-swig"><a href="#修改head-swig" class="headerlink" title="修改head.swig"></a>修改head.swig</h2><p>修改next\layout_partials\head\head.swig 文件, 添加以下内容  </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">{% if theme.daovoice %}</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  &lt;script&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (function(i,s,o,g,r,a,m){i["DaoVoiceObject"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)})(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/0f81ff2f.js","daovoice")</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  daovoice('init', {</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      app_id: "{{theme.daovoice_app_id}}"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    });</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  daovoice('update');</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  &lt;/script&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">{% endif %}</span></pre></td></tr></tbody></table></figure><h2 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h2><p>在<code>主题配置文件</code>中,添加以下内容</p><pre><code class="bash"><span class="comment"># daovoice 配置</span>daovoice: <span class="literal">true</span>daovoice_app_id:   <span class="comment"># 填入刚才的app_id</span></code></pre><h2 id="部署到网站"><a href="#部署到网站" class="headerlink" title="部署到网站"></a>部署到网站</h2><p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 就能看到效果了,网页右下角多了个 图标</p><p>具体修改图表的样式,位置。可以在daovoice网页中 应用设置-聊天设置 中配置  </p><p><img alt data-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Related_settings_for_Hexo_and_Next_theme/daovoice2.png" class="lazyload"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Hexo和Next主题的相关设置
    
    </summary>
    
    
      <category term="教程" scheme="http://notes.seirhsiao.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Hexo" scheme="http://notes.seirhsiao.com/categories/%E6%95%99%E7%A8%8B/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://notes.seirhsiao.com/tags/Hexo/"/>
    
      <category term="教程" scheme="http://notes.seirhsiao.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="主题" scheme="http://notes.seirhsiao.com/tags/%E4%B8%BB%E9%A2%98/"/>
    
      <category term="next" scheme="http://notes.seirhsiao.com/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>SmartSpring框架 -- 01.框架介绍</title>
    <link href="http://notes.seirhsiao.com/posts/9cf0a555/"/>
    <id>http://notes.seirhsiao.com/posts/9cf0a555/</id>
    <published>2018-04-18T07:30:02.000Z</published>
    <updated>2019-12-07T05:12:15.359Z</updated>
    
    <content type="html"><![CDATA[<p>框架的意义在于提高开发效率，统一开发模式，规范编码，减少重复工作，降低出错，提供必要的公共功能，同时需要易于集成、便于维护。</p><blockquote><p>在搭建项目之时，需要引入依赖、配置框架，通常一些开源组件和配置不同版本之间会出现冲突问题。<br>前端的模版化引擎会统一渲染接口返回值，这就要求服务端需要对异常信息和响应结果进行统一封装。<br>为了加快项目开发进度还需要封装一些常用的类和工具包，比如 <em>App Session</em>管理、接口签名认证、参数验证、常用类型转换等等，有了这些项目才能正常开工。<br><br>然而，下次再做类似的项目上述步骤可能还要重来一遍，虽然通常是拿来copy再改改，但是还是比较浪费时间的。<br>所以可以利用面向对象抽象的思想，抽取这类项目的共同之处封装成了种子项目，再开发类似项目时可以直接在此之上迭代，减少无意义的重复工作。</p></blockquote><a id="more"></a><h3 id="功能概览"><a href="#功能概览" class="headerlink" title="功能概览"></a>功能概览</h3><p><img alt="smart-spring-概览" data-src="https://image.chingow.cn/images/smart-spring-%E6%A6%82%E8%A7%88.jpg" class="lazyload"></p><ul><li>预定义常用开源组件依赖版本和插件配置信息，极大的简化了maven 配置</li><li>拦截<code>Response</code>的返回值，自动封装成 <a href="https://image.chingow.cn/images/20190527174428.png" target="_blank" rel="external nofollow noreferrer noopener">Result</a> 类型 </li><li>拦截<code>RuntimeException</code>异常，统一处理自动封装</li><li>代码自动生成，自动生成 Mybatis-mapper代码</li><li>简化参数校验流程</li><li>集中管理分布式应用的<code>APP Session</code></li><li>根据 Token 认证增强 APP 接口安全性</li><li>利用 RedisClient 使用<code>Redis</code>缓存</li><li>自动执行SQL初始化脚本工具</li></ul><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul><li><em>JDK 1.7</em></li><li><em>Maven3+</em></li><li><em>Oracle11g</em></li></ul><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><table><thead><tr><th align="center">分类</th><th>技术选型</th><th>描述</th></tr></thead><tbody><tr><td align="center">开发框架</td><td>Spring 3.2.9.RELEASE</td><td>主流的轻量级JAVA开发框架</td></tr><tr><td align="center">MVC框架</td><td>SpringMVC 3.2.9.RELEASE</td><td>优秀的的MVC框架，与Spring无缝集成</td></tr><tr><td align="center">Restful框架</td><td>Jersey 2.6</td><td>主流的Restful框架</td></tr><tr><td align="center">Restful框架</td><td>Resteasy 3.0.7.Final</td><td>主流的Restful框架</td></tr><tr><td align="center">Restful Client</td><td>Httpclient 4.5.3</td><td>HTTP 协议的客户端编程工具包</td></tr><tr><td align="center">ORM框架</td><td>Mybatis 3.2.8</td><td>优秀的持久层框架</td></tr><tr><td align="center">缓存方案</td><td>Spring Cache 3.2.9.RELEASE</td><td>Spring带来的强大缓存技术</td></tr><tr><td align="center">缓存连接</td><td>Jedis 2.4.1</td><td>分布式缓存数据库Redis的Java客户端框架</td></tr><tr><td align="center">数据库连接池</td><td>Druid 1.0.5</td><td>阿里的数据库连接池框架</td></tr><tr><td align="center">数据库驱动</td><td>ojdbc6 11.2.0.1.0</td><td>oracle数据库驱动</td></tr><tr><td align="center">Servlet引擎</td><td>Jetty 6.1.26</td><td>轻量级的web服务器 servlet 引擎框架</td></tr><tr><td align="center">Servlet引擎</td><td>Tomcat 7.0.57</td><td>最为广泛的 servlet 引擎框架</td></tr><tr><td align="center">协调服务</td><td>Zookeeper 3.4.7</td><td>优秀的分布式协调服务框架</td></tr><tr><td align="center">服务管理</td><td>Dubbo 2.5.3</td><td>阿里的分布式服务治理框架</td></tr><tr><td align="center">网络编程</td><td>Netty 3.0.7.Final</td><td>广泛使用的Java网络编程框架</td></tr><tr><td align="center">搜索引擎</td><td>Solr 5.5.2</td><td>基于Lucene的独立的企业级搜索引擎</td></tr><tr><td align="center">搜索引擎</td><td>Elasticsearch</td><td>基于Lucene的分布式多用户的全文搜索引擎</td></tr><tr><td align="center">消息队列</td><td>ActiveMQ</td><td>最流行的，能力强劲的开源消息队列框架</td></tr><tr><td align="center">作业调度</td><td>Quartz 2.2.3</td><td>便于与Java项目集成的任务调度框架</td></tr><tr><td align="center">文件系统</td><td>FastDFS 1.0.1</td><td>轻量级分布式文件系统</td></tr><tr><td align="center">日志组件</td><td>slf4j 1.6.6</td><td>主流的日志系统统一的接口</td></tr><tr><td align="center">校验框架</td><td>Hibernate Validator 4.2.0.Final</td><td>主流的校验框架</td></tr><tr><td align="center">数据序列化</td><td>Gson 2.2.4</td><td>Json数据序列化框架</td></tr><tr><td align="center">测试</td><td>Juint 4.8</td><td>单元测试框架</td></tr><tr><td align="center">DOM</td><td>dom4j 1.6.1</td><td>dom解析框架</td></tr><tr><td align="center">富文本</td><td>Ueditor 1.1.1</td><td>富文本编辑器框架</td></tr></tbody></table><h3 id="包含模块"><a href="#包含模块" class="headerlink" title="包含模块"></a>包含模块</h3><ul><li><p><em>smart-spring-dependencies</em></p><blockquote><p><em>parent.pom</em>，统一规划主要依赖开源组件和中间件版本，构建插件的版本和配置信息</p></blockquote></li><li><p><em>smart-core</em></p><blockquote><p>公共核心的<em>Core</em>包，定义公共的返回<em>Result</em>、异常、分页等类型以及工具类</p></blockquote></li><li><p><em>smart-spring-support</em></p><blockquote><p>封装常用功能，提供缓存处理、<em>https</em>请求、延时消息、定时任务等已成熟的实现方案</p></blockquote></li><li><p><em>smart-spring-app-core</em></p><blockquote><p>基于<em>Jersey</em>框架封装的<em>Restful</em>请求处理框架，实现了<em>APP Sessio</em>n管理及接口权限验证</p></blockquote></li><li><p><em>smart-spring-web-core</em></p><blockquote><p>基于<em>SpringMVC</em>封装的请求处理框架，实现了<em>Mybatis</em>分页及自动执行<em>SQL</em>初始化脚本</p></blockquote></li></ul><h3 id="后续计划"><a href="#后续计划" class="headerlink" title="后续计划"></a>后续计划</h3><ul><li>优化mybatis-generator 插件：实现批量生成和指定生成的功能</li><li>SQL初始化功能优化：支持版本迭代识别</li><li>一键生成初始化项目</li><li>环形队列&amp;延时任务处理</li><li>日志自动打印，自动归档</li><li>利用注解自动映射字典中文和日期格式</li></ul><p>欢迎大家一起来参与完善<code>smartSpring</code>，期待您宝贵的建议！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;框架的意义在于提高开发效率，统一开发模式，规范编码，减少重复工作，降低出错，提供必要的公共功能，同时需要易于集成、便于维护。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在搭建项目之时，需要引入依赖、配置框架，通常一些开源组件和配置不同版本之间会出现冲突问题。&lt;br&gt;前端的模版化引擎会统一渲染接口返回值，这就要求服务端需要对异常信息和响应结果进行统一封装。&lt;br&gt;为了加快项目开发进度还需要封装一些常用的类和工具包，比如 &lt;em&gt;App Session&lt;/em&gt;管理、接口签名认证、参数验证、常用类型转换等等，有了这些项目才能正常开工。&lt;br&gt;&lt;br&gt;然而，下次再做类似的项目上述步骤可能还要重来一遍，虽然通常是拿来copy再改改，但是还是比较浪费时间的。&lt;br&gt;所以可以利用面向对象抽象的思想，抽取这类项目的共同之处封装成了种子项目，再开发类似项目时可以直接在此之上迭代，减少无意义的重复工作。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://notes.seirhsiao.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="smartSpring" scheme="http://notes.seirhsiao.com/tags/smartSpring/"/>
    
      <category term="框架" scheme="http://notes.seirhsiao.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="http://notes.seirhsiao.com/tags/Spring/"/>
    
      <category term="Dubbo" scheme="http://notes.seirhsiao.com/tags/Dubbo/"/>
    
  </entry>
  
</feed>
