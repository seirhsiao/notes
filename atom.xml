<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[——╅ 萧 ☯ ℡'s Blog]]></title>
  <subtitle><![CDATA[闻道有先后，术业有专攻！]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://notes.seirhsiao.com/"/>
  <updated>2016-01-26T12:49:48.363Z</updated>
  <id>http://notes.seirhsiao.com/</id>
  
  <author>
    <name><![CDATA[萧影随行]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[第二章 -- Clojure环境]]></title>
    <link href="http://notes.seirhsiao.com/2016/01/26/2014-08-08-practical-clojure-chapter2/"/>
    <id>http://notes.seirhsiao.com/2016/01/26/2014-08-08-practical-clojure-chapter2/</id>
    <published>2016-01-26T12:49:48.363Z</published>
    <updated>2016-01-26T12:49:48.363Z</updated>
    <content type="html"><![CDATA[<p>本文翻译自《practical clojure》版权归原作者所有,谢绝转载，禁止用于商业用途,违反者一切后果自负。<br><a id="more"></a></p>
<h1 id="Clojure_u7684_u73AF_u5883"><a href="#Clojure_u7684_u73AF_u5883" class="headerlink" title="Clojure的环境"></a>Clojure的环境</h1><p><a href="https://code.google.com/p/clojure-doc-en2ch/wiki/Chapter2" target="_blank" rel="external">翻译原文</a></p>
<h2 id="u201CHello_World_u201D_in_Clojure"><a href="#u201CHello_World_u201D_in_Clojure" class="headerlink" title="“Hello World” in Clojure"></a>“Hello World” in <code>Clojure</code></h2><p> 要立即开始在Clojure编程，只需打开一个<code>Clojure</code>的<code>REPL</code>，这代表阅读、赋值、打印、循环。<code>REPL</code>是一个简单而强大的的方式作为创建程序交互方式以及与运行中程序进行互动。<br> 开始REPL，最简单的方法是直接从系统的命令行进入。要这样做，找到你系统目录中的<code>Clojure</code>位置，一个包含”<code>Clojure-1.0.0.jar</code>”的文件，然后键入之后就可以开始<code>Clojure</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java –jar Clojure-<span class="number">1.0</span>.<span class="number">0</span>.jar</span><br></pre></td></tr></table></figure></p>
<p>这将启动Java虚拟机加载<code>Clojure</code>的环境,就在REPL开始时,你应该看到以下字样:</p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"></span></span><br></pre></td></tr></table></figure>
<p>这表明，<code>REPL</code>准备接受输入。为了写你的第一个程序，只需在提示符下键入以下内容：</p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"><span class="list">(<span class="keyword">println</span> “Hello World”)</span></span></span><br></pre></td></tr></table></figure>
<p>按回车键，REPL应该显示以下：</p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello World </span><br><span class="line">nil </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"></span></span><br></pre></td></tr></table></figure>
<p>究竟在这儿发生了什么？首字母缩写的<code>REPL</code>本身提供了一个线索。</p>
<hr>
<p>  1.这是最简单的方式使用<code>Clojure</code>的，但它绝不是最好的。由于你的程序扩大规模和复杂性，你几乎肯定会需要移动到一个更完整的<code>Clojure</code>的开发环境，将提供帮助文件和类路径管理，语法高亮，调试，和其他的基本特征, 和其他插件存在于 <code>Emacs</code>，<code>VI</code>，<code>NetBeans</code>，<code>Eclipse</code>，<code>IntelliJ IDEA</code>和其他编辑器，它们提供这些和其他的功能。</p>
<hr>
<p> <em>Read</em>: Clojure的读取键入的内容，<code>（println “Hello World”）</code>，并解析它作为<code>Clojure</code>的形式，确保它是有效的<code>Clojure</code>的语法。</p>
<p> <em>Evaluate</em>:<code>Clojure</code>的编译器所提供的形式和赋值、求值。在这种情况下，它调用了一个<code>println</code>函数，一个文本参数，”<code>Hello World</code>”。<code>Clojure</code>执行函数,并按规范体系打印”<code>Hello World</code>”。</p>
<p> <em>Print</em>:<code>Clojure</code>打印的<code>println</code>函数是没有返回值的。在这种情况下，它是<code>nil</code>，(与<code>Java</code>的<code>null</code>是相同的，这意味这没有任何值，或者是”没有”[原文为”nothing”])，因为println不是一个有返回值的函数。</p>
<p> <em>Loop</em>: <code>Clojure</code>返回到输入提示，随时为您键入另一个形式。</p>
<p>这不同于大部分其他编程语言工作。在大多数语言的书写时,编译时和运行时的程序是非常不同的步骤。<code>Clojure</code>不允许你分开这些步骤，你应该想的，但大多数<code>Clojure</code>的程序员更愿意使用在REPL集成开发，书写，并在同一时间运行他们的代码。这样可以大大缩短开发时间。它允许开发者看到自己的代码做什么，立即在一个已经运行的程序的情况下，没有任何时间上的开销需要去停止程序，编辑代码，重新编译，并再次启动它，这种基本的，自上而下的编码风格很快就开始感觉极为自然，并且很快会感觉一个静态的开发环境缓慢和繁琐。</p>
<p>相比其他“脚本”语言也提供实时的赋值，然而，<code>Clojure</code>的联机(原文为on-the-fly)能力更加健壮。当在<code>REPL</code>赋值时，它不仅只是赋值，实际上是编译，添加到正在运行的程序上与之前的代码的程序状态相当。也不是REPL只有一个特殊的调试功能：动态代码始终是语言所固有的。这是完全可能的，而且并不少见，连接到一个远端Clojure的生产实例，打开REPL,检查应用程序的状态，诊断问题，并调试代码，修正错误，而且程序运行，停机代码修复。</p>
<p>从理论上来讲，它是可以打开一个REPL，从头开始写一个完整的，复杂程序，从观点根据讲，因为它没有停止或重新启动。</p>
<h2 id="Clojure_u7684_u5F62_u5F0F_28Clojure_Froms_29"><a href="#Clojure_u7684_u5F62_u5F0F_28Clojure_Froms_29" class="headerlink" title="Clojure的形式(Clojure Froms)"></a><code>Clojure</code>的形式(<code>Clojure Froms</code>)</h2><p>一个<code>Clojure</code>的程序的基本单位是不是行,关键字，或类，而是形式。在<code>Clojure</code>中，形式可以是任何单位代码可以被赋值并返回一个值。当您在REPL中键入什么东西时，它必须是一个有效的形式和<code>Clojure</code>的源文件包含了一连串形式。有四种形式的基本的品种。</p>
<h3 id="u6587_u5B57_28Literals_29"><a href="#u6587_u5B57_28Literals_29" class="headerlink" title="文字(Literals)"></a>文字(<code>Literals</code>)</h3><p>文字的形式解析自己。文字的例子是，你直接输入到代码的字符串，数字和字符。您可以验证，文字解析自己企图在REPL：</p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure">”I'm a string!” </span></span><br><span class="line">I’m a string!</span><br></pre></td></tr></table></figure>
<p>当您键入一个简单的，双引号的字符串进行赋值，返回值是字符串本身。同样的事情，数字也是一样的。</p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="number">3</span></span></span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h3 id="u7B26_u53F7_28Symbols_29"><a href="#u7B26_u53F7_28Symbols_29" class="headerlink" title="符号(Symbols)"></a>符号(<code>Symbols</code>)</h3><p>符号值的形式解析。它们可以被认为是大致类似变量，虽然这在技术上并不准确，因为他们实际上并没有同样的方式在大多数语言变量的变量。在<code>Clojure</code>，符号是用来识别函数的参数，和全局或局部定义的值。符号和他们的分析是在下面的章节详细讨论。</p>
<h3 id="u590D_u5408_u5F62_u5F0F_28Composite_Forms_29"><a href="#u590D_u5408_u5F62_u5F0F_28Composite_Forms_29" class="headerlink" title="复合形式(Composite Forms)"></a>复合形式(<code>Composite Forms</code>)</h3><p>复合形式使用对称的括号，括号或大括号，其他形式的群体。赋值时，其价值取决于什么类型的形式，括号内赋值一个<code>vector</code>和大括号到<code>map</code>。第4章详细讨论了这些类型。</p>
<p>在<code>Clojure</code>（和所有的<code>Lisp</code>）中，列出了赋值函数调用。当一个<code>list</code>赋值，它调用一个相同的函数，赋值操作以值的形式是从该函数的返回值。<code>list</code>中的第一项是要调用的函数，其余项目都作为传递给函数的参数。例如，Clojure的形式<strong>(A B C)</strong>，当赋值时，意思是调用A并且B和C作为它的参数。在其他编程语言可能写作<strong>A(B C)</strong>。</p>
<p>这似乎可能对一个没有Lisp背景的程序员很陌生。然而，在Clojure的能力范围内，优势是相当可观的。？整个程序都是集合构成的，集合中包含集合,以此类推,代码是数据，数据可以被看作代码。在第12章中，你会看到如何可以利用，很容易地创建和编写代码。</p>
<h3 id="u7279_u6B8A_u5F62_u5F0F_28Special_Forms_29"><a href="#u7279_u6B8A_u5F62_u5F0F_28Special_Forms_29" class="headerlink" title="特殊形式(Special Forms)"></a>特殊形式(<code>Special Forms</code>)</h3><p>特殊形式，是一个特定类型的复合形式。对于大多数用途，使用它们的函数调用非常相似。不同的是，第一种形式的一种特殊形式的，是不是某处定义一个函数，而是一种特殊形式的<code>Clojure</code>的内置。</p>
<p>特殊形式，是一个<code>Clojure</code>的程序最基本的构建模块，是用来控制程序流程，绑定<code>VAR</code>(变量)的，定义除其它外的函数。重要的是要记住的是，如函数调用，<code>list</code>中的第一种形式确定正在使用的一种特殊形式，在<code>list</code>中的其他形式的特殊形式的参数一样。为了能看到的例子中每个这些类型的形式，让我们做一个比较复杂的Hello World程序，你会使用两种形式，而不只是一个。在<code>REPL</code>中，键入以下命令，并按下<code>ENTER</code>：</p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">def</span></span> message <span class="string">"Hello, World!"</span>)</span> </span></span><br><span class="line">在下一个提示符下，键入以下内容：</span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">println</span> message)</span> </span></span><br><span class="line">您应该看到的第一个Hello World程序相同的输出：</span><br><span class="line">Hello, World </span><br><span class="line">nil</span><br></pre></td></tr></table></figure>
<p>这个简单的程序，只有两种形式，包含前面讨论的每种类型的形式。</p>
<p>分析第一种形式,<strong><code>(def message “Hello World!”)</code></strong>,您最先看到它是括号里。因此它是一个<code>list</code> 将作为一个函数的应用程序或一种特殊的形式进行赋值。List中的项目有3个: <strong><code>def</code></strong>,<strong>message</strong>,<strong><code>”Hello World!”</code></strong>。def是第一项，也就是所谓的函数或者是特殊形式，在这种情况下它是特殊形式，但是，它像一个函数，它需要2个参数var来定义，和值来绑定它，赋值，这种形式并创建一个变量，建立一个值绑定”Hello world!”符号message。</p>
<p>第二种形式<code>（println message）</code>也是一个<code>list</code>，这个时候它的正常函数的应用。它有两个组成部分形式，他们中的每一个符号。符号<code>println</code>解析为println函数，符号<code>message</code>解析为字符串“Hello World!”，因为在前面的形式确立了<code>VAR</code>绑定约束。</p>
<p>那么，最终的结果是与第一个Hello World程序相同的<code>println</code>函数的参数称为“Hello World!”</p>
<h2 id="u7F16_u5199_u548C_u8FD0_u884C_u6E90_u6587_u4EF6_28Writing_and_Running_Source_Files_29"><a href="#u7F16_u5199_u548C_u8FD0_u884C_u6E90_u6587_u4EF6_28Writing_and_Running_Source_Files_29" class="headerlink" title="编写和运行源文件(Writing and Running Source Files)"></a>编写和运行源文件(Writing and Running Source Files)</h2><p>由于REPL非常方便，在真实开发过程中，也会有保存源代码并使其能够重用并不需要重写代码的需要。CLOJURE当然也有这个功能。</p>
<p>按照惯例，<code>Clojure</code>的源代码文件的扩展名为<code>*.clj</code>。在一个正常的<code>Clojure</code>的程序，没有必要显式编译源文件，它们会被自动加载，因为它们是编译的，就像个体形式进入在<code>REPL</code>。如果您需要预编译<code>Clojure</code>的标准<code>Java</code>的<code>*. class</code>文件，（例如，运行在一个非标准的Java环境，如移动电话），它是完全可能的，并<code>Clojures AOT</code>（提前[Ahead Of Time]）编译处理功能。这些都是在第10章讨论。</p>
<p>要运行这个例子从一个<code>*.clj</code>文件的Hello World程序，创建一个新文件，名为“HELLO - world.clj”在任何纯文本编辑器，包含下面的代码清单2-1。</p>
<p> 清单2-1。 HELLO- world.clj</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> message1 <span class="string">"Hello, World!"</span>)</span> </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> message2 <span class="string">"I'm running Clojure code from a file."</span>)</span> </span><br><span class="line"><span class="list">(<span class="keyword">println</span> message1)</span> </span><br><span class="line"><span class="list">(<span class="keyword">println</span> message2)</span></span><br></pre></td></tr></table></figure>
<p>有两种方法运行此文件。最简单，最经常用于发展，打开一个<code>REPL</code>和键入以下（代<code>*.clj</code>文件的实际路径，并在按照与Java公约中使用正斜杠）：</p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">load-file</span> <span class="string">"c:/hello-world.clj"</span>)</span></span></span><br></pre></td></tr></table></figure>
<p> 你应该看到下面的输出：</p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello, World! </span><br><span class="line">I'm running Clojure code from a file. </span><br><span class="line">nil</span><br></pre></td></tr></table></figure>
<p><strong>load-file</strong>函数接受一个参数：一个文件系统路径的字符串表示。然后加载在路径中找到的文件，并执行该文件中的每个l<code>ist</code>顺序，就好像它已在<code>REPL</code>输入，并返回在文件的最后形式的返回值。你可以看到<code>nil</code>，<code>println</code>的返回值作为输出的最后一行。在文件中定义的所有符号都仍然可用。尝试输入在REPL文件中定义的一个符号，它能够解析绑定到它的的值：</p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> message<span class="number">1</span> </span></span><br><span class="line">"Hello, World!"</span><br></pre></td></tr></table></figure>
<p>另一种方式来执行<code>Clojure</code>的文件是直接从系统的命令行。这种方法产生一个新的<code>Clojure</code>的运行时在一个新的<code>Java</code>虚拟机实例，然后立即载入选定的文件。这是正常运行<code>Clojure</code>的开发程序（除非你打包成<code>*. class</code>文件<code>Clojure</code>的一个jar包）的方法。要运行这样一个<code>Clojure</code>的文件，只需在命令行中输入以下内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java –jar c:/clojure-<span class="number">1.0</span>.<span class="number">0</span>.jar c:/hello-world.clj</span><br></pre></td></tr></table></figure>
<p><code>Java</code>将其识别为一个Java标准调用。<strong>c:/clojure-1.0.0.jar</strong>，确保<code>Clojure</code>的运行时库是在当前的<code>CLASSPATH</code>。修改路径以反映您的<code>Clojure</code>的jar文件的实际位置与<code>Clojure</code>的安装。最后一个参数是你要运行的脚本的路径。</p>
<p>此命令启动<code>Clojure</code>的运行时，加载HELLO - world.clj的文件，并按顺序赋值给它们的形式。在这种情况下，您在系统控制台中看到的结果仅是那些打印到标准系统输出：</p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello, World! </span><br><span class="line">I'm running Clojure code from a file.</span><br></pre></td></tr></table></figure>
<h2 id="u53D8_u91CF_u3001_u547D_u540D_u7A7A_u95F4_u548C_u73AF_u5883_28Vars_2C_Namespaces_2C_and_the_Environment_29"><a href="#u53D8_u91CF_u3001_u547D_u540D_u7A7A_u95F4_u548C_u73AF_u5883_28Vars_2C_Namespaces_2C_and_the_Environment_29" class="headerlink" title="变量、命名空间和环境(Vars, Namespaces, and the Environment)"></a>变量、命名空间和环境(<code>Vars</code>, <code>Namespaces</code>, and the Environment)</h2><p>正如在第一章提到，<code>Clojure</code>的程序是灵活的，基本的实体，它可以进化，而无需关闭和重新运行。这主要是由于<code>REPL</code>的存在，提供的能力，以赋值在现有程序的情况下的形式。但这个工作到底是如何呢？</p>
<p>当您启动<code>Clojure</code>的程序，通过开一个新的<code>REPL</code>或直接运行一个源文件，你正在创建一个新的全局环境。这种环境持续，一直到程序终止，并包含所有需要运行的程序，包括全局变量，（绑定的值的名称）的信息。参见图2-1，它被添加（或保留）的全局环境。之后被保留，它是从任何地方引用可用的，在相同的环境中。在Hello World示例，您创建了一个变量符号message绑定到一个字符串值，你可以看到这一点，并在以后使用。</p>
<p>变量可以使用def的一种特殊形式的符号定义和约束。它的语法如下：</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> var-name var-value)</span></span><br></pre></td></tr></table></figure>
<p>&gt;<br> <code>var-name</code>是变量创建的名称，和<code>var-value</code>就是它的值。<code>var-value</code>可以是任何Clojure的形式，将赋值和由此产生的值绑定到了<code>var</code>。然后，每当<code>var-name</code>的符号在全局范围内的Clojure的环境中使用，它能够解析的<code>var-value</code>。</p>
<hr>
<p><strong>注意</strong>: 一定要以正确的顺序定义你的依赖。由于<code>Clojure</code>引用<code>var</code>方式，必须定义一个在var的引用符号，可以进行赋值。通常情况下，这不是一个问题，但它可以导致一些“陷阱”，如果你在REPL做了很多工作。由于我们经常会在代码中用不同的顺序来进行REPL的定义，又由于这些代码一旦被输入<code>REPL</code>后，这些代码在整个程序中都是一直有效的。在我们的工作中，你或许只会在停止了整个程序之后才会发现你定义过的依赖性（dependency ）失效了。这是一个很容易解决的问题，一旦我们注意了这一点，也是很容避免类似的错误的。但是这个问题确实给Clojure初学者们造成了很多的困惑。 </p>
<hr>
<p>图2-1  Clojure的环境<br><img src="/static/images/clojure/clojure_02_01.png" alt="clojure_02_01.png"></p>
<h3 id="Are_Vars_Variables_3F"><a href="#Are_Vars_Variables_3F" class="headerlink" title="Are Vars Variables?"></a>Are Vars Variables?</h3><p>虽然他们有许多相似之处，<code>vars</code>并不像其他编程语言中的变量，最重要的是，一旦定义，他们不打算改变，起码，不作为一部分普通运行的程序。这是真的，如果你使用一个已经绑定的<code>var</code> <code>def</code>，其value将发生变化，后续赋值解析会以新的<code>value</code>为准。而这不是线程安全的，只能用DEF定义的全局符号了。可变的全局符号，将使您程序工作的一部分破坏，即使你可能可以得到它的运行。如果您需要使用多变的值作为你的程序的一部分，全局或以其他方式，你应该总是使用<code>Clojure</code>的线程安全的引用类型和重新定义符号。</p>
<p>这就是说，有一个很好的适当使用，重新定义现有的值：手动更新或改变一个程序运行时。这是<code>Clojure</code>的一种能力，重新绑定一个符号，它允许你建立或更改，而无需重新启动一个程序。当你做探索性编程时，重新绑定值是<code>Clojure</code>的优点。另一个例子可能是您的基于服务器的程序使用一个符号来存储一个特定的常量，就是说，<strong><code>max-users</code></strong>，并且您以后决定，该系统可以处理更多的用户，你应该碰到。在这种情况下，这是完全可以的重新定义符号的值，而无需重新启动程序。关键的一点是不依赖于方案的符号重新定义他们使用可变状态。在任何情况下多线程，这是极不安全的，它可能是很糟糕的表现，是在任何情况下破坏Clojure的做法。</p>
<hr>
<h2 id="u7B26_u53F7_u548C_u7B26_u53F7_u7684_u89E3_u6790_28Symbols_and_Symbol_Resolution_29"><a href="#u7B26_u53F7_u548C_u7B26_u53F7_u7684_u89E3_u6790_28Symbols_and_Symbol_Resolution_29" class="headerlink" title="符号和符号的解析(Symbols and Symbol Resolution)"></a>符号和符号的解析(Symbols and Symbol Resolution)</h2><p>在Clojure中符号是无处不在的(<code>Symbols</code>)，它值得让你花费一些时间来了解他们真正和它们是如何工作的。概括地说，一个符号，是一个标识符解析值。它们可以被定义在地方一级（例如，函数的参数或本地绑定），或全局（使用<code>vars</code>）。您看到任何关于<code>Clojure</code>代码，是没有文字或一个基本的语法字符（引号，括号，大括号，方括号，等）中看到的任何东西都可能是一个符号。这涵盖什么通常是认为在其他语言中的变量，但还一个很好的协议更多：</p>
<blockquote>
<ul>
<li><p>Clojure的所有函数名的符号。当一个函数被称为作为一个复合形式的一部分，它首先解析符号的功能，然后将其应用于。</p>
</li>
<li><p>大多数运算符（相比较而言，数学等）的符号，从而解决一个特别的、内置的、优化的函数。他们解决的和应用在一起作为额外的性能优化的函数的方式。</p>
</li>
<li><p>宏（<code>Macro</code>）名称是一种符号。在这不做详细，宏像函数，只有在编译时而不是运行时应用，请参阅第12章宏在深入讨论。</p>
</li>
</ul>
</blockquote>
<h3 id="u7B26_u53F7_u540D_u79F0_uFF08Symbol_Names_uFF09"><a href="#u7B26_u53F7_u540D_u79F0_uFF08Symbol_Names_uFF09" class="headerlink" title="符号名称（Symbol Names）"></a>符号名称（Symbol Names）</h3><p>符号名是区分大小写的，和用户定义的符号有以下限制：</p>
<blockquote>
<p>可以包含任何字母数字字符，字符<code>*</code>, <code>+</code>, <code>!</code>, <code>-</code>, <code>_</code>, and <code>?</code>.<br>不得以数字开头。<br>可能包含冒号字符：，不是在开始或结束的符号名，并可能不会重复。</p>
</blockquote>
<p>根据这些规则，合法符号名的例子包括符号名，symbol_name，symbol123，<em>symbol</em>, symbol! , symbol? , 和name+symbol. 非法符号名的例子123symbol, :symbol: , symbol//name, 等。</p>
<p>按照惯例，通常在Clojure符号名小写，划线字符（ <code>-</code> ）分隔的单词。如果一个符号是一个常量或全局程序设置，它往往开始和结束的星符号（<code>*</code>）。例如，一个程序可能定义 <code>（def *PI* 3.14159）</code>。</p>
<h3 id="u7B26_u53F7_u7684_u89E3_u6790_u548C_u8303_u56F4_uFF08Symbol_Resolution_and_Scope_uFF09__3D_3D_3D"><a href="#u7B26_u53F7_u7684_u89E3_u6790_u548C_u8303_u56F4_uFF08Symbol_Resolution_and_Scope_uFF09__3D_3D_3D" class="headerlink" title="符号的解析和范围（Symbol Resolution and Scope） ==="></a>符号的解析和范围（Symbol Resolution and Scope） ===</h3><p>当您在您的代码中使用一个符号名称，<code>Clojure</code>赋值给符号，并返回绑定到它的值。这样的解析是如何产生的，视符号范围而定，无论是用户定义的，或者是特殊形式和内置形式。<br><code>Clojure</code>的使用以下步骤解析符号：</p>
<blockquote>
<ul>
<li><p><code>Clojure</code>判断，如果该符号指向一种特殊的形式。如果是这样，并相应地使用。</p>
</li>
<li><p>其次，如果Clojure的检查符号是本地的绑定。通常情况下，本地绑定这意味着它是一个函数的参数，或<strong>let</strong>（第3章中讨论）定义。如果它找到一个本地的值，它将使用它。请注意，这意味着，如果有一个本地定义的符号和VAR具有相同的名称，赋值的符号名，将返回本地符号的值。局部符号覆盖相同的Vars。</p>
</li>
<li><p><code>Clojure</code>的搜索在全局环境中对一个var的名称的符号对应，并返回该值。</p>
</li>
<li><p>如果<code>Clojure</code>在前面的步骤中并未发现一个value的符号名称，就返回一个错误：<code>java.lang.Exception: unable to resolve symbol &lt;symbol&gt; in this context (NO_SOURCE_FILE:0)</code>. (未能解析符号在上下文中，<code>NO_SOURCE_FILE</code>部分将被替换为实际的文件名，除非你是在<code>REPL</code>运行。)</p>
</li>
</ul>
</blockquote>
<h3 id="u547D_u540D_u7A7A_u95F4Namespaces"><a href="#u547D_u540D_u7A7A_u95F4Namespaces" class="headerlink" title="命名空间Namespaces"></a>命名空间Namespaces</h3><p>当你使用<code>def</code>定义一个<code>var</code>时，你正在对该<code>value</code>定义一个全局绑定的符号名。然而，真正的全局变量和符号早就被称为是一个坏主意，在一个大程序，它是太容易在一个程序的一部分中定义，在不经意间与另一个发生碰撞，导致困难和极难发现错误。</p>
<p>出于这个原因，在<code>Clojure</code>中所有<code>vars</code>都在命名空间范围内的。每个var的一部分作为命名空间（有时是隐式显示的）当使用一个符号来指向一个<code>var</code>时，您可以用正斜杠符号（/）在符号前制定命名空间。</p>
<p>看到这，仔细看下，一个符号定义在REPL。</p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">def</span></span> first-name <span class="string">"Luke"</span>)</span> </span></span><br><span class="line">#'user/first-name</span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> user/first-name </span></span><br><span class="line">"Luke"</span><br></pre></td></tr></table></figure>
<p>请注意提示本身：<code>user=&gt;</code>。提示中的字符串user实际上指的是当前的命名空间。如果你工作在不同的命名空间，它会显示不同的东西。没用关于user的特殊命名空间，它不是一个特殊的，它只是个默认的。你实际上还没有定义，当你定义<code>user/first-name</code>然后就可以使用赋值的符号了。既然你已经在user空间了，使用first-name也可以工作。</p>
<h3 id="u58F0_u660E_u547D_u540D_u7A7A_u95F4_uFF08Declaring_Namespaces_uFF09"><a href="#u58F0_u660E_u547D_u540D_u7A7A_u95F4_uFF08Declaring_Namespaces_uFF09" class="headerlink" title="声明命名空间（Declaring Namespaces）"></a>声明命名空间（Declaring Namespaces）</h3><p>声明命名空间，使用ns的形式。<code>ns</code>需要大量的参数，其中一些比较高级的。最简单的形式，您可以传入一个参数，作为命名空间的名称。如果命名空间不存在，它会创建，并设置成当前命名空间，如果已经存在，它会切换到命名空间。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">ns</span></span> new-namespace)</span> </span></span><br><span class="line">nil </span><br><span class="line"><span class="prompt">new-namespace=&gt;</span><span class="clojure"></span></span><br></pre></td></tr></table></figure></p>
<p>现在，当你定义一个变量时，将传入new-namespace的命名空间，而不是user。</p>
<h3 id="u5F15_u7528_u547D_u540D_u7A7A_u95F4_uFF08Referencing_Namespaces_uFF09"><a href="#u5F15_u7528_u547D_u540D_u7A7A_u95F4_uFF08Referencing_Namespaces_uFF09" class="headerlink" title="引用命名空间（Referencing Namespaces）"></a>引用命名空间（Referencing Namespaces）</h3><p>为了引用一个不同的命名空间中的<code>var</code>，只需使用其完整的名称。请遵守以下REPL会话:</p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">def</span></span> my-number <span class="number">5</span>)</span> </span></span><br><span class="line">#'user/my-number </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">ns</span></span> other-namespace)</span> </span></span><br><span class="line">nil </span><br><span class="line"><span class="prompt">other-namespace=&gt;</span><span class="clojure"> my-number </span></span><br><span class="line">java.lang.Exception: Unable to resolve symbol: my-number in this context... </span><br><span class="line"><span class="prompt">other-namespace=&gt;</span><span class="clojure"> user/my-number </span></span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<p>在这里，你首先在默认的用户命名空间中定义一个<code>var</code>。然后，创建一个新的命名空间，并切换到它。当您尝试赋值my-nameber，它会导致一个错误：无法在当前命名空间中找到my-namber。然而，当您使用完全合格的名称，它解析了var，并传回你原来绑定到它的值。您只能使用完全合格的名称来赋值var。要定义一个命名空间内的一个符号，你必须确实你在命名空间中。</p>
<p>有时，如果你是严重依赖于另一个命名空间，它的完全限定每个引用您需要该命名空间中的一个<code>var</code>太麻烦了。对于这种情况，<code>Clojure</code>的提供这种功能。使一个命名空间“包括”（include），使用<strong>:use</strong> , <strong>ns </strong>参数。例如，申报进口Clojure的内置XML库，你可以做到这一点的所有符号的命名空间：</p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">ns</span></span> my-namespace </span></span></span><br><span class="line">   (:use clojure.xml)) </span><br><span class="line"><span class="prompt">my-namespace=&gt;</span><span class="clojure"><span class="list"></span></span></span><br></pre></td></tr></table></figure>
<p>现在，所有的XML相关的符号，已经在我的命名空间中了。<code>（:use clojure.xml）</code>的形式指定<code>clojure.xml</code>命名空间将被加载，还导入到我的命名空间中定义的符号。这也是非常有用的依赖管理，而不是要求您手动加载<code>clojure.xml</code>使用它之前，你可以使用<strong>:use</strong> 指定它作为一个命名空间声明的依赖。<code>Clojure</code>的命名空间声明的一部分，然后加载它，如果它不是已经加载，确保它始终是您的新的命名空间内。</p>
<p>除了<strong><code>:use</code></strong> ，<code>Clojure</code>的提供了另一种可以使用<strong><code>ns</code></strong>，<strong><code>:require</code><em> </em>。用法与<code>:use</code>相同，区别在于，它不仅确保必要的命名空间加载，并导入没有应用的符号。您还可以使用</strong><code>:require</code>** 指定命名空间列表包括进来。在这里你包括<code>Clojure.xml</code>库及<code>clojure.set</code>：<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">ns</span></span> my-namespace </span></span></span><br><span class="line">   (:require clojure.xml </span><br><span class="line">        clojure.set)) </span><br><span class="line"><span class="prompt">my-namespace=&gt;</span><span class="clojure"><span class="list"></span></span></span><br></pre></td></tr></table></figure></p>
<p>此外，您可以括在方括号的命名空间和使用<code>:as</code>关键字来指定一个较短的别名命名空间：<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">ns</span></span> my-namespace </span></span></span><br><span class="line">   (:require [clojure.xml :as xml])) </span><br><span class="line"><span class="prompt">my-namespace=&gt;</span><span class="clojure"><span class="list"> xml/parse </span></span></span><br><span class="line"><span class="prompt">my-namespace=&gt;</span><span class="clojure"><span class="list"> #&lt;xml$parse_7630 clojure.xml$parse_7630@<span class="number">1484105</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>不用担心那些凌乱的值，它是作为clojure的一个函数的字符串表示形式，表明Clojure是能够解析<strong><code>xml/parse</code></strong> 符号的。</p>
<h3 id="u6784_u5EFA_u6E90_u6587_u4EF6_28Structuring_Source_Files_29__3D_3D_3D"><a href="#u6784_u5EFA_u6E90_u6587_u4EF6_28Structuring_Source_Files_29__3D_3D_3D" class="headerlink" title="构建源文件(Structuring Source Files) ==="></a>构建源文件(Structuring Source Files) ===</h3><p>如何使用命名空间来组织你的源代码，并保持组织样式？这不难。照惯例，每个Clojure的源文件有其自己的命名空间的一个ns应该是在任何<code>Clojure</code>的文件第一种形式的声明，这使得它易于管理的命名空间和文件。它也是类似于每一个Java公约类。事实上，它可能会帮助Java程序员想到，类的命名空间。它也可以像类一样将相互有关的代码分组到一起。</p>
<p>为了帮助<code>Clojure</code>的发现命名空间，引用<strong>:use</strong>或<strong>:require</strong>，是遵循一个特定的命名约定。在一个文件中声明的命名空间，必须在类路径的文件名称和位置相匹配。如果你有一个“<code>x/y/z.clj</code>”<code>Clojure</code>的源文件，它应该包含命名空间<code>x.y.z</code>的声明当你参考<code>x.y.z</code>，它会知道在哪个路径和文件搜索该命名空间。再次，这是非常相似的<code>Java</code>包结构。</p>
<h2 id="u603B_u7ED3_28Summary_29"><a href="#u603B_u7ED3_28Summary_29" class="headerlink" title="总结(Summary)"></a>总结(Summary)</h2><p>这是所有真正需要的知识运行<code>Clojure</code>的方案。当然，你将要学习用工具，以帮助使源文件更容易地管理和运行。特别是，类路径可能是痛苦的管理，<code>Eclipse</code>或<code>NetBeans</code>等工具可以减轻这一负担。大多数<code>Clojure</code>环境都提供了另一个有用的特性，那就是可以打开一个文件并选择性的执行一些单个的形式，而不是加载整个文件。这对敏捷开发、测试、和现有的应用程序调试是非常宝贵的。</p>
<p>要记住，无论你使用哪一种工具，重要的是，<code>Clojure</code>的方案包括完全的形式，其本身无论是文字，特殊形式，符号，或其他形式的复合。牢记这是朝着理解<code>Clojure</code>的程序结构的一个大步。</p>
<p>此外，重要的是理解的符号。符号是源代码中的标识符与实际值的手段，它是有助于清晰的把握，它们如何分配和得到解析。</p>
<p>常用的<code>var</code>与符号的结合。<code>var</code>代表了一个名字，一个在<code>Clojure</code>的环境<code>value</code>的约束与绑定，并通过命名空间范围内。</p>
<p>最后，较高水平，当一个程序一个源文件变得太大便分解成多个文件，并给每个文件一个单独的命名空间。然后，您可以使用的命名空间的依赖功能，以确保符号总是定义需要它们的地方。</p>
]]></content>
    <summary type="html">
    <![CDATA[本文翻译自《practical clojure》版权归原作者所有,谢绝转载，禁止用于商业用途,违反者一切后果自负。]]>
    
    </summary>
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="tips" scheme="http://notes.seirhsiao.com/tags/tips/"/>
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[clojure 相关的一些小贴士]]></title>
    <link href="http://notes.seirhsiao.com/2016/01/26/2014-07-28-clojure-related-tips/"/>
    <id>http://notes.seirhsiao.com/2016/01/26/2014-07-28-clojure-related-tips/</id>
    <published>2016-01-26T12:49:25.610Z</published>
    <updated>2016-01-26T12:49:25.610Z</updated>
    <content type="html"><![CDATA[<h2 id="clojure__u76F8_u5173_u7684_u4E00_u4E9B_u5C0F_u8D34_u58EB"><a href="#clojure__u76F8_u5173_u7684_u4E00_u4E9B_u5C0F_u8D34_u58EB" class="headerlink" title="clojure 相关的一些小贴士"></a>clojure 相关的一些小贴士</h2><h3 id="u4E2D_u6587_u5316_u95EE_u9898"><a href="#u4E2D_u6587_u5316_u95EE_u9898" class="headerlink" title="中文化问题"></a>中文化问题</h3><p>在终端中启动<code>clojure</code>后,输入中文字符串 例如 “你好”  是无法正常显示的.这是因为<code>clojure</code>是建立在<code>java</code>下的<br>所以需要对<code>java</code>运行环境进行设置.<br><a id="more"></a><br>具体做法:</p>
<ol>
<li><p>终端启动时添加 <code>-Dfile.encoding=UTF-8</code>  选项</p>
</li>
<li><p>在<code>shell</code>中添加环境变量   <code>export JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF-8</code></p>
</li>
</ol>
<p>任选起一就可以了</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="clojure__u76F8_u5173_u7684_u4E00_u4E9B_u5C0F_u8D34_u58EB"><a href="#clojure__u76F8_u5173_u7684_u4E00_u4E9B_u5C0F_u8D34_u58EB" class="headerlink" title="clojure 相关的一些小贴士"></a>clojure 相关的一些小贴士</h2><h3 id="u4E2D_u6587_u5316_u95EE_u9898"><a href="#u4E2D_u6587_u5316_u95EE_u9898" class="headerlink" title="中文化问题"></a>中文化问题</h3><p>在终端中启动<code>clojure</code>后,输入中文字符串 例如 “你好”  是无法正常显示的.这是因为<code>clojure</code>是建立在<code>java</code>下的<br>所以需要对<code>java</code>运行环境进行设置.<br>]]>
    
    </summary>
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="tips" scheme="http://notes.seirhsiao.com/tags/tips/"/>
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clojure 学习 —— 连接redis]]></title>
    <link href="http://notes.seirhsiao.com/2016/01/26/2014-07-01-clojure-redis/"/>
    <id>http://notes.seirhsiao.com/2016/01/26/2014-07-01-clojure-redis/</id>
    <published>2016-01-26T12:48:47.194Z</published>
    <updated>2016-01-26T12:48:47.194Z</updated>
    <content type="html"><![CDATA[<p>clojure 连接redis简单介绍及示例<br><a id="more"></a></p>
<h3 id="clojure__u8FDE_u63A5_redis__u793A_u4F8B"><a href="#clojure__u8FDE_u63A5_redis__u793A_u4F8B" class="headerlink" title="clojure 连接 redis 示例"></a>clojure 连接 redis 示例</h3><p><code>project.cli</code> 添加<code>redis</code>依赖： <code>[clj-redis &quot;0.0.12&quot;]</code></p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">defproject</span> myClojure <span class="string">"0.1.0-SNAPSHOT"</span>  </span><br><span class="line">  <span class="attribute">:description</span> <span class="string">"FIXME: write description"</span>  </span><br><span class="line">  <span class="attribute">:url</span> <span class="string">"http://example.com/FIXME"</span>  </span><br><span class="line">  <span class="attribute">:license</span> <span class="collection">&#123;<span class="attribute">:name</span> <span class="string">"Eclipse Public License"</span> </span><br><span class="line">            <span class="attribute">:url</span> <span class="string">"http://www.eclipse.org/legal/epl-v10.html"</span>&#125;</span>  </span><br><span class="line">  <span class="attribute">:dependencies</span> <span class="collection">[  </span><br><span class="line">                 <span class="collection">[org.clojure/clojure <span class="string">"1.5.1"</span>]</span>  </span><br><span class="line">                 <span class="collection">[org.clojure/java.jdbc <span class="string">"0.0.6"</span>]</span>  </span><br><span class="line">                 <span class="collection">[org.clojure/clojure-contrib <span class="string">"1.2.0"</span>]</span>  </span><br><span class="line">                 <span class="collection">[mysql/mysql-connector-java <span class="string">"5.1.26"</span>]</span>  </span><br><span class="line">                   </span><br><span class="line">                 <span class="collection">[com.novemberain/monger <span class="string">"1.5.0"</span>]</span>  </span><br><span class="line">                   </span><br><span class="line">                 <span class="collection">[com.taoensso/carmine <span class="string">"1.2.1"</span>]</span>  </span><br><span class="line">                 <span class="collection">[clj-redis <span class="string">"0.0.12"</span>]</span>  </span><br><span class="line">                 ]</span>)</span></span><br></pre></td></tr></table></figure>
<p><strong>示例代码：</strong></p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">ns</span></span> myClojure.redis2  </span><br><span class="line">  <span class="list">(<span class="keyword">require</span> <span class="collection">[clj-redis.client <span class="attribute">:as</span> redis]</span>)</span>)</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">;; 连接redis  </span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> db <span class="list">(<span class="keyword">redis/init</span>)</span>)</span>  </span><br><span class="line">  </span><br><span class="line"><span class="list">(<span class="keyword">println</span> <span class="list">(<span class="keyword">redis/ping</span> db)</span>)</span>  </span><br><span class="line">  </span><br><span class="line"><span class="list">(<span class="keyword">println</span> <span class="list">(<span class="keyword">redis/set</span> db <span class="string">"foo"</span> <span class="string">"BAR"</span>)</span>)</span>  </span><br><span class="line"><span class="list">(<span class="keyword">println</span> <span class="list">(<span class="keyword">redis/get</span> db <span class="string">"foo"</span>)</span>)</span>  </span><br><span class="line">  </span><br><span class="line"><span class="list">(<span class="keyword">println</span>)</span>  <span class="comment">;; 空一行  </span></span><br><span class="line">  </span><br><span class="line"><span class="list">(<span class="keyword">println</span> <span class="list">(<span class="keyword">redis/set</span> db <span class="string">"blog"</span> <span class="string">"http://blog.ithomer.net"</span>)</span>)</span>  </span><br><span class="line"><span class="list">(<span class="keyword">println</span> <span class="list">(<span class="keyword">redis/get</span> db <span class="string">"blog"</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p><strong>运行结果：</strong></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PONG</span><br><span class="line">OK</span><br><span class="line">BAR</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line"><span class="string">http:</span><span class="comment">//blog.ithomer.net</span></span><br></pre></td></tr></table></figure>
<p><strong>redis 数据内容：</strong></p>
<p><img src="/static/images/clojure/clojure_redis.png" alt="clojure_redis.png"></p>
<p><strong>Carmine 示例</strong></p>
<h3 id="Carmine_2C_a_Clojure_Redis_client"><a href="#Carmine_2C_a_Clojure_Redis_client" class="headerlink" title="Carmine, a Clojure Redis client"></a>Carmine, a Clojure Redis client</h3><p><code>project.clj</code> 添加依赖： <code>[com.taoensso/carmine &quot;2.4.0&quot;]</code></p>
<p><strong>示例代码：</strong></p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">ns</span></span> myClojure.redis  </span><br><span class="line">  <span class="list">(<span class="attribute">:require</span> <span class="collection">[taoensso.carmine <span class="attribute">:as</span> car]</span>  </span><br><span class="line">            <span class="collection">[taoensso.carmine.message-queue <span class="attribute">:as</span> carmine-mq]</span>)</span>  </span><br><span class="line">  <span class="list">(<span class="attribute">:gen-class</span> <span class="attribute">:main</span> <span class="literal">true</span>)</span>)</span>  </span><br><span class="line">  </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> pool         <span class="list">(<span class="keyword">car/make-conn-pool</span>)</span>)</span> <span class="comment">; See docstring for additional options  </span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> spec-server1 <span class="list">(<span class="keyword">car/make-conn-spec</span>)</span>)</span> <span class="comment">; ''  </span></span><br><span class="line">  </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defmacro</span></span> wcar <span class="collection">[&amp; body]</span> `<span class="list">(<span class="keyword">car/with-conn</span> pool spec-server1 ~@body)</span>)</span>  </span><br><span class="line">  </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> -main <span class="collection">[&amp; args]</span>  </span><br><span class="line">  <span class="list">(<span class="keyword">println</span> <span class="string">"rd01 run!"</span>)</span>  </span><br><span class="line">  <span class="comment">;;   </span></span><br><span class="line">   <span class="list">(<span class="keyword">wcar</span> <span class="list">(<span class="keyword">car/ping</span>)</span>  </span><br><span class="line">      <span class="list">(<span class="keyword">car/set</span> <span class="string">"foo"</span> <span class="string">"hello ithomer"</span>)</span>  </span><br><span class="line">      <span class="list">(<span class="keyword">car/get</span> <span class="string">"foo"</span>)</span>)</span>   </span><br><span class="line">  )</span>  </span><br><span class="line">  </span><br><span class="line"><span class="list">(<span class="keyword">-main</span>)</span></span><br></pre></td></tr></table></figure>
<p><strong>运行结果：</strong></p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rd01 <span class="command">run</span>!</span><br><span class="line"></span><br><span class="line">[<span class="string">"PONG"</span> <span class="string">"OK"</span> <span class="string">"hello ithomer"</span>]</span><br></pre></td></tr></table></figure>
<p><strong>参考推荐：</strong><br><a href="https://github.com/ptaoussanis/carmine" target="_blank" rel="external">Carmine, a Clojure Redis client（github）</a><br><a href="https://github.com/mmcgrana/clj-redis" target="_blank" rel="external">clj-redis（github）</a><br><a href="http://f.dataguru.cn/thread-48035-1-1.html" target="_blank" rel="external">clojure操作redis</a><br><a href="http://blog.csdn.net/sunboy_2050/article/details/17243149" target="_blank" rel="external">Clojure 学习入门（9）—— 连接redis</a></p>
]]></content>
    <summary type="html">
    <![CDATA[clojure 连接redis简单介绍及示例]]>
    
    </summary>
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="redis" scheme="http://notes.seirhsiao.com/tags/redis/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clojure 学习 —— 连接mongodb]]></title>
    <link href="http://notes.seirhsiao.com/2016/01/26/2014-06-29-clojure-mongodb/"/>
    <id>http://notes.seirhsiao.com/2016/01/26/2014-06-29-clojure-mongodb/</id>
    <published>2016-01-26T12:48:24.827Z</published>
    <updated>2016-01-26T12:48:24.827Z</updated>
    <content type="html"><![CDATA[<p>clojure 连接mongodb简单介绍及示例<br><a id="more"></a></p>
<h3 id="clojure__u8FDE_u63A5_mongodb_u793A_u4F8B"><a href="#clojure__u8FDE_u63A5_mongodb_u793A_u4F8B" class="headerlink" title="clojure 连接 mongodb示例"></a><code>clojure</code> 连接 <code>mongodb</code>示例</h3><!-- more -->
<p><code>project.clj</code> 文件添加<code>monger</code>依赖： <code>[com.novemberain/monger &quot;1.5.0&quot;]</code></p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">defproject</span> myClojure <span class="string">"0.1.0-SNAPSHOT"</span>  </span><br><span class="line">  <span class="attribute">:description</span> <span class="string">"FIXME: write description"</span>  </span><br><span class="line">  <span class="attribute">:url</span> <span class="string">"http://example.com/FIXME"</span>  </span><br><span class="line">  <span class="attribute">:license</span> <span class="collection">&#123;<span class="attribute">:name</span> <span class="string">"Eclipse Public License"</span>  </span><br><span class="line">            <span class="attribute">:url</span> <span class="string">"http://www.eclipse.org/legal/epl-v10.html"</span>&#125;</span>  </span><br><span class="line">  <span class="attribute">:dependencies</span> <span class="collection">[  </span><br><span class="line">                 <span class="collection">[org.clojure/clojure <span class="string">"1.5.1"</span>]</span>  </span><br><span class="line">                 <span class="collection">[org.clojure/java.jdbc <span class="string">"0.0.6"</span>]</span>  </span><br><span class="line">                 <span class="collection">[org.clojure/clojure-contrib <span class="string">"1.2.0"</span>]</span>  </span><br><span class="line">                 <span class="collection">[mysql/mysql-connector-java <span class="string">"5.1.26"</span>]</span>  </span><br><span class="line">                   </span><br><span class="line">                 <span class="collection">[com.novemberain/monger <span class="string">"1.5.0"</span>]</span>  </span><br><span class="line">                 ]</span>)</span></span><br></pre></td></tr></table></figure>
<p><strong>示例代码：</strong></p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">; clojure connect to mysql  </span></span><br><span class="line"><span class="comment">; ithomer.net  </span></span><br><span class="line"><span class="comment">; 2013.12.10  </span></span><br><span class="line">  </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">ns</span></span> myClojure.mongo3  </span><br><span class="line">  <span class="list">(<span class="attribute">:use</span> <span class="collection">[monger.core <span class="attribute">:only</span> <span class="collection">[connect! connect set-db! get-db]</span>]</span>)</span>  </span><br><span class="line">  <span class="list">(<span class="attribute">:require</span> <span class="collection">[monger.core <span class="attribute">:as</span> mg]</span>  </span><br><span class="line">            <span class="collection">[monger.collection <span class="attribute">:as</span> mc]</span>)</span>)</span>  </span><br><span class="line">   </span><br><span class="line"><span class="comment">;; 函数  </span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> -main<span class="collection">[&amp; m]</span>   </span><br><span class="line">    </span><br><span class="line"><span class="comment">;;  (connect!) ;; 默认连接库 &#123; :host "localhost" :port 27017 &#125;  </span></span><br><span class="line">  <span class="list">(<span class="keyword">connect!</span> <span class="collection">&#123; <span class="attribute">:host</span> <span class="string">"172.27.22.21"</span> <span class="attribute">:port</span> <span class="number">27017</span>&#125;</span>)</span>    <span class="comment">; 指定 host 和 port  </span></span><br><span class="line">    </span><br><span class="line">  <span class="list">(<span class="keyword">set-db!</span> <span class="list">(<span class="keyword">mg/get-db</span> <span class="string">"homer-db"</span>)</span>)</span>  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">;; 清空collection  </span></span><br><span class="line">  <span class="list">(<span class="keyword">mc/remove</span> <span class="string">"workflow"</span>)</span>  </span><br><span class="line">    </span><br><span class="line">  <span class="comment">;; 单条插入  </span></span><br><span class="line">  <span class="list">(<span class="keyword">mc/insert</span> <span class="string">"workflow"</span> <span class="collection">&#123;<span class="attribute">:name</span> <span class="string">"blog"</span>  <span class="attribute">:url</span> <span class="string">"http://blog.ithomer.net"</span> <span class="attribute">:copyright</span>  <span class="string">"ithomer"</span> <span class="attribute">:dtime</span> <span class="string">"2009-07-31"</span>&#125;</span>)</span>   </span><br><span class="line">  <span class="list">(<span class="keyword">mc/insert</span> <span class="string">"workflow"</span> <span class="collection">&#123;<span class="attribute">:name</span> <span class="string">"forum"</span> <span class="attribute">:url</span> <span class="string">"http://blog.ithomer.net"</span> <span class="attribute">:copyright</span>  <span class="string">"ithomer"</span> <span class="attribute">:dtime</span> <span class="string">"2013-12-01"</span> &#125;</span>)</span>  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">;; 批量插入  </span></span><br><span class="line">  <span class="list">(<span class="keyword">mc/insert-batch</span> <span class="string">"workflow"</span> <span class="collection">[<span class="collection">&#123;<span class="attribute">:name</span> <span class="string">"csdn"</span>   <span class="attribute">:url</span> <span class="string">"http://blog.csdn.net/ithomer"</span>     <span class="attribute">:copyright</span>  <span class="string">"ithomer"</span> <span class="attribute">:dtime</span> <span class="string">"2010-01-01"</span> &#125;</span>  </span><br><span class="line">                               <span class="collection">&#123;<span class="attribute">:name</span> <span class="string">"csdn2"</span>  <span class="attribute">:url</span> <span class="string">"http://blog.csdn.net/sunboy_2050"</span> <span class="attribute">:copyright</span>  <span class="string">"ithomer"</span> <span class="attribute">:dtime</span> <span class="string">"2012-06-30"</span> &#125;</span>]</span>)</span>  </span><br><span class="line">    </span><br><span class="line">  <span class="comment">;; 全量查询  </span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">doseq</span></span> <span class="collection">[item <span class="list">(<span class="keyword"><span class="built_in">map</span></span> list <span class="list">(<span class="keyword">mc/find-maps</span> <span class="string">"workflow"</span>)</span>)</span>]</span>   </span><br><span class="line">        <span class="list">(<span class="keyword">println</span> item)</span>)</span>  </span><br><span class="line">     </span><br><span class="line">  <span class="comment">;; 条件查询  </span></span><br><span class="line">   <span class="list">(<span class="keyword">println</span>)</span>   <span class="comment">;; 空一行  </span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">doseq</span></span> <span class="collection">[item <span class="list">(<span class="keyword">mc/find-one</span> <span class="string">"workflow"</span> <span class="collection">&#123; <span class="attribute">:name</span> <span class="string">"blog"</span> &#125;</span>)</span>]</span>   </span><br><span class="line">         <span class="list">(<span class="keyword">println</span> item)</span>)</span>  </span><br><span class="line">   <span class="list">(<span class="keyword">println</span> <span class="list">(<span class="keyword">mc/find-one</span> <span class="string">"workflow"</span> <span class="collection">&#123; <span class="attribute">:name</span> <span class="string">"blog"</span> &#125;</span>)</span>)</span>  </span><br><span class="line">     </span><br><span class="line">  <span class="comment">;; 更新   </span></span><br><span class="line">   <span class="list">(<span class="keyword">mc/update</span> <span class="string">"workflow"</span> <span class="collection">&#123;<span class="attribute">:name</span> <span class="string">"csdn"</span>&#125;</span> <span class="collection">&#123;<span class="attribute">:copyright</span> <span class="string">"yanggang"</span>&#125;</span> <span class="attribute">:upsert</span> <span class="literal">true</span>)</span>  </span><br><span class="line">     </span><br><span class="line">  <span class="comment">;; 删除  </span></span><br><span class="line">   <span class="list">(<span class="keyword">mc/remove</span> <span class="string">"workflow"</span> <span class="collection">&#123; <span class="attribute">:name</span> <span class="string">"csdn2"</span> &#125;</span>)</span>  </span><br><span class="line">    </span><br><span class="line">  <span class="comment">;; 全量查询删除后的结果  </span></span><br><span class="line">   <span class="list">(<span class="keyword">println</span>)</span>  </span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">doseq</span></span> <span class="collection">[item <span class="list">(<span class="keyword"><span class="built_in">map</span></span> list <span class="list">(<span class="keyword">mc/find-maps</span> <span class="string">"workflow"</span>)</span>)</span>]</span>   </span><br><span class="line">        <span class="list">(<span class="keyword">println</span> item)</span>)</span>  </span><br><span class="line">     </span><br><span class="line">   <span class="comment">;; 关闭连接  </span></span><br><span class="line">  <span class="list">(<span class="keyword">monger.core/disconnect!</span>)</span>  </span><br><span class="line">)</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">; 执行函数  </span></span><br><span class="line"><span class="list">(<span class="keyword">-main</span>)</span></span><br></pre></td></tr></table></figure>
<p><strong>运行结果：</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(&#123;:_id #&lt;ObjectId 52a6a9e1e4b0e53f523a9ddb&gt;, :copyright ithomer, :name blog, :dtime 2009-07-31, :url http://blog.ithomer.net&#125;)  </span><br><span class="line">(&#123;:_id #&lt;ObjectId 52a6a9e1e4b0e53f523a9ddc&gt;, :copyright ithomer, :name forum, :dtime 2013-12-01, :url http://blog.ithomer.net&#125;)  </span><br><span class="line">(&#123;:_id #&lt;ObjectId 52a6a9e1e4b0e53f523a9ddd&gt;, :copyright ithomer, :name csdn, :dtime 2010-01-01, :url http://blog.csdn.net/ithomer&#125;)  </span><br><span class="line">(&#123;:_id #&lt;ObjectId 52a6a9e1e4b0e53f523a9dde&gt;, :copyright ithomer, :name csdn2, :dtime 2012-06-30, :url http://blog.csdn.net/sunboy_2050&#125;)  </span><br><span class="line">  </span><br><span class="line">#&lt;Entry _id=52a6a9e1e4b0e53f523a9ddb&gt;  </span><br><span class="line">#&lt;Entry copyright=ithomer&gt;  </span><br><span class="line">#&lt;Entry name=blog&gt;  </span><br><span class="line">#&lt;Entry dtime=2009-07-31&gt;  </span><br><span class="line">#&lt;Entry url=http://blog.ithomer.net&gt;  </span><br><span class="line">#&lt;BasicDBObject &#123; "_id" : &#123; "$oid" : "52a6a9e1e4b0e53f523a9ddb"&#125; , "copyright" : "ithomer" , "name" : "blog" , "dtime" : "2009-07-31" , "url" : "http://blog.ithomer.net"&#125;&gt;  </span><br><span class="line">  </span><br><span class="line">(&#123;:_id #&lt;ObjectId 52a6a9e1e4b0e53f523a9ddb&gt;, :copyright ithomer, :name blog, :dtime 2009-07-31, :url http://blog.ithomer.net&#125;)  </span><br><span class="line">(&#123;:_id #&lt;ObjectId 52a6a9e1e4b0e53f523a9ddc&gt;, :copyright ithomer, :name forum, :dtime 2013-12-01, :url http://blog.ithomer.net&#125;)  </span><br><span class="line">(&#123;:_id #&lt;ObjectId 52a6a9e1e4b0e53f523a9ddd&gt;, :copyright yanggang&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>mongo数据库内容：</strong><br><img src="/static/images/clojure/clojure_sql_mongo.png" alt="clojure_sql_mongo.png"></p>
<p><strong>参考推荐：</strong><br><a href="http://clojuremongodb.info/articles/getting_started.html" target="_blank" rel="external">Monger, a Clojure client for MongoDB</a><br><a href="http://f.dataguru.cn/thread-92356-1-1.html" target="_blank" rel="external">clojure简单操作mongo</a><br><a href="http://blog.csdn.net/sunboy_2050/article/details/17240703" target="_blank" rel="external">Clojure 学习入门（8）—— 连接mongodb</a></p>
]]></content>
    <summary type="html">
    <![CDATA[clojure 连接mongodb简单介绍及示例]]>
    
    </summary>
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="mongodb" scheme="http://notes.seirhsiao.com/tags/mongodb/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clojure 学习 —— 异常处理]]></title>
    <link href="http://notes.seirhsiao.com/2016/01/26/2014-06-27-clojure-try-catch/"/>
    <id>http://notes.seirhsiao.com/2016/01/26/2014-06-27-clojure-try-catch/</id>
    <published>2016-01-26T12:47:24.427Z</published>
    <updated>2016-01-26T12:47:24.427Z</updated>
    <content type="html"><![CDATA[<p>clojure 异常处理简单介绍及示常见函数(宏)示例<br><a id="more"></a></p>
<h3 id="u4E00_u3001_u5F02_u5E38_u5904_u7406"><a href="#u4E00_u3001_u5F02_u5E38_u5904_u7406" class="headerlink" title="一、异常处理"></a>一、异常处理</h3><p>Clojure代码里面抛出来的异常都是运行时异常。当然从Clojure代码里面调用的java代码还是可能抛出那种需要检查的异常的。</p>
<p><code>try - catch - finally</code> 以及<code>throw</code> 提供了和<code>java</code>里面类似的功能。</p>
<p><strong><code>try</code>、<code>catch</code>、<code>throw</code>、<code>finally</code>：</strong><br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">try</span></span> <span class="list">(<span class="keyword"><span class="built_in">throw</span></span> <span class="list">(<span class="keyword">Exception.</span> <span class="string">"error"</span>)</span>)</span> <span class="list">(<span class="keyword">finally</span> <span class="list">(<span class="keyword">println</span> <span class="string">"final"</span>)</span>)</span>)</span>  </span></span><br><span class="line">final  </span><br><span class="line">Exception error  user/eval310 (NO_SOURCE_FILE:1)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">try</span></span> <span class="list">(/ <span class="number">3</span> <span class="number">0</span>)</span> <span class="list">(<span class="keyword">catch</span> Exception e <span class="list">(<span class="keyword">println</span> e)</span>)</span>)</span>  </span></span><br><span class="line">#&lt;ArithmeticException java.lang.ArithmeticException: Divide by zero&gt;  </span><br><span class="line">nil</span><br></pre></td></tr></table></figure></p>
<p><strong><code>assert</code>：</strong><br>它测试一个表达式， 如果这个表达式的值为false的话，它会抛出异常。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">assert</span></span> <span class="literal">true</span>)</span>  </span></span><br><span class="line">nil  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">assert</span></span> <span class="literal">false</span>)</span>  </span></span><br><span class="line">AssertionError Assert failed: false  user/eval317 (NO_SOURCE_FILE:1)  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">assert</span></span> <span class="literal">nil</span>)</span>  </span></span><br><span class="line">AssertionError Assert failed: nil  user/eval319 (NO_SOURCE_FILE:1)  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">assert</span></span> <span class="number">0</span>)</span>  </span></span><br><span class="line">nil  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">assert</span></span> <span class="collection">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span>)</span>  </span></span><br><span class="line">nil  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">assert</span></span> <span class="string">"foo"</span>)</span>  </span></span><br><span class="line">nil</span><br></pre></td></tr></table></figure></p>
<p><strong><code>clojure</code> 完整示例：</strong></p>
<pre><code class="clojure">(<span class="name"><span class="builtin-name">ns</span></span> helloclojure.myexception)  

(<span class="name"><span class="builtin-name">defn</span></span> exception_test1 []  
  (<span class="name"><span class="builtin-name">try</span></span> (<span class="name"><span class="builtin-name">throw</span></span> (<span class="name">Exception.</span> <span class="string">"--error--"</span>))  
    (<span class="name">finally</span> (<span class="name">println</span> <span class="string">"final"</span>))  
    ))  

(<span class="name"><span class="builtin-name">defn</span></span> exception_test2 []  
  (<span class="name"><span class="builtin-name">try</span></span> (/ <span class="number">3</span> <span class="number">0</span>)   
    (<span class="name">catch</span> Exception e (<span class="name">println</span> <span class="string">"error: "</span> e))  
    ))  

(<span class="name"><span class="builtin-name">defn</span></span> exception_test3 [cls]  
  (<span class="name"><span class="builtin-name">try</span></span> (<span class="name">Class/forName</span> cls) <span class="literal">true</span>  
    (<span class="name">catch</span> ClassNotFoundException e <span class="literal">false</span>))  
  )  

<span class="comment">;(exception_test1)  </span>
(<span class="name">exception_test2</span>)   <span class="comment">; error:  #&lt;ArithmeticException java.lang.ArithmeticException: Divide by zero&gt;  </span>
<span class="comment">;(exception_test3 helloclojure.myexception)  </span>


(<span class="name"><span class="builtin-name">assert</span></span> <span class="literal">true</span>)          

<span class="comment">;(assert false)  </span>
<span class="comment">;(try (assert false)  </span>
<span class="comment">;  (catch Exception e (println "error" e))  </span>
<span class="comment">;  (finally (println 'finally)))  </span>

<span class="comment">;(assert nil)  </span>

(<span class="name"><span class="builtin-name">assert</span></span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>])  

(<span class="name"><span class="builtin-name">assert</span></span> <span class="string">"foo"</span>)  

(<span class="name"><span class="builtin-name">assert</span></span> <span class="number">0</span>)  

(<span class="name">print</span> 'end)
</code></pre>
<p>二、参考资料<br><a href="http://blog.csdn.net/sunboy_2050/article/details/17226585" target="_blank" rel="external">Clojure 学习入门（17）—— 异常处理</a><br><a href="http://dead-knight.iteye.com/blog/1829618" target="_blank" rel="external">clojure-基本语法-流程控制（二）</a></p>
]]></content>
    <summary type="html">
    <![CDATA[clojure 异常处理简单介绍及示常见函数(宏)示例]]>
    
    </summary>
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clojure 学习 —— binding]]></title>
    <link href="http://notes.seirhsiao.com/2016/01/26/2014-06-26-clojure-binding/"/>
    <id>http://notes.seirhsiao.com/2016/01/26/2014-06-26-clojure-binding/</id>
    <published>2016-01-26T12:47:07.643Z</published>
    <updated>2016-01-26T12:47:07.643Z</updated>
    <content type="html"><![CDATA[<p>clojure Binding简单介绍及示常见示例<br><a id="more"></a></p>
<p><code>Clojure</code>里面是不支持变量的。<code>Binding</code>跟变量有点像，但是在被赋值之前是不允许改的，包括：全局<code>binding</code>, 线程本地(thread local)<code>binding</code>， 以及函数内的本地<code>binding</code>， 以及一个表达式内部的<code>binding</code>。</p>
<p><code>def</code> 这个<code>special form</code> 定义一个全局的 <code>binding</code>，并且你还可以给它一个”<code>root value</code>” ，这个<code>root value</code>在所有的线程里面都是可见的，除非你给它赋了一个线程本地的值.<code>def</code>。也可以用来改变一个已经存在的<code>binding</code>的<code>root value</code> —— 但是这是不被鼓励的，因为这会牺牲不可变数据所带来的好处。</p>
<p>函数的参数是只在这个函数内可见的本地<code>binding</code>。</p>
<p><code>let</code> 这个<code>special form</code> 创建局限于一个 当前<code>form</code>的<code>bindings</code>. 它的第一个参数是一个<code>vector</code>, 里面包含名字-表达式的对子。表达式的值会被解析然后赋给左边的名字。这些<code>binding</code>可以在这个<code>vector</code>后面的表达式里面使用。这些<code>binding</code>还可以被多次赋值以改变它们的值，<code>let</code>命令剩下的参数是一些利用这个<code>binding</code>来进行计算的一些表达式。</p>
<p><strong>注意：</strong> 如果这些表达式里面有调用别的函数，那么这个函数是无法利用<code>let</code>创建的这个<code>binding</code>的。</p>
<p>宏 <code>binding</code> 跟<code>let</code> 类似, 但是它创建的本地<code>binding</code>会暂时地覆盖已经存在的全局<code>binding</code>. 这个<code>binding</code>可以在创建这个<code>binding</code>的<code>form</code>以及这个<code>form</code>里面调用的函数里面都能看到。但是一旦跳出了这个<code>binding</code>那么被覆盖的全局<code>binding</code>的值会回复到之前的状态。</p>
<p>从 <code>Clojure 1.3</code>开始, <code>binding</code>只能用在 动态变量(<code>dynamic var</code>)上面了. 下面的例子演示了怎么定一个<code>dynamic var</code>。另一个区别是<code>let</code> 是串行的赋值的, 所以后面的<code>binding</code>可以用前面<code>binding</code>的值, 而<code>binding</code> 是不行的.</p>
<p>要被用来定义成新的、本地线程的、用<code>binding</code>来定义的<code>binding</code>有它们自己的命名方式：她们以星号开始，以星号结束。在这篇文章里面你会看到：<code>*command-line-args*</code>,<code>*agent*</code>,<code>*err*</code>,<code>*flush-on-newline*</code>,<code>*in*</code>,<code>*load-tests*</code>,<code>*ns*</code>,<code>*out*</code>,<code>*print-length*</code>,<code>*print-level*</code> and <code>*stack-trace-depth*</code>.要使用这些<code>binding</code>的函数会被这些<code>binding</code>的值影响的。比如给<code>*out*</code>一个新的<code>binding</code>会改变<code>println</code>函数的输出终端。</p>
<p>下面的例子介绍了<code>def</code>,<code>let</code> 和<code>binding</code>的用法：</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">; clojure connect to mysql  </span></span><br><span class="line"><span class="comment">; ithomer.net  </span></span><br><span class="line"><span class="comment">; 2013.12.10  </span></span><br><span class="line">  </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">ns</span></span> myClojure.syntax.binding)</span>  </span><br><span class="line">  </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> ^<span class="attribute">:dynamic</span> v <span class="number">1</span>)</span>         <span class="comment">; v is a global binding  </span></span><br><span class="line">   </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> f1 <span class="collection">[]</span>  </span><br><span class="line">  <span class="list">(<span class="keyword">println</span> <span class="string">"f1: v ="</span> v)</span>)</span>    <span class="comment">; global binding of 1  </span></span><br><span class="line">   </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> f2 <span class="collection">[]</span>  </span><br><span class="line">  <span class="list">(<span class="keyword">println</span> <span class="string">"f2: before let v ="</span> v)</span>       <span class="comment">; global binding  </span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">let</span></span> <span class="collection">[v <span class="number">2</span>]</span>                             <span class="comment">; creates local binding v that shadows global one  </span></span><br><span class="line">    <span class="list">(<span class="keyword">println</span> <span class="string">"f2: in let, v ="</span> v)</span>        <span class="comment">; local binding of 2  </span></span><br><span class="line">    <span class="list">(<span class="keyword">f1</span>)</span>)</span>                                <span class="comment">; of 1  </span></span><br><span class="line">  <span class="list">(<span class="keyword">println</span> <span class="string">"f2: after let v ="</span> v)</span>)</span>       <span class="comment">; global binding of 1  </span></span><br><span class="line">   </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> f3 <span class="collection">[]</span>  </span><br><span class="line">  <span class="list">(<span class="keyword">println</span> <span class="string">"f3: before binding v ="</span> v)</span>   <span class="comment">; global binding of 1  </span></span><br><span class="line">  <span class="list">(<span class="keyword">binding</span> <span class="collection">[v <span class="number">3</span>]</span>                         <span class="comment">; same global binding with new, temporary value  </span></span><br><span class="line">    <span class="list">(<span class="keyword">println</span> <span class="string">"f3: in binding, v ="</span> v)</span>    <span class="comment">; global binding of 3  </span></span><br><span class="line">    <span class="list">(<span class="keyword">f1</span>)</span>)</span>                                <span class="comment">; of 3  </span></span><br><span class="line">  <span class="list">(<span class="keyword">println</span> <span class="string">"f3: after binding v ="</span> v)</span>)</span>   <span class="comment">; global binding of 1  </span></span><br><span class="line">   </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> f4 <span class="collection">[]</span>  </span><br><span class="line"> <span class="list">(<span class="keyword"><span class="built_in">def</span></span> v <span class="number">4</span>)</span>                               <span class="comment">; changes the value of the global binding  </span></span><br><span class="line"> <span class="list">(<span class="keyword">println</span> <span class="string">"f4: after binding v ="</span> v)</span>     <span class="comment">; of 4  </span></span><br><span class="line"> <span class="list">(<span class="keyword">f1</span>)</span>)</span>                                   <span class="comment">; of 4  </span></span><br><span class="line">   </span><br><span class="line"><span class="list">(<span class="keyword">f2</span>)</span>  </span><br><span class="line"><span class="list">(<span class="keyword">f3</span>)</span>  </span><br><span class="line"><span class="list">(<span class="keyword">f4</span>)</span>  </span><br><span class="line"><span class="list">(<span class="keyword">println</span> <span class="string">"after calling f4, v ="</span> v)</span>      <span class="comment">; of 4</span></span><br></pre></td></tr></table></figure>
<p><strong>运行结果：</strong></p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="label">f2:</span> before let v = <span class="number">1</span>  </span><br><span class="line"><span class="label">f2:</span> <span class="keyword">in</span> let, v = <span class="number">2</span>  </span><br><span class="line"><span class="label">f1:</span> v = <span class="number">1</span>  </span><br><span class="line"><span class="label">f2:</span> after let v = <span class="number">1</span>  </span><br><span class="line"><span class="label">f3:</span> before binding v = <span class="number">1</span>  </span><br><span class="line"><span class="label">f3:</span> <span class="keyword">in</span> binding, v = <span class="number">3</span>  </span><br><span class="line"><span class="label">f1:</span> v = <span class="number">3</span>  </span><br><span class="line"><span class="label">f3:</span> after binding v = <span class="number">1</span>  </span><br><span class="line"><span class="label">f4:</span> after binding v = <span class="number">4</span>  </span><br><span class="line"><span class="label">f1:</span> v = <span class="number">4</span>  </span><br><span class="line">after calling f4, v = <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p><strong>参考推荐：</strong></p>
<p><a href="http://xumingming.sinaapp.com/302/clojure-functional-programming-for-the-jvm-clojure-tutorial/" target="_blank" rel="external">Clojure入门教程</a><br><a href="http://www.cnblogs.com/fxjwind/archive/2013/01/22/2871860.html" target="_blank" rel="external">Clojure 基本语法</a><br><a href="http://blog.csdn.net/sunboy_2050/article/details/17244587" target="_blank" rel="external">Clojure 学习入门（13）—— binding</a></p>
]]></content>
    <summary type="html">
    <![CDATA[clojure Binding简单介绍及示常见示例]]>
    
    </summary>
    
      <category term="binding" scheme="http://notes.seirhsiao.com/tags/binding/"/>
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clojure 学习 —— 序列函数]]></title>
    <link href="http://notes.seirhsiao.com/2016/01/26/2014-06-24-clojure-seq-function/"/>
    <id>http://notes.seirhsiao.com/2016/01/26/2014-06-24-clojure-seq-function/</id>
    <published>2016-01-26T12:46:32.339Z</published>
    <updated>2016-01-26T12:46:32.339Z</updated>
    <content type="html"><![CDATA[<p>clojure seq常见函数(宏)示例<br><a id="more"></a></p>
<h3 id="u64CD_u4F5C_u96C6_u5408_u7684_u901A_u7528_u8BED_u53E5"><a href="#u64CD_u4F5C_u96C6_u5408_u7684_u901A_u7528_u8BED_u53E5" class="headerlink" title="操作集合的通用语句"></a>操作集合的通用语句</h3><p><strong>1、<code>count</code>：</strong><br><code>count</code>函数返回集合中元素的个数，如果<code>count</code>参数为<code>nil</code>，则返回<code>0</code><br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">count</span></span> <span class="literal">nil</span>)</span>  </span></span><br><span class="line">0  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">count</span></span> <span class="collection">[]</span>)</span>  </span></span><br><span class="line">0  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">count</span></span> <span class="collection">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span>)</span>  </span></span><br><span class="line">3  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">count</span></span> '<span class="list">(<span class="number">1</span> <span class="string">"a"</span>)</span>)</span>  </span></span><br><span class="line">2  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">count</span></span> <span class="collection">&#123;<span class="attribute">:one</span> <span class="number">1</span> <span class="attribute">:two</span> <span class="number">2</span>&#125;</span>)</span>  </span></span><br><span class="line">2  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">count</span></span> <span class="string">"string"</span>)</span>  </span></span><br><span class="line">6</span><br></pre></td></tr></table></figure></p>
<p><strong>2、<code>empty</code>：</strong><br>返回一个空的集合，集合类型不变，如果<code>empty</code>参数为<code>nil</code>，则返回<code>nil</code><br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">empty</span></span> <span class="collection">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span>)</span>  </span></span><br><span class="line">[]  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">empty</span></span> <span class="list">(<span class="keyword"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span>  </span></span><br><span class="line">()  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">empty</span></span> <span class="collection">&#123;<span class="attribute">:key1</span> <span class="number">1</span>&#125;</span>)</span>  </span></span><br><span class="line">&#123;&#125;  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">empty</span></span> <span class="literal">nil</span>)</span>  </span></span><br><span class="line">nil</span><br></pre></td></tr></table></figure></p>
<p><strong>3、<code>not-empty</code>：</strong><br>如果集合为空，返回<code>nil</code>，其它直接返回参数指向的集合<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">not-empty</span> <span class="collection">[]</span>)</span>  </span></span><br><span class="line">nil  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">not-empty</span> '<span class="list">(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span>  </span></span><br><span class="line">(1 2 3)</span><br></pre></td></tr></table></figure></p>
<p><strong>4、<code>into</code>：</strong><br><code>into</code>接受两个集合参数，并且将第二个集合参数元素全部插入到第一个集合参数中，再返回。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">into</span></span> <span class="collection">&#123;&#125;</span> <span class="collection">[<span class="collection">[<span class="number">1</span> <span class="number">2</span>]</span> <span class="collection">[<span class="number">3</span> <span class="number">4</span>]</span>]</span>)</span>  </span></span><br><span class="line">&#123;1 2, 3 4&#125;  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">into</span></span> <span class="collection">[]</span> <span class="collection">&#123;<span class="attribute">:a</span> <span class="number">1</span> <span class="attribute">:b</span> <span class="number">2</span>&#125;</span>)</span>  </span></span><br><span class="line">[[:a 1] [:b 2]]  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">into</span></span> <span class="list">()</span> '<span class="list">(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span>  </span></span><br><span class="line">(3 2 1)  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">into</span></span> <span class="collection">[<span class="string">"a"</span> <span class="string">"b"</span>]</span> '<span class="list">(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span>  </span></span><br><span class="line">["a" "b" 1 2 3]</span><br></pre></td></tr></table></figure></p>
<p><strong>5、<code>contains?</code>：</strong><br>如果当前给定的集合（第一个参数）存在<code>key</code>（第二个参数），则返回<code>true</code>，否则返回<code>false</code>。特别指出，对于数组、<code>vector</code>以索引标识的集合，如果<code>key</code>在索引返回内，则返回<code>true</code>，否则返回<code>false</code>，对于列表类型，总是返回<code>false</code>。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">contains?</span></span> <span class="collection">&#123;<span class="attribute">:a</span> <span class="number">1</span>&#125;</span> <span class="attribute">:a</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">contains?</span></span> <span class="collection">&#123;<span class="attribute">:a</span> <span class="literal">nil</span>&#125;</span> <span class="attribute">:a</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">contains?</span></span> <span class="collection">&#123;<span class="attribute">:a</span> <span class="number">1</span>&#125;</span> <span class="attribute">:b</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">contains?</span></span> <span class="collection">[<span class="attribute">:a</span> <span class="attribute">:b</span> <span class="attribute">:c</span>]</span> <span class="attribute">:b</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">contains?</span></span> <span class="collection">[<span class="attribute">:a</span> <span class="attribute">:b</span> <span class="attribute">:c</span>]</span> <span class="number">2</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">contains?</span></span> <span class="string">"f"</span> <span class="number">0</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">contains?</span></span> <span class="string">"f"</span> <span class="number">2</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">contains?</span></span> '<span class="list">(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span> <span class="number">1</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">contains?</span></span> #<span class="collection">&#123;<span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"v"</span>&#125;</span> <span class="string">"a"</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">contains?</span></span> #<span class="collection">&#123;<span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"c"</span>&#125;</span> <span class="string">"z"</span>)</span>  </span></span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>
<p><strong>6、<code>distinct?</code>：</strong><br>如果传递的参数列表中有值相同的，返回<code>false</code>，否则返回<code>true</code>。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">distinct?</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">distinct?</span></span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">distinct?</span></span> <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"a"</span>)</span>  </span></span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>
<p><strong>7、<code>empty?</code>：</strong><br>接受一个集合参数，如果该集合没有元素，则返回<code>true</code>，否则返回<code>false</code>。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">empty?</span></span> <span class="list">()</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">empty?</span></span> '<span class="list">(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">empty?</span></span> <span class="collection">[]</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">empty?</span></span> <span class="collection">&#123;&#125;</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">empty?</span></span> #<span class="collection">&#123;&#125;</span>)</span>  </span></span><br><span class="line">true</span><br></pre></td></tr></table></figure></p>
<p><strong>8、<code>every?</code>：</strong><br><code>every?</code>接受两个参数，第一个参数为检查函数，第二个参数为集合。如果该检查函数对集合所有元素都通过，则返回<code>true</code>，否则返回<code>false</code>。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">every?</span> even? '<span class="list">(<span class="number">2</span> <span class="number">4</span> <span class="number">6</span>)</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">every?</span> odd? '<span class="list">(<span class="number">1</span> <span class="number">3</span> <span class="number">9</span>)</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">every?</span> <span class="literal">true</span>? '<span class="list">()</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">every?</span> <span class="literal">false</span>? '<span class="list">()</span>)</span>  </span></span><br><span class="line">true</span><br></pre></td></tr></table></figure></p>
<p><strong>9、<code>not-every?</code>：</strong><br><code>not-every?</code>与<code>every</code>作用相反。参照<code>every</code>介绍。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">not-every?</span></span> odd? '<span class="list">(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">not-every?</span></span> odd? '<span class="list">(<span class="number">1</span> <span class="number">3</span>)</span>)</span>  </span></span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>
<p><strong>10、<code>some</code>：</strong><br><code>some</code>与<code>every?</code>作用类似，区别是some要求集合中只要有一个元素检查为<code>true</code>，则返回<code>true</code>。所有检查都不通过，则返回<code>nil</code>。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">some</span> even? '<span class="list">(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">some</span> even? '<span class="list">(<span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span>)</span>)</span>  </span></span><br><span class="line">nil  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">some</span> <span class="literal">true</span>? <span class="collection">[<span class="literal">false</span> <span class="literal">false</span> <span class="literal">false</span>]</span>)</span>  </span></span><br><span class="line">nil  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">some</span> <span class="literal">true</span>? <span class="collection">[<span class="literal">false</span> <span class="literal">true</span> <span class="literal">false</span>]</span>)</span>  </span></span><br><span class="line">true</span><br></pre></td></tr></table></figure></p>
<p><strong>11、<code>not-any?</code>：</strong><br><code>not-any?</code>与<code>some</code>函数作用也相反（定义为<code>comp not some</code>），可参考<code>some</code>描述。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">not-any?</span></span> odd? '<span class="list">(<span class="number">2</span> <span class="number">4</span> <span class="number">6</span>)</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">not-any?</span></span> odd? '<span class="list">(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span>  </span></span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>
<p><strong>12、<code>sequential?</code>：</strong><br><code>sequential?</code>检查集合是否实现<code>Sequential</code>接口（不是排序，而是顺序存储），是则返回<code>true</code>，否则返回<code>false</code>。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user=&#62; (sequential? &#39;(2 1 3))  &#10;true  &#10;user=&#62; (sequential? &#123;:a 1 :d 2 :b 3&#125;)  &#10;false  &#10;user=&#62; (sequential? 1)  &#10;false</span><br></pre></td></tr></table></figure></p>
<p><strong>13、<code>associative?</code>：</strong><br><code>associative?</code>检查集合是否实现<code>Associative</code>接口，是则返回<code>true</code>，否则返回<code>false</code>。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">associative?</span></span> <span class="collection">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">associative?</span></span> '<span class="list">(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span>  </span></span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>
<p><strong>14、<code>sorted?</code>：</strong><br><code>sorted?</code>检查集合是否实现<code>Sorted</code>接口，是则返回<code>true</code>，否则返回<code>false</code>。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">sorted?</span></span> <span class="list">(<span class="keyword"><span class="built_in">sorted-set</span></span> <span class="number">5</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span>)</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">sorted?</span></span> <span class="list">(<span class="keyword"><span class="built_in">sorted-map</span></span> <span class="attribute">:a</span> <span class="number">1</span> <span class="attribute">:c</span> <span class="number">3</span> <span class="attribute">:b</span> <span class="number">2</span>)</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">sorted?</span></span> <span class="collection">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span>)</span>  </span></span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>
<p><strong>15、<code>counted?</code>：</strong><br>如果集合参数以常量时间内返回元素总和时，返回<code>true</code>，否则返回<code>false</code>。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">sorted?</span></span> <span class="collection">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">counted?</span></span> <span class="collection">[<span class="attribute">:a</span> <span class="attribute">:b</span> <span class="attribute">:c</span>]</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">counted?</span></span> '<span class="list">(<span class="attribute">:a</span> <span class="attribute">:b</span> <span class="attribute">:c</span>)</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">counted?</span></span> <span class="collection">&#123;<span class="attribute">:a</span> <span class="number">1</span> <span class="attribute">:b</span> <span class="number">2</span> <span class="attribute">:c</span> <span class="number">3</span>&#125;</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">counted?</span></span> <span class="string">"asdf"</span>)</span>  </span></span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>
<p><strong>16、<code>reversible?</code>：</strong><br><code>reversible?</code>检查集合参数是否实现<code>Reversible</code>接口，是则返回<code>true</code>，否则返回<code>false</code>。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">reversible?</span></span> <span class="collection">[]</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">reversible?</span></span> '<span class="list">()</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">reversible?</span></span> #<span class="collection">&#123;&#125;</span>)</span>  </span></span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>
<h4 id="u7C7B_u578B_u68C0_u67E5"><a href="#u7C7B_u578B_u68C0_u67E5" class="headerlink" title="类型检查"></a>类型检查</h4><p><strong>1、<code>coll?</code>：</strong><br>如果给定的参数实现<code>IPersistentCollection</code>接口（集合都会实现该接口），则返回<code>true</code>，否则返回<code>false</code>。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">coll?</span></span> <span class="collection">&#123;&#125;</span>)</span>   </span></span><br><span class="line">true   </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">coll?</span></span> #<span class="collection">&#123;&#125;</span>)</span>   </span></span><br><span class="line">true   </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">coll?</span></span> <span class="collection">[]</span>)</span>   </span></span><br><span class="line">true   </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">coll?</span></span> <span class="list">()</span>)</span>   </span></span><br><span class="line">true   </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">coll?</span></span> <span class="number">4</span>)</span>   </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">coll?</span></span> <span class="string">"fred"</span>)</span>   </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">coll?</span></span> <span class="literal">true</span>)</span>   </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">coll?</span></span> <span class="literal">nil</span>)</span>   </span></span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>
<p><strong>2、<code>seq?</code>：</strong><br>如果给定的参数实现<code>ISeq</code>接口（序列实现该接口，序列内容在下篇讲解），则返回<code>true</code>，否则返回<code>false</code><br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">seq?</span></span> <span class="number">1</span>)</span>   </span></span><br><span class="line">false   </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">seq?</span></span> <span class="collection">[<span class="number">1</span>]</span>)</span>   </span></span><br><span class="line">false   </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">seq?</span></span> <span class="list">(<span class="keyword"><span class="built_in">seq</span></span> <span class="collection">[<span class="number">1</span>]</span>)</span>)</span>   </span></span><br><span class="line">true</span><br></pre></td></tr></table></figure></p>
<p><strong>3、<code>vector?</code>：</strong><br>如果给定的参数实现<code>IPersistentVector</code>接口（向量<code>Vector</code>实现该接口），则返回<code>true</code>，否则返回<code>false</code><br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">vector?</span></span> <span class="collection">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span>)</span>   </span></span><br><span class="line">true   </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">vector?</span></span> '<span class="list">(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span>   </span></span><br><span class="line">false   </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">vector?</span></span> <span class="list">(<span class="keyword"><span class="built_in">vec</span></span> '<span class="list">(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span>)</span>   </span></span><br><span class="line">true</span><br></pre></td></tr></table></figure></p>
<p><strong>4、<code>list?</code>：</strong><br>如果给定的参数实现<code>IPersistentList</code>接口（列表<code>List</code>实现该接口），则返回<code>true</code>，否则返回<code>false</code><br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">list?</span></span> '<span class="list">(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span>   </span></span><br><span class="line">true   </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">list?</span></span> <span class="list">(<span class="keyword"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">2</span>)</span>)</span>   </span></span><br><span class="line">true   </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">list?</span></span> <span class="number">0</span>)</span>   </span></span><br><span class="line">false   </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">list?</span></span> <span class="collection">&#123;&#125;</span>)</span>   </span></span><br><span class="line">false   </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">list?</span></span> <span class="collection">[]</span>)</span>   </span></span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>
<p><strong>5、<code>map?</code>：</strong><br>如果给定的参数实现<code>IPersistentMap</code>接口（映射<code>Map</code>实现该接口），则返回<code>true</code>，否则返回<code>false</code><br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">map?</span></span> <span class="collection">&#123;<span class="attribute">:a</span> <span class="number">1</span> <span class="attribute">:b</span> <span class="number">2</span> <span class="attribute">:c</span> <span class="number">3</span>&#125;</span>)</span>   </span></span><br><span class="line">true   </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">map?</span></span> '<span class="list">(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span>   </span></span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>
<p><strong>6、<code>set?</code>：</strong><br>如果给定的参数实现<code>IPersistentSet</code>接口（<code>set</code>集合实现该接口），则返回<code>true</code>，否则返回<code>false</code><br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user&gt; (set? #&#123;1 2 3&#125;)   </span><br><span class="line">true   </span><br><span class="line">user&gt; (set? [1 2 3])   </span><br><span class="line">false   </span><br><span class="line">user&gt; (set? &#123;:a 1 :b 2&#125;)   </span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>
<p>实际上本篇介绍的各种检查语句，都是检查底层实现类所实现的接口（具有对应接口的功能），比如说列表<code>List</code>的实现类定义为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersistentList</span> <span class="keyword">extends</span> <span class="title">ASeq</span>  </span><br><span class="line">  <span class="keyword">implements</span> <span class="title">IPersistentList</span>, <span class="title">IReduce</span>, <span class="title">List</span>, <span class="title">Counted</span></span></span><br></pre></td></tr></table></figure></p>
<p>二、参考资料<br><a href="http://dead-knight.iteye.com/blog/1831446" target="_blank" rel="external">clojure-基本语法-集合（三）</a></p>
]]></content>
    <summary type="html">
    <![CDATA[clojure seq常见函数(宏)示例]]>
    
    </summary>
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="seq" scheme="http://notes.seirhsiao.com/tags/seq/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="集合" scheme="http://notes.seirhsiao.com/tags/%E9%9B%86%E5%90%88/"/>
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clojure 学习 —— 循环控制]]></title>
    <link href="http://notes.seirhsiao.com/2016/01/26/2014-06-17-clojure-for-and-loop/"/>
    <id>http://notes.seirhsiao.com/2016/01/26/2014-06-17-clojure-for-and-loop/</id>
    <published>2016-01-26T12:46:01.379Z</published>
    <updated>2016-01-26T12:46:01.379Z</updated>
    <content type="html"><![CDATA[<p>clojure 循环控制简单介绍及示常见函数(宏)例应用<br><a id="more"></a></p>
<h3 id="u4E00_u3001_u57FA_u4E8E_u51FD_u6570_u7684_u6D41_u7A0B_u63A7_u5236"><a href="#u4E00_u3001_u57FA_u4E8E_u51FD_u6570_u7684_u6D41_u7A0B_u63A7_u5236" class="headerlink" title="一、基于函数的流程控制"></a>一、基于函数的流程控制</h3><p><strong><code>repeatedly</code>：</strong><br><code>repeatedly</code>字面意思为重复函数。一般的用法如下：<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">repeatedly</span> <span class="number">5</span> #<span class="list">(<span class="keyword"><span class="built_in">rand-int</span></span> <span class="number">11</span>)</span>)</span>  </span></span><br><span class="line">(6 8 2 6 6)</span><br></pre></td></tr></table></figure></p>
<p>重复产生5次随机数。<code>rand-int</code> 11表示0至11的随机数。<br>这里顺便提一下<code>repeat</code>函数：<code>repeat</code>函数接受一/两个常量参数，用法如下：<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">repeat</span></span> <span class="number">5</span> <span class="list">(<span class="keyword"><span class="built_in">int</span></span> <span class="list">(<span class="keyword"><span class="built_in">rand-int</span></span> <span class="number">100</span>)</span>)</span>)</span>  </span></span><br><span class="line">(30 30 30 30 30)</span><br></pre></td></tr></table></figure></p>
<p>当<code>repeat</code>、<code>repeatedly</code>函数只接受一个参数时（即没有重复次数的参数），需要配合<code>take</code>来中止，否则会产生内存溢出的错误。如下：<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">repeatedly</span> #<span class="list">(<span class="keyword"><span class="built_in">rand-int</span></span> <span class="number">11</span>)</span>)</span>  </span></span><br><span class="line">OutOfMemoryError Java heap space  java.util.Arrays.copyOf (Arrays.java:2882)  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">take</span></span> <span class="number">5</span> <span class="list">(<span class="keyword">repeatedly</span> #<span class="list">(<span class="keyword"><span class="built_in">rand-int</span></span> <span class="number">11</span>)</span>)</span>)</span>  </span></span><br><span class="line">(10 7 0 2 8)</span><br></pre></td></tr></table></figure></p>
<p><strong><code>iterate</code>：</strong><br>迭代函数形式如下：<br><code>(iterate f v)</code><br>相当于：<br><code>while(true) { v = f(v) }</code><br>所以一般要配合<code>(take n sequence)</code>来中止：<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">take</span></span> <span class="number">10</span> <span class="list">(<span class="keyword"><span class="built_in">iterate</span></span> inc <span class="number">5</span>)</span>)</span> <span class="comment">; (5 6 7 8 9 10 11 12 13 14)  </span></span></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">take</span></span> <span class="number">10</span> <span class="list">(<span class="keyword"><span class="built_in">iterate</span></span> #<span class="list">(<span class="keyword"><span class="built_in">+</span></span> % <span class="number">5</span>)</span> <span class="number">5</span>)</span>)</span> <span class="comment">; (5 10 15 20 25 30 35 40 45 50)  </span></span></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">take</span></span> <span class="number">10</span> <span class="list">(<span class="keyword"><span class="built_in">iterate</span></span> #<span class="list">(<span class="keyword"><span class="built_in">*</span></span> % <span class="number">2</span>)</span> <span class="number">2</span>)</span>)</span> <span class="comment">; (2 4 8 16 32 64 128 256 512 1024)</span></span></span><br></pre></td></tr></table></figure></p>
<p>二、基于序列的流程控制<br><strong><code>dotimes</code>：</strong><br><code>dotimes</code> 会执行给定的表达式一定次数, 一个本地<code>binding</code>会被给定值：从0到一个给定的数值。如下：<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">dotimes</span></span> <span class="collection">[num <span class="number">3</span>]</span> <span class="list">(<span class="keyword">println</span> <span class="string">"number:"</span> <span class="list">(<span class="keyword"><span class="built_in">inc</span></span> num)</span>)</span>)</span>  </span></span><br><span class="line">number: 1  </span><br><span class="line">number: 2  </span><br><span class="line">number: 3  </span><br><span class="line">nil</span><br></pre></td></tr></table></figure></p>
<p><strong><code>doseq</code>：</strong><br><code>doseq</code>和<code>for</code>的语法是一样的，只不过<code>for</code>返回<code>lazy seq</code>而<code>doseq</code>接受任意数量的表达式, 以有副作用的方式执行它们, 并且返回<code>nil</code><br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">doseq</span></span> <span class="collection">[i <span class="list">(<span class="keyword"><span class="built_in">range</span></span> <span class="number">10</span>)</span>]</span> <span class="list">(<span class="keyword">println</span> i)</span>)</span>  </span></span><br><span class="line">0  </span><br><span class="line">1  </span><br><span class="line">2  </span><br><span class="line">3  </span><br><span class="line">4  </span><br><span class="line">5  </span><br><span class="line">6  </span><br><span class="line">7  </span><br><span class="line">8  </span><br><span class="line">9  </span><br><span class="line">nil  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">doseq</span></span> <span class="collection">[i <span class="collection">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span> j <span class="collection">[<span class="number">10</span> <span class="number">20</span>]</span>]</span> <span class="list">(<span class="keyword">println</span> i <span class="string">"-"</span> j)</span>)</span>  </span></span><br><span class="line">1 - 10  </span><br><span class="line">1 - 20  </span><br><span class="line">2 - 10  </span><br><span class="line">2 - 20  </span><br><span class="line">3 - 10  </span><br><span class="line">3 - 20  </span><br><span class="line">nil</span><br></pre></td></tr></table></figure></p>
<p><strong><code>for</code>：</strong><br><code>for</code>、<code>doseq</code>都支持遍历多个集合(最右边的最快)，同时还可以用<code>:when</code> 和 <code>:while</code>来过滤。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">for</span></span> <span class="collection">[x <span class="list">(<span class="keyword"><span class="built_in">range</span></span> <span class="number">3</span> <span class="number">7</span>)</span>]</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x)</span>)</span>  </span></span><br><span class="line">(9 16 25 36)  </span><br><span class="line">  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">for</span></span> <span class="collection">[x <span class="collection">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span> <span class="attribute">:let</span> <span class="collection">[y <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x <span class="number">3</span>)</span>]</span> <span class="attribute">:when</span> <span class="list">(<span class="keyword"><span class="built_in">even?</span></span> y)</span>]</span> y)</span>  </span></span><br><span class="line">(0 6 12)</span><br></pre></td></tr></table></figure></p>
<p>上面第二条语句可理解为：先定义x为集合，再使用let将y赋值为x*3，最后判断y是否为偶数，偶数才返回 </p>
<p>三、参考资料<br><a href="http://blog.csdn.net/sunboy_2050/article/details/17226645" target="_blank" rel="external">Clojure 学习入门（14）—— 循环控制</a><br><a href="http://dead-knight.iteye.com/blog/1829618" target="_blank" rel="external">clojure-基本语法-流程控制（二）</a></p>
]]></content>
    <summary type="html">
    <![CDATA[clojure 循环控制简单介绍及示常见函数(宏)例应用]]>
    
    </summary>
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clojure 学习 —— 正则表达式]]></title>
    <link href="http://notes.seirhsiao.com/2016/01/26/2014-06-15-clojure-regex/"/>
    <id>http://notes.seirhsiao.com/2016/01/26/2014-06-15-clojure-regex/</id>
    <published>2016-01-26T12:45:38.012Z</published>
    <updated>2016-01-26T12:45:38.012Z</updated>
    <content type="html"><![CDATA[<p>clojure 中正则表达式简单介绍与常见正则表达式处理相关函数及示例<br><a id="more"></a></p>
<h3 id="u4E00_u3001_u521B_u5EFA_u6B63_u5219_u8868_u8FBE_u5F0F"><a href="#u4E00_u3001_u521B_u5EFA_u6B63_u5219_u8868_u8FBE_u5F0F" class="headerlink" title="一、创建正则表达式"></a>一、创建正则表达式</h3><p><strong><code>re-pattern</code>函数：</strong><br>函数 (<code>re-pattern</code>) 接受一个字符串参数，返回一个正则表达式样式(<code>java.util.regex.Pattern</code>类的实例）。这个样式能用于正则表达式匹配<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">re-pattern</span> <span class="string">"\\d+"</span>)</span>  </span></span><br><span class="line">#"\d+"</span><br></pre></td></tr></table></figure></p>
<p>也可以使用读取宏来直接用文本的方式输入正则表达式：在字符串前使用<code>#</code>符号。和用<code>re-pattern</code>函数生成的一样，例如，下面的表示方式和前面的例子是相同的：<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> #<span class="string">"\\d+"</span>  </span></span><br><span class="line">#"\d+"</span><br></pre></td></tr></table></figure></p>
<p><strong><code>re-matcher</code>函数：</strong><br><code>re-matcher</code>函数接受两个参数：一个正则表达式样式和一个字符串。返回一个有状态的”<code>matcher</code>“对象，提供给其它正则函数而不是直接提供样式。<code>Matchers</code>是<code>java.util.regex.Matcher</code>.类的实例。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">re-matcher</span> #<span class="string">"\d+"</span> <span class="string">"abc12345def"</span>)</span>  </span></span><br><span class="line">#&lt;Matcher java.util.regex.Matcher[pattern=\d+ region=0,11 lastmatch=]&gt;  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">def</span></span> matcher-num <span class="list">(<span class="keyword">re-matcher</span> #<span class="string">"\d+"</span> <span class="string">"abc12345def"</span>)</span>)</span>  </span></span><br><span class="line">#'user/matcher-num  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">re-find</span></span> matcher-num)</span>  </span></span><br><span class="line">"12345"</span><br></pre></td></tr></table></figure></p>
<p>这里的<code>def</code>函数用于定义变量，后面会描述</p>
<h3 id="u4E8C_u3001_u4F7F_u7528_u6B63_u5219_u8868_u8FBE_u5F0F_uFF1A"><a href="#u4E8C_u3001_u4F7F_u7528_u6B63_u5219_u8868_u8FBE_u5F0F_uFF1A" class="headerlink" title="二、使用正则表达式："></a>二、使用正则表达式：</h3><p><strong><code>re-find</code>函数：</strong><br><code>re-find</code>接受一个样式与一个字符串或者一个<code>matcher</code>。每次调用，返回<code>matcher</code>中下一个符合正则匹配的结果。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user=&gt; (re-find #"\d+" "abc123")  </span><br><span class="line">"123"</span><br></pre></td></tr></table></figure></p>
<p><strong><code>re-matches</code>函数：</strong><br><code>re-matches</code>接受两个参数：一个正则表达式样式和一个字符串。返回任何和正则表达式样式匹配的字符串，如果没有匹配则返回<code>nil</code>。例如下面的代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">user=&gt; (re-matches #"hello" "hello,world")  </span><br><span class="line">nil  </span><br><span class="line">user=&gt; (re-matches #"hello.*" "hello,world")  </span><br><span class="line">"hello,world"  </span><br><span class="line">user=&gt; (re-matches #"hello,(.*)" "hello,world")  </span><br><span class="line">["hello,world" "world"]</span><br></pre></td></tr></table></figure></p>
<p><strong><code>re-seq</code>函数：</strong><br><code>re-seq</code>接受一个样式与一个字符串。它返回一个使用永久匹配（<code>matcher</code>）的lazy sequence(懒序列)（这个<code>sequence</code>在一个连续的样式匹配的字符串中）<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">re-seq</span> #<span class="string">"\d"</span> <span class="string">"clojure 1.1.0"</span>)</span>  </span></span><br><span class="line">("1" "1" "0")  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">re-seq</span> #<span class="string">"\w+"</span> <span class="string">"mary had a little lamb"</span>)</span>  </span></span><br><span class="line">("mary" "had" "a" "little" "lamb")</span><br></pre></td></tr></table></figure></p>
<p><strong><code>re-groups</code>函数：</strong><br>接受一个<code>matcher</code>，返回从接近的发现与匹配的集合。如果没有嵌套集合，则返回一个完全匹配的字符串。如果有嵌套集合，则返回<code>vector</code>集合，第一个元素是完全匹配的（非嵌套）<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">def</span></span> phone-number <span class="string">"672-345-456-3212"</span>)</span>  </span></span><br><span class="line">#'user/phone-number  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">def</span></span> matcher <span class="list">(<span class="keyword">re-matcher</span> #<span class="string">"((\d+)-(\d+))"</span> phone-number)</span>)</span>  </span></span><br><span class="line">#'user/matcher  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">re-find</span></span> matcher)</span>  </span></span><br><span class="line">["672-345" "672-345" "672" "345"]  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">re-groups</span></span> matcher)</span>  </span></span><br><span class="line">["672-345" "672-345" "672" "345"]</span><br></pre></td></tr></table></figure></p>
<p>四、参考资料<br><a href="http://blog.csdn.net/sunboy_2050/article/details/17225971" target="_blank" rel="external">Clojure 学习入门（16）—— 正则表达式</a><br><a href="http://dead-knight.iteye.com/blog/1827994" target="_blank" rel="external">clojure-基本语法-正则表达式</a></p>
]]></content>
    <summary type="html">
    <![CDATA[clojure 中正则表达式简单介绍与常见正则表达式处理相关函数及示例]]>
    
    </summary>
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clojure 学习 —— 条件判断]]></title>
    <link href="http://notes.seirhsiao.com/2016/01/26/2014-06-15-clojure-cond-and-if/"/>
    <id>http://notes.seirhsiao.com/2016/01/26/2014-06-15-clojure-cond-and-if/</id>
    <published>2016-01-26T12:45:19.987Z</published>
    <updated>2016-01-26T12:45:19.987Z</updated>
    <content type="html"><![CDATA[<p>clojure 条件判断简单介绍及常见函数(宏)示例</p>
<a id="more"></a>
<h3 id="u4E00_u3001_u6807_u51C6_u7684_u6D41_u7A0B_u63A7_u5236"><a href="#u4E00_u3001_u6807_u51C6_u7684_u6D41_u7A0B_u63A7_u5236" class="headerlink" title="一、标准的流程控制"></a>一、标准的流程控制</h3><p><strong><code>if</code>： </strong><br>将一个判断表达式作为它的第一个参数进行求值。如果求值为<code>true</code>，那么就返回它的第二个参数（相当于“<code>then</code>”子句）的求值结果。如果结果为<code>false</code>（包括<code>nil</code>）就返回第三个参数的求值结果（相当于“<code>else</code>”子句），前提是有提供第三个参数并且不为空。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">defn</span></span> is-small <span class="collection">[number]</span> <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> number <span class="number">100</span>)</span> <span class="string">"yes"</span> <span class="string">"no"</span>)</span>)</span>  </span></span><br><span class="line">#'user/is-small  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">is-small</span> <span class="number">50</span>)</span>  </span></span><br><span class="line">"yes"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">is-small</span> <span class="number">110</span>)</span>  </span></span><br><span class="line">"no"</span><br></pre></td></tr></table></figure></p>
<p><code>if</code>条件中除了<code>false</code>和<code>nil</code>，其他都为<code>true</code>：<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="literal">true</span> <span class="string">"true"</span>)</span>  </span></span><br><span class="line">"true"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="number">0</span> <span class="string">"true"</span>)</span>  </span></span><br><span class="line">"true"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="string">""</span> <span class="string">"true"</span>)</span>  </span></span><br><span class="line">"true"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="literal">nil</span> <span class="string">"true"</span>)</span>  </span></span><br><span class="line">nil  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="literal">false</span> <span class="string">"true"</span>)</span>  </span></span><br><span class="line">nil</span><br></pre></td></tr></table></figure></p>
<p><strong><code>if-not</code>：</strong><br>跟 <code>if</code> 的用法相同，但是作用是相反的。当逻辑为<code>false</code>的时候会去计算第二个参数的值，为<code>true</code>的时候才计算第三个参数的值 。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">if-not</span></span> <span class="list">(<span class="keyword"><span class="built_in">zero?</span></span> <span class="number">0</span>)</span> <span class="string">"no"</span> <span class="string">"yes"</span>)</span>  </span></span><br><span class="line">"yes"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">not</span></span> <span class="list">(<span class="keyword"><span class="built_in">zero?</span></span> <span class="number">0</span>)</span>)</span> <span class="string">"no"</span> <span class="string">"yes"</span>)</span>  </span></span><br><span class="line">"yes"</span><br></pre></td></tr></table></figure></p>
<p><strong><code>if-let</code>：</strong><br><code>if-let</code>宏接受两个参数，第一个参数为绑定变量，第二个参数为表达式。并根据第二个表达式参数返回的值确定执行<code>then</code>、<code>else</code>语句。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">defn</span></span> if-let-test <span class="collection">[arg]</span> <span class="list">(<span class="keyword"><span class="built_in">if-let</span></span> <span class="collection">[x arg]</span> <span class="string">"true"</span> <span class="string">"false"</span>)</span>)</span>  </span></span><br><span class="line">#'user/if-let-test  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">if-let-test</span> <span class="number">1</span>)</span>  </span></span><br><span class="line">"true"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">if-let-test</span> <span class="literal">nil</span>)</span>  </span></span><br><span class="line">"false"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">if-let-test</span> <span class="literal">false</span>)</span>  </span></span><br><span class="line">"false"</span><br></pre></td></tr></table></figure></p>
<p><strong><code>when</code>：</strong><br><code>when</code>没有<code>else</code>子句，如果<code>when</code>后面第一个参数为<code>true</code>，则执行条件后的所有语句，否则返回<code>nil</code>。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">when</span></span> <span class="literal">false</span> <span class="list">(<span class="keyword">println</span> <span class="string">"is true"</span>)</span> <span class="string">"return true"</span>)</span>  </span></span><br><span class="line">nil  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">when</span></span> <span class="literal">true</span> <span class="list">(<span class="keyword">println</span> <span class="string">"is true"</span>)</span> <span class="string">"return true"</span>)</span>  </span></span><br><span class="line">is true  </span><br><span class="line">"return true"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">def</span></span> has-value <span class="list">(<span class="keyword"><span class="built_in">when</span></span> <span class="literal">true</span> <span class="list">(<span class="keyword">println</span> <span class="string">"hello world"</span>)</span> <span class="string">"returned value"</span>)</span>)</span>  </span></span><br><span class="line">hello world  </span><br><span class="line">#'user/has-value  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> has-value  </span></span><br><span class="line">"returned value"</span><br></pre></td></tr></table></figure></p>
<p><strong><code>when-not</code>：</strong><br><code>when-not</code>与<code>when</code>类似，只是第一个参数返回<code>false</code>，才执行后面所有语句，否则返回<code>nil</code>。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">when-not</span></span>  <span class="literal">false</span> <span class="list">(<span class="keyword">println</span> <span class="string">"is true"</span>)</span> <span class="string">"return true"</span>)</span>  </span></span><br><span class="line">is true  </span><br><span class="line">"return true"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">when-not</span></span> <span class="literal">true</span> <span class="list">(<span class="keyword">println</span> <span class="string">"is true"</span>)</span> <span class="string">"return true"</span>)</span>  </span></span><br><span class="line">nil</span><br></pre></td></tr></table></figure></p>
<p><strong><code>when-let</code>：</strong><br><code>when-let</code>与<code>if-let</code>类似，只有绑定变量值不是<code>false</code>、<code>nil</code>时，才执行后面所有语句，否则直接返回<code>nil</code>。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">when-let</span></span> <span class="collection">[a <span class="literal">true</span>]</span> <span class="list">(<span class="keyword">println</span> <span class="string">"true"</span>)</span> <span class="string">"return true"</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line">"return true"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">when-let</span></span> <span class="collection">[a <span class="literal">false</span>]</span> <span class="list">(<span class="keyword">println</span> <span class="string">"true"</span>)</span>)</span>  </span></span><br><span class="line">nil  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">when-let</span></span> <span class="collection">[a <span class="literal">nil</span>]</span> <span class="list">(<span class="keyword">println</span> <span class="string">"true"</span>)</span>)</span>  </span></span><br><span class="line">nil</span><br></pre></td></tr></table></figure></p>
<p><strong><code>cond</code>：</strong><br><code>cond</code> 可以有任意个“判断/表达式”对，作为它的参数。如果满足第一个判断，就执行第一个判断对应的表达式。如果没有满足第一个条件，就会尝试后面的判断表达式，以此类推。如果一个都没有满足，那么返回 <code>nil</code> 除非你用一个 <code>:else</code> 关键字放在最后来抓住剩下的所有可能性。<code>cond</code>类似于<code>java</code>中的<code>switch..case..default</code>语句，如：<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">defn</span></span> f <span class="collection">[n]</span> <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> n <span class="number">0</span>)</span> <span class="string">"&lt;0"</span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> n <span class="number">10</span>)</span> <span class="string">"&lt;10"</span> <span class="attribute">:else</span> <span class="string">"&gt;=10"</span>)</span>)</span>  </span></span><br><span class="line">#'user/f  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">f</span> <span class="number">-2</span>)</span>  </span></span><br><span class="line">"&lt;0"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">f</span> <span class="number">2</span>)</span>  </span></span><br><span class="line">"&lt;10"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">f</span> <span class="number">10</span>)</span>  </span></span><br><span class="line">"&gt;=10"</span><br></pre></td></tr></table></figure></p>
<p><strong><code>case</code>：</strong><br><code>case</code>可以简单理解为<code>java</code>中<code>switch</code>的<code>case</code>，如下<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">let</span></span> <span class="collection">[mystr <span class="string">"hello"</span>]</span><span class="comment">;首先绑定mystr的值为hello  </span></span></span></span><br><span class="line">          (case mystr    </span><br><span class="line">            "" 0   </span><br><span class="line">            "hello" (count mystr)));case用于匹配mystr的值  </span><br><span class="line">5       </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"><span class="list"> <span class="list">(<span class="keyword"><span class="built_in">let</span></span> <span class="collection">[mystr <span class="string">"no match"</span>]</span>   </span></span></span></span><br><span class="line">          (case mystr    </span><br><span class="line">                "" 0   </span><br><span class="line">                "hello" (count mystr)   </span><br><span class="line">                "default")) ;最后一个表达式只有匹配不成功时才执行  </span><br><span class="line">"default"</span><br></pre></td></tr></table></figure></p>
<p><code>case</code>可以用列表一次匹配多个值：<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">defn</span></span> f <span class="collection">[x]</span> <span class="list">(<span class="keyword"><span class="built_in">case</span></span> x  </span></span></span></span><br><span class="line">       (5 10) "*5"  </span><br><span class="line">       (3 6 9) "*3"  </span><br><span class="line">       "others"))  </span><br><span class="line">#'user/f  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"><span class="list"><span class="list"> <span class="list">(<span class="keyword">f</span> <span class="number">5</span>)</span>  </span></span></span></span><br><span class="line">"*5"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"><span class="list"><span class="list"> <span class="list">(<span class="keyword">f</span> <span class="number">10</span>)</span>  </span></span></span></span><br><span class="line">"*5"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"><span class="list"><span class="list"> <span class="list">(<span class="keyword">f</span> <span class="number">6</span>)</span>  </span></span></span></span><br><span class="line">"*3"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"><span class="list"><span class="list"> <span class="list">(<span class="keyword">f</span> <span class="number">1</span>)</span>  </span></span></span></span><br><span class="line">"others"</span><br></pre></td></tr></table></figure></p>
<p><strong><code>do</code>：</strong><br><code>do</code>执行多条语句，返回最后一条语句值<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">def</span></span> v <span class="list">(<span class="keyword"><span class="built_in">do</span></span> <span class="list">(<span class="keyword">println</span> <span class="number">123</span>)</span> <span class="list">(<span class="keyword">println</span> <span class="number">321</span>)</span> <span class="number">-1</span>)</span>)</span>  </span></span><br><span class="line">123  </span><br><span class="line">321  </span><br><span class="line">#'user/v  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> v  </span></span><br><span class="line">-1</span><br></pre></td></tr></table></figure></p>
<p><strong><code>loop</code>、<code>recur</code>：</strong><br>如果递归的层次太深的话，那么可能会产生内存不足的情况。所以一些编程语言利用 “<code>tail call optimization</code>” (<code>TCO</code>)的技术来解决这个问题。在Clojure里面避免这个问题的一个办法是使用<code>loop</code> 和 <code>recur</code>。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">;定义递归语句完成10+9+……1=55  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">loop</span></span> <span class="collection">[sum <span class="number">0</span> cnt <span class="number">10</span>]</span> <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> cnt <span class="number">0</span>)</span> sum <span class="list">(<span class="keyword"><span class="built_in">recur</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> cnt sum)</span> <span class="list">(<span class="keyword"><span class="built_in">dec</span></span> cnt)</span>)</span>)</span>)</span>  </span></span><br><span class="line">55</span><br></pre></td></tr></table></figure></p>
<p><code>loop/recur</code> 组合把一个看似递归的调用变成一个迭代 — 迭代不需要占用栈空间。 <code>loop special form</code> 跟<code>let special form</code> 类似的地方是它们都会建立一个本地<code>binding</code>，但是同时它也建立一个递归点， 而这个递归点就是<code>recur</code>的参数里面的那个函数。<code>loop</code>给这些<code>binding</code>一个初始值。对<code>recur</code> 的调用使得程序的控制权返回给loop 并且给那些本地<code>binding</code>赋了新的值。给<code>recur</code>传递的参数一定要和<code>loop</code>所创建的<code>binding</code>的个数一样。同样<code>recur</code>只能出现在<code>loop</code>这个<code>special form</code>的最后一行</p>
<h3 id="u4E8C_u3001_u53C2_u8003_u8D44_u6599"><a href="#u4E8C_u3001_u53C2_u8003_u8D44_u6599" class="headerlink" title="二、参考资料"></a>二、参考资料</h3><p><a href="http://blog.csdn.net/sunboy_2050/article/details/17226571" target="_blank" rel="external">Clojure 学习入门（15）—— 条件判断</a><br><a href="http://dead-knight.iteye.com/blog/1828668" target="_blank" rel="external">clojure-基本语法-流程控制（一）</a></p>
]]></content>
    <summary type="html">
    <![CDATA[clojure 条件判断简单介绍及常见函数(宏)示例]]>
    
    </summary>
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clojure 学习 —— 符号及关键字]]></title>
    <link href="http://notes.seirhsiao.com/2016/01/26/2014-06-13-clojure-symbol-and-keyword/"/>
    <id>http://notes.seirhsiao.com/2016/01/26/2014-06-13-clojure-symbol-and-keyword/</id>
    <published>2016-01-26T12:45:01.044Z</published>
    <updated>2016-01-26T12:45:01.044Z</updated>
    <content type="html"><![CDATA[<p>clojure 关键字简单介绍与示例</p>
<a id="more"></a>
<h3 id="u4E00_u3001_u521B_u5EFA_uFF1A"><a href="#u4E00_u3001_u521B_u5EFA_uFF1A" class="headerlink" title="一、创建："></a>一、创建：</h3><p><strong><code>Keyword</code>：</strong> 关键字是一个内部字符串; 两个同样的关键字指向同一个对象; 通常被用来作为<code>map</code>的<code>key</code>。 </p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">keyword</span></span> <span class="string">"foo"</span>)</span>  </span></span><br><span class="line">:foo  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">keyword</span></span> 'foo)</span>  </span></span><br><span class="line">:foo  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">keyword</span></span> <span class="string">"abc def"</span>)</span>  </span></span><br><span class="line">:abc def  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">keyword</span></span> <span class="string">"abcdef"</span>)</span>  </span></span><br><span class="line">:abcdef  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">keyword</span></span> <span class="string">"/abc/def/ghi"</span>)</span>  </span></span><br><span class="line">:/abc/def/ghi  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">keyword</span></span> <span class="string">"user"</span> <span class="string">"foo"</span>)</span>  </span></span><br><span class="line">:user/foo  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">keyword</span></span> <span class="literal">nil</span>)</span>  </span></span><br><span class="line">nil  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">keyword</span></span> <span class="number">123</span>)</span>  </span></span><br><span class="line">nil  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">keyword</span></span> <span class="number">0</span>)</span>  </span></span><br><span class="line">nil</span><br></pre></td></tr></table></figure>
<p><strong><code>Symbol</code>：</strong> <code>Symbol</code>是用来给东西命名的. 这些名字是被限制在名字空间里面的，要么是指定的名字空间，要么是当前的名字空间. </p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">symbol</span></span> 'foo)</span>  </span></span><br><span class="line">foo  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">symbol</span></span> <span class="string">"foo"</span>)</span>  </span></span><br><span class="line">foo  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">symbol</span></span> <span class="string">"clojure.core"</span> <span class="string">"foo"</span>)</span>  </span></span><br><span class="line">clojure.core/foo  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">symbol</span></span> <span class="string">"abc def"</span>)</span>  </span></span><br><span class="line">abc def  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">symbol</span></span> <span class="string">"abcdef"</span>)</span>  </span></span><br><span class="line">abcdef  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">symbol</span></span> <span class="literal">nil</span>)</span>  </span></span><br><span class="line">java.lang.NullPointerException (NO_SOURCE_FILE:0)  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">symbol</span></span> <span class="number">0</span>)</span>  </span></span><br><span class="line">java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String (NO_SOURCE_FILE:0)</span><br></pre></td></tr></table></figure>
<h3 id="u4E8C_u3001_u7528_u6CD5_uFF1A"><a href="#u4E8C_u3001_u7528_u6CD5_uFF1A" class="headerlink" title="二、用法："></a>二、用法：</h3><p><strong><code>name</code></strong>： <code>name</code>函数接受一个参数，如果该参数为字符串，则直接返回该参数。如果不是字符串，则返回名称值。代码如下： </p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">name</span></span> <span class="attribute">:foo</span>)</span>  </span></span><br><span class="line">"foo"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">name</span></span> 'foo)</span>  </span></span><br><span class="line">"foo"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">name</span></span> <span class="string">"foo"</span>)</span>  </span></span><br><span class="line">"foo"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">name</span></span> <span class="literal">nil</span>)</span>  </span></span><br><span class="line">java.lang.NullPointerException (NO_SOURCE_FILE:0)  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">name</span></span> <span class="number">0</span>)</span>  </span></span><br><span class="line">java.lang.ClassCastException: java.lang.Integer cannot be cast to clojure.lang.Named (NO_SOURCE_FILE:0)</span><br></pre></td></tr></table></figure>
<p><strong><code>intern</code>：</strong> <code>intern</code>函数有两个实现：<code>(intern ns name)</code>、<code>(intern ns name val)</code>。 </p>
<p>根据命名空间ns中查找是否存在符号name，不存在，则创建；最有一个参数val作为值与符号进行绑定，代码如下： </p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">intern</span></span> 'user 'x)</span>  </span></span><br><span class="line">#'user/x  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> x  </span></span><br><span class="line">java.lang.IllegalStateException: Var user/x is unbound. (NO_SOURCE_FILE:0)  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">intern</span></span> 'user 'x <span class="string">"1"</span>)</span>  </span></span><br><span class="line">#'user/x  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> x  </span></span><br><span class="line">"1"</span><br></pre></td></tr></table></figure>
<p><strong><code>namespace</code>：</strong>  <code>namespace</code>函数根据给定的符号、或者关键字返回所在的命名空间名称，如果当前没有，则返回<code>nil</code>，代码如下： </p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">symbol</span></span> 'xx)</span>  </span></span><br><span class="line">xx  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">namespace</span></span> 'user/xxx)</span>  </span></span><br><span class="line">"user"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">namespace</span></span> 'xxx)</span>  </span></span><br><span class="line">nil  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">def</span></span> x <span class="attribute">:val</span>)</span>  </span></span><br><span class="line">#'user/x  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">namespace</span></span> 'x)</span>  </span></span><br><span class="line">nil  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">namespace</span></span> 'user/x)</span>  </span></span><br><span class="line">"user"</span><br></pre></td></tr></table></figure>
<h3 id="u4E09_u3001_u68C0_u67E5_uFF1A"><a href="#u4E09_u3001_u68C0_u67E5_uFF1A" class="headerlink" title="三、检查："></a>三、检查：</h3><p><code>keyword?</code>、<code>symbol?</code>用于检查指定的参数是否为关键字、或者是符号，是则返回<code>true</code>，否则返回<code>false</code>。 </p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">symbol?</span></span> 'x)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">symbol?</span></span> <span class="string">"x"</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">keyword?</span></span> 'x)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">keyword?</span></span> <span class="attribute">:x</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">keyword?</span></span> <span class="string">"x"</span>)</span>  </span></span><br><span class="line">false</span><br></pre></td></tr></table></figure>
<p>四、参考资料<br><a href="http://blog.csdn.net/sunboy_2050/article/details/17225729" target="_blank" rel="external">Clojure 学习入门（5）—— 关键字</a><br><a href="http://dead-knight.iteye.com/blog/1830465" target="_blank" rel="external">clojure-基本语法-符号及关键字</a></p>
]]></content>
    <summary type="html">
    <![CDATA[clojure 关键字简单介绍与示例]]>
    
    </summary>
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clojure 学习 —— 函数定义]]></title>
    <link href="http://notes.seirhsiao.com/2016/01/26/2014-06-10-clojure-function/"/>
    <id>http://notes.seirhsiao.com/2016/01/26/2014-06-10-clojure-function/</id>
    <published>2016-01-26T12:44:38.429Z</published>
    <updated>2016-01-26T12:44:38.429Z</updated>
    <content type="html"><![CDATA[<p>clojure 函数简单介绍与常见函数及示例<br><a id="more"></a></p>
<h3 id="u4E00_u3001_u521B_u5EFA_u51FD_u6570_uFF1A"><a href="#u4E00_u3001_u521B_u5EFA_u51FD_u6570_uFF1A" class="headerlink" title="一、创建函数："></a>一、创建函数：</h3><p><strong><code>fn</code>：</strong> <code>fn</code>是一个宏，用于定义一个简单的函数，如下：<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">fn</span></span> <span class="collection">[]</span> <span class="string">"hello"</span>)</span>    </span></span><br><span class="line">#&lt;user$eval375$fn__376 user$eval375$fn__376@eabd2f&gt;    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">fn</span></span> <span class="collection">[]</span> <span class="string">"hello"</span>)</span>)</span>    </span></span><br><span class="line">"hello"    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">fn</span></span> <span class="collection">[x]</span> x)</span> <span class="string">"hello"</span>)</span> <span class="comment">; 带参数    </span></span></span><br><span class="line">"hello"    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">fn</span></span> <span class="collection">[x]</span> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> <span class="string">"hello "</span> x)</span>)</span> <span class="string">"ithomer"</span>)</span>  </span></span><br><span class="line">"hello ithomer"</span><br></pre></td></tr></table></figure></p>
<p>简短的函数可以使用<code>#()</code>，<code>%</code>表示唯一的参数；<code>%1、%2 ..</code>依次表示第1、2、..个参数；<code>%&amp;</code>表示所有参数，如下：<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">#</span><span class="list">(/ % <span class="number">3</span>)</span> <span class="number">4</span>)</span>   <span class="comment">;结果为 4/3  </span></span></span><br><span class="line">4/3    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">#</span><span class="list">(/ %<span class="number">2</span> %<span class="number">1</span>)</span> <span class="number">3</span> <span class="number">4</span>)</span>   <span class="comment">;结果为 4/3   </span></span></span><br><span class="line">4/3    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">#</span><span class="list">(<span class="keyword"><span class="built_in">apply</span></span> / %&amp;)</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span>)</span>   <span class="comment">;结果为3/5/7    </span></span></span><br><span class="line">3/35</span><br></pre></td></tr></table></figure></p>
<p>下面是几个定义函数的例子：<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">fn</span></span> <span class="collection">[x]</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> x)</span>)</span> <span class="number">3</span>)</span>  <span class="comment">;一个参数完成加1的功能    </span></span></span><br><span class="line">4    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">#</span><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> %)</span> <span class="number">3</span>)</span>  <span class="comment">;使用#符号完成加1的功能    </span></span></span><br><span class="line">4    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">fn</span></span> <span class="collection">[x y]</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x y)</span>)</span> <span class="number">3</span> <span class="number">4</span>)</span>  <span class="comment">;两个参数，实现乘积的功能    </span></span></span><br><span class="line">12    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">#</span><span class="list">(<span class="keyword"><span class="built_in">*</span></span> %<span class="number">1</span> %<span class="number">2</span>)</span> <span class="number">3</span> <span class="number">4</span>)</span>  <span class="comment">;使用#符号完成两个参数乘积的功能    </span></span></span><br><span class="line">12</span><br></pre></td></tr></table></figure></p>
<p><strong><code>defn</code>：</strong> <code>defn</code> 宏用来定义一个函数。它的参数包括一个函数名字，一个可选的注释字符串，参数列表，然后一个方法体。而函数的返回值则是方法体里面最后一个表达式的值。所有的函数都会返回一个值， 只是有的返回的值是<code>nil</code>。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">defn</span></span> f1 <span class="collection">[]</span> <span class="string">"hello ithomer"</span>)</span>              <span class="comment">;定义无参函数    </span></span></span><br><span class="line">#'user/f1  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">f1</span>)</span>  </span></span><br><span class="line">"hello ithomer"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">defn</span></span> f2 <span class="collection">[x]</span> <span class="list">(<span class="keyword"><span class="built_in">format</span></span> <span class="string">"hello %s"</span> x)</span>)</span>       <span class="comment">;定义一个参数函数   </span></span></span><br><span class="line">#'user/f2  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">f2</span> <span class="string">"ithomer"</span>)</span>  </span></span><br><span class="line">"hello ithomer"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">defn</span></span> f3 <span class="collection">[x y]</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x y)</span>)</span>                   <span class="comment">;定义两个参数相加的函数    </span></span></span><br><span class="line">#'user/f3    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">f3</span> <span class="number">2</span> <span class="number">4</span>)</span>    </span></span><br><span class="line">6    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">defn</span></span> f4 <span class="string">"f4 function comment"</span> <span class="collection">[]</span> <span class="list">(<span class="keyword">println</span> <span class="string">"f4 function here"</span>)</span>)</span>       <span class="comment">;带注释的函数    </span></span></span><br><span class="line">#'user/f4    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">f4</span>)</span>    </span></span><br><span class="line">f4 function here  </span><br><span class="line">nil   </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">doc</span> f4)</span>          <span class="comment">;通过doc查看函数注释信息    </span></span></span><br><span class="line">-------------------------  </span><br><span class="line">user/f4  </span><br><span class="line">([])  </span><br><span class="line">  f4 function comment  </span><br><span class="line">nil  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">defn</span></span> f5 <span class="list">(<span class="collection">[]</span> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> <span class="string">"no parameter"</span>)</span>)</span>    </span></span></span><br><span class="line">                ([name] (str "my name is " name)))      ;定义重载的函数（无参数、一个参数）  </span><br><span class="line">#'user/f5    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"><span class="list"> <span class="list">(<span class="keyword">f5</span>)</span>                  <span class="comment">; 无参数  </span></span></span></span><br><span class="line">"no parameter"    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"><span class="list"> <span class="list">(<span class="keyword">f5</span> <span class="string">"clojure"</span>)</span>        <span class="comment">; 一个参数  </span></span></span></span><br><span class="line">"my name is clojure"    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"><span class="list"> <span class="list">(<span class="keyword"><span class="built_in">defn</span></span> f1 <span class="collection">[&amp; a]</span> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> a)</span>)</span>       <span class="comment">;定义变参函数    </span></span></span></span><br><span class="line">#'user/f1    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"><span class="list"> <span class="list">(<span class="keyword">f1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>    </span></span></span><br><span class="line">"(1 2 3)"    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"><span class="list"> <span class="list">(<span class="keyword"><span class="built_in">defn</span></span> m <span class="collection">[&amp; arg]</span> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> arg <span class="string">", size="</span> <span class="list">(<span class="keyword"><span class="built_in">count</span></span> arg)</span>)</span>)</span>      <span class="comment">;定义变参函数    </span></span></span></span><br><span class="line">#'user/m    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"><span class="list"> <span class="list">(<span class="keyword">m</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>)</span>    </span></span></span><br><span class="line">"(1 2 3 4 5), size=5"    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"><span class="list"> <span class="list">(<span class="keyword">m</span> <span class="string">"a"</span> <span class="number">1</span> <span class="number">2.3</span> <span class="number">-1</span>)</span>    </span></span></span><br><span class="line">"(\"a\" 1 2.3 -1), size=4"    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"><span class="list"> <span class="list">(<span class="keyword"><span class="built_in">defn</span></span> exp <span class="collection">[a f1 b f2 c]</span> <span class="list">(<span class="keyword">f2</span> <span class="list">(<span class="keyword">f1</span> a b)</span> c)</span>)</span>              <span class="comment">;函数作为参数    </span></span></span></span><br><span class="line">#'user/exp    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"><span class="list"> <span class="list">(<span class="keyword">exp</span> <span class="number">5</span> - <span class="number">2</span> + <span class="number">3</span>)</span>    </span></span></span><br><span class="line">6    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"><span class="list"> <span class="list">(<span class="keyword"><span class="built_in">defn</span></span> f <span class="collection">[a]</span> <span class="list">(<span class="keyword"><span class="built_in">fn</span></span> <span class="collection">[b]</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> a b)</span>)</span>)</span>                     <span class="comment">;函数作为返回值    </span></span></span></span><br><span class="line">#'user/f    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"><span class="list"> <span class="list">(<span class="list">(<span class="keyword">f</span> <span class="number">7</span>)</span> <span class="number">4</span>)</span>    </span></span></span><br><span class="line">3</span><br></pre></td></tr></table></figure></p>
<p><strong><code>defn-</code>：</strong> <code>defn-</code>与<code>defn</code>功能一致，都是用于定义函数的，<code>defn-</code>定义的函数作用域是私有的，而defn定义的函数是公有的，如下： </p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">ns</span></span> test1)</span>                    <span class="comment">;ns的意思是切换到指定的命名空间，如果不存在，则新建该命名空间    </span></span></span><br><span class="line">nil    </span><br><span class="line"><span class="prompt">test1=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">defn-</span></span> foo <span class="collection">[]</span> <span class="string">"hello ithomer"</span>)</span>           <span class="comment">;定义私有函数foo，返回字符串world    </span></span></span><br><span class="line">#'test1/foo    </span><br><span class="line"><span class="prompt">test1=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">defn</span></span> bar <span class="collection">[]</span> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> <span class="string">"hello "</span> <span class="list">(<span class="keyword">foo</span>)</span>)</span>)</span>       <span class="comment">;定义公有函数bar，并调用私有函数foo    </span></span></span><br><span class="line">#'test1/bar    </span><br><span class="line"><span class="prompt">test1=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">foo</span>)</span>            <span class="comment">;当前命名空间内调用foo函数    </span></span></span><br><span class="line">"hello ithomer"   </span><br><span class="line"><span class="prompt">test1=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">bar</span>)</span>            <span class="comment">;当前命名空间内调用bar函数    </span></span></span><br><span class="line">"hello hello ithomer"   </span><br><span class="line"><span class="prompt">test1=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">ns</span></span> test2)</span>       <span class="comment">;切换到test2命名空间中    </span></span></span><br><span class="line">nil    </span><br><span class="line"><span class="prompt">test2=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">test1/bar</span>)</span>      <span class="comment">;调用test1命名空间的bar函数，返回成功    </span></span></span><br><span class="line">"hello hello ithomer"  </span><br><span class="line"><span class="prompt">test2=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">test1/foo</span>)</span>      <span class="comment">;调用test1命名空间的foo函数，出现异常，提示test1的foo函数不是公开的    </span></span></span><br><span class="line">java.lang.IllegalStateException: var: #'test1/foo is not public (NO_SOURCE_FILE:79)</span><br></pre></td></tr></table></figure>
<p><strong>组合函数<code>comp</code>：</strong> 形如   <code>((comp f1 f2 .. fn) arg1 arg2 .. argn)</code><br>就是对参数从右到左组合执行所有函数，可以转变为： <code>(f1 (f2 (.. (fn arg1 arg2 .. argn))))</code><br>举例如下：<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">defn</span></span> f <span class="collection">[x y]</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x y)</span>)</span>)</span><span class="comment">;使用defn定义函数方式    </span></span></span><br><span class="line">#user/f    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">f</span> <span class="number">2</span> <span class="number">4</span>)</span>    </span></span><br><span class="line">-8    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">def</span></span> fc <span class="list">(<span class="keyword"><span class="built_in">comp</span></span> - *)</span>)</span><span class="comment">;使用comp定义组合函数方式    </span></span></span><br><span class="line">#user/fc    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">fc</span> <span class="number">2</span> <span class="number">4</span>)</span>    </span></span><br><span class="line">-8</span><br></pre></td></tr></table></figure></p>
<p><strong>偏函数<code>partial</code>：</strong> 形如 <code>((partial  f  arg1 arg2 .. argn)  arga argb .. argz)</code><br>就是执行： <code>(f  arg1 arg2 .. argn  arga argb .. argz)</code> </p>
<p><strong>注意：</strong> 偏函数的第一个参数是一个函数，后面至少有1个其他参数<br><code>partial</code>函数称为“偏函数”或者“部分完整函数”，因为它是不完整的，定义也用<code>def</code>而不是<code>defn</code>。 </p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">defn</span></span> f <span class="collection">[n]</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> n <span class="number">10</span>)</span>)</span><span class="comment">;正常函数    </span></span></span><br><span class="line">#'user/f    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">f</span> <span class="number">2</span>)</span>    </span></span><br><span class="line">20    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">def</span></span> fp <span class="list">(<span class="keyword"><span class="built_in">partial</span></span> * <span class="number">10</span>)</span>)</span><span class="comment">;偏函数    </span></span></span><br><span class="line">#'user/fp    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">fp</span> <span class="number">2</span>)</span>    </span></span><br><span class="line">20</span><br></pre></td></tr></table></figure>
<p><strong><code>constantly</code>函数：</strong> <code>constantly</code>函数接受一个参数<code>x</code>，并返回一个变参函数，该变参函数无论参数是什么，都返回这个<code>x</code>值。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">def</span></span> consf <span class="list">(<span class="keyword"><span class="built_in">constantly</span></span> <span class="string">"a"</span>)</span>)</span>    </span></span><br><span class="line">#'user/consf    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">consf</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>    </span></span><br><span class="line">"a"    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">consf</span> <span class="string">"a"</span>)</span>    </span></span><br><span class="line">"a"    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">consf</span> <span class="collection">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span>)</span>    </span></span><br><span class="line">"a"</span><br></pre></td></tr></table></figure></p>
<h3 id="u4E8C_u3001_u51FD_u6570_u8C03_u7528"><a href="#u4E8C_u3001_u51FD_u6570_u8C03_u7528" class="headerlink" title="二、函数调用"></a>二、函数调用</h3><p><strong><code>-&gt;</code>：</strong> 宏<code>-&gt;</code> 我们也称为 “<code>thread</code>” 宏，它本质上是调用一系列的函数，前一个函数的返回值作为后一个函数的参数，返回最后一次函数调用的值，比如下面两行代码的作用是一样的：<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">.toUpperCase</span> <span class="string">"a b c d"</span>)</span>  </span></span><br><span class="line">"A B C D"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">.replace</span> <span class="list">(<span class="keyword">.toUpperCase</span> <span class="string">"a b c d"</span>)</span> <span class="string">"A"</span> <span class="string">"X"</span>)</span>  </span></span><br><span class="line">"X B C D"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">.split</span> <span class="list">(<span class="keyword">.replace</span> <span class="list">(<span class="keyword">.toUpperCase</span> <span class="string">"a b c d"</span>)</span> <span class="string">"A"</span> <span class="string">"X"</span>)</span> <span class="string">" "</span>)</span>              <span class="comment">; 数组  </span></span></span><br><span class="line">#&lt;String[] [Ljava.lang.String;@41ab11b0&gt;  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">first</span></span> <span class="list">(<span class="keyword">.split</span> <span class="list">(<span class="keyword">.replace</span> <span class="list">(<span class="keyword">.toUpperCase</span> <span class="string">"a b c d"</span>)</span> <span class="string">"A"</span> <span class="string">"X"</span>)</span> <span class="string">" "</span>)</span>)</span>    </span></span><br><span class="line">"X"   </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">-&gt;</span></span> <span class="string">"a b c d"</span> .toUpperCase)</span>  </span></span><br><span class="line">"A B C D"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">-&gt;</span></span> <span class="string">"a b c d"</span> .toUpperCase <span class="list">(<span class="keyword">.replace</span> <span class="string">"A"</span> <span class="string">"X"</span>)</span>)</span>  </span></span><br><span class="line">"X B C D"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">-&gt;</span></span> <span class="string">"a b c d"</span> .toUpperCase <span class="list">(<span class="keyword">.replace</span> <span class="string">"A"</span> <span class="string">"X"</span>)</span> <span class="list">(<span class="keyword">.split</span> <span class="string">" "</span>)</span>)</span>            <span class="comment">; 数组  </span></span></span><br><span class="line">#&lt;String[] [Ljava.lang.String;@58e41bc3&gt;  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">-&gt;</span></span> <span class="string">"a b c d"</span> .toUpperCase <span class="list">(<span class="keyword">.replace</span> <span class="string">"A"</span> <span class="string">"X"</span>)</span> <span class="list">(<span class="keyword">.split</span> <span class="string">" "</span>)</span> first)</span>  </span></span><br><span class="line">"X"</span><br></pre></td></tr></table></figure></p>
<p>这样调用的好处是更少的()，也更接近于<code>scala</code>的习惯。 </p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">-&gt;</span></span> <span class="list">(/ <span class="number">144</span> <span class="number">12</span>)</span> <span class="list">(/ <span class="number">2</span> <span class="number">3</span>)</span> str keyword list)</span>   </span></span><br><span class="line">(:2)  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">list</span></span> <span class="list">(<span class="keyword"><span class="built_in">keyword</span></span> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> <span class="list">(/ <span class="list">(/ <span class="number">144</span> <span class="number">12</span>)</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span>)</span>)</span>   </span></span><br><span class="line">(:2)  </span><br><span class="line">  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">-&gt;</span></span> <span class="list">(/ <span class="number">144</span> <span class="number">12</span>)</span>)</span>  </span></span><br><span class="line">12  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">-&gt;</span></span> <span class="list">(/ <span class="number">144</span> <span class="number">12</span>)</span> <span class="list">(/ <span class="number">2</span> <span class="number">3</span>)</span>)</span>  </span></span><br><span class="line">2  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">-&gt;</span></span> <span class="list">(/ <span class="number">144</span> <span class="number">12</span>)</span> <span class="list">(/ <span class="number">2</span> <span class="number">3</span>)</span> str)</span>  </span></span><br><span class="line">"2"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">-&gt;</span></span> <span class="list">(/ <span class="number">144</span> <span class="number">12</span>)</span> <span class="list">(/ <span class="number">2</span> <span class="number">3</span>)</span> str keyword)</span>  </span></span><br><span class="line">:2  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">-&gt;</span></span> <span class="list">(/ <span class="number">144</span> <span class="number">12</span>)</span> <span class="list">(/ <span class="number">2</span> <span class="number">3</span>)</span> str keyword list)</span>  </span></span><br><span class="line">(:2)  </span><br><span class="line">  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(/ <span class="list">(/ <span class="number">144</span> <span class="number">12</span>)</span> <span class="number">2</span> <span class="number">3</span>)</span>  </span></span><br><span class="line">2  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> <span class="list">(/ <span class="list">(/ <span class="number">144</span> <span class="number">12</span>)</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span>  </span></span><br><span class="line">"2"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">keyword</span></span> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> <span class="list">(/ <span class="list">(/ <span class="number">144</span> <span class="number">12</span>)</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span>)</span>  </span></span><br><span class="line">:2  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">list</span></span> <span class="list">(<span class="keyword"><span class="built_in">keyword</span></span> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> <span class="list">(/ <span class="list">(/ <span class="number">144</span> <span class="number">12</span>)</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span>)</span>)</span>   </span></span><br><span class="line">(:2)</span><br></pre></td></tr></table></figure>
<p>上面两句结果一样。<br><strong><code>-&gt;&gt;</code>：</strong> 后面的函数迭代使用之前的函数结果作为最后一个参数，返回最后一次函数调用的值，试看下面两个语句：<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">-&gt;</span></span> <span class="number">10</span> <span class="list">(/ <span class="number">3</span>)</span>)</span>      <span class="comment">; 10/3  10作为/函数第一个参数    </span></span></span><br><span class="line">10/3  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">-&gt;&gt;</span></span> <span class="number">10</span> <span class="list">(/ <span class="number">3</span>)</span>)</span>  <span class="comment">; 3/10  10作为/函数最后一个参数    </span></span></span><br><span class="line">3/10</span><br></pre></td></tr></table></figure></p>
<p><strong><code>eval</code>：</strong> <code>eval</code>解析表达式数据结构（不是字符串），并返回结果。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">eval</span></span> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> <span class="string">"(println 1)"</span>)</span>)</span>            <span class="comment">;str函数返回字符串  </span></span></span><br><span class="line">"(println 1)"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">read-string</span> <span class="string">"(println 1)"</span>)</span>           <span class="comment">;而read-string函数用于从字符串中读取对象  </span></span></span><br><span class="line">(println 1)  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">eval</span></span> <span class="list">(<span class="keyword">read-string</span> <span class="string">"(println 1)"</span>)</span>)</span>    </span></span><br><span class="line">1  </span><br><span class="line">nil</span><br></pre></td></tr></table></figure></p>
<p><strong><code>apply</code>函数：</strong><br><code>apply</code> 把给定的集合里面的所有元素一次性地给指定的函数作为参数调用，然后返回这个函数的返回值。可以把<code>apply</code>看作是<code>SQL</code>里面的聚合函数，如下：</p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">apply</span></span> + <span class="collection">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span>)</span>    </span></span><br><span class="line">10</span><br></pre></td></tr></table></figure>
<h3 id="u4E09_u3001_u51FD_u6570_u68C0_u67E5"><a href="#u4E09_u3001_u51FD_u6570_u68C0_u67E5" class="headerlink" title="三、函数检查"></a>三、函数检查</h3><p><strong><code>fn?</code>：</strong> <code>fn?</code>用于检查给定的参数是否为函数，是返回<code>true</code>，否则返回<code>false</code>，如：<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">fn?</span></span> #<span class="list">(<span class="string">"test"</span>)</span>)</span>    </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">fn?</span></span> <span class="number">1</span>)</span>    </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">fn?</span></span> <span class="literal">nil</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">fn?</span></span> +)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">fn?</span></span> mod)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">fn?</span></span> rem)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">fn?</span></span> =)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">fn?</span></span> with-precision)</span>  </span></span><br><span class="line">java.lang.Exception: Can't take value of a macro: #'clojure.core/with-precision (NO_SOURCE_FILE:32)  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">fn?</span></span> min)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">fn?</span></span> &gt;=)</span>  </span></span><br><span class="line">true</span><br></pre></td></tr></table></figure></p>
<p>参考推荐：</p>
<p><a href="http://dead-knight.iteye.com/category/269733" target="_blank" rel="external">clojure 学习</a></p>
]]></content>
    <summary type="html">
    <![CDATA[clojure 函数简单介绍与常见函数及示例]]>
    
    </summary>
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clojure 学习 —— 字符串]]></title>
    <link href="http://notes.seirhsiao.com/2016/01/26/2014-06-08-clojure-string/"/>
    <id>http://notes.seirhsiao.com/2016/01/26/2014-06-08-clojure-string/</id>
    <published>2016-01-26T12:44:14.228Z</published>
    <updated>2016-01-26T12:44:14.228Z</updated>
    <content type="html"><![CDATA[<p>clojure 字符串常用函数<br><a id="more"></a></p>
<h3 id="u4E00_u3001_u521B_u5EFA"><a href="#u4E00_u3001_u521B_u5EFA" class="headerlink" title="一、创建"></a>一、创建</h3><p><strong>函数<code>str</code></strong><br>函数 (<code>str</code>)： 接受任意数量的参数。如果参数不是字符串则将其转换为字符串，返回创建的新字符串。如果没有参数或为nil，则返回空字符串””</p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure">   </span></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> <span class="number">1</span>)</span>  </span></span><br><span class="line">"1"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> <span class="number">-2.5</span>)</span>  </span></span><br><span class="line">"-2.5"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> <span class="string">"a"</span>)</span>  </span></span><br><span class="line">"a"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> <span class="string">"abc"</span> <span class="number">123</span>)</span>  </span></span><br><span class="line">"abc123"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">str</span></span>)</span>  </span></span><br><span class="line">""  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> '<span class="list">(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span>  </span></span><br><span class="line">"(1 2 3)"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> <span class="literal">nil</span>)</span>  </span></span><br><span class="line">""  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> null)</span>  </span></span><br><span class="line">java.lang.Exception: Unable to resolve symbol: null in this context (NO_SOURCE_FILE:149)  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> <span class="string">"null"</span>)</span>  </span></span><br><span class="line">"null"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> <span class="string">"abc "</span> <span class="number">123</span>)</span>  </span></span><br><span class="line">"abc 123"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> <span class="number">123</span> <span class="number">345</span>)</span>  </span></span><br><span class="line">"123345"</span><br></pre></td></tr></table></figure>
<p>其它比较少用的创建函数<br><code>print-str</code>、<code>println-str</code>、<code>pr-str</code>、<code>prn-str</code>、<code>with-out-str</code> </p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">print-str</span> <span class="string">"abc"</span> <span class="number">234</span>)</span>  </span></span><br><span class="line">"abc 234"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">println-str</span> <span class="string">"abc"</span> <span class="number">234</span>)</span>  </span></span><br><span class="line">"abc 234\n"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">pr-str</span> <span class="string">"abc"</span> <span class="number">234</span>)</span>  </span></span><br><span class="line">"\"abc\" 234"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">prn-str</span> <span class="string">"abc"</span> <span class="number">234</span>)</span>  </span></span><br><span class="line">"\"abc\" 234\n"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">with-out-str</span> <span class="string">"abc"</span> <span class="number">234</span>)</span>  </span></span><br><span class="line">""</span><br></pre></td></tr></table></figure>
<h3 id="u4E8C_u3001string_u64CD_u4F5C"><a href="#u4E8C_u3001string_u64CD_u4F5C" class="headerlink" title="二、string操作"></a>二、string操作</h3><p><strong><code>count</code>函数</strong><br><code>count</code>函数：接受字符串参数时，返回字符串的字符数。 </p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">count</span></span>)</span>  </span></span><br><span class="line">java.lang.IllegalArgumentException: Wrong number of args (0) passed to: core$count (NO_SOURCE_FILE:175)  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">count</span></span> <span class="literal">nil</span>)</span>  </span></span><br><span class="line">0  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">count</span></span> <span class="string">"abc123"</span>)</span>  </span></span><br><span class="line">6</span><br></pre></td></tr></table></figure>
<p><strong><code>subs</code>函数</strong><br><code>subs</code>函数：接受两个或三个参数, 第一个是字符串，第二个是一个整数偏移量，第三个（可选）是另一个整数偏移量。函数返回从第一个偏移量（含），到第二个（不含）偏移量或者结尾（如果没有第二个偏移量）截取的子字符串。</p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">subs</span> <span class="string">"ithomer"</span> <span class="number">1</span>)</span>  </span></span><br><span class="line">"thomer"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">subs</span> <span class="string">"ithomer"</span> <span class="number">1</span> <span class="number">3</span>)</span>  </span></span><br><span class="line">"th"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">subs</span> <span class="string">"ithomer"</span> <span class="number">1</span> <span class="list">(<span class="keyword"><span class="built_in">count</span></span> <span class="string">"ithomer"</span>)</span>)</span>  </span></span><br><span class="line">"thomer"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">subs</span> <span class="string">"ithomer"</span> <span class="number">1</span> <span class="number">20</span>)</span>  </span></span><br><span class="line">java.lang.StringIndexOutOfBoundsException: String index out of range: 20 (NO_SOURCE_FILE:0)  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">subs</span> <span class="string">"ithomer"</span>)</span>  </span></span><br><span class="line">java.lang.IllegalArgumentException: Wrong number of args (1) passed to: core$subs (NO_SOURCE_FILE:0)</span><br></pre></td></tr></table></figure>
<p><strong><code>format</code>函数</strong><br><code>format</code>函数：用于格式化字符串。使用jdk的java.util.Formatter类完成格式化。 </p>
<figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">format</span></span> <span class="string">"hello %s"</span> <span class="string">"ithomer.net"</span>)</span>  </span></span><br><span class="line">"hello ithomer.net"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">format</span></span> <span class="string">"%5d"</span> <span class="number">3</span>)</span>  </span></span><br><span class="line">"    3"  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">format</span></span> <span class="string">"%-5d"</span> <span class="number">3</span>)</span>  </span></span><br><span class="line">"3    "  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">format</span></span> <span class="string">"%05d"</span> <span class="number">3</span>)</span>  </span></span><br><span class="line">"00003"</span><br></pre></td></tr></table></figure>
<p><strong>检查函数</strong><br>字符串检查函数 (<code>string?</code>)： 接受一个参数，如果是字符串返回true，否则返回false<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">string?</span></span> <span class="string">"abc"</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">string?</span></span> <span class="string">"123"</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">string?</span></span> <span class="number">123</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">string?</span></span> <span class="literal">nil</span>)</span>  </span></span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>
<p>字符检查函数(<code>char?</code>)：接受一个参数，如果是字符类型返回true，否则返回false<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">char?</span></span> <span class="string">"abc"</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">char?</span></span> \a)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">char?</span></span> 'a')</span>  </span></span><br><span class="line">java.lang.Exception: Unmatched delimiter: )  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">char?</span></span> a)</span>  </span></span><br><span class="line">java.lang.Exception: Unable to resolve symbol: a in this context (NO_SOURCE_FILE:222)  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">char?</span></span> <span class="number">1</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">char?</span></span> \<span class="number">1</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">char?</span></span> <span class="literal">nil</span>)</span>  </span></span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>
<h3 id="u4E09_u3001_u53C2_u8003_u8D44_u6599"><a href="#u4E09_u3001_u53C2_u8003_u8D44_u6599" class="headerlink" title="三、参考资料"></a>三、参考资料</h3><p><a href="http://blog.csdn.net/sunboy_2050/article/details/17225913" target="_blank" rel="external">Clojure 学习入门（4）—— 字符串 </a><br><a href="http://dead-knight.iteye.com/blog/1827681" target="_blank" rel="external">lojure-基本语法-符号及关键字</a></p>
]]></content>
    <summary type="html">
    <![CDATA[clojure 字符串常用函数]]>
    
    </summary>
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clojure 学习 —— 基本运算]]></title>
    <link href="http://notes.seirhsiao.com/2016/01/26/2014-06-06-clojure-operation/"/>
    <id>http://notes.seirhsiao.com/2016/01/26/2014-06-06-clojure-operation/</id>
    <published>2016-01-26T12:43:39.140Z</published>
    <updated>2016-01-26T12:43:39.140Z</updated>
    <content type="html"><![CDATA[<p>clojure 几种基本运算简单介绍及示常见运算示例<br><a id="more"></a></p>
<h3 id="u4E00_u3001_u7B97_u672F_u8FD0_u7B97"><a href="#u4E00_u3001_u7B97_u672F_u8FD0_u7B97" class="headerlink" title="一、算术运算"></a>一、算术运算</h3><p><strong>加法<code>+</code></strong><br>加法函数(+)： 接受任意数值类型的参数，返回它们的和；没有参数时返回0。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$clojure  </span><br><span class="line">Clojure 1.2.1  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">+</span></span>)</span>  </span></span><br><span class="line">0  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span>)</span>  </span></span><br><span class="line">1  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)</span>  </span></span><br><span class="line">10</span><br></pre></td></tr></table></figure></p>
<p><strong>减法<code>-</code></strong><br>减法函数(-)：接受任意数值类型的参数。如果只有一个参数，则返回它相反的数。当有多个参数时，返回第一个参数减去后面所有参数的结果。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">1</span>)</span>    </span></span><br><span class="line">-1    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">10</span> <span class="number">2</span>)</span>    </span></span><br><span class="line">8    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">10</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)</span>    </span></span><br><span class="line">1</span><br></pre></td></tr></table></figure></p>
<p><strong>乘法<code>*</code></strong><br>乘法函数(*)：接受任意数值类型的参数并返回它们的乘积，如果只有一个参数，返回1。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">*</span></span>)</span>    </span></span><br><span class="line">1    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">1</span>)</span>    </span></span><br><span class="line">1    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>    </span></span><br><span class="line">6    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>    </span></span><br><span class="line">0</span><br></pre></td></tr></table></figure></p>
<p><strong>除法<code>/</code></strong><br>除法函数 (/)：接受任意数值类型的参数。第一个参数是分子，其他任意参数是分母。如果没有分母，则函数返回 1 / 分子，否则返回分子除以分母。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(/)</span>  </span></span><br><span class="line">java.lang.IllegalArgumentException: Wrong number of args (0) passed to: core$-SLASH- (NO_SOURCE_FILE:0)  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(/ <span class="number">2</span>)</span>  </span></span><br><span class="line">1/2  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(/ <span class="number">2</span> <span class="number">10</span>)</span>  </span></span><br><span class="line">1/5  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(/ <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">6</span>)</span>  </span></span><br><span class="line">1/48</span><br></pre></td></tr></table></figure></p>
<p><strong>商<code>quot</code></strong><br>商函数 (quot)：接受两个数值类型参数并返回第一个参数除以第二个参数的整数商。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">quot</span></span> <span class="number">10</span> <span class="number">3</span>)</span>  </span></span><br><span class="line">3  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">quot</span></span> <span class="number">10</span> <span class="number">-3</span>)</span>  </span></span><br><span class="line">-3  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">quot</span></span> <span class="number">-10</span> <span class="number">3</span>)</span>  </span></span><br><span class="line">-3  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">quot</span></span> <span class="number">11</span> <span class="number">3</span>)</span>  </span></span><br><span class="line">3  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">quot</span></span> <span class="number">12</span> <span class="number">3</span>)</span>  </span></span><br><span class="line">4  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">quot</span></span> <span class="number">-5.9</span> <span class="number">3</span>)</span>  </span></span><br><span class="line">-1  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">quot</span></span> <span class="number">15</span> <span class="number">0</span>)</span>  </span></span><br><span class="line">java.lang.ArithmeticException: Divide by zero (NO_SOURCE_FILE:0)</span><br></pre></td></tr></table></figure></p>
<p><strong>注意：商函数quot与/函数不是等价的</strong><br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="list">(/ <span class="number">4</span> <span class="number">2</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">quot</span></span> <span class="number">4</span> <span class="number">2</span>)</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="list">(/ <span class="number">3</span> <span class="number">2</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">quot</span></span> <span class="number">3</span> <span class="number">2</span>)</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(/ <span class="number">3</span> <span class="number">2</span>)</span>  </span></span><br><span class="line">3/2  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">quot</span></span> <span class="number">3</span> <span class="number">2</span>)</span>  </span></span><br><span class="line">1</span><br></pre></td></tr></table></figure></p>
<p><strong>取余<code>rem</code></strong><br>余数函数 (rem)：接受两个数值类型参数并返回第一个参数除以第二个参数的余数。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">rem</span></span> <span class="number">10</span> <span class="number">9</span>)</span>  </span></span><br><span class="line">1  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">rem</span></span> <span class="number">2</span> <span class="number">2</span>)</span>  </span></span><br><span class="line">0  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">rem</span></span> <span class="number">10</span> <span class="number">-3</span>)</span>  </span></span><br><span class="line">1  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">rem</span></span> <span class="number">-10</span> <span class="number">3</span>)</span>  </span></span><br><span class="line">-1  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">rem</span></span> <span class="number">-10</span> <span class="number">-3</span>)</span>  </span></span><br><span class="line">-1</span><br></pre></td></tr></table></figure></p>
<p><strong>取模<code>mod</code></strong><br>取模函数（mod）：接收两个数值类型参数，如果两个参数为正整数或者同为负整数，则与rem函数返回值一致；如果其中有一个负数，则结果为rem返回值与第二个参数之和。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">mod</span></span> <span class="number">10</span> <span class="number">9</span>)</span>  </span></span><br><span class="line">1  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">mod</span></span> <span class="number">2</span> <span class="number">2</span>)</span>  </span></span><br><span class="line">0  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">mod</span></span> <span class="number">10</span> <span class="number">-3</span>)</span>  </span></span><br><span class="line">-2  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">mod</span></span> <span class="number">-10</span> <span class="number">3</span>)</span>  </span></span><br><span class="line">2  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">mod</span></span> <span class="number">-10</span> <span class="number">-3</span>)</span>  </span></span><br><span class="line">-1  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">mod</span></span> <span class="number">10</span> <span class="number">3</span>)</span>  </span></span><br><span class="line">1</span><br></pre></td></tr></table></figure></p>
<p><code>(rem 10 -3)</code>和<code>(mod 10 -3)</code>结果不一致，分别为1，-2。-2是如何得到的？由于<code>（rem 10 -3）</code>的返回值为1，那么<code>（mod 10 -3）</code>的返回值为<code>(+ 1 (rem 10 -3))=-2</code><br>贴上mod函数源码，仅供参考。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> mod    </span><br><span class="line">  <span class="string">"Modulus of num and div. Truncates toward negative infinity."</span>    </span><br><span class="line">  <span class="collection">&#123;<span class="attribute">:added</span> <span class="string">"1.0"</span>    </span><br><span class="line">   <span class="attribute">:static</span> <span class="literal">true</span>&#125;</span>    </span><br><span class="line">  <span class="collection">[num div]</span>     </span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">let</span></span> <span class="collection">[m <span class="list">(<span class="keyword"><span class="built_in">rem</span></span> num div)</span>]</span>     </span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">or</span></span> <span class="list">(<span class="keyword"><span class="built_in">zero?</span></span> m)</span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="list">(<span class="keyword"><span class="built_in">pos?</span></span> num)</span> <span class="list">(<span class="keyword"><span class="built_in">pos?</span></span> div)</span>)</span>)</span>    </span><br><span class="line">      m     </span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">+</span></span> m div)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure></p>
<p><strong>增量函数<code>inc</code></strong><br>函数 (inc)：接受一个数值类型参数并返回它的值加1。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">inc</span></span> <span class="number">1</span>)</span>    </span></span><br><span class="line">2    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">inc</span></span> <span class="number">-1</span>)</span>    </span></span><br><span class="line">0</span><br></pre></td></tr></table></figure></p>
<p><strong>减量函数<code>`dec</code></strong><br>减量函数 (dec)：接受一个数值类型参数并返回它的值减1。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">dec</span></span> <span class="number">1</span>)</span>    </span></span><br><span class="line">0    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">dec</span></span> <span class="number">-1</span>)</span>    </span></span><br><span class="line">-2</span><br></pre></td></tr></table></figure></p>
<p><strong>最大函数<code>max</code></strong><br>最大数函数 (max)：接受任意数值类型的参数并返回最大的。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">max</span></span> <span class="number">5</span> <span class="number">-1</span> <span class="number">2</span> <span class="number">3</span>)</span>    </span></span><br><span class="line">5</span><br></pre></td></tr></table></figure></p>
<p><strong>最小函数<code>min</code></strong><br> 最小数函数 (min)：接受任意数值类型的参数并返回最小的。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">min</span></span> <span class="number">5</span> <span class="number">-1</span> <span class="number">2</span> <span class="number">3.9</span>)</span>    </span></span><br><span class="line">-1</span><br></pre></td></tr></table></figure></p>
<p><strong>精度函数<code>with-precision</code></strong><br>精度函数with-precision：针对大数据值操作的精度、小数点运算函数。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">with-precision</span> <span class="number">10</span> <span class="list">(/ <span class="number">1</span>M <span class="number">3</span>)</span>)</span>  </span></span><br><span class="line">0.3333333333M  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">with-precision</span> <span class="number">2</span> <span class="list">(/ <span class="number">100</span>M <span class="number">3</span>)</span>)</span>  </span></span><br><span class="line">33M  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">with-precision</span> <span class="number">4</span> <span class="list">(/ <span class="number">100</span>M <span class="number">3</span>)</span>)</span>  </span></span><br><span class="line">33.33M</span><br></pre></td></tr></table></figure></p>
<h3 id="u4E8C_u3001_u6BD4_u8F83_u8FD0_u7B97_uFF1A"><a href="#u4E8C_u3001_u6BD4_u8F83_u8FD0_u7B97_uFF1A" class="headerlink" title="二、比较运算："></a>二、比较运算：</h3><p><strong>值相等<code>=</code> </strong><br>值相等(=)：函数接受若干参数，比较若干参数值是否相等。一个参数时，返回true。参数可以为nil。与java中的equals一致。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="number">1</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="number">1</span> <span class="number">1</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="number">1</span> <span class="number">1.0</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="number">1</span> <span class="number">2</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="literal">nil</span> <span class="literal">nil</span>)</span>  </span></span><br><span class="line">true</span><br></pre></td></tr></table></figure></p>
<p><strong>等价值<code>==</code></strong><br> 等价值函数：接受若干参数，比较若干参数值是否等价。一个参数时，返回true。参数可以为nil、keyword等<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">==</span></span> <span class="number">1</span> <span class="number">1.0</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">==</span></span> <span class="attribute">:foo</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">==</span></span> <span class="literal">nil</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">==</span></span> <span class="literal">nil</span> <span class="literal">nil</span>)</span>  </span></span><br><span class="line">java.lang.NullPointerException (NO_SOURCE_FILE:0)  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">==</span></span> <span class="number">1</span> <span class="number">1</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">==</span></span> <span class="number">1</span> <span class="number">2</span>)</span>  </span></span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>
<p><strong>值不同函数<code>not=</code></strong><br>等价于<code>(not (= obj1 obj2))</code><br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">not=</span></span> <span class="number">1</span> <span class="number">1</span>)</span>    </span></span><br><span class="line">false    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">not=</span></span> <span class="number">1</span> <span class="number">2</span>)</span>    </span></span><br><span class="line">true    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">not=</span></span> <span class="number">1</span> <span class="number">1.0</span>)</span>    </span></span><br><span class="line">true    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">not=</span></span> <span class="literal">true</span> <span class="literal">true</span>)</span>    </span></span><br><span class="line">false    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">not=</span></span> <span class="literal">true</span> <span class="literal">false</span>)</span>    </span></span><br><span class="line">true    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">not=</span></span> <span class="literal">true</span> <span class="literal">true</span> <span class="literal">false</span>)</span>    </span></span><br><span class="line">true</span><br></pre></td></tr></table></figure></p>
<p><strong>小于 <code>&lt;</code></strong><br>小于函数 (&lt;)：受任意数值类型的参数，如果它们按升序排列返回true，否则返回false。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="number">5</span> <span class="number">10</span>)</span>    </span></span><br><span class="line">true    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="number">5</span> <span class="number">10</span> <span class="number">9</span>)</span>    </span></span><br><span class="line">false    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="number">1</span>)</span>    </span></span><br><span class="line">true</span><br></pre></td></tr></table></figure></p>
<p><strong>大于 <code>&gt;</code></strong><br>大于函数 (&gt;)：受任意数值类型的参数，如果它们按降序排列返回true，否则返回false。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> <span class="number">5</span> <span class="number">2</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> <span class="number">5</span> <span class="number">10</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> <span class="number">5</span> <span class="number">10</span> <span class="number">9</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> <span class="number">1</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> <span class="number">0</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> <span class="number">-1</span>)</span>  </span></span><br><span class="line">true</span><br></pre></td></tr></table></figure></p>
<p><strong>大于等于 <code>&gt;=</code></strong><br>大于等于函数 (&gt;=)：接受任意数值类型的参数，如果它们按降序排列或顺序相等返回true，否则返回false。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">&gt;=</span></span> <span class="number">10</span> <span class="number">5</span> <span class="number">5</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">&gt;=</span></span> <span class="number">10</span> <span class="number">5</span> <span class="number">6</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">&gt;=</span></span> <span class="number">10</span> <span class="number">5</span> <span class="number">4</span>)</span>  </span></span><br><span class="line">true</span><br></pre></td></tr></table></figure></p>
<p><strong>小于等于 <code>&lt;=</code></strong><br>小于等于函数 (&lt;=)：接受任意数值类型的参数，如果它们按升序排列或顺序相等返回true，否则返回false。<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">&lt;=</span></span> <span class="number">2</span> <span class="number">5</span> <span class="number">5</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">&lt;=</span></span> <span class="number">2</span> <span class="number">5</span> <span class="number">4</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">&lt;=</span></span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span>)</span>  </span></span><br><span class="line">true</span><br></pre></td></tr></table></figure></p>
<h3 id="u4E09_u3001_u9A8C_u8BC1_u51FD_u6570_uFF1A"><a href="#u4E09_u3001_u9A8C_u8BC1_u51FD_u6570_uFF1A" class="headerlink" title="三、验证函数："></a>三、验证函数：</h3><p><strong>0检查<code>zero?</code></strong><br>0检查函数 (zero?)： 接受一个数值类型参数，如果是0返回true，否则返回false<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">zero?</span></span> <span class="number">0.0</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">zero?</span></span> <span class="number">0</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">zero?</span></span> <span class="number">1</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">zero?</span></span> <span class="number">0.1</span>)</span>  </span></span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>
<p><strong>正数检查<code>pos?</code></strong><br>正数检查函数 (pos?)：接受一个数值类型参数，如果是大于0返回true，否则返回false<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">pos?</span></span> <span class="number">-2</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">pos?</span></span> <span class="number">1.2</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">pos?</span></span> <span class="number">0</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">pos?</span></span> <span class="number">+0</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">pos?</span></span> <span class="number">0.1</span>)</span>  </span></span><br><span class="line">true</span><br></pre></td></tr></table></figure></p>
<p><strong>负数检查<code>neg?</code></strong><br>负数检查函数 (neg?)： 接受一个数值类型参数，如果是小于0返回true，否则返回false<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">neg?</span></span> <span class="number">-3</span>)</span>    </span></span><br><span class="line">true    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">neg?</span></span> <span class="number">0</span>)</span>    </span></span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>
<p><strong>偶数检查<code>even?</code></strong><br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">even?</span></span> <span class="number">10</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">even?</span></span> <span class="number">3</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">even?</span></span> <span class="number">0</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">even?</span></span> <span class="number">-10</span>)</span>  </span></span><br><span class="line">true</span><br></pre></td></tr></table></figure></p>
<p><strong>奇数检查<code>odd?</code></strong><br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">odd?</span></span> <span class="number">10</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">odd?</span></span> <span class="number">3</span>)</span>  </span></span><br><span class="line">true  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">odd?</span></span> <span class="number">0</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">odd?</span></span> <span class="number">-10</span>)</span>  </span></span><br><span class="line">false  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">odd?</span></span> <span class="number">-9</span>)</span>  </span></span><br><span class="line">true</span><br></pre></td></tr></table></figure></p>
<p><strong>数值检查<code>number?</code></strong><br>数值检查函数 (number?)： 接受一个参数，如果是数值返回true，否则返回false<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">number?</span></span> <span class="number">3.2</span>)</span>    </span></span><br><span class="line">true    </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">number?</span></span> <span class="string">"2"</span>)</span>    </span></span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>
<h3 id="u56DB_u3001_u5F3A_u5236_u8F6C_u6362_uFF1A"><a href="#u56DB_u3001_u5F3A_u5236_u8F6C_u6362_uFF1A" class="headerlink" title="四、强制转换："></a>四、强制转换：</h3><p>强制转换支持以下类型：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">byte</span>  Coerce to <span class="keyword">byte</span>.     </span><br><span class="line"><span class="keyword">short</span>  Coerce to <span class="keyword">short</span>.     </span><br><span class="line"><span class="keyword">int</span>  Coerce to <span class="keyword">int</span>.     </span><br><span class="line"><span class="keyword">long</span>  Coerce to <span class="keyword">long</span>.     </span><br><span class="line"><span class="keyword">float</span>  Coerce to <span class="keyword">float</span>.     </span><br><span class="line"><span class="keyword">double</span>  Coerce to <span class="keyword">double</span>.     </span><br><span class="line">bigint  Coerce to BigInteger.     </span><br><span class="line">bigdec  Coerce to BigDecimal.     </span><br><span class="line">num  Coerce to Number.     </span><br><span class="line">rationalize  returns the rational value of num</span><br></pre></td></tr></table></figure></p>
<p>示例：<br><figure class="highlight clojure-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">double</span></span> <span class="number">12</span>)</span>  </span></span><br><span class="line">12.0  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">short</span></span> <span class="number">10000</span>)</span>  </span></span><br><span class="line">10000  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">short</span></span> <span class="number">1000000000</span>)</span>  </span></span><br><span class="line">java.lang.IllegalArgumentException: Value out of range for short: 1000000000 (NO_SOURCE_FILE:0)  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">int</span></span> <span class="number">22.2</span>)</span>  </span></span><br><span class="line">22  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword">long</span> <span class="number">22.2</span>)</span>  </span></span><br><span class="line">22  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">float</span></span> <span class="number">22</span>)</span>  </span></span><br><span class="line">22.0  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">bigint</span></span> <span class="number">100000000000</span>)</span>  </span></span><br><span class="line">100000000000  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">bigdec</span></span> <span class="number">100000000000</span>)</span>  </span></span><br><span class="line">100000000000M  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">num</span></span> <span class="number">22.22</span>)</span>  </span></span><br><span class="line">22.22  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">num</span></span> <span class="string">"22.22"</span>)</span>  </span></span><br><span class="line">java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Number (NO_SOURCE_FILE:0)  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">rationalize</span></span> <span class="number">22.22</span>)</span>  </span></span><br><span class="line">1111/50  </span><br><span class="line"><span class="prompt">user=&gt;</span><span class="clojure"> <span class="list">(<span class="keyword"><span class="built_in">rationalize</span></span> <span class="number">0.5</span>)</span>  </span></span><br><span class="line">1/2</span><br></pre></td></tr></table></figure></p>
<p>五、参考资料<br><a href="http://blog.csdn.net/sunboy_2050/article/details/17225793" target="_blank" rel="external">Clojure 学习入门（3）—— 数字类型</a><br><a href="http://dead-knight.iteye.com/blog/1827360" target="_blank" rel="external">clojure-基本语法-数字类型</a></p>
]]></content>
    <summary type="html">
    <![CDATA[clojure 几种基本运算简单介绍及示常见运算示例]]>
    
    </summary>
    
      <category term="clojure" scheme="http://notes.seirhsiao.com/tags/clojure/"/>
    
      <category term="入门" scheme="http://notes.seirhsiao.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Clojure" scheme="http://notes.seirhsiao.com/categories/Clojure/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://notes.seirhsiao.com/2016/01/26/2014-06-01-clojure-code-style/"/>
    <id>http://notes.seirhsiao.com/2016/01/26/2014-06-01-clojure-code-style/</id>
    <published>2016-01-26T12:43:14.357Z</published>
    <updated>2016-01-26T12:43:14.357Z</updated>
    <content type="html"><![CDATA[<p>title:  Clojure 代码规范（中文）<br>tags: </p>
<ul>
<li>clojure </li>
<li>代码规范</li>
<li>指南</li>
<li>风格</li>
<li>翻译<br>categories: Guide</li>
</ul>
<hr>
<h1 id="Clojure__u4EE3_u7801_u89C4_u8303"><a href="#Clojure__u4EE3_u7801_u89C4_u8303" class="headerlink" title="Clojure 代码规范"></a>Clojure 代码规范</h1><blockquote>
<p>Role models are important. <br><br>– Officer Alex J. Murphy / RoboCop</p>
</blockquote>
<p>原文地址：<a href="https://github.com/bbatsov/clojure-style-guide" target="_blank" rel="external">https://github.com/bbatsov/clojure-style-guide</a></p>
<p>这份Clojure代码规范旨在提供一系列的最佳实践，让现实工作中的Clojure程序员能够写出易于维护的代码，并能与他人协作和共享。一份反应真实需求的代码规范才能被人接收，而那些理想化的、甚至部分观点遭到程序员拒绝的代码规范注定不会长久——无论它有多出色。</p>
<p>这份规范由多个章节组成，每个章节包含一组相关的规则。我会尝试去描述每条规则背后的理念（过于明显的理念我就省略了）。</p>
<p>这些规则并不是我凭空想象的，它们出自于我作为一个专业软件开发工程师长久以来的工作积累，以及Clojure社区成员们的反馈和建议，还有各种广为流传的Clojure编程学习资源，如《Clojure Programming》、《The Joy of Clojure》等。</p>
<p>这份规范还处于编写阶段，部分章节有所缺失，内容并不完整；部分规则没有示例，或者示例还不能完全将其描述清楚。未来这些问题都会得到改进，只是请你了解这一情况。</p>
<p>你可以使用<a href="https://github.com/TechnoGate/transmuter" target="_blank" rel="external">Transmuter</a>生成一份本规范的PDF或HTML格式的文档。</p>
<p>本指南的翻译可在以下几种语言中：</p>
<ul>
<li><a href="https://github.com/totakke/clojure-style-guide/blob/ja/README.md" target="_blank" rel="external">Japanese</a></li>
<li><a href="https://github.com/kwakbab/clojure-style-guide/blob/master/README-koKO.md" target="_blank" rel="external">Korean</a></li>
</ul>
<h2 id="u76EE_u5F55"><a href="#u76EE_u5F55" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="/#source-code-layout--organization">源代码的布局和组织结构</a>　</li>
<li><a href="/#syntax">语法</a></li>
<li><a href="/#naming">命名</a></li>
<li><a href="/#collections">集合</a></li>
<li><a href="/#mutation">可变</a></li>
<li><a href="/#strings">字符串</a></li>
<li><a href="/#exceptions">异常</a></li>
<li><a href="/#macros">宏</a></li>
<li><a href="/#comments">注释</a><ul>
<li><a href="/#comment-annotations">注释中的标识</a></li>
</ul>
</li>
<li><a href="/#existential">惯用法</a></li>
<li><a href="/#tooling">工具</a><a id="more"></a>
<h2 id="u6E90_u4EE3_u7801_u7684_u5E03_u5C40_u548C_u7EC4_u7EC7_u7ED3_u6784"><a href="#u6E90_u4EE3_u7801_u7684_u5E03_u5C40_u548C_u7EC4_u7EC7_u7ED3_u6784" class="headerlink" title="源代码的布局和组织结构"></a><a name="source-code-layout--organization"></a>源代码的布局和组织结构</h2></li>
</ul>
<blockquote>
<p>几乎所有人都认为任何代码风格都是丑陋且难以阅读的，除了自己的之外。<br>把这句话中的“除了自己之外”去掉，那差不多就能成立了。 <br><br>—— Jerry Coffin 关于代码缩进的评论</p>
</blockquote>
<ul>
<li><p><a name="spaces"></a> 使用两个<strong>空格</strong>进行缩进，不使用制表符。<br><sup>[<a href="/#spaces">链接</a>]</sup></p>
</li>
<li><p><a name="body-indentation"></a>使用2个空格来缩进含参数部分的形式，<br>。这些形式包括所有的 <code>def</code> 形式 ，特实形式和宏，<br>以及本地绑定形式 (例如： <code>loop</code>, <code>let</code>,<br><code>when-let</code>) 和许多像 <code>when</code>, <code>cond</code>, <code>as-&gt;</code>, <code>cond-&gt;</code>, <code>case</code>,<br><code>with-*</code>等的宏。<br><sup>[<a href="/#body-indentation">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">when</span></span> something</span><br><span class="line">  <span class="list">(<span class="keyword">something-else</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">with-out-str</span></span><br><span class="line">  <span class="list">(<span class="keyword">println</span> <span class="string">"Hello, "</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">println</span> <span class="string">"world!"</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕 - 四个空格</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">when</span></span> something</span><br><span class="line">    <span class="list">(<span class="keyword">something-else</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕 - 一个空格</span></span><br><span class="line"><span class="list">(<span class="keyword">with-out-str</span></span><br><span class="line"> <span class="list">(<span class="keyword">println</span> <span class="string">"Hello, "</span>)</span></span><br><span class="line"> <span class="list">(<span class="keyword">println</span> <span class="string">"world!"</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="vertically-align-fn-args"></a><br>垂直排列函数参数。<br><sup>[<a href="/#vertically-align-fn-args">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">filter</span></span> even?</span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">range</span></span> <span class="number">1</span> <span class="number">10</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">filter</span></span> even?</span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">range</span></span> <span class="number">1</span> <span class="number">10</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="one-space-indent"></a><br>使用一个空格缩进函数（宏）参数<br>当函数没有参数独占一行。<br><sup>[<a href="/#one-space-indent">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">filter</span></span></span><br><span class="line"> even?</span><br><span class="line"> <span class="list">(<span class="keyword"><span class="built_in">range</span></span> <span class="number">1</span> <span class="number">10</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">or</span></span></span><br><span class="line"> ala</span><br><span class="line"> bala</span><br><span class="line"> portokala)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕 - 两个空格缩进</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">filter</span></span></span><br><span class="line">  even?</span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">range</span></span> <span class="number">1</span> <span class="number">10</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">or</span></span></span><br><span class="line">  ala</span><br><span class="line">  bala</span><br><span class="line">  portokala)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="vertically-align-let-and-map"></a><br>对齐let绑定，以及map类型中的关键字。<br><sup>[<a href="/#vertically-align-let-and-map">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">let</span></span> <span class="collection">[thing1 <span class="string">"some stuff"</span></span><br><span class="line">      thing2 <span class="string">"other stuff"</span>]</span></span><br><span class="line">  <span class="collection">&#123;<span class="attribute">:thing1</span> thing1</span><br><span class="line">   <span class="attribute">:thing2</span> thing2&#125;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">let</span></span> <span class="collection">[thing1 <span class="string">"some stuff"</span></span><br><span class="line">  thing2 <span class="string">"other stuff"</span>]</span></span><br><span class="line">  <span class="collection">&#123;<span class="attribute">:thing1</span> thing1</span><br><span class="line">  <span class="attribute">:thing2</span> thing2&#125;</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="optional-new-line-after-fn-name"></a><br>针对没有文档字串的 defn，选择性忽略函数名与参数向量之间的新行。<br><sup>[<a href="/#optional-new-line-after-fn-name">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo</span><br><span class="line">  <span class="collection">[x]</span></span><br><span class="line">  <span class="list">(<span class="keyword">bar</span> x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo <span class="collection">[x]</span></span><br><span class="line">  <span class="list">(<span class="keyword">bar</span> x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo</span><br><span class="line">  <span class="collection">[x]</span> <span class="list">(<span class="keyword">bar</span> x)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="multimethod-dispatch-val-placement"></a><br>将一个多重方法的<code>dispatch-val</code> 与函数名放置在同一行。<br><sup>[<a href="/#multimethod-dispatch-val-placement">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defmethod</span></span> foo <span class="attribute">:bar</span> <span class="collection">[x]</span> <span class="list">(<span class="keyword">baz</span> x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defmethod</span></span> foo <span class="attribute">:bar</span></span><br><span class="line">  <span class="collection">[x]</span></span><br><span class="line">  <span class="list">(<span class="keyword">baz</span> x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defmethod</span></span> foo</span><br><span class="line">  <span class="attribute">:bar</span></span><br><span class="line">  <span class="collection">[x]</span></span><br><span class="line">  <span class="list">(<span class="keyword">baz</span> x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defmethod</span></span> foo</span><br><span class="line">  <span class="attribute">:bar</span> <span class="collection">[x]</span></span><br><span class="line">  <span class="list">(<span class="keyword">baz</span> x)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="docstring-after-fn-name"></a><br>当为采用上述形式的函数添加字符串文档 -<br>注意正确应放置到函数名后面，而不是参数列表<br>后面。后者虽然不是无效语法，不会造成错误，<br>但是这仅仅只是将字符串作为函数体的一种形式，而不将其链接为<br>该变量的文档。<br><sup>[<a href="/#docstring-after-fn-name">链接</a>]</sup></p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo</span><br><span class="line">  <span class="string">"docstring"</span></span><br><span class="line">  <span class="collection">[x]</span></span><br><span class="line">  <span class="list">(<span class="keyword">bar</span> x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo <span class="collection">[x]</span></span><br><span class="line">  <span class="string">"docstring"</span></span><br><span class="line">  <span class="list">(<span class="keyword">bar</span> x)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="oneline-short-fn"></a><br>选择性忽略短的参数向量与函数体之间的新行。<br><sup>[<a href="/#oneline-short-fn">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo <span class="collection">[x]</span></span><br><span class="line">  <span class="list">(<span class="keyword">bar</span> x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 适合简单的函数</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo <span class="collection">[x]</span> <span class="list">(<span class="keyword">bar</span> x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;;适合包含多元参数列表的函数</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo</span><br><span class="line">  <span class="list">(<span class="collection">[x]</span> <span class="list">(<span class="keyword">bar</span> x)</span>)</span></span><br><span class="line">  <span class="list">(<span class="collection">[x y]</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">predicate?</span> x)</span></span><br><span class="line">     <span class="list">(<span class="keyword">bar</span> x)</span></span><br><span class="line">     <span class="list">(<span class="keyword">baz</span> x)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo</span><br><span class="line">  <span class="collection">[x]</span> <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">predicate?</span> x)</span></span><br><span class="line">        <span class="list">(<span class="keyword">bar</span> x)</span></span><br><span class="line">        <span class="list">(<span class="keyword">baz</span> x)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="multiple-arity-indentation"></a><br>多元函数定义，各元数形式垂直对齐参数。<br><sup>[<a href="/#multiple-arity-indentation">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo</span><br><span class="line">  <span class="string">"I have two arities."</span></span><br><span class="line">  <span class="list">(<span class="collection">[x]</span></span><br><span class="line">   <span class="list">(<span class="keyword">foo</span> x <span class="number">1</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="collection">[x y]</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x y)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕 - 多出的缩进</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo</span><br><span class="line">  <span class="string">"I have two arities."</span></span><br><span class="line">  <span class="list">(<span class="collection">[x]</span></span><br><span class="line">    <span class="list">(<span class="keyword">foo</span> x <span class="number">1</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="collection">[x y]</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x y)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="multiple-arity-order"></a><br>按照从少到多的参数，排序函数的多元数形式。多元素的情况下，共同<br>功能是某个k参数完全指定函数的<br>行为，并且元素个数 Ñ &lt; K 部分地应用在K元数，和<br>元素 N&gt; K提供在K元数超过可变参数的实现。<br><sup>[<a href="/#multiple-arity-order">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好 - 很容易扫描第n个参数形式</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo</span><br><span class="line">  <span class="string">"I have two arities."</span></span><br><span class="line">  <span class="list">(<span class="collection">[x]</span></span><br><span class="line">   <span class="list">(<span class="keyword">foo</span> x <span class="number">1</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="collection">[x y]</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x y)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 还好 - 其他元素应用两倍元数形式</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo</span><br><span class="line">  <span class="string">"I have two arities."</span></span><br><span class="line">  <span class="list">(<span class="collection">[x y]</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x y)</span>)</span></span><br><span class="line">  <span class="list">(<span class="collection">[x]</span></span><br><span class="line">   <span class="list">(<span class="keyword">foo</span> x <span class="number">1</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="collection">[x y z &amp; more]</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">reduce</span></span> foo <span class="list">(<span class="keyword">foo</span> x <span class="list">(<span class="keyword">foo</span> y z)</span>)</span> more)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕 - 无序的，毫无理由这样</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo</span><br><span class="line">  <span class="list">(<span class="collection">[x]</span> <span class="number">1</span>)</span></span><br><span class="line">  <span class="list">(<span class="collection">[x y z]</span> <span class="list">(<span class="keyword">foo</span> x <span class="list">(<span class="keyword">foo</span> y z)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="collection">[x y]</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x y)</span>)</span></span><br><span class="line">  <span class="list">(<span class="collection">[w x y z &amp; more]</span> <span class="list">(<span class="keyword"><span class="built_in">reduce</span></span> foo <span class="list">(<span class="keyword">foo</span> w <span class="list">(<span class="keyword">foo</span> x <span class="list">(<span class="keyword">foo</span> y z)</span>)</span>)</span> more)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="align-docstring-lines"></a><br>缩进多行的文档字串。<br><sup>[<a href="/#align-docstring-lines">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo</span><br><span class="line">  <span class="string">"Hello there. This is</span><br><span class="line">  a multi-line docstring."</span></span><br><span class="line">  <span class="collection">[]</span></span><br><span class="line">  <span class="list">(<span class="keyword">bar</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo</span><br><span class="line">  <span class="string">"Hello there. This is</span><br><span class="line">a multi-line docstring."</span></span><br><span class="line">  <span class="collection">[]</span></span><br><span class="line">  <span class="list">(<span class="keyword">bar</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="crlf"></a><br> 使用Unix风格的换行符（*BSD、Solaris、Linux、OSX用户无需设置，Windows用户则需要格外注意了）<br><sup>[<a href="/#crlf">链接</a>]</sup></p>
<ul>
<li>如果你使用 Git ，你也许会想加入下面这个配置，来保护你的项目被 Windows 的行编码侵入：<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bash$ </span>git config --<span class="preprocessor">global</span> core.autocrlf true</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><a name="bracket-spacing"></a><br>若有任何文字在左括号、中括号、大括号前（<code>(</code>, <code>[</code>, <code>{</code>），或是在右括号、中括号、大括号之后（<code>)</code>, <code>]</code>, <code>}</code>），将文字与括号用一个空格分开。反过来说，在左括号后、右括号前不要有空格。<br><sup>[<a href="/#bracket-spacing">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword">foo</span> <span class="list">(<span class="keyword">bar</span> baz)</span> quux)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword">foo</span><span class="list">(<span class="keyword">bar</span> baz)</span>quux)</span></span><br><span class="line"><span class="list">(<span class="keyword">foo</span> <span class="list">( bar baz )</span> quux)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>Syntactic sugar causes semicolon cancer. <br><br>– Alan Perlis</p>
</blockquote>
<ul>
<li><p><a name="no-commas-for-seq-literals"></a><br>不要在序列化的集合类型的字面常量语法里使用逗号。<br><sup>[<a href="/#no-commas-for-seq-literals">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="collection">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span></span><br><span class="line"><span class="list">(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="collection">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span></span><br><span class="line"><span class="list">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="opt-commas-in-map-literals"></a><br>明智的使用逗号与换行来加强 map 的可读性。<br><sup>[<a href="/#opt-commas-in-map-literals">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="collection">&#123;<span class="attribute">:name</span> <span class="string">"Bruce Wayne"</span> <span class="attribute">:alter-ego</span> <span class="string">"Batman"</span>&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 很好， 且会增强可读性</span></span><br><span class="line"><span class="collection">&#123;<span class="attribute">:name</span> <span class="string">"Bruce Wayne"</span></span><br><span class="line"> <span class="attribute">:alter-ego</span> <span class="string">"Batman"</span>&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 很好， 且较为紧凑</span></span><br><span class="line"><span class="collection">&#123;<span class="attribute">:name</span> <span class="string">"Bruce Wayne"</span>, <span class="attribute">:alter-ego</span> <span class="string">"Batman"</span>&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="gather-trailing-parens"></a><br>将所有尾括号放在同一行。<br><sup>[<a href="/#gather-trailing-parens">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好; 同一行</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">when</span></span> something</span><br><span class="line">  <span class="list">(<span class="keyword">something-else</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕; 不同行</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">when</span></span> something</span><br><span class="line">  <span class="list">(<span class="keyword">something-else</span>)</span></span><br><span class="line">)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><a name="empty-lines-between-top-level-forms"></a><br>顶层形式用空行间隔开来。<br><sup>[<a href="/#empty-lines-between-top-level-forms">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> x ...)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo ...)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> x ...)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo ...)</span></span><br></pre></td></tr></table></figure>
<p>  一个例外是相关<code>def</code>分组在一起。</p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> min-rows <span class="number">10</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> max-rows <span class="number">20</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> min-cols <span class="number">15</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> max-cols <span class="number">30</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="no-blank-lines-within-def-forms"></a><br>函数或宏定义中间不要放空行。一个例外，可制成以指示分组<br>比如发现成对结构<code>let</code>和<code>cond</code>。<br><sup>[<a href="/#no-blank-lines-within-def-forms">链接</a>]</sup></p>
<ul>
<li><a name="no-blank-lines-within-def-forms"></a></li>
</ul>
</li>
<li><p><a name="80-character-limits"></a><br>可行的场合下，避免每行超过 80 字符。<br><sup>[<a href="/#80-character-limits">链接</a>]</sup></p>
</li>
<li><p><a name="no-trailing-whitespace"></a><br>避免尾随的空白。<br><sup>[<a href="/#no-trailing-whitespace">链接</a>]</sup></p>
</li>
<li><p><a name="one-file-per-namespace"></a><br>一个文件、一个命名空间。<br><sup>[<a href="/#one-file-per-namespace">链接</a>]</sup></p>
</li>
</ul>
<ul>
<li><p><a name="comprehensive-ns-declaration"></a><br>每个命名空间用 <code>ns</code> 形式开始，加上 <code>refer</code>、<code>require</code>、<code>use</code> 以及 <code>import</code>。<br><sup>[<a href="/#comprehensive-ns-declaration">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">ns</span></span> examples.ns</span><br><span class="line">  <span class="list">(<span class="attribute">:refer-clojure</span> <span class="attribute">:exclude</span> <span class="collection">[next replace remove]</span>)</span></span><br><span class="line">  <span class="list">(<span class="attribute">:require</span> <span class="collection">[clojure.string <span class="attribute">:as</span> s <span class="attribute">:refer</span> <span class="collection">[blank?]</span>]</span></span><br><span class="line">            <span class="collection">[clojure.set <span class="attribute">:as</span> set]</span></span><br><span class="line">            <span class="collection">[clojure.java.shell <span class="attribute">:as</span> sh]</span>)</span></span><br><span class="line">  <span class="list">(<span class="attribute">:import</span> java.util.Date</span><br><span class="line">           java.text.SimpleDateFormat</span><br><span class="line">           <span class="collection">[java.util.concurrent Executors</span><br><span class="line">                                 链接edBlockingQueue]</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="prefer-require-over-use"></a><br>在 <code>ns</code> 宏中优先使用 <code>:require :as</code> 胜于 <code>:require :refer</code> 胜于 <code>:require
:refer :all</code>. 优先使用 <code>:require</code> 胜于 <code>:use</code>; 后者的形式应该是<br>考虑使用新的代码。<br><sup>[<a href="/#prefer-require-over-use">链接</a>]</sup></p>
</li>
</ul>
<pre><code><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">ns</span></span> examples.ns</span><br><span class="line">  <span class="list">(<span class="attribute">:require</span> <span class="collection">[clojure.zip <span class="attribute">:as</span> zip]</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">ns</span></span> examples.ns</span><br><span class="line">  <span class="list">(<span class="attribute">:require</span> <span class="collection">[clojure.zip <span class="attribute">:refer</span> <span class="collection">[lefts rights]</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 可以接受的</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">ns</span></span> examples.ns</span><br><span class="line">  <span class="list">(<span class="attribute">:require</span> <span class="collection">[clojure.zip <span class="attribute">:refer</span> <span class="attribute">:all</span>]</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">ns</span></span> examples.ns</span><br><span class="line">  <span class="list">(<span class="attribute">:use</span> clojure.zip)</span>)</span></span></span></span></span><br></pre></td></tr></table></figure>
</code></pre><ul>
<li><p><a name="no-single-segment-namespaces"></a><br>避免单段的命名空间。<br><sup>[<a href="/#no-single-segment-namespaces">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">ns</span></span> example.ns)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">ns</span></span> example)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><a name="namespaces-with-5-segments-max"></a><br>避免使用过长的命名空间（不超过五段）。<br><sup>[<a href="/#namespaces-with-5-segments-max">链接</a>]</sup></p>
</li>
<li><p><a name="10-loc-per-fn-limit"></a><br>函数避免超过 10 行代码。事实上，大多数函数应保持在5行代码以内。<br><sup>[<a href="/#10-loc-per-fn-limit">链接</a>]</sup></p>
</li>
<li><p><a name="4-positional-fn-params-limit"></a><br>参数列表避免超过 3 个或 4 个位置参数。<br><sup>[<a href="/#4-positional-fn-params-limit">链接</a>]</sup></p>
</li>
<li><p><a name="forward-references"></a><br>避免向前引用。它们偶尔必要的，但这样的场合<br>实际上很罕见。<br><sup>[<a href="/#forward-references">链接</a>]</sup></p>
</li>
</ul>
<h2 id="u8BED_u6CD5"><a href="#u8BED_u6CD5" class="headerlink" title="语法"></a><a name="syntax"></a>语法</h2><ul>
<li><p><a name="ns-fns-only-in-repl"></a><br>避免使用操作命名空间的函数，像是：<code>require</code> 与 <code>refer</code>。他们在 REPL 之外完全用不到。<br><sup>[<a href="/#ns-fns-only-in-repl">链接</a>]</sup></p>
</li>
<li><p><a name="declare"></a><br>使用declare实现向前引用。<br><sup>[<a href="/#declare">链接</a>]</sup></p>
</li>
<li><p><a name="higher-order-fns"></a><br>优先使用<code>map</code>这类高阶函数，而非<code>loop/recur</code>。<br><sup>[<a href="/#higher-order-fns">链接</a>]</sup></p>
</li>
<li><p><a name="pre-post-conditions"></a><br>优先使用前置、后置条件来检测函数参数和返回值。<br><sup>[<a href="/#pre-post-conditions">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo <span class="collection">[x]</span></span><br><span class="line">  <span class="collection">&#123;<span class="attribute">:pre</span> <span class="collection">[<span class="list">(<span class="keyword"><span class="built_in">pos?</span></span> x)</span>]</span>&#125;</span></span><br><span class="line">  <span class="list">(<span class="keyword">bar</span> x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo <span class="collection">[x]</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">pos?</span></span> x)</span></span><br><span class="line">    <span class="list">(<span class="keyword">bar</span> x)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">throw</span></span> <span class="list">(<span class="keyword">IllegalArgumentException.</span> <span class="string">"x must be a positive number!"</span>)</span>)</span>)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="dont-def-vars-inside-fns"></a><br>不要在函数中定义变量。<br><sup>[<a href="/#dont-def-vars-inside-fns">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 非常糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo <span class="collection">[]</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">def</span></span> x <span class="number">5</span>)</span></span><br><span class="line">  ...)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="dont-shadow-clojure-core"></a><br>本地变量名不应覆盖clojure.core中定义的函数。<br><sup>[<a href="/#dont-shadow-clojure-core">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕 - 这样一来函数中调用`clojure.core/map`时就需要指定完整的命名空间了。</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> foo <span class="collection">[map]</span></span><br><span class="line">  ...)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="alter-var"></a><br>使用 <code>alter-var-root</code> 替代 <code>def</code> 去改变变量的值。</p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; good</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> thing <span class="number">1</span>)</span> <span class="comment">; value of thing is now 1</span></span><br><span class="line"><span class="comment">; do some stuff with thing</span></span><br><span class="line"><span class="list">(<span class="keyword">alter-var-root</span> #'thing <span class="list">(<span class="keyword"><span class="built_in">constantly</span></span> <span class="literal">nil</span>)</span>)</span> <span class="comment">; value of thing is now nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; bad</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> thing <span class="number">1</span>)</span></span><br><span class="line"><span class="comment">; do some stuff with thing</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> thing <span class="literal">nil</span>)</span></span><br><span class="line"><span class="comment">; value of thing is now nil</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="nil-punning"></a><br>使用 <code>seq</code> 来判断一个序列是否为空（这个技巧有时候称为 *nil punning）。<br><sup>[<a href="/#nil-punning">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> print-seq <span class="collection">[s]</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">when</span></span> <span class="list">(<span class="keyword"><span class="built_in">seq</span></span> s)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">prn</span></span> <span class="list">(<span class="keyword"><span class="built_in">first</span></span> s)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">recur</span></span> <span class="list">(<span class="keyword"><span class="built_in">rest</span></span> s)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> print-seq <span class="collection">[s]</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">when-not</span></span> <span class="list">(<span class="keyword"><span class="built_in">empty?</span></span> s)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">prn</span></span> <span class="list">(<span class="keyword"><span class="built_in">first</span></span> s)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">recur</span></span> <span class="list">(<span class="keyword"><span class="built_in">rest</span></span> s)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="to-vector"></a><br>需要将序列转换向量，优先使用 <code>vec</code> 而不是 <code>into</code> 。<br><sup>[<a href="/#to-vector">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">vec</span></span> some-seq)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">into</span></span> <span class="collection">[]</span> some-seq)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><a name="when-instead-of-single-branch-if"></a><br>使用 <code>when</code> 替代 <code>(if ... (do ...)</code>。<br><sup>[<a href="/#when-instead-of-single-branch-if">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">when</span></span> pred</span><br><span class="line">  <span class="list">(<span class="keyword">foo</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">bar</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">if</span></span> pred</span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">do</span></span></span><br><span class="line">    <span class="list">(<span class="keyword">foo</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">bar</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="if-let"></a><br>使用 <code>if-let</code> 替代 <code>let</code> + <code>if</code>。<br><sup>[<a href="/#if-let">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">if-let</span></span> <span class="collection">[result <span class="list">(<span class="keyword">foo</span> x)</span>]</span></span><br><span class="line">  <span class="list">(<span class="keyword">something-with</span> result)</span></span><br><span class="line">  <span class="list">(<span class="keyword">something-else</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">let</span></span> <span class="collection">[result <span class="list">(<span class="keyword">foo</span> x)</span>]</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> result</span><br><span class="line">    <span class="list">(<span class="keyword">something-with</span> result)</span></span><br><span class="line">    <span class="list">(<span class="keyword">something-else</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="when-let"></a><br>使用 <code>when-let</code> 替代 <code>let</code> + <code>when</code>。<br><sup>[<a href="/#when-let">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">when-let</span></span> <span class="collection">[result <span class="list">(<span class="keyword">foo</span> x)</span>]</span></span><br><span class="line">  <span class="list">(<span class="keyword">do-something-with</span> result)</span></span><br><span class="line">  <span class="list">(<span class="keyword">do-something-more-with</span> result)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">let</span></span> <span class="collection">[result <span class="list">(<span class="keyword">foo</span> x)</span>]</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">when</span></span> result</span><br><span class="line">    <span class="list">(<span class="keyword">do-something-with</span> result)</span></span><br><span class="line">    <span class="list">(<span class="keyword">do-something-more-with</span> result)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="if-not"></a><br>使用 <code>if-not</code> 替代 <code>(if (not ...) ...)</code>。<br><sup>[<a href="/#if-not">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">if-not</span></span> pred</span><br><span class="line">  <span class="list">(<span class="keyword">foo</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">not</span></span> pred)</span></span><br><span class="line">  <span class="list">(<span class="keyword">foo</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="when-not"></a><br>使用 <code>when-not</code> 替代 <code>(when (not ...) ...)</code>。<br><sup>[<a href="/#when-not">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">when-not</span></span> pred</span><br><span class="line">  <span class="list">(<span class="keyword">foo</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">bar</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">when</span></span> <span class="list">(<span class="keyword"><span class="built_in">not</span></span> pred)</span></span><br><span class="line">  <span class="list">(<span class="keyword">foo</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">bar</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="when-not-instead-of-single-branch-if-not"></a><br>使用 <code>when-not</code> 替代 <code>(if-not ... (do ...)</code>。<br><sup>[<a href="/#when-not-instead-of-single-branch-if-not">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">when-not</span></span> pred</span><br><span class="line">  <span class="list">(<span class="keyword">foo</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">bar</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">if-not</span></span> pred</span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">do</span></span></span><br><span class="line">    <span class="list">(<span class="keyword">foo</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">bar</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="not-equal"></a><br>使用 <code>not=</code> 替代 <code>(not (= ...))</code>。<br><sup>[<a href="/#not-equal">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">not=</span></span> foo bar)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">not</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> foo bar)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><a name="printf"></a><br>使用 <code>printf</code> 替代 <code>(print (format ...))</code>。<br><sup>[<a href="/#printf">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">printf</span></span> <span class="string">"Hello, %s!\n"</span> name)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 好</span></span><br><span class="line"><span class="list">(<span class="keyword">println</span> <span class="list">(<span class="keyword"><span class="built_in">format</span></span> <span class="string">"Hello, %s!"</span> name)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="multiple-arity-of-gt-and-ls-fns"></a><br>在做比较，请考虑， Clojure的函数<code>&lt;</code><br><code>&gt;</code>等，接受可变数量的参数的函数。<br><sup>[<a href="/#multiple-arity-of-gt-and-ls-fns">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="number">5</span> x <span class="number">10</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">and</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> x <span class="number">5</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> x <span class="number">10</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="single-param-fn-literal"></a><br>当匿名函数只有一个参数时，优先使用 <code>%</code> ，而非 <code>%1</code> 。<br><sup>[<a href="/#single-param-fn-literal">链接</a>]</sup></p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">;; 很好</span><br><span class="line">#(Math/round %)</span><br><span class="line"></span><br><span class="line">;; 糟糕</span><br><span class="line">#(Math/round %1)</span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="multiple-params-fn-literal"></a><br>当匿名函数有多个参数时，优先使用 <code>%1</code>，而非 <code>%</code> 。<br><sup>[<a href="/#multiple-params-fn-literal">链接</a>]</sup></p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">;; 很好</span><br><span class="line">#(Math/pow %1 %2)</span><br><span class="line"></span><br><span class="line">;; 糟糕</span><br><span class="line">#(Math/pow % %2)</span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="no-useless-anonymous-fns"></a><br>只有在必要的时候才使用匿名函数。<br><sup>[<a href="/#no-useless-anonymous-fns">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">filter</span></span> even? <span class="list">(<span class="keyword"><span class="built_in">range</span></span> <span class="number">1</span> <span class="number">10</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">filter</span></span> #<span class="list">(<span class="keyword"><span class="built_in">even?</span></span> %)</span> <span class="list">(<span class="keyword"><span class="built_in">range</span></span> <span class="number">1</span> <span class="number">10</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="no-multiple-forms-fn-literals"></a><br>若函数体由一个以上形式组成，不要使用匿名函数。<br><sup>[<a href="/#no-multiple-forms-fn-literals">链接</a>]</sup></p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">;; 很好</span><br><span class="line">(fn [x]</span><br><span class="line">  (println x)</span><br><span class="line">  (* x 2))</span><br><span class="line"></span><br><span class="line">;; 糟糕 (你需要明确得使用到do)</span><br><span class="line">#(do (println %)</span><br><span class="line">     (* % 2))</span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="complement"></a><br>在特定情况下优先使用<code>complement</code>，而非匿名函数。<br><sup>[<a href="/#complement">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">filter</span></span> <span class="list">(<span class="keyword"><span class="built_in">complement</span></span> some-pred?)</span> coll)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">filter</span></span> #<span class="list">(<span class="keyword"><span class="built_in">not</span></span> <span class="list">(<span class="keyword">some-pred?</span> %)</span>)</span> coll)</span></span><br></pre></td></tr></table></figure>
<p>  这个规则应该在函数有明确的反函数时忽略（如：even? 与 odd?）。 </p>
</li>
<li><p><a name="comp"></a><br>某些情况下可以用 <code>comp</code> 使代码更简洁。<br><sup>[<a href="/#comp">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; Assuming `(:require [clojure.string :as str])`...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">map</span></span> #<span class="list">(<span class="keyword">str/capitalize</span> <span class="list">(<span class="keyword">str/trim</span> %)</span>)</span> <span class="collection">[<span class="string">"top "</span> <span class="string">" test "</span>]</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 更好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">map</span></span> <span class="list">(<span class="keyword"><span class="built_in">comp</span></span> str/capitalize str/trim)</span> <span class="collection">[<span class="string">"top "</span> <span class="string">" test "</span>]</span>)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><a name="partial"></a><br>某些情况下可以用 <code>partial</code> 使代码更简洁。<br><sup>[<a href="/#partial">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">map</span></span> #<span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">5</span> %)</span> <span class="list">(<span class="keyword"><span class="built_in">range</span></span> <span class="number">1</span> <span class="number">10</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; (或许) 更好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">map</span></span> <span class="list">(<span class="keyword"><span class="built_in">partial</span></span> + <span class="number">5</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">range</span></span> <span class="number">1</span> <span class="number">10</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="threading-macros"></a><br>当遇到嵌套调用时，建议使用 <code>-&gt;</code> 宏和 <code>-&gt;&gt;</code> 宏。<br><sup>[<a href="/#threading-macros">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">-&gt;</span></span> <span class="collection">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span></span><br><span class="line">    reverse</span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">conj</span></span> <span class="number">4</span>)</span></span><br><span class="line">    prn)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 不够好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">prn</span></span> <span class="list">(<span class="keyword"><span class="built_in">conj</span></span> <span class="list">(<span class="keyword"><span class="built_in">reverse</span></span> <span class="collection">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span>)</span></span><br><span class="line">           <span class="number">4</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">-&gt;&gt;</span></span> <span class="list">(<span class="keyword"><span class="built_in">range</span></span> <span class="number">1</span> <span class="number">10</span>)</span></span><br><span class="line">     <span class="list">(<span class="keyword"><span class="built_in">filter</span></span> even?)</span></span><br><span class="line">     <span class="list">(<span class="keyword"><span class="built_in">map</span></span> <span class="list">(<span class="keyword"><span class="built_in">partial</span></span> * <span class="number">2</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 不够好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">map</span></span> <span class="list">(<span class="keyword"><span class="built_in">partial</span></span> * <span class="number">2</span>)</span></span><br><span class="line">     <span class="list">(<span class="keyword"><span class="built_in">filter</span></span> even? <span class="list">(<span class="keyword"><span class="built_in">range</span></span> <span class="number">1</span> <span class="number">10</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><a name="dot-dot-macro"></a><br>当需要连续调用Java类的方法时，优先使用 <code>..</code> ，而非 <code>-&gt;</code> 。<br><sup>[<a href="/#dot-dot-macro">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">-&gt;</span></span> <span class="list">(<span class="keyword">System/getProperties</span>)</span> <span class="list">(<span class="keyword">.get</span> <span class="string">"os.name"</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 更好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">..</span></span> System getProperties <span class="list">(<span class="keyword"><span class="built_in">get</span></span> <span class="string">"os.name"</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><a name="else-keyword-in-cond"></a><br>在 <code>cond</code> 和 <code>condp</code> 中，使用 <code>:else</code> 来处理不满足条件的情况。<br><sup>[<a href="/#else-keyword-in-cond">链接</a>]</sup></p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">;; 很好</span><br><span class="line">(cond</span><br><span class="line">  (&lt; n 0) "negative"</span><br><span class="line">  (&gt; n 0) "positive"</span><br><span class="line">  :else "zero"))</span><br><span class="line"></span><br><span class="line">;; 糟糕</span><br><span class="line">(cond</span><br><span class="line">  (&lt; n 0) "negative"</span><br><span class="line">  (&gt; n 0) "positive"</span><br><span class="line">  true "zero"))</span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="condp"></a><br>当比较的变量和方式相同时，优先使用 <code>condp</code> ，而非 <code>cond</code> 。<br><sup>[<a href="/#condp">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">cond</span></span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">=</span></span> x <span class="number">10</span>)</span> <span class="attribute">:ten</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">=</span></span> x <span class="number">20</span>)</span> <span class="attribute">:twenty</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">=</span></span> x <span class="number">30</span>)</span> <span class="attribute">:forty</span></span><br><span class="line">  <span class="attribute">:else</span> <span class="attribute">:dunno</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 更好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">condp</span></span> = x</span><br><span class="line">  <span class="number">10</span> <span class="attribute">:ten</span></span><br><span class="line">  <span class="number">20</span> <span class="attribute">:twenty</span></span><br><span class="line">  <span class="number">30</span> <span class="attribute">:forty</span></span><br><span class="line">  <span class="attribute">:dunno</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="case"></a><br>当条件是常量时，优先使用 <code>case</code> ，而非 <code>cond</code> 或 <code>condp</code> 。<br><sup>[<a href="/#case">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">cond</span></span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">=</span></span> x <span class="number">10</span>)</span> <span class="attribute">:ten</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">=</span></span> x <span class="number">20</span>)</span> <span class="attribute">:twenty</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">=</span></span> x <span class="number">30</span>)</span> <span class="attribute">:forty</span></span><br><span class="line">  <span class="attribute">:else</span> <span class="attribute">:dunno</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 更好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">condp</span></span> = x</span><br><span class="line">  <span class="number">10</span> <span class="attribute">:ten</span></span><br><span class="line">  <span class="number">20</span> <span class="attribute">:twenty</span></span><br><span class="line">  <span class="number">30</span> <span class="attribute">:forty</span></span><br><span class="line">  <span class="attribute">:dunno</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 最佳</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">case</span></span> x</span><br><span class="line">  <span class="number">10</span> <span class="attribute">:ten</span></span><br><span class="line">  <span class="number">20</span> <span class="attribute">:twenty</span></span><br><span class="line">  <span class="number">30</span> <span class="attribute">:forty</span></span><br><span class="line">  <span class="attribute">:dunno</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="shor-forms-in-cond"></a><br> 如果不能在视觉上使用注释与空行两两分组提示，则在 <code>cond</code> 相关的的形式中，使用短形式。<br><sup>[<a href="/#shor-forms-in-cond">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">cond</span></span></span><br><span class="line">  <span class="list">(<span class="keyword">test1</span>)</span> <span class="list">(<span class="keyword">action1</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">test2</span>)</span> <span class="list">(<span class="keyword">action2</span>)</span></span><br><span class="line">  <span class="attribute">:else</span>   <span class="list">(<span class="keyword">default-action</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 还行</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">cond</span></span></span><br><span class="line">  <span class="comment">;; test case 1</span></span><br><span class="line">  <span class="list">(<span class="keyword">test1</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">long-function-name-which-requires-a-new-line</span></span><br><span class="line">    <span class="list">(<span class="keyword">complicated-sub-form</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">-&gt;</span></span> 'which-spans multiple-lines)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">;; test case 2</span></span><br><span class="line">  <span class="list">(<span class="keyword">test2</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">another-very-long-function-name</span></span><br><span class="line">    <span class="list">(<span class="keyword">yet-another-sub-form</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">-&gt;</span></span> 'which-spans multiple-lines)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">:else</span></span><br><span class="line">  <span class="list">(<span class="keyword">the-fall-through-default-case</span></span><br><span class="line">    <span class="list">(<span class="keyword">which-also-spans</span> 'multiple</span><br><span class="line">                      'lines)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="set-as-predicate"></a><br>某些情况下，使用 <code>set</code> 作为判断条件。<br><sup>[<a href="/#set-as-predicate">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">remove</span></span> #<span class="collection">&#123;<span class="number">1</span>&#125;</span> <span class="collection">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">remove</span></span> #<span class="list">(<span class="keyword"><span class="built_in">=</span></span> % <span class="number">1</span>)</span> <span class="collection">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">count</span></span> <span class="list">(<span class="keyword"><span class="built_in">filter</span></span> #<span class="collection">&#123;\a \e \i \o \u&#125;</span> <span class="string">"mary had a little lamb"</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">count</span></span> <span class="list">(<span class="keyword"><span class="built_in">filter</span></span> #<span class="list">(<span class="keyword"><span class="built_in">or</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> % \a)</span></span><br><span class="line">                    <span class="list">(<span class="keyword"><span class="built_in">=</span></span> % \e)</span></span><br><span class="line">                    <span class="list">(<span class="keyword"><span class="built_in">=</span></span> % \i)</span></span><br><span class="line">                    <span class="list">(<span class="keyword"><span class="built_in">=</span></span> % \o)</span></span><br><span class="line">                    <span class="list">(<span class="keyword"><span class="built_in">=</span></span> % \u)</span>)</span></span><br><span class="line">               <span class="string">"mary had a little lamb"</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><a name="inc-and-dec"></a><br>使用 <code>(inc x)</code> 和 <code>(dec x)</code> 替代 <code>(+ x 1)</code> 和 <code>(- x 1)</code>。<br><sup>[<a href="/#inc-and-dec">链接</a>]</sup></p>
</li>
<li><p><a name="pos-and-neg"></a><br>使用 <code>(pos? x)</code>、<code>(neg? x)</code> 、以及<code>(zero? x)</code> 替代 <code>(&gt; x 0)</code> 、<code>(&lt; x 0)</code> 、和<code>(= x 0)</code>。<br><sup>[<a href="/#pos-and-neg">链接</a>]</sup></p>
</li>
<li><p><a name="list-star-instead-of-nested-cons"></a><br>Useinstead of a series of nestedinvocations.<br>使用 <code>list*</code> 替代内部嵌套多个 <code>cons</code> 。<br><sup>[<a href="/#list-star-instead-of-nested-cons">链接</a>]</sup></p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 很好</span><br><span class="line">(list* 1 2 3 [4 5])</span><br><span class="line"></span><br><span class="line"># 糟糕</span><br><span class="line">(cons 1 (cons 2 (cons 3 [4 5])))</span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="sugared-java-interop"></a><br>进行Java交互时，优先使用Clojure提供的语法糖。<br><sup>[<a href="/#sugared-java-interop">链接</a>]</sup></p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">;;; 创建对象</span><br><span class="line">;; 很好</span><br><span class="line">(java.util.ArrayList. 100)</span><br><span class="line"></span><br><span class="line">;; 糟糕</span><br><span class="line">(new java.util.ArrayList 100)</span><br><span class="line"></span><br><span class="line">;;; 调用静态方法</span><br><span class="line">;; 很好</span><br><span class="line">(Math/pow 2 10)</span><br><span class="line"></span><br><span class="line">;; 糟糕</span><br><span class="line">(. Math pow 2 10)</span><br><span class="line"></span><br><span class="line">;;; 调用实例方法</span><br><span class="line">;; 很好</span><br><span class="line">(.substring "hello" 1 3)</span><br><span class="line"></span><br><span class="line">;; 糟糕</span><br><span class="line">(. "hello" substring 1 3)</span><br><span class="line"></span><br><span class="line">;;; 访问静态属性</span><br><span class="line">;; 很好</span><br><span class="line">Integer/MAX_VALUE</span><br><span class="line"></span><br><span class="line">;; 糟糕</span><br><span class="line">(. Integer MAX_VALUE)</span><br><span class="line"></span><br><span class="line">;;; 访问实例属性</span><br><span class="line">;; 很好</span><br><span class="line">(.someField some-object)</span><br><span class="line"></span><br><span class="line">;; 糟糕</span><br><span class="line">(. some-object someField)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><a name="compact-metadata-notation-for-true-flags"></a><br>Use the compact metadata notation for metadata that contains only<br>slots whose keys are keywords and whose value is boolean .<br>当元数据的键是关键字和值是 <code>true</code> ，使用紧凑形式标记元数据。<br><sup>[<a href="/#compact-metadata-notation-for-true-flags">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> ^<span class="attribute">:private</span> a <span class="number">5</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> <span class="comment">^&#123;:private true&#125;</span> a <span class="number">5</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="private"></a><br>指出代码的私有部分。<br><sup>[<a href="/#private">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn-</span></span> private-fun <span class="collection">[]</span> ...)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> ^<span class="attribute">:private</span> private-var ...)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> private-fun <span class="collection">[]</span> ...)</span> <span class="comment">; not private at all</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> ^<span class="attribute">:private</span> private-fun <span class="collection">[]</span> ...)</span> <span class="comment">; overly verbose</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> private-var ...)</span> <span class="comment">; not private at all</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="access-private-var"></a><br>使用 <code>@#&#39;some.ns/var</code> 形式，访问私有变量（如：为了测试）。<br><sup>[<a href="/#access-private-var">链接</a>]</sup></p>
</li>
<li><p><a name="attach-metadata-carefully"></a><br>Be careful regarding what exactly do you attach metadata to.<br>小心你添加元数据的对象。<br><sup>[<a href="/#attach-metadata-carefully">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 我们添加元数据到变量 `a`中</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> ^<span class="attribute">:private</span> a <span class="collection">&#123;&#125;</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">meta</span></span> a)</span> <span class="comment">;=&gt; nil</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">meta</span></span> #'a)</span> <span class="comment">;=&gt; &#123;:private true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 我们添加元数据到空的hash-map中</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> a ^<span class="attribute">:private</span> <span class="collection">&#123;&#125;</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">meta</span></span> a)</span> <span class="comment">;=&gt; &#123;:private true&#125;</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">meta</span></span> #'a)</span> <span class="comment">;=&gt; nil</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="u547D_u540D"><a href="#u547D_u540D" class="headerlink" title="命名"></a><a name="naming"></a>命名</h2><blockquote>
<p>编程中真正的难点只有两个：验证缓存的有效性和命名。<br>– Phil Karlton</p>
</blockquote>
<ul>
<li><p><a name="ns-naming-schemas"></a><br>命名空间建议使用以下两种方式：<br><sup>[<a href="/#ns-naming-schemas">链接</a>]</sup></p>
<ul>
<li><code>项目名称.模块名称</code></li>
<li><code>组织名称.项目名称.模块名称</code></li>
</ul>
</li>
<li><p><a name="lisp-case-ns"></a><br>对于命名空间中较长的元素，使用 <code>lisp-case</code> 格式，如（<code>bruce.project-euler</code>）。<br><sup>[<a href="/#lisp-case-ns">链接</a>]</sup></p>
</li>
<li><p><a name="lisp-case"></a><br>使用 <code>lisp-case</code> 格式来命名函数和变量。<br><sup>[<a href="/#lisp-case">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> some-var ...)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> some-fun ...)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> someVar ...)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> somefun ...)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> some_fun ...)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="CamelCase-for-protocols-records-structs-and-types"></a><br>使用 <code>CamelCase</code> 来命名接口（protocol）、记录（record）、结构和类型（struct &amp; type）。对于HTTP、RFC、XML等缩写，仍保留其大写格式。<br><sup>[<a href="/#CamelCase-for-protocols-records-structs-and-types">链接</a>]</sup></p>
</li>
<li><p><a name="pred-with-question-mark"></a><br>对于返回布尔值的函数名称，使用问号结尾，（如: even?）。<br><sup>[<a href="/#pred-with-question-mark">链接</a>]</sup></p>
 <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> palindrome? ...)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> palindrome-p ...)</span> <span class="comment">; Common Lisp style</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> is-palindrome ...)</span> <span class="comment">; Java style</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="changing-state-fns-with-exclamation-mark"></a><br>The names of functions/macros that are not safe in STM transactions<br>should end with an exclamation mark (e.g. <code>reset!</code>).<br>当方法或宏不能在STM中安全使用时，须以感叹号结尾，（如：reset!）。<br><sup>[<a href="/#changing-state-fns-with-exclamation-mark">链接</a>]</sup></p>
</li>
<li><p><a name="arrow-instead-of-to"></a><br>命名类型转换函数时使用 <code>-&gt;</code> ，而非 <code>to</code> 。<br><sup>[<a href="/#arrow-instead-of-to">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> f-&gt;c ...)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 不够好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> f-to-c ...)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="earmuffs-for-dynamic-vars"></a><br>对于可供重绑定的变量（即动态变量），使用星号括起，（如：<em>earmuffs</em>）。<br><sup>[<a href="/#earmuffs-for-dynamic-vars">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; good</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> ^<span class="attribute">:dynamic</span> *a* <span class="number">10</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; bad</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> ^<span class="attribute">:dynamic</span> a <span class="number">10</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="dont-flag-constants"></a><br>无需对常量名进行特殊的标识，因为所有的变量都应该是常量，除非有特别说明。<br><sup>[<a href="/#dont-flag-constants">链接</a>]</sup></p>
</li>
<li><p><a name="underscore-for-unused-bindings"></a><br>对于解构过程中或参数列表中忽略的元素，使用 <code>_</code> 来表示。<br><sup>[<a href="/#underscore-for-unused-bindings">链接</a>]</sup></p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">let</span></span> <span class="collection">[<span class="collection">[a b _ c]</span> <span class="collection">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span>]</span></span><br><span class="line">  <span class="list">(<span class="keyword">println</span> a b c)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">dotimes</span></span> <span class="collection">[_ <span class="number">3</span>]</span></span><br><span class="line">  <span class="list">(<span class="keyword">println</span> <span class="string">"Hello!"</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">let</span></span> <span class="collection">[<span class="collection">[a b c d]</span> <span class="collection">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span>]</span></span><br><span class="line">  <span class="list">(<span class="keyword">println</span> a b d)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">dotimes</span></span> <span class="collection">[i <span class="number">3</span>]</span></span><br><span class="line">  <span class="list">(<span class="keyword">println</span> <span class="string">"Hello!"</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><a name="idiomatic-names"></a><br>参考 <code>clojure.core</code> 中的命名规范，如 <code>pred</code> 、<code>coll</code> 。<br><sup>[<a href="/#idiomatic-names">链接</a>]</sup></p>
<ul>
<li>函数：<ul>
<li><code>f</code>，<code>g</code>，<code>h</code> - 参数内容是一个函数</li>
<li><code>n</code> - 整数，通常是一个表示大小的值</li>
<li><code>index</code>, <code>i</code> - 整数索引</li>
<li><code>x</code>, <code>y</code> - 数值</li>
<li><code>xs</code> - 序列</li>
<li><code>m</code> - 映射</li>
<li><code>s</code> - 字符串</li>
<li><code>re</code> - 正则表达式</li>
<li><code>coll</code> - 集合</li>
<li><code>pred</code> - 谓词闭包</li>
<li><code>&amp; more</code> - 可变参数</li>
<li><code>xf</code> - xform, 一个转换器</li>
</ul>
</li>
<li>宏：<ul>
<li><code>expr</code> - 表达式</li>
<li><code>body</code> - 宏的主体</li>
<li><code>binding</code> - 一个向量，包含宏的绑定  </li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="u96C6_u5408"><a href="#u96C6_u5408" class="headerlink" title="集合"></a><a name="collections">集合</a></h2><blockquote>
<p>用100种函数去操作同一种数据结构，要好过用10种函数操作10种数据结构。<br><br>– Alan J. Perlis</p>
</blockquote>
<ul>
<li><p><a name="avoid-lists"></a><br>避免使用列表（list）来存储数据（除非它真的就是你想要的）。<br><sup>[<a href="/#avoid-lists">链接</a>]</sup></p>
</li>
<li><p><a name="keywords-for-hash-keys"></a><br>优先使用关键字（keyword），而非普通的哈希键。<br><sup>[<a href="/#keywords-for-hash-keys">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="collection">&#123;<span class="attribute">:name</span> <span class="string">"Bruce"</span> <span class="attribute">:age</span> <span class="number">30</span>&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="collection">&#123;<span class="string">"name"</span> <span class="string">"Bruce"</span> <span class="string">"age"</span> <span class="number">30</span>&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="literal-col-syntax"></a><br>编写集合时，优先使用字面的语法形式，而非构造函数。但是，在定义唯一值集合（set）时，只有当元素都是常量时才可使用字面语法，否则应使用构造函数。<br><sup>[<a href="/#literal-col-syntax">链接</a>]</sup></p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">;; 很好</span><br><span class="line">[1 2 3]</span><br><span class="line">#&#123;1 2 3&#125;</span><br><span class="line">(hash-set (func1) (func2)) ; 元素在运行时确定</span><br><span class="line"></span><br><span class="line">;; 糟糕</span><br><span class="line">(vector 1 2 3)</span><br><span class="line">(hash-set 1 2 3)</span><br><span class="line">#&#123;(func1) (func2)&#125; ; 若(func1)和(func2)的值相等，则会抛出运行时异常。</span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="avoid-index-based-coll-access"></a><br>避免使用数值索引来访问集合元素。<br><sup>[<a href="/#avoid-index-based-coll-access">链接</a>]</sup></p>
</li>
<li><p><a name="keywords-as-fn-to-get-map-values"></a><br>优先使用关键字来获取哈希表（map）中的值。<br><sup>[<a href="/#keywords-as-fn-to-get-map-values">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> m <span class="collection">&#123;<span class="attribute">:name</span> <span class="string">"Bruce"</span> <span class="attribute">:age</span> <span class="number">30</span>&#125;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="attribute">:name</span> m)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 太过啰嗦</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">get</span></span> m <span class="attribute">:name</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕 - 可能抛出空指针异常</span></span><br><span class="line"><span class="list">(<span class="keyword">m</span> <span class="attribute">:name</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="colls-as-fns"></a><br>集合可以被用作函数。<br><sup>[<a href="/#colls-as-fns">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">filter</span></span> #<span class="collection">&#123;\a \e \o \i \u&#125;</span> <span class="string">"this is a test"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕 - 不够美观</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="keywords-as-fns"></a><br>关键字可以被用作函数。<br><sup>[<a href="/#keywords-as-fns">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="list">(<span class="keyword"><span class="built_in">juxt</span></span> <span class="attribute">:a</span> <span class="attribute">:b</span>)</span> <span class="collection">&#123;<span class="attribute">:a</span> <span class="string">"ala"</span> <span class="attribute">:b</span> <span class="string">"bala"</span>&#125;</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="avoid-transient-colls"></a><br>只有在非常强调性能的情况下才可使用瞬时集合（transient collection）。<br><sup>[<a href="/#avoid-transient-colls">链接</a>]</sup></p>
</li>
<li><p><a name="avoid-java-colls"></a><br>避免使用Java集合。<br><sup>[<a href="/#avoid-java-colls">链接</a>]</sup></p>
</li>
<li><p><a name="avoid-java-arrays"></a><br>避免使用Java数组，除非遇到需要和Java类进行交互，或需要高性能地处理基本类型时才可使用。<br><sup>[<a href="/#avoid-java-arrays">链接</a>]</sup></p>
</li>
</ul>
<h2 id="u53EF_u53D8"><a href="#u53EF_u53D8" class="headerlink" title="可变"></a><a name="mutation"></a>可变</h2><h3 id="u5F15_u7528_uFF08Refs_uFF09"><a href="#u5F15_u7528_uFF08Refs_uFF09" class="headerlink" title="引用（Refs）"></a>引用（Refs）</h3><ul>
<li><p><a name="refs-io-macro"></a><br>建议所有的IO操作都使用 <code>io!</code> 宏进行包装，以免不小心在事务中调用了这些代码。<br><sup>[<a href="/#refs-io-macro">链接</a>]</sup></p>
</li>
<li><p><a name="refs-avoid-ref-set"></a><br>避免使用 <code>ref-set</code> 。<br><sup>[<a href="/#refs-avoid-ref-set">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> r <span class="list">(<span class="keyword"><span class="built_in">ref</span></span> <span class="number">0</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">dosync</span></span> <span class="list">(<span class="keyword"><span class="built_in">alter</span></span> r + <span class="number">5</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">dosync</span></span> <span class="list">(<span class="keyword"><span class="built_in">ref-set</span></span> r <span class="number">5</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><a name="refs-small-transactions"></a><br>控制事务的大小，(即事务所执行的工作越少越好)。<br>as small as possible.<br><sup>[<a href="/#refs-small-transactions">链接</a>]</sup></p>
</li>
<li><p><a name="refs-avoid-short-long-transactions-with-same-ref"></a><br>避免出现短期事务和长期事务访问同一个引用（Ref）的情形。<br><sup>[<a href="/#refs-avoid-short-long-transactions-with-same-ref">链接</a>]</sup></p>
</li>
</ul>
<h3 id="u4EE3_u7406_uFF08Agents_uFF09"><a href="#u4EE3_u7406_uFF08Agents_uFF09" class="headerlink" title="代理（Agents）"></a>代理（Agents）</h3><ul>
<li><p><a name="agents-send"></a><br><code>send</code> 仅使用于计算密集型、不会因IO等因素阻塞的线程。<br><sup>[<a href="/#agents-send">链接</a>]</sup></p>
</li>
<li><p><a name="agents-send-off"></a><br> <code>send-off</code> 则用于会阻塞、休眠的线程。<br><sup>[<a href="/#agents-send-off">链接</a>]</sup></p>
</li>
</ul>
<h3 id="u539F_u5B50_uFF08Atoms_uFF09"><a href="#u539F_u5B50_uFF08Atoms_uFF09" class="headerlink" title="原子（Atoms）"></a>原子（Atoms）</h3><ul>
<li><p><a name="atoms-no-update-within-transactions"></a><br>避免在事务中更新原子。<br><sup>[<a href="/#atoms-no-update-within-transactions">链接</a>]</sup></p>
</li>
<li><p><a name="atoms-prefer-swap-over-reset"></a><br>尽量使用 <code>swap!</code> ，而不是 <code>reset!</code>。<br><sup>[<a href="/#atoms-prefer-swap-over-reset">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> a <span class="list">(<span class="keyword"><span class="built_in">atom</span></span> <span class="number">0</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">swap!</span></span> a + <span class="number">5</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 不够好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">reset!</span></span> a <span class="number">5</span>)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="u5B57_u7B26_u4E32"><a href="#u5B57_u7B26_u4E32" class="headerlink" title="字符串"></a><a name="strings"></a>字符串</h2><ul>
<li><p><a name="prefer-clojure-string-over-interop"></a><br>优先使用 <code>clojure.string</code> 中提供的字符串操作函数，而不是Java中提供的或是自己编写的函数。<br><sup>[<a href="/#prefer-clojure-string-over-interop">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword">clojure.string/upper-case</span> <span class="string">"bruce"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword">.toUpperCase</span> <span class="string">"bruce"</span>)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="u5F02_u5E38"><a href="#u5F02_u5E38" class="headerlink" title="异常"></a><a name="exceptions"></a>异常</h2><ul>
<li><p><a name="reuse-existing-exception-types"></a><br>复用已有的异常类型，符合语言习惯的 Clojure 代码，当真的抛出异常时，会抛出标准类型的异常<br>(如： <code>java.lang.IllegalArgumentException</code>,<br><code>java.lang.UnsupportedOperationException</code>,<br><code>java.lang.IllegalStateException</code>, <code>java.io.IOException</code>).<br><sup>[<a href="/#reuse-existing-exception-types">链接</a>]</sup></p>
</li>
<li><p><a name="prefer-with-open-over-finally"></a><br>优先使用 <code>with-open</code> ，而非 <code>finally</code>。<br><sup>[<a href="/#prefer-with-open-over-finally">链接</a>]</sup></p>
</li>
</ul>
<h2 id="u5B8F"><a href="#u5B8F" class="headerlink" title="宏"></a><a name="macros"></a>宏</h2><ul>
<li><p><a name="dont-write-macro-if-fn-will-do"></a><br>如果可以用函数实现相同功能，不要编写一个宏。<br><sup>[<a href="/#dont-write-macro-if-fn-will-do">链接</a>]</sup></p>
</li>
<li><p><a name="write-macro-usage-before-writing-the-macro"></a><br>首先编写一个宏的用例，尔后再编写宏本身。<br><sup>[<a href="/#write-macro-usage-before-writing-the-macro">链接</a>]</sup></p>
</li>
<li><p><a name="break-complicated-macros"></a><br>尽可能将一个复杂的宏拆解为多个小型的函数。<br><sup>[<a href="/#break-complicated-macros">链接</a>]</sup></p>
</li>
<li><p><a name="macros-as-syntactic-sugar"></a><br>宏只应用于简化语法，其核心应该是一个普通的函数。<br><sup>[<a href="/#macros-as-syntactic-sugar">链接</a>]</sup></p>
</li>
<li><p><a name="syntax-quoted-forms"></a><br>使用语法转义（syntax-quote，即反引号），而非手动构造list。<br><sup>[<a href="/#syntax-quoted-forms">链接</a>]</sup></p>
</li>
</ul>
<h2 id="u6CE8_u91CA"><a href="#u6CE8_u91CA" class="headerlink" title="注释"></a><a name="comments"></a>注释</h2><blockquote>
<p>好的代码本身就是文档。因此在添加注释之前，先想想自己该如何改进代码，让它更容易理解。做到这一点后，再通过注释让代码更清晰。<br><br>– Steve McConnell</p>
</blockquote>
<ul>
<li><p><a name="self-documenting-code"></a><br>学会编写容易理解的代码，然后忽略下文的内容。真的！<br><sup>[<a href="/#self-documenting-code">链接</a>]</sup></p>
</li>
<li><p><a name="four-semicolons-for-heading-comments"></a><br>对于标题型的注释，使用至少四个分号起始。<br><sup>[<a href="/#four-semicolons-for-heading-comments">链接</a>]</sup></p>
</li>
<li><p><a name="three-semicolons-for-top-level-comments"></a><br>对于顶层注释，使用三个分号起始。<br><sup>[<a href="/#three-semicolons-for-top-level-comments">链接</a>]</sup></p>
</li>
<li><p><a name="two-semicolons-for-code-fragment"></a><br>为某段代码添加注释时，使用两个分号起始，且应与该段代码对齐。<br><sup>[<a href="/#two-semicolons-for-code-fragment">链接</a>]</sup></p>
</li>
<li><p><a name="one-semicolon-for-margin-comments"></a><br>对于行尾注释，使用一个分号起始即可。<br><sup>[<a href="/#one-semicolon-for-margin-comments">链接</a>]</sup></p>
</li>
<li><p><a name="semicolon-space"></a><br>分号后面要有一个空格。<br><sup>[<a href="/#semicolon-space">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;;;; Frob Grovel</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;;; 这段代码有以下前提:</span></span><br><span class="line"><span class="comment">;;;   1. Foo.</span></span><br><span class="line"><span class="comment">;;;   2. Bar.</span></span><br><span class="line"><span class="comment">;;;   3. Baz.</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> fnord <span class="collection">[zarquon]</span></span><br><span class="line">  <span class="comment">;; If zob, then veeblefitz.</span></span><br><span class="line">  <span class="list">(<span class="keyword">quux</span> zot</span><br><span class="line">        mumble             <span class="comment">; Zibblefrotz.</span></span><br><span class="line">        frotz)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><a name="english-syntax"></a><br>对于完整的句子的注释，句首字母应该大写，句与句之间用一个空格分隔。<br><a href="http://en.wikipedia.org/wiki/Sentence_spacing" target="_blank" rel="external">one space</a>.<br><sup>[<a href="/#english-syntax">链接</a>]</sup></li>
</ul>
<ul>
<li><p><a name="no-superfluous-comments"></a><br>避免冗余的注释。<br><sup>[<a href="/#no-superfluous-comments">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">inc</span></span> counter)</span> <span class="comment">; increments counter by one</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><a name="comment-upkeep"></a><br>注释要和代码同步更新。过期的注释还不如没有注释。<br>at all.<br><sup>[<a href="/#comment-upkeep">链接</a>]</sup></p>
</li>
<li><p><a name="dash-underscore-reader-macro"></a><br>有时，使用 <code>#_</code>  宏要优于普通的注释<br><sup>[<a href="/#dash-underscore-reader-macro">链接</a>]</sup></p>
</li>
</ul>
<pre><code><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 很好</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> foo #_<span class="list">(<span class="keyword">bar</span> x)</span> delta)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 糟糕</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> foo</span><br><span class="line">   <span class="comment">;; (bar x)</span></span><br><span class="line">   delta)</span></span><br></pre></td></tr></table></figure>
</code></pre><blockquote>
<p>好的代码和好的笑话一样，不需要额外的解释。 <br><br>– Russ Olsen</p>
</blockquote>
<ul>
<li><a name="refactor-dont-comment"></a><br>避免使用注释去描述一段写得很糟糕的代码。重构它，让它更为可读。（做或者不做，没有尝试这一说。–Yoda）<br><sup>[<a href="/#refactor-dont-comment">链接</a>]</sup></li>
</ul>
<h3 id="u6CE8_u91CA_u4E2D_u7684_u6807_u8BC6"><a href="#u6CE8_u91CA_u4E2D_u7684_u6807_u8BC6" class="headerlink" title="注释中的标识"></a><a name="comment-annotations"></a>注释中的标识</h3><ul>
<li><p><a name="annotate-above"></a><br>标识应该写在对应代码的上一行。<br><sup>[<a href="/#annotate-above">链接</a>]</sup></p>
</li>
<li><p><a name="annotate-keywords"></a><br>标识后面是一个冒号和一个空格，以及一段描述文字。<br><sup>[<a href="/#annotate-keywords">链接</a>]</sup></p>
</li>
<li><p><a name="indent-annotations"></a><br>如果标识的描述文字超过一行，则第二行需要进行缩进。<br><sup>[<a href="/#indent-annotations">链接</a>]</sup></p>
</li>
<li><p><a name="sing-and-date-annotations"></a><br>将自己姓名的首字母以及当前日期附加到标识描述文字中<br><sup>[<a href="/#sing-and-date-annotations">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> some-fun</span><br><span class="line">  <span class="collection">[]</span></span><br><span class="line">  <span class="comment">;; <span class="doctag">FIXME:</span> 这段代码在v1.2.3之后偶尔会崩溃。</span></span><br><span class="line">  <span class="comment">;;        这可能和升级BarBazUtil有关。（xz 13-1-31）</span></span><br><span class="line">  <span class="list">(<span class="keyword">baz</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="rare-eol-annotations"></a><br>对于功能非常明显，实在无需添加注释的情况，可以在行尾添加一个标识。<br><sup>[<a href="/#rare-eol-annotations">链接</a>]</sup></p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> bar</span><br><span class="line">  <span class="collection">[]</span></span><br><span class="line">  <span class="list">(<span class="keyword">sleep</span> <span class="number">100</span>)</span>)</span> <span class="comment">; OPTIMIZE</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a name="todo"></a><br>使用 <code>TODO</code> 来表示需要后期添加的功能或特性。<br><sup>[<a href="/#todo">链接</a>]</sup></p>
</li>
<li><p><a name="fixme"></a><br> 使用 <code>FIXME</code> 来表示需要修复的问题。<br><sup>[<a href="/#fixme">链接</a>]</sup></p>
</li>
<li><p><a name="optimize"></a><br>使用 <code>OPTIMIZE</code> 来表示会引起性能问题的代码，并需要修复。<br><sup>[<a href="/#optimize">链接</a>]</sup></p>
</li>
<li><p><a name="hack"></a><br>使用 <code>HACK</code> 来表示这段代码并不正规，需要在后期进行重构。<br><sup>[<a href="/#hack">链接</a>]</sup></p>
</li>
<li><p><a name="review"></a><br>使用 <code>REVIEW</code> 来表示需要进一步审查这段代码，如：<code>REVIEW: 你确定客户会正确地操作X吗？</code><br><sup>[<a href="/#review">链接</a>]</sup></p>
</li>
<li><p><a name="document-annotations"></a><br>可以使用其它你认为合适的标识关键字，但记得一定要在项目的 <code>README</code> 文件中描述这些自定义的标识。<br><sup>[<a href="/#document-annotations">链接</a>]</sup></p>
</li>
</ul>
<h2 id="u60EF_u7528_u6CD5"><a href="#u60EF_u7528_u6CD5" class="headerlink" title="惯用法"></a><a name="existential"></a>惯用法</h2><ul>
<li><p><a name="be-functional"></a><br>使用函数式风格进行编程，避免改变变量的值。<br><sup>[<a href="/#be-functional">链接</a>]</sup></p>
</li>
<li><p><a name="be-consistent"></a><br>保持编码风格。<br><sup>[<a href="/#be-consistent">链接</a>]</sup></p>
</li>
<li><p><a name="common-sense"></a><br>用正常人的思维来思考。<br><sup>[<a href="/#common-sense">链接</a>]</sup> </p>
</li>
</ul>
<h2 id="u5DE5_u5177"><a href="#u5DE5_u5177" class="headerlink" title="工具"></a><a name="tooling"></a>工具</h2><p>这里有一些由Clojure的社区创建的工具，可能会帮助你<br>在你努力写出地道的Clojure代码。</p>
<ul>
<li><a href="https://github.com/technomancy/slamhound" target="_blank" rel="external">Slamhound</a>是一种能自动从你的现有的代码生成合适的 <code>ns</code> 声明。</li>
<li><a href="https://github.com/jonase/kibit" target="_blank" rel="external">kibit</a> 是一个用于Clojure的静态代码分析器。<br><a href="https://github.com/clojure/core.logic" target="_blank" rel="external">core.logic</a> 为代码搜索可能存在一个更惯用模式函数或宏。   </li>
</ul>
<h1 id="u8D21_u732E"><a href="#u8D21_u732E" class="headerlink" title="贡献"></a>贡献</h1><p>本文中的所有内容都还没有最后定型，我很希望能够和所有对Clojure代码规范感兴趣的同仁一起编写此文，从而形成一份对社区有益的文档。</p>
<p>你可以随时创建讨论话题，或发送合并申请。我在这里提前表示感谢。</p>
<p>You can also support the style guide with financial<br>contributions via <a href="https://www.gittip.com/bbatsov" target="_blank" rel="external">gittip</a>.</p>
<p><a href="https://www.gittip.com/bbatsov" target="_blank" rel="external"><img src="https://rawgithub.com/twolfson/gittip-badge/0.2.0/dist/gittip.png" alt="Support via Gittip"></a></p>
<h1 id="u8BC1_u4E66"><a href="#u8BC1_u4E66" class="headerlink" title="证书"></a>证书</h1><p><img src="http://i.creativecommons.org/l/by/3.0/88x31.png" alt="创作共用许可"><br>这项工作是根据<br><a href="http://creativecommons.org/licenses/by/3.0/deed.en_US" target="_blank" rel="external">知识共享署名3.0 本地化许可协议 </a>许可。</p>
<h1 id="u5BA3_u4F20"><a href="#u5BA3_u4F20" class="headerlink" title="宣传"></a>宣传</h1><p>一份由社区驱动的代码规范如果得不到社区本身的支持和认同，那它就毫无意义了。微博转发这份指南，分享给你的朋友或同事。我们得到的每个注解、建议或意见都可以让这份指南变得更好一点。而我们想要拥有的是最好的指南，不是吗？</p>
<p>Cheers,<br><br><a href="https://twitter.com/bbatsov" target="_blank" rel="external">Bozhidar</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>title:  Clojure 代码规范（中文）<br>tags: </p>
<ul>
<li>clojure </li>
<li>代码规范</li>
<li>指南</li>
<li>风格</li>
<li>翻译<br>categories: Guide</li>
</ul>
<hr>
<h1 id="Clojure__u4EE3_u7801_u89C4_u8303"><a href="#Clojure__u4EE3_u7801_u89C4_u8303" class="headerlink" title="Clojure 代码规范"></a>Clojure 代码规范</h1><blockquote>
<p>Role models are important. <br/><br>– Officer Alex J. Murphy / RoboCop</p>
</blockquote>
<p>原文地址：<a href="https://github.com/bbatsov/clojure-style-guide">https://github.com/bbatsov/clojure-style-guide</a></p>
<p>这份Clojure代码规范旨在提供一系列的最佳实践，让现实工作中的Clojure程序员能够写出易于维护的代码，并能与他人协作和共享。一份反应真实需求的代码规范才能被人接收，而那些理想化的、甚至部分观点遭到程序员拒绝的代码规范注定不会长久——无论它有多出色。</p>
<p>这份规范由多个章节组成，每个章节包含一组相关的规则。我会尝试去描述每条规则背后的理念（过于明显的理念我就省略了）。</p>
<p>这些规则并不是我凭空想象的，它们出自于我作为一个专业软件开发工程师长久以来的工作积累，以及Clojure社区成员们的反馈和建议，还有各种广为流传的Clojure编程学习资源，如《Clojure Programming》、《The Joy of Clojure》等。</p>
<p>这份规范还处于编写阶段，部分章节有所缺失，内容并不完整；部分规则没有示例，或者示例还不能完全将其描述清楚。未来这些问题都会得到改进，只是请你了解这一情况。</p>
<p>你可以使用<a href="https://github.com/TechnoGate/transmuter">Transmuter</a>生成一份本规范的PDF或HTML格式的文档。</p>
<p>本指南的翻译可在以下几种语言中：</p>
<ul>
<li><a href="https://github.com/totakke/clojure-style-guide/blob/ja/README.md">Japanese</a></li>
<li><a href="https://github.com/kwakbab/clojure-style-guide/blob/master/README-koKO.md">Korean</a></li>
</ul>
<h2 id="u76EE_u5F55"><a href="#u76EE_u5F55" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="/#source-code-layout--organization">源代码的布局和组织结构</a>　</li>
<li><a href="/#syntax">语法</a></li>
<li><a href="/#naming">命名</a></li>
<li><a href="/#collections">集合</a></li>
<li><a href="/#mutation">可变</a></li>
<li><a href="/#strings">字符串</a></li>
<li><a href="/#exceptions">异常</a></li>
<li><a href="/#macros">宏</a></li>
<li><a href="/#comments">注释</a><ul>
<li><a href="/#comment-annotations">注释中的标识</a></li>
</ul>
</li>
<li><a href="/#existential">惯用法</a></li>
<li><a href="/#tooling">工具</a>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux/UNIX下使用ssh-keygen设置SSH无密码登录]]></title>
    <link href="http://notes.seirhsiao.com/2016/01/26/2014-05-08-ssh-password-free-login/"/>
    <id>http://notes.seirhsiao.com/2016/01/26/2014-05-08-ssh-password-free-login/</id>
    <published>2016-01-26T12:42:24.763Z</published>
    <updated>2016-01-26T12:42:24.763Z</updated>
    <content type="html"><![CDATA[<h3 id="u4E00_u3001SSH_u7B80_u4ECB"><a href="#u4E00_u3001SSH_u7B80_u4ECB" class="headerlink" title="一、SSH简介"></a>一、SSH简介</h3><p>SSH是一个专为远程登录会话和其他网络服务提供安全性的协议。<br>默认状态下SSH链接是需要密码认证的，可以通过添加系统认证（即公钥-私钥）的修改，修改后系统间切换可以避免密码输入和SSH认证。<br><a id="more"></a></p>
<h3 id="u4E8C_u3001_u516C_u94A5_u8BA4_u8BC1_u7684_u57FA_u672C_u601D_u60F3_uFF1A"><a href="#u4E8C_u3001_u516C_u94A5_u8BA4_u8BC1_u7684_u57FA_u672C_u601D_u60F3_uFF1A" class="headerlink" title="二、公钥认证的基本思想："></a>二、公钥认证的基本思想：</h3><p>对信息的加密和解密采用不同的key，这对key分别称作private key和public key，其中，public key存放在欲登录的服务器上，而private key为特定的客户机所持有。<br><!-- more --><br>当客户机向服务器发出建立安全连接的请求时，首先发送自己的public key，如果这个public key是被服务器所允许的，服务器就发送一个经过public key加密的随机数据给客户机，这个数据只能通过private key解密，客户机将解密后的信息发还给服务器，服务器验证正确后即确认客户机是可信任的，从而建立起一条安全的信息通道。</p>
<p>通过这种方式，客户机不需要向外发送自己的身份标志“private key”即可达到校验的目的，并且private key是不能通过public key反向推断出来的。这避免了网络窃听可能造成的密码泄露。客户机需要小心的保存自己的private key，以免被其他人窃取，一旦这样的事情发生，就需要各服务器更换受信的public key列表。</p>
<h3 id="u4E09_u3001_u5B9E_u9A8C_u7F51_u7EDC_u62D3_u6251_u56FE_u548C_u5B9E_u9A8C_u76EE_u7684"><a href="#u4E09_u3001_u5B9E_u9A8C_u7F51_u7EDC_u62D3_u6251_u56FE_u548C_u5B9E_u9A8C_u76EE_u7684" class="headerlink" title="三、实验网络拓扑图和实验目的"></a>三、实验网络拓扑图和实验目的</h3><ul>
<li><p>1、网络拓扑图<br>如下所示：<br><img src="/static/images/linux/ssh.jpg" alt="ssh"></p>
</li>
<li><p>2、实现目的<br>服务器1，服务器2，服务器3能实现彼此无密码登录。</p>
</li>
<li>3、补充说明<br>Linux下修改主机名的完整步骤如下：</li>
</ul>
<blockquote>
<ul>
<li><p>第一步：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname Server1</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二步：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修改<span class="regexp">/etc/</span>sysconfig<span class="regexp">/network中的hostname</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>第三步：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修改<span class="regexp">/etc/</span>hosts文件</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h3 id="u56DB_u3001_u65E0_u5BC6_u7801_u767B_u5F55_u5B9E_u73B0_u65B9_u5F0F"><a href="#u56DB_u3001_u65E0_u5BC6_u7801_u767B_u5F55_u5B9E_u73B0_u65B9_u5F0F" class="headerlink" title="四、无密码登录实现方式"></a>四、无密码登录实现方式</h3><p>1.用ssh-keygen创建公钥</p>
<ul>
<li><p>（1）在服务器1上执行下面的命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@Server1 ~]<span class="comment"># ssh-keygen -t rsa  -c "email@gmail.com"</span></span><br><span class="line">Generating public/private rsa key pair.  </span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key(/root/.ssh/id_rsa):  </span><br><span class="line">Created directory <span class="string">'/root/.ssh'</span>.  </span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):  </span><br><span class="line">Enter same passphrase again:  </span><br><span class="line">Your identification has been saved <span class="keyword">in</span>/root/.ssh/id_rsa.  </span><br><span class="line">Your public key has been saved <span class="keyword">in</span>/root/.ssh/id_rsa.pub.  </span><br><span class="line">The key fingerprint is:  </span><br><span class="line"><span class="number">7</span>b:aa:<span class="number">08</span>:a0:<span class="number">99</span>:<span class="built_in">fc</span>:d9:cc:d8:<span class="number">2</span>e:<span class="number">4</span>b:<span class="number">1</span>a:c0:<span class="number">6</span>b:da:e4root@Server1  </span><br><span class="line">The key<span class="string">'s randomart image is:  </span><br><span class="line">+--[ RSA 2048]----+  </span><br><span class="line">| |  </span><br><span class="line">| |  </span><br><span class="line">| |  </span><br><span class="line">|. |  </span><br><span class="line">|o. S |  </span><br><span class="line">|++. . |  </span><br><span class="line">|+=o. . . |  </span><br><span class="line">|o+=oB. o |  </span><br><span class="line">|..E==*... |  </span><br><span class="line">+-----------------+</span></span><br></pre></td></tr></table></figure>
<p>输入后，会提示创建.ssh/id_rsa、id_rsa.pub的文件，其中第一个为密钥，第二个为公钥。过程中会要求输入密码，为了ssh访问过程无须密码，可以直接回车 。</p>
</li>
<li><p>（2）补充说明：<br>ssh-keygen:生成秘钥<br>其中：<br>-t指定算法<br>-f 指定生成秘钥路径<br>-N 指定密码</p>
</li>
</ul>
<p>2.查看钥匙<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@Server1 ~]<span class="preprocessor"># ls -l .ssh  </span></span><br><span class="line">总用量 <span class="number">8</span>  </span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">1675</span> <span class="number">12</span>月 <span class="number">10</span> <span class="number">22</span>:<span class="number">20</span> id_rsa  </span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">394</span> <span class="number">12</span>月 <span class="number">10</span> <span class="number">22</span>:<span class="number">20</span> id_rsa.pub</span><br></pre></td></tr></table></figure></p>
<p>   可以发现 ssh目录下的两枚钥匙。</p>
<p>3.将公钥复制到被管理机器Server2和Server3下的.ssh目录下（先确保存在这个目录）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 .ssh]<span class="comment"># scp id_rsa.pubroot@192.168.1.3:~/.ssh/  </span></span><br><span class="line">The authenticity of host <span class="string">'192.168.1.3(192.168.1.3)'</span> can<span class="string">'t be established.  </span><br><span class="line">RSA key fingerprint is93:eb:f9:47:b1:f6:3f:b4:2e:21:c3:d5:ab:1d:ae:65.  </span><br><span class="line">Are you sure you want to continueconnecting (yes/no)? yes  </span><br><span class="line">Warning: Permanently added '</span><span class="number">192.168</span>.<span class="number">1.3</span><span class="string">'(RSA) to the list of known hosts.  </span><br><span class="line">root@192.168.1.3'</span>s password:  </span><br><span class="line">id_rsa.pub   </span><br><span class="line">[root@server1 .ssh]<span class="comment"># scp id_rsa.pubroot@192.168.1.4:~/.ssh/authorized_keys  </span></span><br><span class="line">The authenticity of host <span class="string">'192.168.1.4(192.168.1.4)'</span> can<span class="string">'t be established.  </span><br><span class="line">RSA key fingerprint is93:eb:f9:47:b1:f6:3f:b4:2e:21:c3:d5:ab:1d:ae:65.  </span><br><span class="line">Are you sure you want to continueconnecting (yes/no)? yes  </span><br><span class="line">Warning: Permanently added '</span><span class="number">192.168</span>.<span class="number">1.4</span><span class="string">'(RSA) to the list of known hosts.  </span><br><span class="line">root@192.168.1.4'</span>s password:  </span><br><span class="line">id_rsa.pub</span><br></pre></td></tr></table></figure></p>
<p>到Server2和Server3目录下执行下面的命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>4.设置文件和目录权限：<br>设置authorized_keys权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod <span class="number">600</span> authorized_keys</span><br></pre></td></tr></table></figure></p>
<p>设置.ssh目录权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod <span class="number">700</span> -R .ssh</span><br></pre></td></tr></table></figure></p>
<p>5.验证使用SSH IP地址的方式无密码访问<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 .ssh]<span class="comment"># ssh 192.168.1.3  </span></span><br><span class="line">Last login: Tue Dec <span class="number">10</span> <span class="number">22</span>:<span class="number">34</span>:<span class="number">02</span> <span class="number">2013</span></span><br></pre></td></tr></table></figure></p>
<p>6.主机名的方式无密码访问<br>我们在Server1上将Server2和Server3的IP地址解析为主机名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 .ssh]<span class="comment"># cat /etc/hosts  </span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.2</span> Server1  </span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.3</span> Server2  </span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.4</span> Server3</span><br></pre></td></tr></table></figure></p>
<p>我们试试下面这种ssh登录方式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 .ssh]<span class="comment"># ssh Server3  </span></span><br><span class="line">The authenticity of host <span class="string">'server3(192.168.1.4)'</span> can<span class="string">'t be established.  </span><br><span class="line">RSA key fingerprint is93:eb:f9:47:b1:f6:3f:b4:2e:21:c3:d5:ab:1d:ae:65.  </span><br><span class="line">Are you sure you want to continueconnecting (yes/no)? yes  </span><br><span class="line">Warning: Permanently added '</span>server3<span class="string">' (RSA)to the list of known hosts.  </span><br><span class="line">Last login: Tue Dec 10 22:34:08 2013</span></span><br></pre></td></tr></table></figure></p>
<h3 id="u4E94_u3001_u6CE8_u610F_uFF1A"><a href="#u4E94_u3001_u6CE8_u610F_uFF1A" class="headerlink" title="五、注意："></a>五、注意：</h3><ul>
<li>1、文件和目录的权限千万别设置成chmod 777.这个权限太大了，不安全，数字签名也不支持。</li>
<li>2、生成的rsa/dsa签名的公钥是给对方机器使用的。这个公钥内容还要拷贝到authorized_keys</li>
<li>3、linux之间的访问直接 ssh 机器ip</li>
<li>4、某个机器生成自己的RSA或者DSA的数字签名，将公钥给目标机器，然后目标机器接收后设定相关权限（公钥和authorized_keys权限），这个目标机就能被生成数字签名的机器无密码访问了</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u4E00_u3001SSH_u7B80_u4ECB"><a href="#u4E00_u3001SSH_u7B80_u4ECB" class="headerlink" title="一、SSH简介"></a>一、SSH简介</h3><p>SSH是一个专为远程登录会话和其他网络服务提供安全性的协议。<br>默认状态下SSH链接是需要密码认证的，可以通过添加系统认证（即公钥-私钥）的修改，修改后系统间切换可以避免密码输入和SSH认证。<br>]]>
    
    </summary>
    
      <category term="linux" scheme="http://notes.seirhsiao.com/tags/linux/"/>
    
      <category term="ssh" scheme="http://notes.seirhsiao.com/tags/ssh/"/>
    
      <category term="Linux" scheme="http://notes.seirhsiao.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GitHub 秘籍]]></title>
    <link href="http://notes.seirhsiao.com/2016/01/26/2013-07-12-github-cheat-sheet/"/>
    <id>http://notes.seirhsiao.com/2016/01/26/2013-07-12-github-cheat-sheet/</id>
    <published>2016-01-26T12:42:00.262Z</published>
    <updated>2016-01-26T12:42:00.262Z</updated>
    <content type="html"><![CDATA[<h1 id="GitHub_u79D8_u7C4D"><a href="#GitHub_u79D8_u7C4D" class="headerlink" title="GitHub秘籍"></a>GitHub秘籍 <a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external"><img src="https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg" alt="Awesome"></a></h1><p>Git 和 Github 秘籍，灵感来自于 <a href="https://github.com/holman" target="_blank" rel="external">Zach Holman</a> 在 2012 年 Aloha Ruby Conference 和 2013 年 WDCNZ 上所做的演讲：<a href="http://www.confreaks.com/videos/1229-aloharuby2012-git-and-github-secrets" target="_blank" rel="external">Git and GitHub Secrets</a>(<a href="https://speakerdeck.com/holman/git-and-github-secrets" target="_blank" rel="external">slides</a>) 和 <a href="https://vimeo.com/72955426" target="_blank" rel="external">More Git and GitHub Secrets</a>(<a href="https://speakerdeck.com/holman/more-git-and-github-secrets" target="_blank" rel="external">slides</a>)。</p>
<p><em>其他语言版本: <a href="/README.md">English</a>, <a href="/README.ko.md">한국어</a>, <a href="/README.ja.md">日本語</a>, <a href="/README.zh-cn.md">简体中文</a>, <a href="/README.zh-tw.md">正體中文</a>.</em></p>
<h1 id="u76EE_u5F55"><a href="#u76EE_u5F55" class="headerlink" title="目录"></a>目录</h1><ul>
<li><a href="/#github">GitHub</a><ul>
<li><a href="/#不比较空白字符">不比较空白字符</a></li>
<li><a href="/#调整-tab-字符所代表的空格数">调整 Tab 字符所代表的空格数</a></li>
<li><a href="/#查看某个用户的-commit-历史">查看某个用户的 Commit 历史</a></li>
<li><a href="/#仓库克隆">仓库克隆</a></li>
<li><a href="/#分支">分支</a><ul>
<li><a href="/#将某个分支与其他所有分支进行对比">将某个分支与其他所有分支进行对比</a></li>
<li><a href="/#比较分支">比较分支</a></li>
<li><a href="/#比较不同派生库的分支">比较不同派生库的分支</a></li>
</ul>
</li>
<li><a href="/#gists">Gists</a></li>
<li><a href="/#gitio">Git.io</a></li>
<li><a href="/#键盘快捷键">键盘快捷键</a></li>
<li><a href="/#整行高亮">整行高亮</a></li>
<li><a href="/#用-commit-信息关闭-issue">用 Commit 信息关闭 Issue</a></li>
<li><a href="/#链接其他仓库的-issue">链接其他仓库的 Issue</a></li>
<li><a href="/#锁定项目对话功能">锁定项目对话功能</a></li>
<li><a href="/#设置-ci-对每条-pull-request-都进行构建">设置 CI 对每条 Pull Request 都进行构建</a></li>
<li><a href="/#markdown-文件语法高亮">Markdown 文件语法高亮</a></li>
<li><a href="/#表情符">表情符</a></li>
<li><a href="/#图片--gif-动画">图片 / GIF 动画</a><ul>
<li><a href="/#在-github-wiki-中引用图片">在 GitHub Wiki 中引用图片</a></li>
</ul>
</li>
<li><a href="/#快速引用">快速引用</a></li>
<li><a href="/#粘贴剪贴板中的图片到评论">粘贴剪贴板中的图片到评论</a></li>
<li><a href="/#快速添加许可证文件">快速添加许可证文件</a></li>
<li><a href="/#任务列表">任务列表</a><ul>
<li><a href="/#markdown-文件中的任务列表">Markdown 文件中的任务列表</a></li>
</ul>
</li>
<li><a href="/#相对链接">相对链接</a></li>
<li><a href="/#github-pages-的元数据与插件支持">GitHub Pages 的元数据与插件支持</a></li>
<li><a href="/#查看-yaml-格式的元数据">查看 YAML 格式的元数据</a></li>
<li><a href="/#渲染表格数据">渲染表格数据</a></li>
<li><a href="/#撤销-pull-request">撤销 Pull Request</a></li>
<li><a href="/#diffs">Diffs</a><ul>
<li><a href="/#可渲染文档的diffs">可渲染文档的Diffs</a></li>
<li><a href="/#可比较的地图数据">可比较的地图数据</a></li>
<li><a href="/#在-diff-中展开查看更多的上下文">在 Diff 中展开查看更多的上下文</a></li>
<li><a href="/#获取-pull-request-的-diff-或-patch-文件">获取 Pull Request 的 diff 或 patch 文件</a></li>
<li><a href="/#显示图片以及比较图片">显示图片以及比较图片</a></li>
</ul>
</li>
<li><a href="/#hub">Hub</a></li>
<li><a href="/#贡献者指南">贡献者指南</a></li>
<li><a href="/#octicons">Octicons</a></li>
<li><a href="/#github-资源">GitHub 资源</a><ul>
<li><a href="/#github-相关演讲视频">GitHub 相关演讲视频</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/#git">Git</a><ul>
<li><a href="/#从工作区去除大量已删除文件">从工作区去除大量已删除文件</a></li>
<li><a href="/#上一个分支">上一个分支</a></li>
<li><a href="/#去除空白">去除空白</a></li>
<li><a href="/#检出-pull-requests">检出 Pull Requests</a></li>
<li><a href="/#没有任何改动的提交">没有任何改动的提交</a></li>
<li><a href="/#美化-git-status">美化 Git Status</a></li>
<li><a href="/#美化-git-log">美化 Git Log</a></li>
<li><a href="/#git-查询">Git 查询</a></li>
<li><a href="/#合并分支">合并分支</a></li>
<li><a href="/#修复有问题的提交以及自动合并">修复有问题的提交以及自动合并</a></li>
<li><a href="/#以网站方式查看本地仓库">以网站方式查看本地仓库</a></li>
<li><a href="/#git-配置">Git 配置</a><ul>
<li><a href="/#git-命令自定义别名">Git 命令自定义别名</a></li>
<li><a href="/#自动更正">自动更正</a></li>
<li><a href="/#颜色输出">颜色输出</a></li>
</ul>
</li>
<li><a href="/#git-资源">Git 资源</a><ul>
<li><a href="/#git-参考书籍">Git 参考书籍</a><a id="more"></a>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><h3 id="u4E0D_u6BD4_u8F83_u7A7A_u767D_u5B57_u7B26"><a href="#u4E0D_u6BD4_u8F83_u7A7A_u767D_u5B57_u7B26" class="headerlink" title="不比较空白字符"></a>不比较空白字符</h3></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>在任意 diff 页面的 UR L后加上 <code>?w=1</code>，可以去掉那些只是空白字符的改动，使你能更专注于代码改动。</p>
<p><img src="https://camo.githubusercontent.com/797184940defadec00393e6559b835358a863eeb/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f626c6f672f323031312f736563726574732f776869746573706163652e706e67" alt="Diff without whitespace"></p>
<p><a href="https://github.com/blog/967-github-secrets" target="_blank" rel="external"><em>详见 GitHub secrets.</em></a></p>
<h3 id="u8C03_u6574_Tab__u5B57_u7B26_u6240_u4EE3_u8868_u7684_u7A7A_u683C_u6570"><a href="#u8C03_u6574_Tab__u5B57_u7B26_u6240_u4EE3_u8868_u7684_u7A7A_u683C_u6570" class="headerlink" title="调整 Tab 字符所代表的空格数"></a>调整 Tab 字符所代表的空格数</h3><p>在 diff 或文件的 URL 后面加上 <code>?ts=4</code> ，这样当显示 tab 字符的长度时就会是 4 个空格的长度，不再是默认的 8 个空格。 <code>ts</code> 后面的数字还可以根据你个人的偏好进行修改。这个技巧不适用于 Gists，或者以 Raw 格式查看文件， 但有浏览器扩展插件可以帮你自动调整: <a href="https://chrome.google.com/webstore/detail/github-tab-size/ofjbgncegkdemndciafljngjbdpfmbkn" target="_blank" rel="external">Chrome 扩展</a> ， <a href="https://addons.opera.com/en/extensions/details/github-tab-size/" target="_blank" rel="external">Opera 扩展</a>。</p>
<p>下面以一个 Go 语言源文件为例，看看在 URL 里添加 <code>?ts=4</code> 参数的效果。添加前：</p>
<p><img src="http://i.imgur.com/GIT1Fr0.png" alt="Before, tab space example"></p>
<p>… 添加后的样子：</p>
<p><img src="http://i.imgur.com/70FL4H9.png" alt="After, tab space example"></p>
<h3 id="u67E5_u770B_u7528_u6237_u7684_u5168_u90E8_Commit__u5386_u53F2"><a href="#u67E5_u770B_u7528_u6237_u7684_u5168_u90E8_Commit__u5386_u53F2" class="headerlink" title="查看用户的全部 Commit 历史"></a>查看用户的全部 Commit 历史</h3><p>在 Commits 页面 URL 后加上 <code>?author={user}</code> 查看用户全部的提交。</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span>/<span class="regexp">/github.com/rails</span><span class="regexp">/rails/commits</span><span class="regexp">/master?author=dhh</span></span><br></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/S7AE29b.png" alt="DHH commit history"></p>
<p><a href="https://help.github.com/articles/differences-between-commit-views" target="_blank" rel="external"><em>深入了解提交视图之间的区别</em></a></p>
<h3 id="u4ED3_u5E93_u514B_u9686"><a href="#u4ED3_u5E93_u514B_u9686" class="headerlink" title="仓库克隆"></a>仓库克隆</h3><p>当克隆仓库时可以不要那个<code>.git</code>后缀。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/tiimgreen/github-cheat-sheet</span><br></pre></td></tr></table></figure>
<p><a href="http://git-scm.com/docs/git-clone" target="_blank" rel="external"><em>更多对 Git <code>clone</code> 命令的介绍.</em></a></p>
<p>###分支</p>
<p>####将某个分支与其他所有分支进行对比</p>
<p>当你查看某个仓库的分支（Branches）页面（紧挨着 Commits 链接）时</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">https:</span><span class="comment">//github.com/&#123;user&#125;/&#123;repo&#125;/branches</span></span><br></pre></td></tr></table></figure>
<p>你会看到一个包含所有未合并的分支的列表。</p>
<p>在这里你可以访问分支比较页面或删除某个分支。</p>
<p><img src="http://i.imgur.com/0FEe30z.png" alt="Compare branches not merged into master in rails/rails repo - https://github.com/rails/rails/branches"></p>
<h4 id="u6BD4_u8F83_u5206_u652F"><a href="#u6BD4_u8F83_u5206_u652F" class="headerlink" title="比较分支"></a>比较分支</h4><p>如果要在 GitHub 上直接比较两个分支，可以使用如下形式的 URL ：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/<span class="list">&#123;user&#125;</span>/<span class="list">&#123;repo&#125;</span>/compare/<span class="list">&#123;range&#125;</span></span><br></pre></td></tr></table></figure>
<p>其中 <code>{range} = master...4-1-stable</code></p>
<p>例如：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span>/<span class="regexp">/github.com/rails</span><span class="regexp">/rails/compare</span><span class="regexp">/master...4-1-stable</span></span><br></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/tIRCOsK.png" alt="Rails branch compare example"></p>
<p><code>{range}</code> 参数还可以使用下面的形式:</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/rails/rails/compare/<span class="literal">master</span>@&#123;<span class="number">1</span>.day.ago&#125;...<span class="keyword">master</span></span><br><span class="line"><span class="title">https</span>://github.com/rails/rails/compare/<span class="literal">master</span>@&#123;<span class="number">2014</span>-<span class="number">10</span>-<span class="number">04</span>&#125;...<span class="literal">master</span></span><br></pre></td></tr></table></figure>
<p><em>日期格式 <code>YYYY-MM-DD</code></em></p>
<p><img src="http://i.imgur.com/5dtzESz.png" alt="Another compare example"></p>
<p>在 <code>diff</code> 和 <code>patch</code> 页面里也可以比较分支：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span>/<span class="regexp">/github.com/rails</span><span class="regexp">/rails/compare</span><span class="regexp">/master...4-1-stable.diff</span><br><span class="line">https:/</span><span class="regexp">/github.com/rails</span><span class="regexp">/rails/compare</span><span class="regexp">/master...4-1-stable.patch</span></span><br></pre></td></tr></table></figure>
<p><a href="https://help.github.com/articles/comparing-commits-across-time" target="_blank" rel="external"><em>了解更多关于基于时间的 Commit 比较.</em></a></p>
<h4 id="u6BD4_u8F83_u4E0D_u540C_u6D3E_u751F_u5E93_u7684_u5206_u652F"><a href="#u6BD4_u8F83_u4E0D_u540C_u6D3E_u751F_u5E93_u7684_u5206_u652F" class="headerlink" title="比较不同派生库的分支"></a>比较不同派生库的分支</h4><p>想要对派生仓库（Forked Repository）之间的分支进行比较，可以使用如下的 URL：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/user/repo/compare/<span class="list">&#123;foreign-user&#125;</span>:<span class="list">&#123;branch&#125;</span>...<span class="list">&#123;own-branch&#125;</span></span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http<span class="variable">s:</span>//github.<span class="keyword">com</span>/rails/rails/compare/byroo<span class="variable">t:master</span>...master</span><br></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/Q1W6qcB.png" alt="Forked branch compare"></p>
<h3 id="Gists"><a href="#Gists" class="headerlink" title="Gists"></a>Gists</h3><p><a href="https://gist.github.com/" target="_blank" rel="external">Gists</a> 方便我们管理代码片段，不必使用功能齐全的仓库。</p>
<p><img src="http://i.imgur.com/VkKI1LC.png?1" alt="Gist"></p>
<p>Gist 的 URL 后加上 <code>.pibb</code>（<a href="https://gist.github.com/tiimgreen/10545817.pibb" target="_blank" rel="external">像这样</a>）可以得到便于嵌入到其他网站 的 HTML 代码。</p>
<p>Gists 可以像任何标准仓库一样被克隆。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://gist.github.com/tiimgreen/<span class="number">10545817</span></span><br></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/BcFzabp.png" alt="Gists"></p>
<p>这意味着你可以像 Github 仓库一样修改和更新 Gists :</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit</span><br><span class="line">$ git push</span><br><span class="line">Username <span class="keyword">for</span> <span class="string">'https://gist.github.com'</span>:</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">'https://tiimgreen@gist.github.com'</span>:</span><br></pre></td></tr></table></figure>
<p>但是， Gists 不支持目录。所有文件都必须添加在仓库的根目录下。<br><a href="https://help.github.com/articles/creating-gists" target="_blank" rel="external"><em>进一步了解如何创建 Gists.</em></a></p>
<h3 id="Git-io"><a href="#Git-io" class="headerlink" title="Git.io"></a>Git.io</h3><p><a href="http://git.io" target="_blank" rel="external">Git.io</a>是 Github 的短网址服务。</p>
<p><img src="http://i.imgur.com/6JUfbcG.png?1" alt="Git.io"></p>
<p>你可以通过 Curl 命令以普通 HTTP 协议使用它：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ curl -i http://git.io -F <span class="string">"url=https://github.com/..."</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">201</span> Created</span><br><span class="line">Location: http://git.io/abc123</span><br><span class="line"></span><br><span class="line">$ curl -i http://git.io/abc123</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">302</span> Found</span><br><span class="line">Location: https://github.com/...</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/blog/985-git-io-github-url-shortener" target="_blank" rel="external"><em>进一步了解 Git.io.</em></a></p>
<h3 id="u952E_u76D8_u5FEB_u6377_u952E"><a href="#u952E_u76D8_u5FEB_u6377_u952E" class="headerlink" title="键盘快捷键"></a>键盘快捷键</h3><p>在仓库页面上提供了快捷键方便快速导航。</p>
<ul>
<li>按 <code>t</code> 键打开一个文件浏览器。</li>
<li>按 <code>w</code> 键打开分支选择菜单。</li>
<li>按 <code>s</code> 键聚焦光标到当前仓库的搜索框。此时按退格键就会从搜索当前仓库切换到搜索整个 Github 网站。</li>
<li>按 <code>l</code> 键编辑 Issue 列表页的标签。</li>
<li><strong>查看文件内容时</strong>（如：<code>https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.md</code>），按 <code>y</code> 键将会冻结这个页面，这样就算代码被修改了也不会影响你当前看到的。</li>
</ul>
<p>按<code>?</code>查看当前页面支持的快捷键列表：</p>
<p><img src="http://i.imgur.com/y5ZfNEm.png" alt="Keyboard shortcuts"></p>
<p><a href="https://help.github.com/articles/search-syntax/" target="_blank" rel="external"><em>进一步了解可用的搜索语法.</em></a></p>
<h3 id="u6574_u884C_u9AD8_u4EAE"><a href="#u6574_u884C_u9AD8_u4EAE" class="headerlink" title="整行高亮"></a>整行高亮</h3><p>在代码文件地址 URL 后加上<code>#L52</code>或者单击行号 52 都会将第 52 行代码高亮显示。</p>
<p>多行高亮也可以，比如用<code>#L53-L60</code>选择范围，或者按住 <code>shift</code> 键，然后再点击选择的两行。</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span>/<span class="regexp">/github.com/rails</span><span class="regexp">/rails/blob</span><span class="regexp">/master/activemodel</span><span class="regexp">/lib/active</span>_model.rb<span class="comment">#L53-L60</span></span><br></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/8AhjrCz.png" alt="整行高亮"></p>
<h3 id="u7528_Commit__u4FE1_u606F_u5173_u95ED_Issue"><a href="#u7528_Commit__u4FE1_u606F_u5173_u95ED_Issue" class="headerlink" title="用 Commit 信息关闭 Issue"></a>用 Commit 信息关闭 Issue</h3><p>如果某个提交修复了一个 Issue，当提交到 master 分支时，提交信息里可以使用 <code>fix/fixes/fixed</code>, <code>close/closes/closed</code> 或者 <code>resolve/resolves/resolved</code> 等关键词，后面再跟上 Issue 号，这样就会关闭这个 Issue 。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"Fix screwup, fixes #12"</span></span><br></pre></td></tr></table></figure>
<p>这将会关闭 Issue #12，并且在 Issue 讨论列表里关联引用这次提交。</p>
<p><img src="http://i.imgur.com/Uh1gZdx.png" alt="Closing Repo"></p>
<p><a href="https://help.github.com/articles/closing-issues-via-commit-messages" target="_blank" rel="external"><em>进一步了解通过提交信息关闭 Issue.</em></a></p>
<h3 id="u94FE_u63A5_u5176_u4ED6_u4ED3_u5E93_u7684_Issue"><a href="#u94FE_u63A5_u5176_u4ED6_u4ED3_u5E93_u7684_Issue" class="headerlink" title="链接其他仓库的 Issue"></a>链接其他仓库的 Issue</h3><p>如果你想引用到同一个仓库中的一个 Issue，只需使用井号 <code>#</code> 加上 Issue 号，这样就会自动创建到此 Issue 的链接。</p>
<p>要链接到其他仓库的 Issue ，就使用<code>{user}/{repo}#ISSUE_NUMBER</code>的方式，例如<code>tiimgreen/toc#12</code>。</p>
<p><img src="https://camo.githubusercontent.com/447e39ab8d96b553cadc8d31799100190df230a8/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f626c6f672f323031312f736563726574732f7265666572656e6365732e706e67" alt="Cross-Link Issues"></p>
<h3 id="u9501_u5B9A_u9879_u76EE_u5BF9_u8BDD_u529F_u80FD"><a href="#u9501_u5B9A_u9879_u76EE_u5BF9_u8BDD_u529F_u80FD" class="headerlink" title="锁定项目对话功能"></a>锁定项目对话功能</h3><p>现在仓库的管理员和合作者可以将 Pull Requests 和 Issue 的评论功能关闭。</p>
<p><img src="https://cloud.githubusercontent.com/assets/2723/3221693/bf54dd44-f00d-11e3-8eb6-bb51e825bc2c.png" alt="Lock conversation"></p>
<p>这样，不是项目合作者的用户就不能在这个项目上使用评论功能。</p>
<p><img src="https://cloud.githubusercontent.com/assets/2723/3221775/d6e513b0-f00e-11e3-9721-2131cb37c906.png" alt="Comments locked"></p>
<p><a href="https://github.com/blog/1847-locking-conversations" target="_blank" rel="external"><em>进一步了解对话锁定功能.</em></a></p>
<h3 id="u8BBE_u7F6E_CI__u5BF9_u6BCF_u6761_Pull_Request__u90FD_u8FDB_u884C_u6784_u5EFA"><a href="#u8BBE_u7F6E_CI__u5BF9_u6BCF_u6761_Pull_Request__u90FD_u8FDB_u884C_u6784_u5EFA" class="headerlink" title="设置 CI 对每条 Pull Request 都进行构建"></a>设置 CI 对每条 Pull Request 都进行构建</h3><p>如果配置正确，<a href="https://travis-ci.org/" target="_blank" rel="external">Travis CI</a> 会为每个你收到的 Pull Request 执行构建，就像每次提交也会触发构建一样。想了解更多关于 Travis CI 的信息，请参考 <a href="http://docs.travis-ci.com/user/getting-started/" target="_blank" rel="external">Travis CI入门</a>。</p>
<p><a href="https://github.com/octokit/octokit.rb/pull/452" target="_blank" rel="external"><img src="https://cloud.githubusercontent.com/assets/1687642/2700187/3a88838c-c410-11e3-9a46-e65e2a0458cd.png" alt="Travis CI status"></a></p>
<p><a href="https://github.com/blog/1227-commit-status-api" target="_blank" rel="external"><em>进一步了解提交状态 API.</em></a></p>
<h3 id="Markdown__u6587_u4EF6_u8BED_u6CD5_u9AD8_u4EAE"><a href="#Markdown__u6587_u4EF6_u8BED_u6CD5_u9AD8_u4EAE" class="headerlink" title="Markdown 文件语法高亮"></a>Markdown 文件语法高亮</h3><p>例如，可以像下面这样在你的 Markdown 文件里为 Ruby 代码添加语法高亮：</p>
<pre><code><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'tabbit'</span></span><br><span class="line">table = <span class="constant">Tabbit</span>.new(<span class="string">'Name'</span>, <span class="string">'Email'</span>)</span><br><span class="line">table.add_row(<span class="string">'Tim Green'</span>, <span class="string">'tiimgreen@gmail.com'</span>)</span><br><span class="line">puts table.to_s</span><br></pre></td></tr></table></figure>
</code></pre><p>效果如下：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'tabbit'</span></span><br><span class="line">table = <span class="constant">Tabbit</span>.new(<span class="string">'Name'</span>, <span class="string">'Email'</span>)</span><br><span class="line">table.add_row(<span class="string">'Tim Green'</span>, <span class="string">'tiimgreen@gmail.com'</span>)</span><br><span class="line">puts table.to_s</span><br></pre></td></tr></table></figure>
<p>Github使用 <a href="https://github.com/github/linguist" target="_blank" rel="external">Linguist</a> 做语言识别和语法高亮。你可以仔细阅读 <a href="https://github.com/github/linguist/blob/master/lib/linguist/languages.yml" target="_blank" rel="external">languages YAML file</a>，了解有哪些可用的关键字。</p>
<p><a href="https://help.github.com/articles/github-flavored-markdown" target="_blank" rel="external"><em>进一步了解 GitHub Flavored Markdown.</em></a></p>
<h3 id="u8868_u60C5_u7B26"><a href="#u8868_u60C5_u7B26" class="headerlink" title="表情符"></a>表情符</h3><p>可以在 Pull Requests, Issues, 提交消息, Markdown 文件里加入表情符。使用方法 <code>:name_of_emoji:</code></p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">:smile:</span></span><br></pre></td></tr></table></figure>
<p>将输出一个笑脸：</p>
<p>:smile:</p>
<p>Github 支持的完整表情符号列表详见<a href="http://www.emoji-cheat-sheet.com/" target="_blank" rel="external">emoji-cheat-sheet.com</a> 或 <a href="https://github.com/scotch-io/All-Github-Emoji-Icons" target="_blank" rel="external">scotch-io/All-Github-Emoji-Icons</a>。</p>
<p>Github 上使用最多的5个表情符号是：</p>
<ol>
<li><code>:shipit:</code></li>
<li><code>:sparkles:</code></li>
<li><code>:-1:</code></li>
<li><code>:+1:</code></li>
<li><code>:clap:</code></li>
</ol>
<h3 id="u56FE_u7247_/_GIF__u52A8_u753B"><a href="#u56FE_u7247_/_GIF__u52A8_u753B" class="headerlink" title="图片 / GIF 动画"></a>图片 / GIF 动画</h3><p>注释和README等文件里也可以使用图片和 GIF 动画：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="link_label">Alt Text</span>](<span class="link_url">http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif</span>)</span><br></pre></td></tr></table></figure>
<p>仓库中的图片可以被直接引用：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="link_label">Alt Text</span>](<span class="link_url">https://github.com/&#123;user&#125;/&#123;repo&#125;/raw/master/path/to/image.gif</span>)</span><br></pre></td></tr></table></figure>
<p><img src="http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif" alt="Peter don&#39;t care"></p>
<p>所有图片都缓存在 Github，不用担心你的站点不能访问时就看不到图片了。</p>
<h4 id="u5728_GitHub_Wiki__u4E2D_u5F15_u7528_u56FE_u7247"><a href="#u5728_GitHub_Wiki__u4E2D_u5F15_u7528_u56FE_u7247" class="headerlink" title="在 GitHub Wiki 中引用图片"></a>在 GitHub Wiki 中引用图片</h4><p>有多种方法可以在 Wiki 页面里嵌入图片。既可以像上一条里那样使用标准的 Markdown 语法，也可以像下面这样指定图片的高度或宽度：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif | height = 100px ]]</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="http://i.imgur.com/J5bMf7S.png" alt="Just a screenshot"></p>
<h3 id="u5FEB_u901F_u5F15_u7528"><a href="#u5FEB_u901F_u5F15_u7528" class="headerlink" title="快速引用"></a>快速引用</h3><p>在主题评论中引用之前某个人所说的，只需选中文本，然后按 <code>r</code> 键，想要的就会以引用的形式复制到你的输入框里。</p>
<p><img src="https://f.cloud.github.com/assets/296432/124483/b0fa6204-6ef0-11e2-83c3-256c37fa7abc.gif" alt="Quick Quote"></p>
<p><a href="https://github.com/blog/1399-quick-quotes" target="_blank" rel="external"><em>进一步了解快速引用.</em></a></p>
<h3 id="u7C98_u8D34_u526A_u8D34_u677F_u4E2D_u7684_u56FE_u7247_u5230_u8BC4_u8BBA"><a href="#u7C98_u8D34_u526A_u8D34_u677F_u4E2D_u7684_u56FE_u7247_u5230_u8BC4_u8BBA" class="headerlink" title="粘贴剪贴板中的图片到评论"></a>粘贴剪贴板中的图片到评论</h3><p><em>（仅适用于 Chrome 浏览器）</em></p>
<p>当截屏图片复制到剪贴板后（mac 上用 <code>cmd-ctrl-shift-4</code>），你可以用(<code>cmd-v / ctrl-v</code>)把图片粘贴到评论框里，然后它就会自动上传到 Github。</p>
<p><img src="https://cloud.githubusercontent.com/assets/39191/5794265/39c9b65a-9f1b-11e4-9bc7-04e41f59ea5f.png" alt="Pasting Clipboard Image to Comments"></p>
<p><a href="https://help.github.com/articles/issue-attachments" target="_blank" rel="external"><em>进一步了解在 issue 中使用附件</em></a></p>
<h3 id="u5FEB_u901F_u6DFB_u52A0_u8BB8_u53EF_u8BC1_u6587_u4EF6"><a href="#u5FEB_u901F_u6DFB_u52A0_u8BB8_u53EF_u8BC1_u6587_u4EF6" class="headerlink" title="快速添加许可证文件"></a>快速添加许可证文件</h3><p>创建一个仓库时，Github会为你提供一个预置的软件许可列表：</p>
<p><img src="http://i.imgur.com/Chqj4Fg.png" alt="License"></p>
<p>对于已有的仓库，可以通过 web 界面创建文件来添加软件许可。输入<code>LICENSE</code>作为文件名后，同样可以从预置的列表中选择一个作为模板。</p>
<p><img src="http://i.imgur.com/fTjQict.png" alt="License"></p>
<p>这个技巧也适用于 <code>.gitignore</code> 文件。</p>
<p><a href="https://help.github.com/articles/open-source-licensing" target="_blank" rel="external"><em>进一步了解开源许可证</em></a></p>
<h3 id="u4EFB_u52A1_u5217_u8868"><a href="#u4EFB_u52A1_u5217_u8868" class="headerlink" title="任务列表"></a>任务列表</h3><p>Issues 和 Pull requests 里可以添加复选框，语法如下（注意空白符）：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> [ ] <span class="constant">Be</span> awesome</span><br><span class="line"></span>-<span class="ruby"> [ ] <span class="constant">Prepare</span> dinner</span><br><span class="line"></span>  -<span class="ruby"> [ ] <span class="constant">Research</span> recipe</span><br><span class="line"></span>  -<span class="ruby"> [ ] <span class="constant">Buy</span> ingredients</span><br><span class="line"></span>  -<span class="ruby"> [ ] <span class="constant">Cook</span> recipe</span><br><span class="line"></span>-<span class="ruby"> [ ] <span class="constant">Sleep</span></span></span><br></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/jJBXhsY.png" alt="Task List"></p>
<p>当项目被选中时，它对应的 Markdown 源码也被更新了：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> [x] <span class="constant">Be</span> awesome</span><br><span class="line"></span>-<span class="ruby"> [ ] <span class="constant">Prepare</span> dinner</span><br><span class="line"></span>  -<span class="ruby"> [x] <span class="constant">Research</span> recipe</span><br><span class="line"></span>  -<span class="ruby"> [x] <span class="constant">Buy</span> ingredients</span><br><span class="line"></span>  -<span class="ruby"> [ ] <span class="constant">Cook</span> recipe</span><br><span class="line"></span>-<span class="ruby"> [ ] <span class="constant">Sleep</span></span></span><br></pre></td></tr></table></figure>
<p><a href="https://help.github.com/articles/writing-on-github#task-lists" target="_blank" rel="external"><em>进一步了解任务列表.</em></a></p>
<h4 id="Markdown__u6587_u4EF6_u4E2D_u7684_u4EFB_u52A1_u5217_u8868"><a href="#Markdown__u6587_u4EF6_u4E2D_u7684_u4EFB_u52A1_u5217_u8868" class="headerlink" title="Markdown 文件中的任务列表"></a>Markdown 文件中的任务列表</h4><p>在完全适配Markdown语法的文件中可以使用以下语法加入一个<strong>只读</strong>的任务列表</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> [ ] <span class="constant">Mercury</span></span><br><span class="line"></span>-<span class="ruby"> [x] <span class="constant">Venus</span></span><br><span class="line"></span>-<span class="ruby"> [x] <span class="constant">Earth</span></span><br><span class="line"></span>  -<span class="ruby"> [x] <span class="constant">Moon</span></span><br><span class="line"></span>-<span class="ruby"> [x] <span class="constant">Mars</span></span><br><span class="line"></span>  -<span class="ruby"> [ ] <span class="constant">Deimos</span></span><br><span class="line"></span>  -<span class="ruby"> [ ] <span class="constant">Phobos</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>[ ] Mercury</li>
<li>[x] Venus</li>
<li>[x] Earth<ul>
<li>[x] Moon</li>
</ul>
</li>
<li>[x] Mars<ul>
<li>[ ] Deimos</li>
<li>[ ] Phobos</li>
</ul>
</li>
</ul>
<p><a href="https://github.com/blog/1825-task-lists-in-all-markdown-documents" target="_blank" rel="external"><em>进一步了解 Markdown 文件中的任务列表</em></a></p>
<h3 id="u76F8_u5BF9_u94FE_u63A5"><a href="#u76F8_u5BF9_u94FE_u63A5" class="headerlink" title="相对链接"></a>相对链接</h3><p>Markdown文件里链接到内部内容时推荐使用相对链接。</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="link_label">Link to a header</span>](<span class="link_url">#awesome-section</span>)</span><br><span class="line">[<span class="link_label">Link to a file</span>](<span class="link_url">docs/readme</span>)</span><br></pre></td></tr></table></figure>
<p>绝对链接会在 URL 改变时（例如重命名仓库、用户名改变，建立分支项目）被更新。使用相对链接能够保证你的文档不受此影响。</p>
<p><a href="https://help.github.com/articles/relative-links-in-readmes" target="_blank" rel="external"><em>进一步了解相对链接.</em></a></p>
<h3 id="GitHub_Pages__u7684_u5143_u6570_u636E_u4E0E_u63D2_u4EF6_u652F_u6301"><a href="#GitHub_Pages__u7684_u5143_u6570_u636E_u4E0E_u63D2_u4EF6_u652F_u6301" class="headerlink" title="GitHub Pages 的元数据与插件支持"></a>GitHub Pages 的元数据与插件支持</h3><p>在 Jekyll 页面和文章里，仓库信息可在 <code>site.github</code> 命名空间下找到，也可以显示出来，例如，使用 <code></code>显示项目标题。</p>
<p>Jemoji 和 jekyll-mentions 插件为你的 Jekyll 文章和页面增加了<a href="/#emojis">emoji</a>和<a href="https://github.com/blog/821" target="_blank" rel="external">@mentions</a>功能。</p>
<p><a href="https://github.com/blog/1797-repository-metadata-and-plugin-support-for-github-pages" target="_blank" rel="external"><em>了解更多 GitHub Pages 的元数据和插件支持.</em></a></p>
<h3 id="u67E5_u770B_YAML__u683C_u5F0F_u7684_u5143_u6570_u636E"><a href="#u67E5_u770B_YAML__u683C_u5F0F_u7684_u5143_u6570_u636E" class="headerlink" title="查看 YAML 格式的元数据"></a>查看 YAML 格式的元数据</h3><p>许多博客站点，比如基于 <a href="http://jekyllrb.com/" target="_blank" rel="external">Jekyll</a>的<a href="http://pages.github.com/" target="_blank" rel="external">GitHub Pages</a> ，都依赖于一些文章头部的 YAML 格式的元数据。 Github 会将其渲染成一个水平表格，方便阅读。</p>
<p><img src="https://camo.githubusercontent.com/47245aa16728e242f74a9a324ce0d24c0b916075/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f36343035302f313232383236372f65303439643063362d323761302d313165332d396464382d6131636432323539393334342e706e67" alt="YAML metadata"></p>
<p><a href="https://github.com/blog/1647-viewing-yaml-metadata-in-your-documents" target="_blank" rel="external"><em>进一步了解 在文档里查看 YAML 元数据.</em></a></p>
<h3 id="u6E32_u67D3_u8868_u683C_u6570_u636E"><a href="#u6E32_u67D3_u8868_u683C_u6570_u636E" class="headerlink" title="渲染表格数据"></a>渲染表格数据</h3><p>GitHub 支持将 <code>.csv</code> (逗号分隔)和 <code>.tsv</code> (制表符分隔)格式的文件渲染成表格数据。</p>
<p><img src="https://camo.githubusercontent.com/1b6dd0157ffb45d9939abf14233a0cb13b3b4dfe/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f3238323735392f3937363436322f33323038336463652d303638642d313165332d393262322d3566323863313061353035392e706e67" alt="Tabular data"></p>
<p><a href="https://github.com/blog/1601-see-your-csvs" target="_blank" rel="external"><em>进一步了解渲染表格数据.</em></a></p>
<h3 id="u64A4_u9500_Pull_Request"><a href="#u64A4_u9500_Pull_Request" class="headerlink" title="撤销 Pull Request"></a>撤销 Pull Request</h3><p>合并一个 Pull Request 之后，你可能会反悔：要么是这次 Pull Request 没什么用处，要么是还不到合并的时候。</p>
<p>此时可以通过 Pull Request 中的 Revert 按钮来撤销一个已合并的 Pull Request 中的 commit。按下按钮后将自动生成一个进行逆操作的 Pull Request。</p>
<p><img src="https://camo.githubusercontent.com/0d3350caf2bb1cba53123ffeafc00ca702b1b164/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f68656c702f70756c6c5f72657175657374732f7265766572742d70756c6c2d726571756573742d6c696e6b2e706e67" alt="Revert button"></p>
<p><a href="https://github.com/blog/1857-introducing-the-revert-button" target="_blank" rel="external">*进一步了解“撤销”按钮</a></p>
<h3 id="Diffs"><a href="#Diffs" class="headerlink" title="Diffs"></a>Diffs</h3><h4 id="u53EF_u6E32_u67D3_u6587_u6863_u7684Diffs"><a href="#u53EF_u6E32_u67D3_u6587_u6863_u7684Diffs" class="headerlink" title="可渲染文档的Diffs"></a>可渲染文档的Diffs</h4><p>Commit 和 Pull Request 里包含有 Github 支持的可渲染文档（比如 Markdown）会提供<em>source</em> 和 <em>rendered</em> 两个视图功能。</p>
<p><img src="https://github-images.s3.amazonaws.com/help/repository/rendered_prose_diff.png" alt="Source / Rendered view"></p>
<p>点击 “rendered” 按钮，看看改动在渲染后的显示效果。当你添加、删除或修改文本时，渲染纯文本视图非常方便。</p>
<p><img src="https://f.cloud.github.com/assets/17715/2003056/3997edb4-862b-11e3-90be-5e9586edecd7.png" alt="Rendered Prose Diffs"></p>
<p><a href="https://github.com/blog/1784-rendered-prose-diffs" target="_blank" rel="external"><em>进一步了解渲染纯文本视图Diffs.</em></a></p>
<h4 id="u53EF_u6BD4_u8F83_u7684_u5730_u56FE_u6570_u636E"><a href="#u53EF_u6BD4_u8F83_u7684_u5730_u56FE_u6570_u636E" class="headerlink" title="可比较的地图数据"></a>可比较的地图数据</h4><p>当你在GitHub上查看一个包含地理数据的 commit 或 pull request时，Github 将以可视化的方式对比版本之间的差异。</p>
<p><a href="https://github.com/benbalter/congressional-districts/commit/2233c76ca5bb059582d796f053775d8859198ec5" target="_blank" rel="external"><img src="https://f.cloud.github.com/assets/282759/2090660/63f2e45a-8e97-11e3-9d8b-d4c8078b004e.gif" alt="Diffable Maps"></a></p>
<p><a href="https://github.com/blog/1772-diffable-more-customizable-maps" target="_blank" rel="external"><em>进一步了解可比较的地图数据.</em></a></p>
<h4 id="u5728_Diff__u4E2D_u5C55_u5F00_u67E5_u770B_u66F4_u591A_u7684_u4E0A_u4E0B_u6587"><a href="#u5728_Diff__u4E2D_u5C55_u5F00_u67E5_u770B_u66F4_u591A_u7684_u4E0A_u4E0B_u6587" class="headerlink" title="在 Diff 中展开查看更多的上下文"></a>在 Diff 中展开查看更多的上下文</h4><p>你可以通过点击 diff 边栏里的 <em>unfold</em> 按钮来多显示几行上下文。你可以一直点击 <em>unfold</em> 按钮直到显示了文件的全部内容。这个功能在所有 GitHub 的 diff 功能中都可以使用。</p>
<p><img src="https://f.cloud.github.com/assets/22635/1610539/863c1f64-5584-11e3-82bf-151b406a272f.gif" alt="Expanding Context in Diffs"></p>
<p><a href="https://github.com/blog/1705-expanding-context-in-diffs" target="_blank" rel="external"><em>进一步了解展开 Diff 上下文.</em></a></p>
<h4 id="u83B7_u53D6_Pull_Request__u7684_diff__u6216_patch__u6587_u4EF6"><a href="#u83B7_u53D6_Pull_Request__u7684_diff__u6216_patch__u6587_u4EF6" class="headerlink" title="获取 Pull Request 的 diff 或 patch 文件"></a>获取 Pull Request 的 diff 或 patch 文件</h4><p>在 Pull Request 的 URL 后面加上 <code>.diff</code> 或 <code>.patch</code> 的扩展名就可以得到它的 diff 或 patch 文件，例如：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span>/<span class="regexp">/github.com/tiimgreen</span><span class="regexp">/github-cheat-sheet/pull</span><span class="regexp">/15</span><br><span class="line">https:/</span><span class="regexp">/github.com/tiimgreen</span><span class="regexp">/github-cheat-sheet/pull</span><span class="regexp">/15.diff</span><br><span class="line">https:/</span><span class="regexp">/github.com/tiimgreen</span><span class="regexp">/github-cheat-sheet/pull</span><span class="regexp">/15.patch</span></span><br></pre></td></tr></table></figure>
<p><code>.diff</code> 扩展会使用普通文本格式显示如下内容：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/README.md b/README.md</span><br><span class="line">index 88fcf69..8614873 100644</span><br><span class="line"><span class="horizontal_rule">--- a/README.md</span></span><br><span class="line">+++ b/README.md</span><br><span class="line">@@ -28,6 +28,7 @@ All the hidden and not hidden features of Git and GitHub. This cheat sheet was i</span><br><span class="line"> - [<span class="link_label">Merged Branches</span>](<span class="link_url">#merged-branches</span>)</span><br><span class="line"> - [<span class="link_label">Quick Licensing</span>](<span class="link_url">#quick-licensing</span>)</span><br><span class="line"> - [<span class="link_label">TODO Lists</span>](<span class="link_url">#todo-lists</span>)</span><br><span class="line">+- [<span class="link_label">Relative Links</span>](<span class="link_url">#relative-links</span>)</span><br><span class="line"> - [<span class="link_label">.gitconfig Recommendations</span>](<span class="link_url">#gitconfig-recommendations</span>)</span><br><span class="line"><span class="code">     - [Aliases](#aliases)</span></span><br><span class="line"><span class="code">     - [Auto-correct](#auto-correct)</span></span><br><span class="line">@@ -381,6 +382,19 @@ When they are clicked, they will be updated in the pure Markdown:</span><br><span class="line"> - [ ] Sleep</span><br><span class="line"></span><br><span class="line">(...)</span><br></pre></td></tr></table></figure>
<h4 id="u663E_u793A_u56FE_u7247_u4EE5_u53CA_u6BD4_u8F83_u56FE_u7247"><a href="#u663E_u793A_u56FE_u7247_u4EE5_u53CA_u6BD4_u8F83_u56FE_u7247" class="headerlink" title="显示图片以及比较图片"></a>显示图片以及比较图片</h4><p>GitHub 可以显示包括 PNG、JPG、GIF、PSD 在内的多种图片格式并提供了几种方式来比较这些格式的图片文件版本间的不同。</p>
<p><a href="https://github.com/blog/1845-psd-viewing-diffing" target="_blank" rel="external"><img src="https://cloud.githubusercontent.com/assets/2546/3165594/55f2798a-eb56-11e3-92e7-b79ad791a697.gif" alt="Diffable PSD"></a></p>
<p><a href="https://help.github.com/articles/rendering-and-diffing-images" target="_blank" rel="external"><em>查看更多关于图片显示和比较</em></a></p>
<h3 id="Hub"><a href="#Hub" class="headerlink" title="Hub"></a>Hub</h3><p><a href="https://github.com/github/hub" target="_blank" rel="external">Hub</a> 是一个对 Git 进行了封装的命令行工具，可以帮助你更方便的使用 Github。</p>
<p>例如可以像下面这样进行克隆：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hub <span class="built_in">clone</span> tiimgreen/toc</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/github/hub#commands" target="_blank" rel="external"><em>查看更多 Hub 提供的超酷命令.</em></a></p>
<h3 id="u8D21_u732E_u8005_u6307_u5357"><a href="#u8D21_u732E_u8005_u6307_u5357" class="headerlink" title="贡献者指南"></a>贡献者指南</h3><p>在仓库的根目录添加一个名为 <code>CONTRIBUTING</code> 的文件后，贡献者在新建 Issue 或 Pull Request 时会看到一个指向这个文件的链接。</p>
<p><img src="https://camo.githubusercontent.com/71995d6b0e620a9ef1ded00a04498241c69dd1bf/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f736b697463682f6973737565732d32303132303931332d3136323533392e6a7067" alt="Contributing Guidelines"></p>
<p><a href="https://github.com/blog/1184-contributing-guidelines" target="_blank" rel="external"><em>进一步了解贡献者指南.</em></a></p>
<h3 id="Octicons"><a href="#Octicons" class="headerlink" title="Octicons"></a>Octicons</h3><p>GitHubs 图标库 (Octicons) 现已开源。</p>
<p><img src="https://og.github.com/octicons/octicons@1200x630.png" alt="Octicons"></p>
<p><a href="https://octicons.github.com" target="_blank" rel="external"><em>进一步了解 GitHub 图标库</em></a></p>
<h3 id="GitHub__u8D44_u6E90"><a href="#GitHub__u8D44_u6E90" class="headerlink" title="GitHub 资源"></a>GitHub 资源</h3><table>
<thead>
<tr>
<th>内容</th>
<th>链接</th>
</tr>
</thead>
<tbody>
<tr>
<td>探索 GitHub</td>
<td><a href="https://github.com/explore" target="_blank" rel="external">https://github.com/explore</a></td>
</tr>
<tr>
<td>GitHub 博客</td>
<td><a href="https://github.com/blog" target="_blank" rel="external">https://github.com/blog</a></td>
</tr>
<tr>
<td>GitHub 帮助</td>
<td><a href="https://help.github.com/" target="_blank" rel="external">https://help.github.com/</a></td>
</tr>
<tr>
<td>GitHub 培训</td>
<td><a href="http://training.github.com/" target="_blank" rel="external">http://training.github.com/</a></td>
</tr>
<tr>
<td>GitHub 开发者</td>
<td><a href="https://developer.github.com/" target="_blank" rel="external">https://developer.github.com/</a></td>
</tr>
</tbody>
</table>
<h4 id="GitHub__u76F8_u5173_u6F14_u8BB2_u89C6_u9891"><a href="#GitHub__u76F8_u5173_u6F14_u8BB2_u89C6_u9891" class="headerlink" title="GitHub 相关演讲视频"></a>GitHub 相关演讲视频</h4><table>
<thead>
<tr>
<th>内容</th>
<th>链接</th>
</tr>
</thead>
<tbody>
<tr>
<td>How GitHub Uses GitHub to Build GitHub</td>
<td><a href="https://www.youtube.com/watch?v=qyz3jkOBbQY" target="_blank" rel="external">https://www.youtube.com/watch?v=qyz3jkOBbQY</a></td>
</tr>
<tr>
<td>Introduction to Git with Scott Chacon of GitHub</td>
<td><a href="https://www.youtube.com/watch?v=ZDR433b0HJY" target="_blank" rel="external">https://www.youtube.com/watch?v=ZDR433b0HJY</a></td>
</tr>
<tr>
<td>How GitHub No Longer Works</td>
<td><a href="https://www.youtube.com/watch?v=gXD1ITW7iZI" target="_blank" rel="external">https://www.youtube.com/watch?v=gXD1ITW7iZI</a></td>
</tr>
<tr>
<td>Git and GitHub Secrets</td>
<td><a href="https://www.youtube.com/watch?v=Foz9yvMkvlA" target="_blank" rel="external">https://www.youtube.com/watch?v=Foz9yvMkvlA</a></td>
</tr>
<tr>
<td>More Git and GitHub Secrets</td>
<td><a href="https://www.youtube.com/watch?v=p50xsL-iVgU" target="_blank" rel="external">https://www.youtube.com/watch?v=p50xsL-iVgU</a></td>
</tr>
</tbody>
</table>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="u4ECE_u5DE5_u4F5C_u533A_u53BB_u9664_u5927_u91CF_u5DF2_u5220_u9664_u6587_u4EF6"><a href="#u4ECE_u5DE5_u4F5C_u533A_u53BB_u9664_u5927_u91CF_u5DF2_u5220_u9664_u6587_u4EF6" class="headerlink" title="从工作区去除大量已删除文件"></a>从工作区去除大量已删除文件</h3><p>当用 <code>/bin/rm</code> 命令删除了大量文件之后，你可以用下面一条命令从工作区和索引中去除这些文件，以免一个一个的删除：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm $(git ls-files <span class="operator">-d</span>)</span><br></pre></td></tr></table></figure>
<p>例如:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">	deleted:    a</span><br><span class="line">	deleted:    c</span><br><span class="line"></span><br><span class="line">$ git rm $(git ls-files <span class="operator">-d</span>)</span><br><span class="line">rm <span class="string">'a'</span></span><br><span class="line">rm <span class="string">'c'</span></span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">	deleted:    a</span><br><span class="line">	deleted:    c</span><br></pre></td></tr></table></figure>
<h3 id="u4E0A_u4E00_u4E2A_u5206_u652F"><a href="#u4E0A_u4E00_u4E2A_u5206_u652F" class="headerlink" title="上一个分支"></a>上一个分支</h3><p>快速检出上一个分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -</span><br><span class="line"><span class="comment"># Switched to branch 'master'</span></span><br><span class="line"></span><br><span class="line">$ git checkout -</span><br><span class="line"><span class="comment"># Switched to branch 'next'</span></span><br><span class="line"></span><br><span class="line">$ git checkout -</span><br><span class="line"><span class="comment"># Switched to branch 'master'</span></span><br></pre></td></tr></table></figure>
<p><a href="http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging" target="_blank" rel="external"><em>进一步了解 Git 分支.</em></a></p>
<h3 id="u53BB_u9664_u7A7A_u767D"><a href="#u53BB_u9664_u7A7A_u767D" class="headerlink" title="去除空白"></a>去除空白</h3><p>Git Stripspace 命令可以:</p>
<ul>
<li>去掉行尾空白符</li>
<li>多个空行压缩成一行</li>
<li>必要时在文件末尾增加一个空行</li>
</ul>
<p>使用此命令时必须传入一个文件，像这样：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stripspace &lt; README.md</span><br></pre></td></tr></table></figure>
<p><a href="http://git-scm.com/docs/git-stripspace" target="_blank" rel="external"><em>进一步了解 Git <code>stripspace</code> 命令.</em></a></p>
<h3 id="u68C0_u51FA_Pull_Requests"><a href="#u68C0_u51FA_Pull_Requests" class="headerlink" title="检出 Pull Requests"></a>检出 Pull Requests</h3><p>对 Github 仓库来说，Pull Request 是种特殊分支， 可以通过以下多种方式取到本地：</p>
<p>取出某个特定的 Pull Request 并临时作为本地的 <code>FETCH_HEAD</code> 中以便进行快速查看更改( diff )以及合并( merge )：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin refs/pull/[PR-Number]/head</span><br></pre></td></tr></table></figure>
<p>通过 refspec 获取所有的 Pull Request 为本地分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin <span class="string">'+refs/pull/*/head:refs/remotes/origin/pr/*'</span></span><br></pre></td></tr></table></figure>
<p>或在仓库的 <code>.git/config</code> 中加入下列设置来自动获取远程仓库中的 Pull Request<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[remote <span class="string">"origin"</span>]</span><br><span class="line">    fetch = +refs/heads/*<span class="symbol">:refs/remotes/origin/*</span></span><br><span class="line">    url = git<span class="variable">@github</span>.<span class="symbol">com:</span>tiimgreen/github-cheat-sheet.git</span><br></pre></td></tr></table></figure></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[remote <span class="string">"origin"</span>]</span><br><span class="line">    fetch = +refs/heads/*<span class="symbol">:refs/remotes/origin/*</span></span><br><span class="line">    url = git<span class="variable">@github</span>.<span class="symbol">com:</span>tiimgreen/github-cheat-sheet.git</span><br><span class="line">    fetch = +refs/pull/*<span class="regexp">/head:refs/remotes</span><span class="regexp">/origin/pr</span><span class="regexp">/*</span></span><br></pre></td></tr></table></figure>
<p>对基于派生库的 Pull Request，可以通过先 <code>checkout</code> 代表此 Pull Request 的远端分支再由此分支建立一个本地分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout pr/<span class="number">42</span> pr-<span class="number">42</span></span><br></pre></td></tr></table></figure>
<p>操作多个仓库的时候，可以在 Git 中设置获取 Pull Request 的全局选项。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --add remote.origin.fetch <span class="string">"+refs/pull/*/head:refs/remotes/origin/pr/*"</span></span><br></pre></td></tr></table></figure>
<p>此时可以在任意仓库中使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout pr/<span class="number">42</span></span><br></pre></td></tr></table></figure>
<p><a href="https://help.github.com/articles/checking-out-pull-requests-locally" target="_blank" rel="external"><em>进一步了解如何本地检出 pull request.</em></a></p>
<h3 id="u6CA1_u6709_u4EFB_u4F55_u6539_u52A8_u7684_u63D0_u4EA4"><a href="#u6CA1_u6709_u4EFB_u4F55_u6539_u52A8_u7684_u63D0_u4EA4" class="headerlink" title="没有任何改动的提交"></a>没有任何改动的提交</h3><p>可以使用<code>--allow-empty</code>选项强制创建一个没有任何改动的提交：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"Big-ass commit"</span> --allow-empty</span><br></pre></td></tr></table></figure>
<p>这样做在如下几种情况下是有意义的：</p>
<ul>
<li>标记新的工作或一个新功能的开始。</li>
<li>记录对项目的跟代码无关的改动。</li>
<li>跟使用你仓库的其他人交流。</li>
<li><p>作为仓库的第一次提交，因为第一次提交后不能被 rebase： <code>git commit -m &quot;init repo&quot; --allow-empty</code>.</p>
<p><img src="http://i.minus.com/il1jaw.gif" alt="It ain&#39;t even that trolololol..."></p>
</li>
</ul>
<h3 id="u7F8E_u5316_Git_Status"><a href="#u7F8E_u5316_Git_Status" class="headerlink" title="美化 Git Status"></a>美化 Git Status</h3><p>在命令行输入如下命令:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure>
<p>可以看到:</p>
<p><img src="http://i.imgur.com/qjPyvXb.png" alt="git status"></p>
<p>加上<code>-sb</code>选项:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status -sb</span><br></pre></td></tr></table></figure>
<p>这会得到:</p>
<p><img src="http://i.imgur.com/K0OY3nm.png" alt="git status -sb"></p>
<p><a href="http://git-scm.com/docs/git-status" target="_blank" rel="external"><em>进一步了解 Git <code>status</code> 命令.</em></a></p>
<h3 id="u7F8E_u5316_Git_Log"><a href="#u7F8E_u5316_Git_Log" class="headerlink" title="美化 Git Log"></a>美化 Git Log</h3><p>输入如下命令:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --all --graph --pretty=format:<span class="string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit --date=relative</span><br></pre></td></tr></table></figure>
<p>可以看到:</p>
<p><img src="http://i.imgur.com/58eOtkW.png" alt="git log --all --graph --pretty=format:&#39;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date=relative"></p>
<p>这要归功于 <a href="http://stackoverflow.com/users/88355/palesz" target="_blank" rel="external">Palesz</a> 在 stackoverflow 的回答。</p>
<p><em>这个命令可以被用作别名，详细做法见<a href="/#git%E5%91%BD%E4%BB%A4%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%AB%E5%90%8D">这里</a>。</em></p>
<p><a href="http://git-scm.com/docs/git-log" target="_blank" rel="external"><em>进一步了解 Git <code>log</code> 命令.</em></a></p>
<h3 id="Git__u67E5_u8BE2"><a href="#Git__u67E5_u8BE2" class="headerlink" title="Git 查询"></a>Git 查询</h3><p>Git 查询运行你在之前的所有提交信息里进行搜索，找到其中和搜索条件相匹配的最近的一条。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git show :/query</span><br></pre></td></tr></table></figure>
<p>这里 <code>query</code> （区别大小写）是你想要搜索的词语， 这条命令会找到包含这个词语的最后那个提交并显示变动详情。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git show :/typo</span><br></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/icaGiNt.png" alt="git show :/query"></p>
<ul>
<li>按 <code>q</code> 键退出命令。*</li>
</ul>
<h3 id="u5408_u5E76_u5206_u652F"><a href="#u5408_u5E76_u5206_u652F" class="headerlink" title="合并分支"></a>合并分支</h3><p>输入命令:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --merged</span><br></pre></td></tr></table></figure>
<p>这会显示所有已经合并到你当前分支的分支列表。</p>
<p>相反地：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --no-merged</span><br></pre></td></tr></table></figure>
<p>会显示所有还没有合并到你当前分支的分支列表。</p>
<p><a href="http://git-scm.com/docs/git-branch" target="_blank" rel="external"><em>进一步了解 Git <code>branch</code> 命令.</em></a></p>
<h3 id="u4FEE_u590D_u6709_u95EE_u9898_u7684_u63D0_u4EA4_u4EE5_u53CA_u81EA_u52A8_u5408_u5E76"><a href="#u4FEE_u590D_u6709_u95EE_u9898_u7684_u63D0_u4EA4_u4EE5_u53CA_u81EA_u52A8_u5408_u5E76" class="headerlink" title="修复有问题的提交以及自动合并"></a>修复有问题的提交以及自动合并</h3><p>如果上一个或多个提交包含了错误，可以在你修复问题后使用下列命令处理（假设要修复的提交版本是<code>abcde</code>）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --fixup=abcde</span><br><span class="line">$ git rebase abcde^ --autosquash -i</span><br></pre></td></tr></table></figure></p>
<p><a href="http://git-scm.com/docs/git-commit" target="_blank" rel="external"><em>进一步了解 Git <code>commit</code> 命令.</em></a><br><a href="http://git-scm.com/docs/git-rebase" target="_blank" rel="external"><em>进一步了解 Git <code>rebase</code> 命令.</em></a></p>
<h3 id="u4EE5_u7F51_u7AD9_u65B9_u5F0F_u67E5_u770B_u672C_u5730_u4ED3_u5E93"><a href="#u4EE5_u7F51_u7AD9_u65B9_u5F0F_u67E5_u770B_u672C_u5730_u4ED3_u5E93" class="headerlink" title="以网站方式查看本地仓库"></a>以网站方式查看本地仓库</h3><p>使用 Git 的 <code>instaweb</code> 可以立即在 <code>gitweb</code> 中浏览你的工作仓库。这个命令是个简单的脚本，配置了 <code>gitweb</code> 和用来浏览本地仓库的Web服务器。<em>（译者注：默认需要lighttpd支持）</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git instaweb</span><br></pre></td></tr></table></figure>
<p>执行后打开：</p>
<p><img src="http://i.imgur.com/Dxekmqc.png" alt="Git instaweb"></p>
<p><a href="http://git-scm.com/docs/git-instaweb" target="_blank" rel="external"><em>进一步了解 Git <code>instaweb</code> 命令.</em></a></p>
<h3 id="Git__u914D_u7F6E"><a href="#Git__u914D_u7F6E" class="headerlink" title="Git 配置"></a>Git 配置</h3><p>所有 Git 配置都保存在你的 <code>.gitconfig</code> 文件中。</p>
<h4 id="Git__u547D_u4EE4_u81EA_u5B9A_u4E49_u522B_u540D"><a href="#Git__u547D_u4EE4_u81EA_u5B9A_u4E49_u522B_u540D" class="headerlink" title="Git 命令自定义别名"></a>Git 命令自定义别名</h4><p>别名用来帮助你定义自己的 git 命令。比如你可以定义 <code>git a</code> 来运行 <code>git add --all</code>。</p>
<p>要添加一个别名， 一种方法是打开 <code>~/.gitconfig</code> 文件并添加如下内容：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[alias]</span><br><span class="line">  <span class="keyword">co</span> = checkout</span><br><span class="line">  <span class="keyword">cm</span> = commit</span><br><span class="line">  <span class="keyword">p</span> = push</span><br><span class="line">  # Show <span class="keyword">verbose</span> output about <span class="keyword">tags</span>, branches <span class="built_in">or</span> remotes</span><br><span class="line">  <span class="keyword">tags</span> = <span class="keyword">tag</span> -<span class="keyword">l</span></span><br><span class="line">  branches = branch -<span class="keyword">a</span></span><br><span class="line">  remotes = remote -<span class="keyword">v</span></span><br></pre></td></tr></table></figure>
<p>…或者在命令行里键入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.new_<span class="built_in">alias</span> git_<span class="keyword">function</span></span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.cm commit</span><br></pre></td></tr></table></figure>
<p>指向多个命令的别名可以用引号来定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.ac <span class="string">'add -A . &amp;&amp; commit'</span></span><br></pre></td></tr></table></figure>
<p>下面列出了一些有用的别名：</p>
<table>
<thead>
<tr>
<th>别名 Alias</th>
<th>命令 Command</th>
<th>如何设置 What to Type</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>git cm</code></td>
<td><code>git commit</code></td>
<td><code>git config --global alias.cm commit</code></td>
</tr>
<tr>
<td><code>git co</code></td>
<td><code>git checkout</code></td>
<td><code>git config --global alias.co checkout</code></td>
</tr>
<tr>
<td><code>git ac</code></td>
<td><code>git add . -A</code> <code>git commit</code></td>
<td><code>git config --global alias.ac &#39;!git add -A &amp;&amp; git commit&#39;</code></td>
</tr>
<tr>
<td><code>git st</code></td>
<td><code>git status -sb</code></td>
<td><code>git config --global alias.st &#39;status -sb&#39;</code></td>
</tr>
<tr>
<td><code>git tags</code></td>
<td><code>git tag -l</code></td>
<td><code>git config --global alias.tags &#39;tag -l&#39;</code></td>
</tr>
<tr>
<td><code>git branches</code></td>
<td><code>git branch -a</code></td>
<td><code>git config --global alias.branches &#39;branch -a&#39;</code></td>
</tr>
<tr>
<td><code>git cleanup</code></td>
<td>`git branch –merged</td>
<td>grep -v ‘*’</td>
<td>xargs git branch -d`</td>
<td>`git config –global alias.cleanup “!git branch –merged</td>
<td>grep -v ‘*’</td>
<td>xargs git branch -d”`</td>
</tr>
<tr>
<td><code>git remotes</code></td>
<td><code>git remote -v</code></td>
<td><code>git config --global alias.remotes &#39;remote -v&#39;</code></td>
</tr>
<tr>
<td><code>git lg</code></td>
<td><code>git log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --</code></td>
<td><code>git config --global alias.lg &quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --&quot;</code></td>
</tr>
</tbody>
</table>
<h4 id="u81EA_u52A8_u66F4_u6B63"><a href="#u81EA_u52A8_u66F4_u6B63" class="headerlink" title="自动更正"></a>自动更正</h4><p>如果键入 <code>git comit</code> 你会看到如下输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git comit -m <span class="string">"Message"</span></span><br><span class="line"><span class="comment"># git: 'comit' is not a git command. See 'git --help'.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Did you mean this?</span></span><br><span class="line"><span class="comment">#   commit</span></span><br></pre></td></tr></table></figure>
<p>为了在键入 <code>comit</code> 调用 <code>commit</code>命令，只需启用自动纠错功能：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global help.autocorrect <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>现在你就会看到：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git comit -m <span class="string">"Message"</span></span><br><span class="line"><span class="comment"># WARNING: You called a Git command named 'comit', which does not exist.</span></span><br><span class="line"><span class="comment"># Continuing under the assumption that you meant 'commit'</span></span><br><span class="line"><span class="comment"># in 0.1 seconds automatically...</span></span><br></pre></td></tr></table></figure>
<h4 id="u989C_u8272_u8F93_u51FA"><a href="#u989C_u8272_u8F93_u51FA" class="headerlink" title="颜色输出"></a>颜色输出</h4><p>要在你的 Git 命令输出里加上颜色的话，可以用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global color.ui <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><a href="http://git-scm.com/docs/git-config" target="_blank" rel="external"><em>进一步了解 Git <code>config</code> 命令.</em></a></p>
<h3 id="Git__u8D44_u6E90"><a href="#Git__u8D44_u6E90" class="headerlink" title="Git 资源"></a>Git 资源</h3><table>
<thead>
<tr>
<th>Title</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>Official Git Site</td>
<td><a href="http://git-scm.com/" target="_blank" rel="external">http://git-scm.com/</a></td>
</tr>
<tr>
<td>Official Git Video Tutorials</td>
<td><a href="http://git-scm.com/videos" target="_blank" rel="external">http://git-scm.com/videos</a></td>
</tr>
<tr>
<td>Code School Try Git</td>
<td><a href="http://try.github.com/" target="_blank" rel="external">http://try.github.com/</a></td>
</tr>
<tr>
<td>Introductory Reference &amp; Tutorial for Git</td>
<td><a href="http://gitref.org/" target="_blank" rel="external">http://gitref.org/</a></td>
</tr>
<tr>
<td>Official Git Tutorial</td>
<td><a href="http://git-scm.com/docs/gittutorial" target="_blank" rel="external">http://git-scm.com/docs/gittutorial</a></td>
</tr>
<tr>
<td>Everyday Git</td>
<td><a href="http://git-scm.com/docs/everyday" target="_blank" rel="external">http://git-scm.com/docs/everyday</a></td>
</tr>
<tr>
<td>Git Immersion</td>
<td><a href="http://gitimmersion.com/" target="_blank" rel="external">http://gitimmersion.com/</a></td>
</tr>
<tr>
<td>Ry’s Git Tutorial</td>
<td><a href="http://rypress.com/tutorials/git/index.html" target="_blank" rel="external">http://rypress.com/tutorials/git/index.html</a></td>
</tr>
<tr>
<td>Git for Designer</td>
<td><a href="http://hoth.entp.com/output/git_for_designers.html" target="_blank" rel="external">http://hoth.entp.com/output/git_for_designers.html</a></td>
</tr>
<tr>
<td>Git for Computer Scientists</td>
<td><a href="http://eagain.net/articles/git-for-computer-scientists/" target="_blank" rel="external">http://eagain.net/articles/git-for-computer-scientists/</a></td>
</tr>
<tr>
<td>Git Magic</td>
<td><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/" target="_blank" rel="external">http://www-cs-students.stanford.edu/~blynn/gitmagic/</a></td>
</tr>
<tr>
<td>GitHub Training Kit</td>
<td><a href="http://training.github.com/kit" target="_blank" rel="external">http://training.github.com/kit</a></td>
</tr>
<tr>
<td>Git Visualization Playground</td>
<td><a href="http://onlywei.github.io/explain-git-with-d3/#freeplay" target="_blank" rel="external">http://onlywei.github.io/explain-git-with-d3/#freeplay</a></td>
</tr>
</tbody>
</table>
<h4 id="Git__u53C2_u8003_u4E66_u7C4D"><a href="#Git__u53C2_u8003_u4E66_u7C4D" class="headerlink" title="Git 参考书籍"></a>Git 参考书籍</h4><table>
<thead>
<tr>
<th>Title</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>Pragmatic Version Control Using Git</td>
<td><a href="http://www.pragprog.com/titles/tsgit/pragmatic-version-control-using-git" target="_blank" rel="external">http://www.pragprog.com/titles/tsgit/pragmatic-version-control-using-git</a></td>
</tr>
<tr>
<td>Pro Git</td>
<td><a href="http://git-scm.com/book" target="_blank" rel="external">http://git-scm.com/book</a></td>
</tr>
<tr>
<td>Git Internals Peepcode</td>
<td><a href="http://peepcode.com/products/git-internals-pdf" target="_blank" rel="external">http://peepcode.com/products/git-internals-pdf</a></td>
</tr>
<tr>
<td>Git in the Trenches</td>
<td><a href="http://cbx33.github.com/gitt/" target="_blank" rel="external">http://cbx33.github.com/gitt/</a></td>
</tr>
<tr>
<td>Version Control with Git</td>
<td><a href="http://www.amazon.com/Version-Control-Git-collaborative-development/dp/1449316387" target="_blank" rel="external">http://www.amazon.com/Version-Control-Git-collaborative-development/dp/1449316387</a></td>
</tr>
<tr>
<td>Pragmatic Guide to Git</td>
<td><a href="http://www.pragprog.com/titles/pg_git/pragmatic-guide-to-git" target="_blank" rel="external">http://www.pragprog.com/titles/pg_git/pragmatic-guide-to-git</a></td>
</tr>
<tr>
<td>Git: Version Control for Everyone</td>
<td><a href="http://www.packtpub.com/git-version-control-for-everyone/book" target="_blank" rel="external">http://www.packtpub.com/git-version-control-for-everyone/book</a></td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="GitHub_u79D8_u7C4D"><a href="#GitHub_u79D8_u7C4D" class="headerlink" title="GitHub秘籍"></a>GitHub秘籍 <a href="https://github.com/sindresorhus/awesome"><img src="https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg" alt="Awesome"></a></h1><p>Git 和 Github 秘籍，灵感来自于 <a href="https://github.com/holman">Zach Holman</a> 在 2012 年 Aloha Ruby Conference 和 2013 年 WDCNZ 上所做的演讲：<a href="http://www.confreaks.com/videos/1229-aloharuby2012-git-and-github-secrets">Git and GitHub Secrets</a>(<a href="https://speakerdeck.com/holman/git-and-github-secrets">slides</a>) 和 <a href="https://vimeo.com/72955426">More Git and GitHub Secrets</a>(<a href="https://speakerdeck.com/holman/more-git-and-github-secrets">slides</a>)。</p>
<p><em>其他语言版本: <a href="/README.md">English</a>, <a href="/README.ko.md">한국어</a>, <a href="/README.ja.md">日本語</a>, <a href="/README.zh-cn.md">简体中文</a>, <a href="/README.zh-tw.md">正體中文</a>.</em></p>
<h1 id="u76EE_u5F55"><a href="#u76EE_u5F55" class="headerlink" title="目录"></a>目录</h1><ul>
<li><a href="/#github">GitHub</a><ul>
<li><a href="/#不比较空白字符">不比较空白字符</a></li>
<li><a href="/#调整-tab-字符所代表的空格数">调整 Tab 字符所代表的空格数</a></li>
<li><a href="/#查看某个用户的-commit-历史">查看某个用户的 Commit 历史</a></li>
<li><a href="/#仓库克隆">仓库克隆</a></li>
<li><a href="/#分支">分支</a><ul>
<li><a href="/#将某个分支与其他所有分支进行对比">将某个分支与其他所有分支进行对比</a></li>
<li><a href="/#比较分支">比较分支</a></li>
<li><a href="/#比较不同派生库的分支">比较不同派生库的分支</a></li>
</ul>
</li>
<li><a href="/#gists">Gists</a></li>
<li><a href="/#gitio">Git.io</a></li>
<li><a href="/#键盘快捷键">键盘快捷键</a></li>
<li><a href="/#整行高亮">整行高亮</a></li>
<li><a href="/#用-commit-信息关闭-issue">用 Commit 信息关闭 Issue</a></li>
<li><a href="/#链接其他仓库的-issue">链接其他仓库的 Issue</a></li>
<li><a href="/#锁定项目对话功能">锁定项目对话功能</a></li>
<li><a href="/#设置-ci-对每条-pull-request-都进行构建">设置 CI 对每条 Pull Request 都进行构建</a></li>
<li><a href="/#markdown-文件语法高亮">Markdown 文件语法高亮</a></li>
<li><a href="/#表情符">表情符</a></li>
<li><a href="/#图片--gif-动画">图片 / GIF 动画</a><ul>
<li><a href="/#在-github-wiki-中引用图片">在 GitHub Wiki 中引用图片</a></li>
</ul>
</li>
<li><a href="/#快速引用">快速引用</a></li>
<li><a href="/#粘贴剪贴板中的图片到评论">粘贴剪贴板中的图片到评论</a></li>
<li><a href="/#快速添加许可证文件">快速添加许可证文件</a></li>
<li><a href="/#任务列表">任务列表</a><ul>
<li><a href="/#markdown-文件中的任务列表">Markdown 文件中的任务列表</a></li>
</ul>
</li>
<li><a href="/#相对链接">相对链接</a></li>
<li><a href="/#github-pages-的元数据与插件支持">GitHub Pages 的元数据与插件支持</a></li>
<li><a href="/#查看-yaml-格式的元数据">查看 YAML 格式的元数据</a></li>
<li><a href="/#渲染表格数据">渲染表格数据</a></li>
<li><a href="/#撤销-pull-request">撤销 Pull Request</a></li>
<li><a href="/#diffs">Diffs</a><ul>
<li><a href="/#可渲染文档的diffs">可渲染文档的Diffs</a></li>
<li><a href="/#可比较的地图数据">可比较的地图数据</a></li>
<li><a href="/#在-diff-中展开查看更多的上下文">在 Diff 中展开查看更多的上下文</a></li>
<li><a href="/#获取-pull-request-的-diff-或-patch-文件">获取 Pull Request 的 diff 或 patch 文件</a></li>
<li><a href="/#显示图片以及比较图片">显示图片以及比较图片</a></li>
</ul>
</li>
<li><a href="/#hub">Hub</a></li>
<li><a href="/#贡献者指南">贡献者指南</a></li>
<li><a href="/#octicons">Octicons</a></li>
<li><a href="/#github-资源">GitHub 资源</a><ul>
<li><a href="/#github-相关演讲视频">GitHub 相关演讲视频</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/#git">Git</a><ul>
<li><a href="/#从工作区去除大量已删除文件">从工作区去除大量已删除文件</a></li>
<li><a href="/#上一个分支">上一个分支</a></li>
<li><a href="/#去除空白">去除空白</a></li>
<li><a href="/#检出-pull-requests">检出 Pull Requests</a></li>
<li><a href="/#没有任何改动的提交">没有任何改动的提交</a></li>
<li><a href="/#美化-git-status">美化 Git Status</a></li>
<li><a href="/#美化-git-log">美化 Git Log</a></li>
<li><a href="/#git-查询">Git 查询</a></li>
<li><a href="/#合并分支">合并分支</a></li>
<li><a href="/#修复有问题的提交以及自动合并">修复有问题的提交以及自动合并</a></li>
<li><a href="/#以网站方式查看本地仓库">以网站方式查看本地仓库</a></li>
<li><a href="/#git-配置">Git 配置</a><ul>
<li><a href="/#git-命令自定义别名">Git 命令自定义别名</a></li>
<li><a href="/#自动更正">自动更正</a></li>
<li><a href="/#颜色输出">颜色输出</a></li>
</ul>
</li>
<li><a href="/#git-资源">Git 资源</a><ul>
<li><a href="/#git-参考书籍">Git 参考书籍</a>]]>
    
    </summary>
    
      <category term="git" scheme="http://notes.seirhsiao.com/tags/git/"/>
    
      <category term="github" scheme="http://notes.seirhsiao.com/tags/github/"/>
    
      <category term="指南" scheme="http://notes.seirhsiao.com/tags/%E6%8C%87%E5%8D%97/"/>
    
      <category term="翻译" scheme="http://notes.seirhsiao.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="GitHub" scheme="http://notes.seirhsiao.com/categories/GitHub/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[markdown学习资料汇总]]></title>
    <link href="http://notes.seirhsiao.com/2016/01/26/2013-07-11-markdown-sources/"/>
    <id>http://notes.seirhsiao.com/2016/01/26/2013-07-11-markdown-sources/</id>
    <published>2016-01-26T12:41:44.285Z</published>
    <updated>2016-01-26T12:41:44.285Z</updated>
    <content type="html"><![CDATA[<h2 id="u8BF4_u660E"><a href="#u8BF4_u660E" class="headerlink" title="说明"></a>说明</h2><p>自从学习使用 <code>markdown</code> 以来，收集的学习资料、软件工具、使用指南等，如果你没有听说过或者还没有体验过<code>markdown</code> 进行写作文章，强烈建议 have a try !</p>
<h2 id="markdown__u4ECB_u7ECD"><a href="#markdown__u4ECB_u7ECD" class="headerlink" title="markdown 介绍"></a>markdown 介绍</h2><blockquote>
<p>Markdown 是一种轻量级标记语言，它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。 - <strong>wikipedia</strong></p>
</blockquote>
<ul>
<li><a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Daring Fireball: Markdown</a> Project markdown</li>
<li><a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="external">Markdown wikipedia 介绍</a></li>
<li><p><a href="http://fletcherpenney.net/multimarkdown/" target="_blank" rel="external">MultiMarkdown</a> 引入更多标记特性和输出选项的改进版Markdown</p>
<a id="more"></a>
<h2 id="why_markdown"><a href="#why_markdown" class="headerlink" title="why markdown"></a>why markdown</h2></li>
<li><p>纯文本，兼容性极强，可以用任意文本编辑器打开.</p>
</li>
<li>语法简单（the syntax is so simple you can barely call it “syntax.”），零学习成本，极好的可读性，让你专注于文字写作而不是页面排版，并且兼容 HTML，simple but powerful .</li>
<li>格式转换方便，Markdown 的文本你可以轻松转换为 html、pdf、epub、电子书等。</li>
<li>适合团队协作，可以使用 git/svn 等进行版本控制管理。</li>
<li><a href="http://www.yangzhiping.com/tech/r-markdown-knitr.html" target="_blank" rel="external">阳志平：为什么 Markdown 成为科技界写作主流？</a></li>
<li><a href="http://www.ituring.com.cn/article/828?q=markdown" target="_blank" rel="external">图灵社区：用Markdown来写自由书籍-开源技术的方案</a></li>
</ul>
<p>目前很多在线服务商均支持使用markdown编写：</p>
<ul>
<li><a href="https://github.com" target="_blank" rel="external">Github</a> 最先支持，使用Markdown的一个分支版本来格式化评论、消息以及其它内容。</li>
<li><a href="http://stackoverflow.com/" target="_blank" rel="external">Stack Overflow</a> 使用一种 Markdown 的分支作为它的文章格式化系统。</li>
<li><a href="http://www.cnblogs.com/" target="_blank" rel="external">博客园</a> 国内技术人的博客家园，每天活跃上万用户，高质量社区。</li>
<li><a href="http://www.csdn.net/" target="_blank" rel="external">CSDN</a> 号称全球最大中文IT社区，涵盖了多种语言、架构、博客、俱乐部等模块的技术论坛。</li>
<li><a href="http://www.ituring.com.cn/" target="_blank" rel="external">图灵社区</a> 使用markdown语法供用户写作电子书.</li>
<li><a href="http://www.jianshu.com/" target="_blank" rel="external">简书</a> 重拾文字的力量，交流故事，沟通想法，一个基于内容分享的社区。</li>
<li><a href="http://www.wiz.cn/" target="_blank" rel="external">为知笔记</a> 国内顶尖笔记软件，支持使用Markdown语法编辑笔记。</li>
<li>……</li>
</ul>
<h2 id="markdown__u4F7F_u7528"><a href="#markdown__u4F7F_u7528" class="headerlink" title="markdown 使用"></a>markdown 使用</h2><ul>
<li><a href="http://wowubuntu.com/markdown/basic.html" target="_blank" rel="external">Markdown: Basics （快速入门）</a></li>
<li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">Markdown 完整语法说明 (简体中文版)</a></li>
<li><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="external">Github: Mastering Markdown</a> GitHub 帮助中关于 Markdown 的语法帮助</li>
<li><a href="https://github.com/hzlzh/1MarkDown" target="_blank" rel="external">MarkDown 语法团队规范</a> 语法规范简洁版</li>
<li><a href="http://www.cirosantilli.com/markdown-style-guide/" target="_blank" rel="external">Markdown Style Guide</a> 语法规范复杂版</li>
<li><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" target="_blank" rel="external">Markdown Cheatsheet</a></li>
<li><a href="https://help.github.com/articles/github-flavored-markdown/" target="_blank" rel="external">GitHub Flavored Markdown</a> GitHub 使用的 Markdown 语法，略微不同于标准 Markdown 语法。提供了一些更加简洁的语法，类似 URL autolinking, Strikethrough, Fenced code blocks, Syntax highlighting 等等</li>
<li><a href="http://fletcherpenney.net/multimarkdown/" target="_blank" rel="external">MultiMarkdown 介绍</a> 对 markdown 进行的扩展功能</li>
</ul>
<h2 id="markdown__u5DE5_u5177"><a href="#markdown__u5DE5_u5177" class="headerlink" title="markdown 工具"></a>markdown 工具</h2><ul>
<li><a href="https://maxiang.info/" target="_blank" rel="external">马克飞象</a> web/chrome 离线客户端，markdown 全功能支持，最大特点内容能够同步到印象笔记（evernote）中，笔记的用户重度推荐，按年收费，目前作者 <a href="http://weibo.com/u/2788354117" target="_blank" rel="external">@weibo</a> 正在开发跨平台的客户端。</li>
<li><a href="https://stackedit.io/" target="_blank" rel="external">StackEdit</a> 在线 markdown 编辑器，可同步文档到Google Drive和 Dropbox，可发布文章到 Blogger，GitHub，Google Drive，Dropbox，Tumblr和WordPress。</li>
<li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">cmd 作业部落</a> 支持 win/mac/linux/web/chrome 全平台，支持实时同步预览，支持代码高亮、数学公式，区分写作和阅读模式，支持在线存储，分享文稿网址。</li>
<li><a href="http://macdown.uranusjr.com/" target="_blank" rel="external">MacDown</a> OSX 上的 Markdown 开源编辑器，支持代码高亮，实时预览等。</li>
<li><a href="http://www.markdownpad.com/" target="_blank" rel="external">MarkdownPad</a> Windows上的全功能Markdown编辑器，推荐win上使用，基本全部功能。</li>
<li><a href="http://marked2app.com/" target="_blank" rel="external">Marked2</a> 多种 md 显示方案，不能够编辑文件，只用来展示文件，配合 <a href="https://packagecontrol.io/packages/MarkdownEditing" target="_blank" rel="external">subline text markdown edit</a> 插件，完美使用； </li>
<li><a href="http://zh.mweb.im/" target="_blank" rel="external">MWeb</a> 专业的 Markdown 写作、记笔记、静态博客生成软件，由国内独立开发者<a href="http://weibo.com/oulvhai" target="_blank" rel="external">@oulvhai</a>开发，支持Toc、Table、代码高亮、支持发布到 Wordrpess 博客、支持 Metaweblog API 的博客服务、Wordpress.com、Evernote 和印象笔记、Blogger、Scriptogr.am、Tumblr等服务。</li>
<li><a href="http://pad.haroopress.com/user.html" target="_blank" rel="external">Haroopad</a> 又一款简洁多功能的跨平台编辑器，全功能支持，再加上对社交网络友好的连接，多种主题等，感兴趣的可以看看。详情参考<a href="https://github.com/xirong/my-markdown/issues/1" target="_blank" rel="external">issue#1</a></li>
<li>这几款就够了，多了就有选择症 ……</li>
</ul>
<h2 id="reference__u53C2_u8003"><a href="#reference__u53C2_u8003" class="headerlink" title="reference 参考"></a>reference 参考</h2><ul>
<li><a href="http://brettterpstra.com/2011/08/31/why-markdown-a-two-minute-explanation/" target="_blank" rel="external">Why Markdown? A two-minute explanation</a></li>
<li><a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="external">简书：献给写作者的 Markdown 新手指南</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u8BF4_u660E"><a href="#u8BF4_u660E" class="headerlink" title="说明"></a>说明</h2><p>自从学习使用 <code>markdown</code> 以来，收集的学习资料、软件工具、使用指南等，如果你没有听说过或者还没有体验过<code>markdown</code> 进行写作文章，强烈建议 have a try !</p>
<h2 id="markdown__u4ECB_u7ECD"><a href="#markdown__u4ECB_u7ECD" class="headerlink" title="markdown 介绍"></a>markdown 介绍</h2><blockquote>
<p>Markdown 是一种轻量级标记语言，它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。 - <strong>wikipedia</strong></p>
</blockquote>
<ul>
<li><a href="http://daringfireball.net/projects/markdown/">Daring Fireball: Markdown</a> Project markdown</li>
<li><a href="https://zh.wikipedia.org/wiki/Markdown">Markdown wikipedia 介绍</a></li>
<li><p><a href="http://fletcherpenney.net/multimarkdown/">MultiMarkdown</a> 引入更多标记特性和输出选项的改进版Markdown</p>]]>
    
    </summary>
    
      <category term="markdown" scheme="http://notes.seirhsiao.com/tags/markdown/"/>
    
      <category term="资源" scheme="http://notes.seirhsiao.com/tags/%E8%B5%84%E6%BA%90/"/>
    
      <category term="Markdown" scheme="http://notes.seirhsiao.com/categories/Markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端资源收集]]></title>
    <link href="http://notes.seirhsiao.com/2016/01/26/2013-07-07-front-end-collect/"/>
    <id>http://notes.seirhsiao.com/2016/01/26/2013-07-07-front-end-collect/</id>
    <published>2016-01-26T12:40:16.934Z</published>
    <updated>2016-01-26T12:40:16.934Z</updated>
    <content type="html"><![CDATA[<h1 id="u524D_u7AEF_u6536_u96C6"><a href="#u524D_u7AEF_u6536_u96C6" class="headerlink" title="前端收集"></a>前端收集</h1><p>在前端路上摸索前行，在这里分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者。欢迎更新，以下各排名不分先后顺序。</p>
<p>自己 RSS 长期订阅了一些IT 和技术相关博客，这里是我Feedly 输出的opml，可直接导入一些RSS 阅读器:<br><a href="https://github.com/foru17/luolei-dotfiles/blob/master/feedly.opml" target="_blank" rel="external">https://github.com/foru17/luolei-dotfiles/blob/master/feedly.opml</a></p>
<p>====</p>
<h4 id="u524D_u7AEF_u6536_u96C6_u56FE_u8C31"><a href="#u524D_u7AEF_u6536_u96C6_u56FE_u8C31" class="headerlink" title="前端收集图谱"></a><a href="http://get-set.cn/front-end-collect/" target="_blank" rel="external">前端收集图谱</a></h4><p>此部分为<a href="https://github.com/jikeytang" target="_blank" rel="external">@jikeytang </a>贡献</p>
<ul>
<li>clone <a href="https://github.com/hjzheng/front-end-collect" target="_blank" rel="external">https://github.com/hjzheng/front-end-collect</a></li>
<li>cd front-end-collect</li>
<li>bower install</li>
<li>放入你喜欢的web容器,访问index.html即可</li>
<li>你也直接可以访问: <a href="http://get-set.cn/front-end-collect/" target="_blank" rel="external">http://get-set.cn/front-end-collect/</a></li>
<li>支持Chrome, Firefox and IE10&amp;11以上浏览器</li>
</ul>
<p><img src="https://raw.githubusercontent.com/hjzheng/front-end-collect/master/img/front-end-chart.png" alt="image"><br><a id="more"></a></p>
<h4 id="u805A_u5408_26amp_3B_26amp_3B_u5468_u62A5_u8BA2_u9605"><a href="#u805A_u5408_26amp_3B_26amp_3B_u5468_u62A5_u8BA2_u9605" class="headerlink" title="聚合&amp;&amp;周报订阅"></a>聚合&amp;&amp;周报订阅</h4><table>
<thead>
<tr>
<th>名称</th>
<th>订阅地址</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>英文推送</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Html5 Weekly</td>
<td><a href="http://html5weekly.com/" target="_blank" rel="external">http://html5weekly.com/</a></td>
<td>Html 技术类</td>
</tr>
<tr>
<td>CSS Weekly</td>
<td><a href="http://css-weekly.com/" target="_blank" rel="external">http://css-weekly.com/</a></td>
<td></td>
</tr>
<tr>
<td>Javascript Weekly</td>
<td><a href="http://javascriptweekly.com/" target="_blank" rel="external">http://javascriptweekly.com/</a></td>
<td>JS相关，同样有 html,css 和工具相关</td>
</tr>
<tr>
<td>Web Design Weekly</td>
<td><a href="http://web-design-weekly.com/" target="_blank" rel="external">http://web-design-weekly.com/</a></td>
<td>设计、技术、技巧、工具聚合</td>
</tr>
<tr>
<td>UX Weekly</td>
<td><a href="http://uxwkly.com/" target="_blank" rel="external">http://uxwkly.com/</a></td>
<td>用户体验、网页设计推送</td>
</tr>
<tr>
<td>Web Tools Weekly</td>
<td><a href="http://webtoolsweekly.com/" target="_blank" rel="external">http://webtoolsweekly.com/</a></td>
<td>Js，工具推送</td>
</tr>
<tr>
<td>RESPONSIVE DESIGN NEWSLETTER</td>
<td><a href="http://responsivedesignweekly.com/" target="_blank" rel="external">http://responsivedesignweekly.com/</a></td>
<td>每周推送一次响应式设计相关</td>
</tr>
<tr>
<td>Tutorialzine</td>
<td><a href="http://tutorialzine.com/" target="_blank" rel="external">http://tutorialzine.com/</a></td>
<td>精品教程和资源推送</td>
</tr>
<tr>
<td>Sidebar</td>
<td><a href="http://sidebar.io/" target="_blank" rel="external">http://sidebar.io/</a></td>
<td>每天、每半周、每周推送5条设计相关</td>
</tr>
<tr>
<td>The Hacker News Newsletter</td>
<td><a href="http://www.hackernewsletter.com/" target="_blank" rel="external">http://www.hackernewsletter.com/</a></td>
<td>HN 每周精选</td>
</tr>
<tr>
<td>Design News</td>
<td><a href="https://news.layervault.com/" target="_blank" rel="external">https://news.layervault.com/</a></td>
<td>F2类资讯聚合</td>
</tr>
<tr>
<td>Css Animations</td>
<td><a href="http://cssanimation.rocks/" target="_blank" rel="external">http://cssanimation.rocks/</a></td>
<td>关于CSS动画的订阅</td>
</tr>
<tr>
<td>HACKDESIGN</td>
<td><a href="http://hackdesign.org/" target="_blank" rel="external">http://hackdesign.org/</a></td>
<td>每周发布一个设计类课程</td>
</tr>
<tr>
<td><strong>中文推送</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>稀土:掘金</td>
<td><a href="http://gold.xitu.io/" target="_blank" rel="external">http://gold.xitu.io/</a></td>
<td>国内十分用心的开发者技术分享、交流平台</td>
</tr>
<tr>
<td>SegmentFault精选</td>
<td><a href="http://segmentfault.com/" target="_blank" rel="external">http://segmentfault.com/</a></td>
<td>国内开发者技术问答社区每周精选问答</td>
</tr>
<tr>
<td>FE Weekly</td>
<td><a href="http://www.feweekly.com/" target="_blank" rel="external">http://www.feweekly.com/</a></td>
<td>每周一次，内容主要是英文的，不过有中文导读</td>
</tr>
<tr>
<td>EchoJs_News</td>
<td><a href="http://www.echojs.com/" target="_blank" rel="external">http://www.echojs.com/</a></td>
<td>每天推送若干好文，都是英文的，JS技术类</td>
</tr>
<tr>
<td>碼天狗週刊</td>
<td><a href="http://weekly.codetengu.com/" target="_blank" rel="external">http://weekly.codetengu.com/</a></td>
<td>台湾的，一份開發者導向的IT 技術週刊，適合所有患有資訊焦慮症、氣血循環不順以及性受挫的軟體工程師們。</td>
</tr>
<tr>
<td>前端资源分享 半月刊</td>
<td><a href="http://www.hacke2.cn/monthly/" target="_blank" rel="external">http://www.hacke2.cn/monthly/</a></td>
<td>每半月发布最新高质量的前端资源</td>
</tr>
</tbody>
</table>
<h4 id="u4E13_u4E1A_u535A_u5BA2"><a href="#u4E13_u4E1A_u535A_u5BA2" class="headerlink" title="专业博客"></a>专业博客</h4><p>注:此处<code>活跃度</code>为博客更新频率，<code>原创度</code>指的是作者原创或者翻译的文章所占博文比例。请尊重原创，大量转载其他网站资讯的网站和聚合类网站不做推荐。</p>
<h6 id="u4E2D_u6587_u535A_u5BA2"><a href="#u4E2D_u6587_u535A_u5BA2" class="headerlink" title="中文博客"></a>中文博客</h6><table>
<thead>
<tr>
<th>名称</th>
<th>活跃度</th>
<th>原创度</th>
<th>维护者</th>
<th>其他</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.w3cplus.com/" target="_blank" rel="external">W3Cplus</a></td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>携程 @大漠</td>
<td>国内最优秀的前端博客，原创居多</td>
</tr>
<tr>
<td><a href="http://www.w3cfuns.com/" target="_blank" rel="external">W3Cfuns</a></td>
<td>★★★★★</td>
<td>★★★★☆</td>
<td><a href="http://www.w3cfuns.com/misc.php?mod=faq&amp;action=faq&amp;id=1" target="_blank" rel="external">#</a></td>
<td>专注于web前端开发行业的综合性门户网站</td>
</tr>
<tr>
<td><a href="http://www.qianduan.net/" target="_blank" rel="external">前端观察</a></td>
<td>★★★★☆</td>
<td>★★★★☆</td>
<td>腾讯 ISUX @神飞</td>
<td>曾经最优秀，最近更新不频繁了</td>
</tr>
<tr>
<td><a href="http://www.alloyteam.com/" target="_blank" rel="external">腾讯web前端 AlloyTeam 团队</a></td>
<td>★★★★</td>
<td>★★★★</td>
<td><a href="http://t.qq.com/AlloyTeam" target="_blank" rel="external">@腾讯AlloyTeam</a></td>
<td>来自于腾讯SNG(社交网络事业群)</td>
</tr>
<tr>
<td><a href="http://www.zhangxinxu.com/wordpress/" target="_blank" rel="external">张鑫旭-鑫空间-鑫生活</a></td>
<td>★★★★☆</td>
<td>★★★★★</td>
<td>张鑫旭</td>
<td>重构很厉害，不少经典文章经验</td>
</tr>
<tr>
<td><a href="http://www.36ria.com/" target="_blank" rel="external">ria之家</a></td>
<td>★★★★☆</td>
<td>★★★★☆</td>
<td>淘宝 @明河</td>
<td>#</td>
</tr>
<tr>
<td><a href="http://www.daqianduan.com/" target="_blank" rel="external">大前端</a></td>
<td>★★★★☆</td>
<td>★★★★☆</td>
<td><a href="http://www.cssforest.org/blog/index.php?s=about" target="_blank" rel="external">#</a></td>
<td>#</td>
</tr>
<tr>
<td><a href="http://www.cssforest.org/blog/" target="_blank" rel="external">CSS森林</a></td>
<td>★★★★☆</td>
<td>★★★★☆</td>
<td><a href="http://www.cssforest.org/blog/index.php?s=about" target="_blank" rel="external">关于</a></td>
<td>#</td>
</tr>
<tr>
<td><a href="http://www.shejidaren.com/" target="_blank" rel="external">设计达人</a></td>
<td>★★★★☆</td>
<td>★★★☆☆</td>
<td><a href="http://www.cssforest.org/blog/index.php?s=about" target="_blank" rel="external">#</a></td>
<td>更新较频繁，但转载也较多</td>
</tr>
<tr>
<td><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">阮一峰博客</a></td>
<td>★★★★☆</td>
<td>★★★☆☆</td>
<td><a href="http://www.ruanyifeng.com/about.html" target="_blank" rel="external">#</a></td>
<td>牛人一个</td>
</tr>
<tr>
<td><a href="http://beforweb.com/" target="_blank" rel="external">Be For Web - 为网而生 - 原创译文博客</a></td>
<td>★★★★☆</td>
<td>★★★★☆</td>
<td><a href="http://weibo.com/c7210" target="_blank" rel="external">@C7210</a></td>
<td>关注移动应用及互联网产品、用户体验设计、前端开发</td>
</tr>
</tbody>
</table>
<p>######国外博客<br>|名称 |活跃度 | 原创度 | 维护者|其他|<br>| —– | —– | —— |—– |——|<br>|<a href="http://www.smashingmagazine.com/" target="_blank" rel="external">Smashing Magazine</a>|★★★★★|★★★★★| # |业界权威，web 设计很赞|<br>|<a href="http://hub.tutsplus.com/" target="_blank" rel="external">Tuts</a>|★★★★★|★★★★★| - |国外知名开发者网站|<br>|<a href="http://www.developerdrive.com/" target="_blank" rel="external">DeveloperDrive</a>|★★★★★|★★★★★| - |优质前端技术信息|<br>|<a href="http://css-tricks.com/" target="_blank" rel="external">CSS-TRICKS</a>|★★★★★|★★★★★| Chris Coyier |左边这位是大神|<br>|<a href="http://webdesignerwall.com/" target="_blank" rel="external">Web Designer Wall</a>|★★★★★|★★★★★| Nick La.|优质 Html5,CSS3等教程|<br>|<a href="http://tutorialzine.com/" target="_blank" rel="external">Tutorialzine</a>|★★★★★|★★★★★| #|大量 web 教程和资源|<br>|<a href="http://inspectelement.com/" target="_blank" rel="external">Inspect Element</a>|★★★★★|★★★★★| #|CSS,wordpress 相关教程挺多|<br>|<a href="http://tympanus.net/codrops/" target="_blank" rel="external">Codrops</a>|★★★★★|★★★★★| #|设计、交互、CSS|<br>|<a href="http://www.onerutter.com/" target="_blank" rel="external">Jake Rutter</a>|★★★★★|★★★★★| Jake Rutter|Jquery 作者，不解释了|<br>|<a href="http://www.paulirish.com/" target="_blank" rel="external">Paul Irish</a>|★★★★★|★★★★★| Paul Irish|大神,Google Chrome团队,Yeoman|<br>|<a href="http://krasimirtsonev.com/blog" target="_blank" rel="external">Krasimir Tsonev</a>|★★★★★|★★★★★| Krasimir Tsonev|html5,ccs3,javascript|<br>|<a href="http://www.nczonline.net/" target="_blank" rel="external">NCZOnline</a>|★★★★★|★★★★★| Nicholas C. Zakas |html5,ccs3,javascript|<br>|<a href="http://www.html5rocks.com/en/" target="_blank" rel="external">HTML5 Rocks</a>|★★★★★|★★★★★| # |html5权威网站|<br>|<a href="http://alistapart.com/" target="_blank" rel="external">A List Apart</a>|★★★★★|★★★★★| # |可以改变世界的文章|<br>|<a href="http://hakim.se/" target="_blank" rel="external">hakim</a>|★★★★★|★★★★★| HAKIM EL HATTAB|ccs3,javascript|<br>|<a href="http://dailyjs.com/" target="_blank" rel="external">DailyJS</a> | ★★★★★ | ★★★★★ | # | javascript |</p>
<h5 id="u6D3B_u8DC3_u5FAE_u535A"><a href="#u6D3B_u8DC3_u5FAE_u535A" class="headerlink" title="活跃微博"></a>活跃微博</h5><table>
<thead>
<tr>
<th>ID</th>
<th>公司</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://weibo.com/xitucircle" target="_blank" rel="external">@稀土圈</a></td>
<td>#</td>
<td>强烈推荐，分享一些技术文章和Github项目</td>
</tr>
<tr>
<td><a href="http://weibo.com/w3cchina" target="_blank" rel="external">@w3c中国</a></td>
<td>#</td>
<td>万维网联盟中国办事处官方微博</td>
</tr>
<tr>
<td><a href="http://weibo.com/javascriptdev" target="_blank" rel="external">@TheFrontEnd</a></td>
<td>#</td>
<td>JavaScript技术资讯、新闻、教程、深度文章。</td>
</tr>
<tr>
<td><a href="http://weibo.com/fekb" target="_blank" rel="external">@前端快爆</a></td>
<td>阿里巴巴</td>
<td>有HTML5、CSS3、JS</td>
</tr>
<tr>
<td><a href="http://e.weibo.com/html5cn" target="_blank" rel="external">@HTML5中国</a></td>
<td>#</td>
<td>中国www.html5cn.org官方微博</td>
</tr>
</tbody>
</table>
<h4 id="u5F00_u53D1_u8005_u535A_u5BA2"><a href="#u5F00_u53D1_u8005_u535A_u5BA2" class="headerlink" title="开发者博客"></a>开发者博客</h4><p>微博微信流行后，明显感觉到写博客的人还是越来越少了，下面推荐的这些开发者属于在网上比较活跃的，或者博客积累了大量优质资源的。</p>
<h6 id="u56FD_u5185_u5F00_u53D1_u8005"><a href="#u56FD_u5185_u5F00_u53D1_u8005" class="headerlink" title="国内开发者"></a>国内开发者</h6><p>国内开发者一块欢迎大家 <code>Fork</code>提交推荐，最好能推荐一些在前端界较活跃的的开发者。</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>博客</th>
<th>微博</th>
<th>Github</th>
<th>Twitter</th>
<th>公司</th>
<th>关键字</th>
</tr>
</thead>
<tbody>
<tr>
<td>阮一峰</td>
<td><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">阮一峰博客</a></td>
<td><a href="http://weibo.com/ruanyf" target="_blank" rel="external">@ruanyf</a></td>
<td>#</td>
<td><a href="https://twitter.com/ruanyf" target="_blank" rel="external">@ruanyf</a></td>
<td>上海金融学院国际金融学院</td>
<td>教师，博客写作人，翻译人，《黑客与画家》的译者</td>
</tr>
<tr>
<td>老赵</td>
<td><a href="http://blog.zhaojie.me/" target="_blank" rel="external">http://blog.zhaojie.me/</a></td>
<td><a href="http://weibo.com/jeffz" target="_blank" rel="external">@老赵</a></td>
<td>#</td>
<td><a href="/">#</a></td>
<td>摩根大通（香港）</td>
<td>资深码农</td>
</tr>
<tr>
<td>玉伯</td>
<td><a href="http://lifesinger.wordpress.com/" target="_blank" rel="external">岁月如歌</a></td>
<td><a href="http://weibo.com/lifesinger" target="_blank" rel="external">@玉伯也叫射雕</a></td>
<td><a href="https://github.com/lifesinger" target="_blank" rel="external">@lifesinger</a></td>
<td><a href="https://twitter.com/lifesinger" target="_blank" rel="external">@lifesinger</a></td>
<td>支付宝</td>
<td>大牛</td>
</tr>
<tr>
<td>kejun</td>
<td><a href="http://hikejun.com/" target="_blank" rel="external">http://hikejun.com/</a></td>
<td><a href="http://weibo.com/kejunz" target="_blank" rel="external">@kejunz</a></td>
<td><a href="https://github.com/kejun" target="_blank" rel="external">@kejunz</a></td>
<td>#</td>
<td>豆瓣</td>
<td>前端大神</td>
</tr>
<tr>
<td>寒冬winter</td>
<td><a href="http://winter-cn.cnblogs.com/" target="_blank" rel="external">winter-cn</a></td>
<td><a href="http://weibo.com/wintercn" target="_blank" rel="external">@寒冬winter</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
</tr>
<tr>
<td>左耳朵耗子</td>
<td><a href="http://coolshell.cn/" target="_blank" rel="external">酷壳</a></td>
<td><a href="http://weibo.com/haoel" target="_blank" rel="external">@左耳朵耗子</a></td>
<td>#</td>
<td><a href="https://twitter.com/haoel" target="_blank" rel="external">@haoel</a></td>
<td>淘宝</td>
<td>#</td>
</tr>
<tr>
<td>fool2fish</td>
<td>#</td>
<td><a href="http://weibo.com/fool2fish" target="_blank" rel="external">@fool2fish</a></td>
<td>#</td>
<td>#</td>
<td>支付宝</td>
<td>#</td>
</tr>
<tr>
<td>朴灵</td>
<td><a href="http://html5ify.com/" target="_blank" rel="external">Html5fiy</a></td>
<td><a href="http://weibo.com/shyvo" target="_blank" rel="external">@朴灵</a></td>
<td><a href="https://github.com/JacksonTian" target="_blank" rel="external">JacksonTian</a></td>
<td>#</td>
<td>阿里巴巴</td>
<td>《深入浅出Node.js》作者,大牛</td>
</tr>
<tr>
<td>Cat Chen</td>
<td><a href="http://catchen.biz/home.zh-CN.html" target="_blank" rel="external">陈广琛</a></td>
<td><a href="http://weibo.com/u/1640352230" target="_blank" rel="external">@CatChen</a></td>
<td><a href="https://github.com/CatChen" target="_blank" rel="external">@CatChen</a></td>
<td><a href="https://twitter.com/CatChen" target="_blank" rel="external">@CatChen</a></td>
<td>Facebook</td>
<td>大牛</td>
</tr>
<tr>
<td>BYVod</td>
<td><a href="https://www.byvoid.com/" target="_blank" rel="external">Beyond the Void</a></td>
<td><a href="http://weibo.com/byvoid" target="_blank" rel="external">@BYVoid</a></td>
<td><a href="https://github.com/BYVoid" target="_blank" rel="external">@byvoid</a></td>
<td><a href="https://twitter.com/byvoid" target="_blank" rel="external">@BYVoid</a></td>
<td>Facebook 英国</td>
<td>《Node.js 开发指南》作者,大牛</td>
</tr>
<tr>
<td>郭宇</td>
<td><a href="http://blog.guoyu.me/" target="_blank" rel="external">Einmal ist keinmal</a></td>
<td><a href="http://weibo.com/137601206" target="_blank" rel="external">@郭宇</a></td>
<td><a href="https://github.com/turingou" target="_blank" rel="external">@turingou</a></td>
<td><a href="https://twitter.com/turingou" target="_blank" rel="external">@turingou</a></td>
<td>糗事百科,原支付宝</td>
<td>Node.js</td>
</tr>
<tr>
<td>勾三股四</td>
<td>#</td>
<td><a href="http://weibo.com/mx006" target="_blank" rel="external">@勾三股四</a></td>
<td>#</td>
<td>#</td>
<td>淘宝</td>
<td>#</td>
</tr>
<tr>
<td>cnberg</td>
<td><a href="http://cnberg.com" target="_blank" rel="external">冰山一角</a></td>
<td><a href="http://weibo.com/berg" target="_blank" rel="external">@berg</a></td>
<td>@cnberg</td>
<td><a href="/">@cnberg</a></td>
<td>百度</td>
<td>骑行</td>
</tr>
<tr>
<td>大猫</td>
<td><a href="http://bigc.at" target="_blank" rel="external">意淫笔记</a></td>
<td><a href="http://weibo.com/daemao" target="_blank" rel="external">@daemao</a></td>
<td><a href="https://github.com/Damao" target="_blank" rel="external">@Damao</a></td>
<td><a href="https://twitter.com/13igcat" target="_blank" rel="external">@13igcat</a></td>
<td>腾讯</td>
<td><a href="http://www.zhihu.com/people/13igcat" target="_blank" rel="external">知乎</a></td>
</tr>
<tr>
<td>hzlzh</td>
<td><a href="https://zlz.im" target="_blank" rel="external">自力博客</a></td>
<td><a href="http://weibo.com/hzlzh" target="_blank" rel="external">@hzlzh</a></td>
<td><a href="http://github.com/hzlzh" target="_blank" rel="external">@hzlzh</a></td>
<td><a href="http://twitter.com/hzlzh" target="_blank" rel="external">@hzlzh</a></td>
<td>腾讯</td>
<td>前端开发</td>
</tr>
<tr>
<td>C7210</td>
<td>beforweb.com/</td>
<td><a href="http://weibo.com/c7210" target="_blank" rel="external">@C7210</a></td>
<td><a href="http://twittercom/hzlzh" target="_blank" rel="external">@C7210</a></td>
<td><a href="http://github.com/hzlzh" target="_blank" rel="external">@C7210</a></td>
<td>#</td>
<td>UX、交互设计师、视觉与前端</td>
</tr>
<tr>
<td>kejun</td>
<td><a href="http://hikejun.com/" target="_blank" rel="external">http://hikejun.com/</a></td>
<td><a href="http://weibo.com/kejun" target="_blank" rel="external">#</a></td>
<td><a href="http://twittercom/kejun" target="_blank" rel="external">#</a></td>
<td><a href="http://github.com/hzlzh" target="_blank" rel="external">#</a></td>
<td>腾讯</td>
<td>前端开发</td>
</tr>
<tr>
<td>张鑫旭</td>
<td><a href="http://www.zhangxinxu.com/wordpress/" target="_blank" rel="external">张鑫旭博客</a></td>
<td><a href="http://weibo.com/zhangxinxu" target="_blank" rel="external">@张鑫旭</a></td>
<td><a href="https://github.com/zhangxinxu" target="_blank" rel="external">@zhangxinxu</a></td>
<td><a href="https://twitter.com/zhangxinxu" target="_blank" rel="external">@zhangxinxu</a></td>
<td>腾讯 上海 ISUX</td>
<td>前端开发</td>
</tr>
<tr>
<td>lucifr</td>
<td><a href="http://lucifr.com/" target="_blank" rel="external">http://lucifr.com/</a></td>
<td><a href="http://weibo.com/lucifr" target="_blank" rel="external">@lucifr</a></td>
<td><a href="http://twittercom/lucifr" target="_blank" rel="external">@lucifr</a></td>
<td><a href="http://github.com/lucifr" target="_blank" rel="external">@lucifr</a></td>
<td>#</td>
<td>Mac,ios</td>
</tr>
<tr>
<td>smallni</td>
<td><a href="http://www.smallni.com/" target="_blank" rel="external">http://www.smallni.com/</a></td>
<td><a href="http://weibo.com/hzlzh" target="_blank" rel="external">#</a></td>
<td><a href="https://twitter.com/smallniding/" target="_blank" rel="external">@Smallni</a></td>
<td><a href="http://github.com/hzlzh" target="_blank" rel="external">#</a></td>
<td>腾讯</td>
<td>前端开发</td>
</tr>
<tr>
<td>TQ</td>
<td><a href="http://targetkiller.net/" target="_blank" rel="external">http://targetkiller.net/</a></td>
<td><a href="http://weibo.com/targetkiller" target="_blank" rel="external">@Piser-TQ</a></td>
<td><a href="https://twitter.com/tqtan/" target="_blank" rel="external">@tqtan</a></td>
<td><a href="https://github.com/targetkiller" target="_blank" rel="external">@targetkiller</a></td>
<td>腾讯 ISUX</td>
<td>网页重构</td>
</tr>
<tr>
<td>LOO2K</td>
<td><a href="http://loo2k.com/blog/" target="_blank" rel="external">LOO2K</a></td>
<td><a href="http://weibo.com/loo2k" target="_blank" rel="external">@LOO2K</a></td>
<td><a href="https://github.com/loo2k" target="_blank" rel="external">LOO2K</a></td>
<td><a href="https://twitter.com/loo2k/" target="_blank" rel="external">LOO2K</a></td>
<td>墨筹网</td>
<td>少年才俊</td>
</tr>
<tr>
<td>qiqiboy</td>
<td><a href="http://www.qiqiboy.com/" target="_blank" rel="external">qiqiboy</a></td>
<td><a href="http://weibo.com/qiqiboy" target="_blank" rel="external">@qiqiboy</a></td>
<td>#</td>
<td>#</td>
<td>金山网络 UX</td>
<td>吐槽清理大师开发者</td>
</tr>
<tr>
<td>foru17</td>
<td><a href="http://luolei.org" target="_blank" rel="external">罗磊的独立博客</a></td>
<td><a href="http://weibo.com/foru17" target="_blank" rel="external">@罗罗磊磊</a></td>
<td><a href="https://github.com/foru17" target="_blank" rel="external">@foru17</a></td>
<td><a href="https://twitter.com/foru17" target="_blank" rel="external">@foru17</a></td>
<td></td>
<td>打酱油的</td>
</tr>
<tr>
<td>周爱民</td>
<td><a href="http://blog.csdn.net/aimingoo/" target="_blank" rel="external">aimingoo专栏</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>支付宝</td>
<td>JavaScript语言精髓与编程实践作者</td>
</tr>
<tr>
<td>hax</td>
<td><a href="http://hax.iteye.com/" target="_blank" rel="external">hax的技术部落格</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>前端大牛</td>
</tr>
<tr>
<td>三生石上</td>
<td><a href="http://www.cnblogs.com/sanshi" target="_blank" rel="external">三生石上</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>js秘密花园译者</td>
</tr>
<tr>
<td>司徒正美</td>
<td><a href="http://www.cnblogs.com/rubylouvre" target="_blank" rel="external">Ruby’s Louvre</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>前端开发</td>
</tr>
<tr>
<td>叶小钗</td>
<td><a href="http://www.cnblogs.com/yexiaochai" target="_blank" rel="external">叶小钗</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>前端开发</td>
</tr>
<tr>
<td>聂微东</td>
<td><a href="http://www.cnblogs.com/Darren_code/" target="_blank" rel="external">Darren</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>百度移动云</td>
<td>前端开发</td>
</tr>
<tr>
<td>当耐特</td>
<td><a href="http://www.cnblogs.com/iamzhanglei/" target="_blank" rel="external">iamzhanglei</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>HTML5实验室作者</td>
</tr>
<tr>
<td>教主</td>
<td><a href="http://www.cnblogs.com/_franky" target="_blank" rel="external">_frank</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>又一牛</td>
</tr>
<tr>
<td>typeof</td>
<td><a href="http://typeof.net/" target="_blank" rel="external">typeof</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>又一牛</td>
</tr>
<tr>
<td>Gray Zhang</td>
<td><a href="http://www.cnblogs.com/GrayZhang" target="_blank" rel="external">Gray Zhang</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>百度一牛</td>
</tr>
<tr>
<td>李松峰</td>
<td><a href="http://www.cn-cuckoo.com" target="_blank" rel="external">为之漫笔</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>高程2等书的译者</td>
</tr>
<tr>
<td>小鱼</td>
<td><a href="http://sofish.de/" target="_blank" rel="external">sofish</a></td>
<td><a href="http://weibo.com/sofish" target="_blank" rel="external">@sofish</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>饿了么前端Leader</td>
</tr>
<tr>
<td>vilic</td>
<td><a href="http://vilic.info/" target="_blank" rel="external">vilic</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>年轻一牛</td>
</tr>
<tr>
<td>彬Go</td>
<td><a href="http://blog.bingo929.com/" target="_blank" rel="external">彬Go</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>人人网一牛</td>
</tr>
<tr>
<td>PuterJam</td>
<td><a href="http://www.pjhome.net" target="_blank" rel="external">PuterJam’s Blog</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>腾讯一牛</td>
</tr>
<tr>
<td>css森林</td>
<td><a href="http://www.cssforest.org" target="_blank" rel="external">cssforest</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>前端博客</td>
</tr>
<tr>
<td>99css</td>
<td><a href="http://www.99css.com/" target="_blank" rel="external">99css</a></td>
<td><a href="http://weibo.com/ytzong" target="_blank" rel="external">@ytzong</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>腾讯一牛</td>
</tr>
<tr>
<td>秦歌</td>
<td><a href="http://dancewithnet.com/" target="_blank" rel="external">Kaven</a></td>
<td>#</td>
<td><a href="http://twitter.com/kavenyan" target="_blank" rel="external">@kavenyan</a></td>
<td>#</td>
<td>#</td>
<td>js语言精粹译者</td>
</tr>
<tr>
<td>linxz</td>
<td><a href="http://www.linxz.de/" target="_blank" rel="external">linxz</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>css那些事儿的作者</td>
</tr>
<tr>
<td>米随随</td>
<td><a href="http://s5s5.me/" target="_blank" rel="external">米随随</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>腾讯ISUX 一牛</td>
</tr>
<tr>
<td>飘飘</td>
<td><a href="http://pufen.net/" target="_blank" rel="external">飘飘</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>腾讯一牛</td>
</tr>
<tr>
<td>Along</td>
<td><a href="http://jinlong.github.io/" target="_blank" rel="external">Along’s Blog</a></td>
<td><a href="http://weibo.com/newwave" target="_blank" rel="external">@newwave</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>Opera 欧朋一牛</td>
</tr>
<tr>
<td>安记</td>
<td><a href="http://www.cssha.com/" target="_blank" rel="external">cssha</a></td>
<td><a href="http://weibo.com/hanan321" target="_blank" rel="external">@hanan321</a></td>
<td><a href="https://github.com/hanan198501" target="_blank" rel="external">hanan198501</a></td>
<td>#</td>
<td>#</td>
<td>去哪网一牛</td>
</tr>
<tr>
<td>余弦</td>
<td><a href="http://evilcos.me/" target="_blank" rel="external">EVILCOS</a></td>
<td><a href="http://weibo.com/evilcos" target="_blank" rel="external">余弦</a></td>
<td><a href="https://github.com/evilcos" target="_blank" rel="external">evilcos</a></td>
<td>#</td>
<td><a href="http://www.knownsec.com/" target="_blank" rel="external">知道创宇</a></td>
<td>安全（黑客）、架构、团队的各种观点与分享</td>
<td>#</td>
<td><a href="http://dbanotes.net/" target="_blank" rel="external">冯大辉</a></td>
<td>现在就职于丁香园 (<a href="http://dxy.cn" target="_blank" rel="external">http://dxy.cn</a>) ，担任技术团队负责人.</td>
</tr>
<tr>
<td>汤姆大叔</td>
<td><a href="http://www.cnblogs.com/TomXu/" target="_blank" rel="external">汤姆大叔的博客</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>《深入理解Bootstrap》、《JavaScript启示录》、《JavaScript设计模式》等多本前端书籍翻译作者</td>
</tr>
<tr>
<td>屈光宇</td>
</tr>
<tr>
<td><a href="https://imququ.com/" target="_blank" rel="external">Jerry Qu的小站</a></td>
<td>[屈光宇</td>
</tr>
</tbody>
</table>
<p> ](<a href="http://weibo.com/jerryqu)|#|#|#|奇虎360前端，对WEB性能研究很深入|" target="_blank" rel="external">http://weibo.com/jerryqu)|#|#|#|奇虎360前端，对WEB性能研究很深入|</a></p>
<p>####一些社区</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>地址</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td>V2EX</td>
<td><a href="http://v2ex.com/" target="_blank" rel="external">http://v2ex.com/</a></td>
<td>小众活跃社区</td>
</tr>
<tr>
<td>知乎</td>
<td><a href="http://www.zhihu.com/" target="_blank" rel="external">http://www.zhihu.com/</a></td>
<td>综合问答社区</td>
</tr>
<tr>
<td>前端乱炖</td>
<td><a href="http://www.html-js.com/" target="_blank" rel="external">http://www.html-js.com/</a></td>
<td>专业的前端知识平台</td>
</tr>
<tr>
<td>segmentfault</td>
<td><a href="http://segmentfault.com/" target="_blank" rel="external">http://segmentfault.com/</a></td>
<td>综合问答社区</td>
</tr>
<tr>
<td>果壳问答</td>
<td><a href="http://www.guokr.com/ask/pending/" target="_blank" rel="external">http://www.guokr.com/ask/pending/</a></td>
<td>综合问答社区</td>
</tr>
<tr>
<td>Ruby</td>
<td><a href="http://ruby-china.org/" target="_blank" rel="external">http://ruby-china.org/</a></td>
<td>同 V2EX 氛围类似，不局限于Ruby</td>
</tr>
<tr>
<td>Node.js 中文社区</td>
<td><a href="http://cnodejs.org/" target="_blank" rel="external">http://cnodejs.org/</a></td>
<td>Node.js 国内最活跃的社区</td>
</tr>
<tr>
<td>Code Wall</td>
<td><a href="https://coderwall.com/" target="_blank" rel="external">https://coderwall.com/</a></td>
<td>国外技术社区</td>
</tr>
<tr>
<td>前端乱炖</td>
<td><a href="http://www.html-js.com/" target="_blank" rel="external">http://www.html-js.com/</a></td>
<td>国内前端技术社区</td>
</tr>
<tr>
<td>DIV.IO</td>
<td><a href="http://div.io/" target="_blank" rel="external">http://div.io/</a></td>
<td>国内前端技术社区</td>
</tr>
<tr>
<td>w3ctech</td>
<td><a href="http://www.w3ctech.com/" target="_blank" rel="external">http://www.w3ctech.com/</a></td>
<td>国内前端技术社区，常有一些线下活动发布</td>
</tr>
</tbody>
</table>
<h5 id="u4F01_u4E1A_u5B98_u65B9_u535A_u5BA2"><a href="#u4F01_u4E1A_u5B98_u65B9_u535A_u5BA2" class="headerlink" title="企业官方博客"></a>企业官方博客</h5><p>在开头我的 Feedly 订阅 opml 文件里比较全面。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>公司</th>
<th>部门</th>
<th>活跃度</th>
<th>简介</th>
<th>微博</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://isux.tencent.com/" target="_blank" rel="external">ISUX 社交用户体验设计</a></td>
<td>腾讯</td>
<td>ISUX</td>
<td>★★★★☆</td>
<td>负责腾讯的社交网络相关产品的用户体验设计与研究。</td>
<td>#</td>
</tr>
<tr>
<td><a href="http://cdc.tencent.com/" target="_blank" rel="external">腾讯 CDC</a></td>
<td>腾讯</td>
<td>CDC</td>
<td>★★★★☆</td>
<td>简介</td>
<td>#</td>
</tr>
<tr>
<td><a href="http://www.alloyteam.com/" target="_blank" rel="external">腾讯Web前端 Alloy 团队 Blog</a></td>
<td>腾讯</td>
<td>SNG</td>
<td>★★★★☆</td>
<td>主要负责手机QQ、QQ互联、腾讯Q+、WebQQ项目的团队。</td>
<td><a href="http://weibo.com/alloyteam" target="_blank" rel="external">alloyteam</a></td>
</tr>
<tr>
<td><a href="http://tid.tenpay.com/" target="_blank" rel="external">TID-财付通设计中心</a></td>
<td>腾讯</td>
<td>TID</td>
<td>★★★★☆</td>
<td>简介</td>
<td>#</td>
</tr>
<tr>
<td><a href="http://mxd.tencent.com/" target="_blank" rel="external">腾讯MXD移动互联网设计中心</a></td>
<td>腾讯</td>
<td>MXD</td>
<td>★★★★☆</td>
<td>简介</td>
<td><a href="http://e.t.qq.com/tencent_mxd" target="_blank" rel="external">@腾讯MXD</a></td>
</tr>
<tr>
<td><a href="http://fed.renren.com/" target="_blank" rel="external">人人网FED Team</a></td>
<td>人人网</td>
<td>FED</td>
<td>★★★★☆</td>
<td>简介</td>
<td>#</td>
</tr>
<tr>
<td><a href="http://udc.weibo.com/" target="_blank" rel="external">微博UDC</a></td>
<td>新浪</td>
<td>UDC</td>
<td>★★★★☆</td>
<td>简介</td>
<td><a href="http://weibo.com/sudc" target="_blank" rel="external">@微博UDC设计中心</a></td>
</tr>
<tr>
<td><a href="http://ued.sina.com.cn/" target="_blank" rel="external">新浪UED</a></td>
<td>新浪</td>
<td>UED</td>
<td>★★★★☆</td>
<td>简介</td>
<td><a href="http://weibo.com/sudc" target="_blank" rel="external">#</a></td>
</tr>
<tr>
<td><a href="http://uedc.163.com/" target="_blank" rel="external">网易用户体验设计中心</a></td>
<td>网易</td>
<td>UED</td>
<td>★★★★☆</td>
<td>简介</td>
<td><a href="http://weibo.com/sudc" target="_blank" rel="external">#</a></td>
</tr>
<tr>
<td><a href="http://www.aliued.cn/" target="_blank" rel="external">阿里巴巴（中国站）用户体验设计部博客</a></td>
<td>阿里巴巴</td>
<td>UED</td>
<td>★★★★☆</td>
<td>简介</td>
<td><a href="http://weibo.com/aliued" target="_blank" rel="external">@Alibaba-UED</a></td>
</tr>
<tr>
<td><a href="http://ued.ctrip.com/blog/" target="_blank" rel="external">携程UED-携程旅行前端开发团队</a></td>
<td>携程网</td>
<td>UED</td>
<td>★★★☆☆</td>
<td>携程UED,携程前端开发团队,UED,Javascript,重构,ux</td>
<td>#</td>
</tr>
<tr>
<td><a href="http://fex.baidu.com/" target="_blank" rel="external">百度FEX</a></td>
<td>百度</td>
<td>FEX</td>
<td>★★★★☆</td>
<td>百度前端团队Blog,关注前端技术，还更重视全端及全栈的能力。</td>
<td>#</td>
</tr>
<tr>
<td><a href="http://ued.taobao.org/blog/" target="_blank" rel="external">淘宝UED</a></td>
<td>淘宝网</td>
<td>UED</td>
<td>★★★★☆</td>
<td>用户体验、交互设计、视觉设计、前端技术博客</td>
<td><a href="http://weibo.com/taobaoued" target="_blank" rel="external">@淘宝UED</a></td>
</tr>
</tbody>
</table>
<h2 id="u4E66_u7C4D"><a href="#u4E66_u7C4D" class="headerlink" title="书籍"></a>书籍</h2><table>
<thead>
<tr>
<th>名称</th>
<th>作者</th>
<th>价格</th>
<th>出版社</th>
<th>简评</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://book.douban.com/subject/3327829/" target="_blank" rel="external">Web标准设计</a></td>
<td>刘杰（嗷嗷）</td>
<td>RMB 60.00</td>
<td>清华大学出版社</td>
<td>基础入门</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/4914146/" target="_blank" rel="external">大巧不工 : Web前端设计修炼之道</a></td>
<td>赖定清 / 林坚</td>
<td>RMB 59.00</td>
<td>机械工业出版社</td>
<td>适合入门，了解前端全局</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/3132277/" target="_blank" rel="external">高性能网站建设指南:前端工程师技能精髓</a></td>
<td>Steve Souders</td>
<td>RMB 35.00</td>
<td>电子工业出版社</td>
<td>能从原理层理解各种方法</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/4719162/" target="_blank" rel="external">高性能网站建设指南:Web开发者性能优化最佳实践</a></td>
<td>Steve Souders</td>
<td>RMB 49.80</td>
<td>电子工业出版社</td>
<td>#</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/4124141/" target="_blank" rel="external">Web站点优化 : Web站点优化</a></td>
<td>金</td>
<td>RMB 55.00</td>
<td>#</td>
<td>#</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/10789820/" target="_blank" rel="external">Node.js开发指南</a></td>
<td>郭家寶</td>
<td>RMB 45.00</td>
<td>#</td>
<td>作者很牛</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/10546125/" target="_blank" rel="external">JavaScript高级程序设计</a></td>
<td>Nicholas C. Zakas</td>
<td>RMB 99.00</td>
<td>人民邮电出版社</td>
<td>适合没事就翻翻</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/2228378/" target="_blank" rel="external">JavaScript权威指南</a></td>
<td>弗拉纳根</td>
<td>RMB 109.00</td>
<td>机械工业出版社</td>
<td>犀牛书</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/3590768/" target="_blank" rel="external">JavaScript语言精粹</a></td>
<td>Douglas Crockford</td>
<td>RMB 35.00</td>
<td>电子工业出版社</td>
<td>绝对经典，相信看完后，对Javascript这门语言有了重新认识，原来这个语言是这么的美丽！</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/25768396/" target="_blank" rel="external">深入浅出node.js</a></td>
<td>朴灵</td>
<td>RMB 69.00</td>
<td>人民邮电出版社</td>
<td>一本从前端通往全端的好书</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/3137282/" target="_blank" rel="external">CSS开发王</a></td>
<td>张亚飞</td>
<td>RMB 49.00</td>
<td>电子工业出版社</td>
<td>适合有一定基础后CSS进阶用</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/6038371/" target="_blank" rel="external">JavaScript DOM编程艺术</a></td>
<td>Jeremy Keith /Jeffrey Sambells</td>
<td>RMB 49.00</td>
<td>人民邮电出版社</td>
<td>适合Javascript入门看</td>
</tr>
</tbody>
</table>
<p>=======</p>
<p>####线上的一些翻译版好书</p>
<table>
<thead>
<tr>
<th>书名</th>
<th>地址</th>
<th>作者</th>
<th>译者</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td>JavaScript秘密花园</td>
<td><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="external">http://bonsaiden.github.io/JavaScript-Garden/zh/</a></td>
<td>伊沃·韦特泽尔&amp;张易江</td>
<td><a href="http://sanshi.me/" target="_blank" rel="external">三生石上</a></td>
<td>完整书籍，界面美观，有详细demo</td>
</tr>
<tr>
<td>Material Design 中文版</td>
<td><a href="http://design.1sters.com/" target="_blank" rel="external">http://design.1sters.com/</a></td>
<td>Google设计手册</td>
<td>协同翻译</td>
<td>Google I/O 2014 发布的 Material Design 官方手册的中文翻译</td>
</tr>
</tbody>
</table>
<h1 id="23_23_u5173_u4E8E"><a href="#23_23_u5173_u4E8E" class="headerlink" title="##关于"></a>##关于</h1><p>本 repo 会 不断更新，感谢推荐和分享新资源的朋友。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u524D_u7AEF_u6536_u96C6"><a href="#u524D_u7AEF_u6536_u96C6" class="headerlink" title="前端收集"></a>前端收集</h1><p>在前端路上摸索前行，在这里分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者。欢迎更新，以下各排名不分先后顺序。</p>
<p>自己 RSS 长期订阅了一些IT 和技术相关博客，这里是我Feedly 输出的opml，可直接导入一些RSS 阅读器:<br><a href="https://github.com/foru17/luolei-dotfiles/blob/master/feedly.opml">https://github.com/foru17/luolei-dotfiles/blob/master/feedly.opml</a></p>
<p>====</p>
<h4 id="u524D_u7AEF_u6536_u96C6_u56FE_u8C31"><a href="#u524D_u7AEF_u6536_u96C6_u56FE_u8C31" class="headerlink" title="前端收集图谱"></a><a href="http://get-set.cn/front-end-collect/">前端收集图谱</a></h4><p>此部分为<a href="https://github.com/jikeytang">@jikeytang </a>贡献</p>
<ul>
<li>clone <a href="https://github.com/hjzheng/front-end-collect">https://github.com/hjzheng/front-end-collect</a></li>
<li>cd front-end-collect</li>
<li>bower install</li>
<li>放入你喜欢的web容器,访问index.html即可</li>
<li>你也直接可以访问: <a href="http://get-set.cn/front-end-collect/">http://get-set.cn/front-end-collect/</a></li>
<li>支持Chrome, Firefox and IE10&amp;11以上浏览器</li>
</ul>
<p><img src="https://raw.githubusercontent.com/hjzheng/front-end-collect/master/img/front-end-chart.png" alt="image"><br>]]>
    
    </summary>
    
      <category term="资源" scheme="http://notes.seirhsiao.com/tags/%E8%B5%84%E6%BA%90/"/>
    
      <category term="Books" scheme="http://notes.seirhsiao.com/categories/Books/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[给程序员的开源、免费图书集合]]></title>
    <link href="http://notes.seirhsiao.com/2016/01/26/2013-07-06-books-collection/"/>
    <id>http://notes.seirhsiao.com/2016/01/26/2013-07-06-books-collection/</id>
    <published>2016-01-26T12:40:00.822Z</published>
    <updated>2016-01-26T12:40:00.822Z</updated>
    <content type="html"><![CDATA[<h1 id="books-collection__u7ED9_u7A0B_u5E8F_u5458_u7684_u5F00_u6E90_u3001_u514D_u8D39_u56FE_u4E66_u96C6_u5408"><a href="#books-collection__u7ED9_u7A0B_u5E8F_u5458_u7684_u5F00_u6E90_u3001_u514D_u8D39_u56FE_u4E66_u96C6_u5408" class="headerlink" title="books-collection 给程序员的开源、免费图书集合"></a>books-collection 给程序员的开源、免费图书集合</h1><p>To programmer’s open source and free books collection.  </p>
<p>In this project, we will constantly update collection,<br>if you are interested, you can continue to focus on, click<br>Watch or Star.</p>
<p>I am improving and expanding the documentation all the time. If you’d like to help this project, please consider corrected, expanding, or adding documentation where you see a need. Every little bit of help you provide in turn improves books-collection.The easiest way to contribute your documentation is to send it to the <a href="https://github.com/waylau/books-collection/issues" target="_blank" rel="external">Issues</a> </p>
<p>给程序员的开源、免费书籍收集，图书集合。</p>
<p>本项目中所列出的图书均由人工校验过，放心可用。</p>
<p>本项目将不断更新收集，如果你感兴趣，可以持续关注, 点 <strong>Watch</strong> 或者 <strong>Star</strong> ,查看<a href="http://www.waylau.com/github-use-watch-star-fork/" target="_blank" rel="external">Github中watch、star的用法</a>。</p>
<p>同时，欢迎你提出宝贵的意见，或者投稿。使用 <a href="https://github.com/waylau/books-collection/issues" target="_blank" rel="external">issues</a> </p>
<p><strong>说明：</strong>标志:us:为英文,:cn:为中文, :arrow_down:为可以下载的附件,<br><a id="more"></a></p>
<h2 id="u7FFB_u5899"><a href="#u7FFB_u5899" class="headerlink" title="翻墙"></a>翻墙</h2><ul>
<li><a href="http://www.waylau.com/simple-way-to-implement-browsing-famous-overseas-web-sites-without-the-ladder-gateway-dns-hosts/" target="_blank" rel="external">简单实现浏览国外著名网站的方法，不用梯子，修改本机的 hosts</a></li>
<li><a href="http://www.waylau.com/heroku-snova-c4-cross-wall/" target="_blank" rel="external">用Heroku、snova-c4搭梯子上墙</a></li>
<li><a href="http://www.waylau.com/about-dnscrypt/" target="_blank" rel="external">又一架梯子上墙利器–DNSCrypt</a></li>
<li><a href="http://www.waylau.com/about-vpngate/" target="_blank" rel="external">用 VPN Gate 翻墙科学上网</a></li>
<li><a href="http://www.waylau.com/vpn-setting/" target="_blank" rel="external">设置 VPN,通过 VPN 翻墙科学上网</a></li>
<li><a href="http://www.waylau.com/about-azure-remoteapp/" target="_blank" rel="external">用 Azure RemoteApp 翻墙科学上网</a></li>
<li><a href="http://www.waylau.com/windows-hosts-auto-update/" target="_blank" rel="external">Windows 下自动化更新 hosts</a></li>
</ul>
<h2 id="u6570_u636E_u5E93"><a href="#u6570_u636E_u5E93" class="headerlink" title="数据库"></a>数据库</h2><ul>
<li><a href="http://dev.mysql.com/doc/refman/5.7/en/index.html" target="_blank" rel="external">MySQL 5.7 Reference Manual</a></li>
<li><a href="http://dev.mysql.com/doc/refman/5.6/en/index.html" target="_blank" rel="external">MySQL 5.6 Reference Manual</a></li>
<li><a href="https://github.com/waylau/h2-database-doc" target="_blank" rel="external">H2 Database 教程</a></li>
</ul>
<h2 id="Security__u5B89_u5168"><a href="#Security__u5B89_u5168" class="headerlink" title="Security 安全"></a>Security 安全</h2><ul>
<li><a href="https://github.com/waylau/apache-shiro-1.2.x-reference" target="_blank" rel="external">Apache Shiro 1.2.x 用户指南</a></li>
</ul>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ul>
<li><a href="https://github.com/waylau/rest-in-action" target="_blank" rel="external">REST 实战</a></li>
<li><a href="https://github.com/waylau/Jersey-2.x-User-Guide" target="_blank" rel="external">Jersey 2.x 用户指南</a></li>
<li><a href="https://github.com/waylau/spring-framework-4-reference" target="_blank" rel="external">Spring Framework 4.x参考文档</a></li>
<li><a href="https://github.com/waylau/netty-4-user-guide" target="_blank" rel="external">Netty 4.x 用户指南</a></li>
<li><a href="https://github.com/waylau/essential-netty-in-action" target="_blank" rel="external">Netty 实战(精髓)</a></li>
<li><a href="https://github.com/waylau/java-code-conventions" target="_blank" rel="external">Java 编码规范</a></li>
<li><a href="https://github.com/waylau/apache-mina-2.x-user-guide" target="_blank" rel="external">Apache MINA 2 用户指南</a></li>
<li><a href="http://gee.cs.oswego.edu/dl/cpj/index.html" target="_blank" rel="external">Concurrent Programming in Java-Design principles and patterns</a></li>
<li><a href="http://www.slideshare.net/longhao/java-11808629" target="_blank" rel="external">Java 并发编程培训(阿里巴巴)</a></li>
<li>Java Servlet 3.1 规范 <a href="https://github.com/waylau/servlet-3.1-specification" target="_blank" rel="external">:cn:</a><a href="http://download.oracle.com/otndocs/jcp/servlet-3_1-fr-eval-spec/index.html" target="_blank" rel="external">:arrow_down:</a></li>
<li><a href="https://github.com/waylau/jsse-reference-guide" target="_blank" rel="external">JSSE 参考指南</a></li>
</ul>
<h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><ul>
<li><a href="http://gitbookio.gitbooks.io/javascript/" target="_blank" rel="external">Learn Javascript</a></li>
<li>Less.js <a href="http://lesscss.org/" target="_blank" rel="external">:us:</a>, <a href="http://lesscss.net/" target="_blank" rel="external">:cn:</a></li>
<li>Jekyll 文档 <a href="http://jekyllrb.com/docs/home/" target="_blank" rel="external">:us:</a>, <a href="http://jekyllcn.com/docs/home/" target="_blank" rel="external">:cn:</a></li>
<li><a href="https://github.com/waylau/nwjs-demos" target="_blank" rel="external">NW.js 入门指南</a> </li>
</ul>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul>
<li>Bootstrap 文档  <a href="http://getbootstrap.com/" target="_blank" rel="external">:us:</a>,<a href="http://v3.bootcss.com/" target="_blank" rel="external">:cn:</a></li>
<li><a href="http://css.doyoe.com/" target="_blank" rel="external">CSS 参考手册</a></li>
<li><a href="http://alloyteam.github.io/CodeGuide/" target="_blank" rel="external">Code Guide by @AlloyTeam</a></li>
<li><a href="https://github.com/waylau/css3-tutorial" target="_blank" rel="external">CSS3 教程</a></li>
</ul>
<h2 id="u9879_u76EE_u7BA1_u7406"><a href="#u9879_u76EE_u7BA1_u7406" class="headerlink" title="项目管理"></a>项目管理</h2><ul>
<li><a href="https://github.com/waylau/Gradle-2-User-Guide" target="_blank" rel="external">Gradle 2 用户指南</a></li>
<li><a href="http://www.sonatype.com/books/mvnref-book/reference/public-book.html" target="_blank" rel="external">Maven: The Complete Reference</a></li>
<li><a href="http://books.sonatype.com/mvnex-book/reference/public-book.html" target="_blank" rel="external">Maven by Example</a></li>
</ul>
<h2 id="u7248_u672C_u7BA1_u7406"><a href="#u7248_u672C_u7BA1_u7406" class="headerlink" title="版本管理"></a>版本管理</h2><ul>
<li><a href="https://github.com/waylau/github-help" target="_blank" rel="external">Github 帮助文档</a></li>
<li><a href="https://github.com/progit/progit2" target="_blank" rel="external">Pro Git, 2nd Edition</a> , <a href="http://git-scm.com/book/en/v2" target="_blank" rel="external">:us:</a>, <a href="http://git-scm.com/book/zh/v2" target="_blank" rel="external">:cn:</a></li>
<li><a href="https://github.com/progit/progit" target="_blank" rel="external">Pro Git, 1st Edition</a>  , <a href="http://git-scm.com/book/en/v1" target="_blank" rel="external">:us:</a>,  <a href="http://git-scm.com/book/zh/v1" target="_blank" rel="external">:cn:</a></li>
</ul>
<h2 id="u5DE5_u4F5C_u6D41"><a href="#u5DE5_u4F5C_u6D41" class="headerlink" title="工作流"></a>工作流</h2><ul>
<li><a href="/github.com/waylau/activiti-5.x-user-guide">Activiti 5.x 用户指南</a></li>
</ul>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul>
<li><a href="http://vbird.dic.ksu.edu.tw/" target="_blank" rel="external">鸟哥的Linux私房菜</a></li>
</ul>
<p>##Web</p>
<ul>
<li><a href="https://github.com/willianjusten/awesome-svg" target="_blank" rel="external">Svg 资源集合</a></li>
<li><a href="http://www.w3.org/TR/2015/WD-SVG2-20150409/" target="_blank" rel="external">Scalable Vector Graphics (SVG) 2</a></li>
<li><a href="http://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99?pn=1" target="_blank" rel="external">HTTP/2.0 中文翻译</a></li>
<li>http2 explained <a href="http://daniel.haxx.se/http2/" target="_blank" rel="external">:us:</a>, <a href="https://www.gitbook.com/book/ye11ow/http2-explained/details" target="_blank" rel="external">:cn:</a></li>
</ul>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><ul>
<li>The Swift Programming Language <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html" target="_blank" rel="external">:us:</a>, <a href="http://siemenliu.gitbooks.io/the-swift-programming-language-in-chinese/" target="_blank" rel="external">:cn:</a></li>
<li><a href="http://swift-lang.org/guides/release-0.94/userguide/userguide.html" target="_blank" rel="external">Swift User Guide</a></li>
</ul>
<h2 id="u67B6_u6784"><a href="#u67B6_u6784" class="headerlink" title="架构"></a>架构</h2><ul>
<li>Architectural Styles and the Design of Network-based Software Architectures(架构风格与基于网络应用软件的架构设计) <a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="external">:us:</a> <a href="http://yuedu.baidu.com/ebook/780324fbf121dd36a32d8269.html?f=read" target="_blank" rel="external">:cn:</a><a href="http://www.infoq.com/cn/minibooks/web-based-apps-archit-design" target="_blank" rel="external">:arrow_down:</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="books-collection__u7ED9_u7A0B_u5E8F_u5458_u7684_u5F00_u6E90_u3001_u514D_u8D39_u56FE_u4E66_u96C6_u5408"><a href="#books-collection__u7ED9_u7A0B_u5E8F_u5458_u7684_u5F00_u6E90_u3001_u514D_u8D39_u56FE_u4E66_u96C6_u5408" class="headerlink" title="books-collection 给程序员的开源、免费图书集合"></a>books-collection 给程序员的开源、免费图书集合</h1><p>To programmer’s open source and free books collection.  </p>
<p>In this project, we will constantly update collection,<br>if you are interested, you can continue to focus on, click<br>Watch or Star.</p>
<p>I am improving and expanding the documentation all the time. If you’d like to help this project, please consider corrected, expanding, or adding documentation where you see a need. Every little bit of help you provide in turn improves books-collection.The easiest way to contribute your documentation is to send it to the <a href="https://github.com/waylau/books-collection/issues">Issues</a> </p>
<p>给程序员的开源、免费书籍收集，图书集合。</p>
<p>本项目中所列出的图书均由人工校验过，放心可用。</p>
<p>本项目将不断更新收集，如果你感兴趣，可以持续关注, 点 <strong>Watch</strong> 或者 <strong>Star</strong> ,查看<a href="http://www.waylau.com/github-use-watch-star-fork/">Github中watch、star的用法</a>。</p>
<p>同时，欢迎你提出宝贵的意见，或者投稿。使用 <a href="https://github.com/waylau/books-collection/issues">issues</a> </p>
<p><strong>说明：</strong>标志:us:为英文,:cn:为中文, :arrow_down:为可以下载的附件,<br>]]>
    
    </summary>
    
      <category term="book" scheme="http://notes.seirhsiao.com/tags/book/"/>
    
      <category term="资源" scheme="http://notes.seirhsiao.com/tags/%E8%B5%84%E6%BA%90/"/>
    
      <category term="Books" scheme="http://notes.seirhsiao.com/categories/Books/"/>
    
  </entry>
  
</feed>
